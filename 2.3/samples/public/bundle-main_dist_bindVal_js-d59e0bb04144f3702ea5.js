(self["webpackChunk"] = self["webpackChunk"] || []).push([["main_dist_bindVal_js"],{

/***/ "../../main/dist/bindVal.js":
/*!**********************************!*\
  !*** ../../main/dist/bindVal.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));

var DomUtils_1 = __webpack_require__(/*! ./DomUtils */ "../../main/dist/DomUtils.js");

var Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));

var ValueUpdater = /*#__PURE__*/function (_Class_1$default) {
  _inherits(ValueUpdater, _Class_1$default);

  var _super = _createSuper(ValueUpdater);

  function ValueUpdater(el, property) {
    var _this;

    _classCallCheck(this, ValueUpdater);

    _this = _super.call(this);
    _this.el = el;
    _this.property = property;

    _this._update();

    _this.own(property.onChange.listen(_this._update, _assertThisInitialized(_this)));

    return _this;
  }

  _createClass(ValueUpdater, [{
    key: "_update",
    value: function _update() {
      var value = this.property.get();

      if (this.el.val() !== value) {
        this.el.val(value);
        this.el.change();
      }
    }
  }]);

  return ValueUpdater;
}(Class_1.default);

var ValueWatcher = /*#__PURE__*/function (_Class_1$default2) {
  _inherits(ValueWatcher, _Class_1$default2);

  var _super2 = _createSuper(ValueWatcher);

  function ValueWatcher(el, target) {
    var _this2;

    var simple = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    _classCallCheck(this, ValueWatcher);

    _this2 = _super2.call(this);
    _this2.el = el;
    _this2.target = target;

    _this2.sync = function () {
      return _this2._sync();
    };

    _this2._sync();

    _this2.el.on("change", _this2.sync);

    if (!simple && DomUtils_1.isTextInput(el)) {
      _this2.timer = setInterval(_this2.sync, 100);
    }

    return _this2;
  }

  _createClass(ValueWatcher, [{
    key: "destroyObject",
    value: function destroyObject() {
      clearInterval(this.timer);
      this.el.off("change", this.sync);

      _get(_getPrototypeOf(ValueWatcher.prototype), "destroyObject", this).call(this);
    }
  }, {
    key: "_sync",
    value: function _sync() {
      this.target.set(this.el.val());
    }
  }]);

  return ValueWatcher;
}(Class_1.default);

var ValueBinding = /*#__PURE__*/function (_Class_1$default3) {
  _inherits(ValueBinding, _Class_1$default3);

  var _super3 = _createSuper(ValueBinding);

  function ValueBinding(el, property) {
    var _this3;

    var simple = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    _classCallCheck(this, ValueBinding);

    _this3 = _super3.call(this);
    _this3.el = el;
    _this3.property = property;
    _this3.syncing = false;

    _this3.sync = function () {
      return _this3._sync();
    };

    _this3._update();

    _this3.own(property.onChange.listen(_this3._update, _assertThisInitialized(_this3)));

    _this3.el.on("change", _this3.sync);

    if (!simple && DomUtils_1.isTextInput(el)) {
      _this3.timer = setInterval(_this3.sync, 100);
    }

    return _this3;
  }

  _createClass(ValueBinding, [{
    key: "destroyObject",
    value: function destroyObject() {
      clearInterval(this.timer);
      this.el.off("change", this.sync);

      _get(_getPrototypeOf(ValueBinding.prototype), "destroyObject", this).call(this);
    }
  }, {
    key: "_update",
    value: function _update() {
      if (this.syncing) {
        return;
      }

      var value = this.property.get();

      if (this.el.val() !== value) {
        this.el.val(value);
        this.el.change();
      }
    }
  }, {
    key: "_sync",
    value: function _sync() {
      this.syncing = true;
      this.property.set(this.el.val());
      this.syncing = false;
    }
  }]);

  return ValueBinding;
}(Class_1.default);

function bindVal(el, property, binding, simple) {
  if (property == null || typeof property === "boolean") {
    // In this semantic, "property" apparently plays role of "simple".
    var target = new Property_1.default();
    return target.owning(new ValueWatcher(el, target, property));
  }

  if (binding === 2) {
    return new ValueWatcher(el, property, simple);
  }

  if (binding === 3) {
    return new ValueBinding(el, property, simple);
  }

  return new ValueUpdater(el, property);
}

exports.default = bindVal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SSxPQUFPLEtBQUssQ0FBaEIsRUFBbUI7QUFDbEIsV0FBTyxJQUFJLFlBQUosQ0FBb0IsRUFBcEIsRUFBd0IsUUFBeEIsRUFBa0MsTUFBbEMsQ0FBUDtBQUNBOztBQUNELFNBQU8sSUFBSSxZQUFKLENBQW9CLEVBQXBCLEVBQXdCLFFBQXhCLENBQVA7QUFDQTs7QUFiRCxPQUFBLENBQUEsT0FBQSxHQUFBLE9BQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIxIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgQmluZGFibGUgZnJvbSAnLi9CaW5kYWJsZSc7XG5pbXBvcnQgQ2xhc3MgZnJvbSAnLi9DbGFzcyc7XG5pbXBvcnQgRGVzdHJveWFibGUgZnJvbSAnLi9EZXN0cm95YWJsZSc7XG5pbXBvcnQgRGVzdHJveWFibGVCaW5kYWJsZSBmcm9tICcuL0Rlc3Ryb3lhYmxlQmluZGFibGUnO1xuaW1wb3J0IHtJbnB1dEVsZW1lbnQsIGlzVGV4dElucHV0fSBmcm9tICcuL0RvbVV0aWxzJztcbmltcG9ydCBJUHJvcGVydHkgZnJvbSAnLi9JUHJvcGVydHknO1xuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4vUHJvcGVydHknO1xuXG5jbGFzcyBWYWx1ZVVwZGF0ZXI8VCBleHRlbmRzIHN0cmluZyB8IG51bWJlciB8IHN0cmluZ1tdPiBleHRlbmRzIENsYXNzIHtcblx0Y29uc3RydWN0b3IocHJpdmF0ZSBlbDogVmFsdWVVcGRhdGVyRWxlbWVudDxUPiwgcHJpdmF0ZSBwcm9wZXJ0eTogQmluZGFibGU8VD4pIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMuX3VwZGF0ZSgpO1xuXHRcdHRoaXMub3duKHByb3BlcnR5Lm9uQ2hhbmdlLmxpc3Rlbih0aGlzLl91cGRhdGUsIHRoaXMpKTtcblx0fVxuXG5cdHByaXZhdGUgX3VwZGF0ZSgpIHtcblx0XHRjb25zdCB2YWx1ZSA9IHRoaXMucHJvcGVydHkuZ2V0KCk7XG5cdFx0aWYgKHRoaXMuZWwudmFsKCkgIT09IHZhbHVlKSB7XG5cdFx0XHR0aGlzLmVsLnZhbCh2YWx1ZSk7XG5cdFx0XHR0aGlzLmVsLmNoYW5nZSgpO1xuXHRcdH1cblx0fVxufVxuXG5jbGFzcyBWYWx1ZVdhdGNoZXI8VCBleHRlbmRzIHN0cmluZyB8IG51bWJlciB8IHN0cmluZ1tdPiBleHRlbmRzIENsYXNzIHtcblx0cHJpdmF0ZSB0aW1lcjogYW55O1xuXHRwcml2YXRlIHN5bmM6ICgpID0+IHZvaWQ7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSBlbDogVmFsdWVXYXRjaGVyRWxlbWVudCwgcHJpdmF0ZSB0YXJnZXQ6IElQcm9wZXJ0eTxUPiwgc2ltcGxlOiBib29sZWFuID0gZmFsc2UpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMuc3luYyA9ICgpID0+IHRoaXMuX3N5bmMoKTtcblx0XHR0aGlzLl9zeW5jKCk7XG5cdFx0dGhpcy5lbC5vbihcImNoYW5nZVwiLCB0aGlzLnN5bmMpO1xuXHRcdGlmICghc2ltcGxlICYmIGlzVGV4dElucHV0KGVsKSkge1xuXHRcdFx0dGhpcy50aW1lciA9IHNldEludGVydmFsKHRoaXMuc3luYywgMTAwKTtcblx0XHR9XG5cdH1cblxuXHRwcm90ZWN0ZWQgZGVzdHJveU9iamVjdCgpIHtcblx0XHRjbGVhckludGVydmFsKHRoaXMudGltZXIpO1xuXHRcdHRoaXMuZWwub2ZmKFwiY2hhbmdlXCIsIHRoaXMuc3luYyk7XG5cdFx0c3VwZXIuZGVzdHJveU9iamVjdCgpO1xuXHR9XG5cblx0X3N5bmMoKSB7XG5cdFx0dGhpcy50YXJnZXQuc2V0KDxUPnRoaXMuZWwudmFsKCkpO1xuXHR9XG59XG5cbmNsYXNzIFZhbHVlQmluZGluZzxUIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyIHwgc3RyaW5nW10+IGV4dGVuZHMgQ2xhc3Mge1xuXHRwcml2YXRlIHRpbWVyOiBhbnk7XG5cdHByaXZhdGUgc3luYzogKCkgPT4gdm9pZDtcblx0cHJpdmF0ZSBzeW5jaW5nID0gZmFsc2U7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSBlbDogVmFsdWVVcGRhdGVyRWxlbWVudDxUPiAmIFZhbHVlV2F0Y2hlckVsZW1lbnQsIHByaXZhdGUgcHJvcGVydHk6IElQcm9wZXJ0eTxUPiwgc2ltcGxlOiBib29sZWFuID0gZmFsc2UpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMuc3luYyA9ICgpID0+IHRoaXMuX3N5bmMoKTtcblx0XHR0aGlzLl91cGRhdGUoKTtcblx0XHR0aGlzLm93bihwcm9wZXJ0eS5vbkNoYW5nZS5saXN0ZW4odGhpcy5fdXBkYXRlLCB0aGlzKSk7XG5cdFx0dGhpcy5lbC5vbihcImNoYW5nZVwiLCB0aGlzLnN5bmMpO1xuXHRcdGlmICghc2ltcGxlICYmIGlzVGV4dElucHV0KGVsKSkge1xuXHRcdFx0dGhpcy50aW1lciA9IHNldEludGVydmFsKHRoaXMuc3luYywgMTAwKTtcblx0XHR9XG5cdH1cblxuXHRwcm90ZWN0ZWQgZGVzdHJveU9iamVjdCgpIHtcblx0XHRjbGVhckludGVydmFsKHRoaXMudGltZXIpO1xuXHRcdHRoaXMuZWwub2ZmKFwiY2hhbmdlXCIsIHRoaXMuc3luYyk7XG5cdFx0c3VwZXIuZGVzdHJveU9iamVjdCgpO1xuXHR9XG5cblx0cHJpdmF0ZSBfdXBkYXRlKCkge1xuXHRcdGlmICh0aGlzLnN5bmNpbmcpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgdmFsdWUgPSB0aGlzLnByb3BlcnR5LmdldCgpO1xuXHRcdGlmICh0aGlzLmVsLnZhbCgpICE9PSB2YWx1ZSkge1xuXHRcdFx0dGhpcy5lbC52YWwodmFsdWUpO1xuXHRcdFx0dGhpcy5lbC5jaGFuZ2UoKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIF9zeW5jKCkge1xuXHRcdHRoaXMuc3luY2luZyA9IHRydWU7XG5cdFx0dGhpcy5wcm9wZXJ0eS5zZXQoPFQ+dGhpcy5lbC52YWwoKSk7XG5cdFx0dGhpcy5zeW5jaW5nID0gZmFsc2U7XG5cdH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IGBQcm9wZXJ0eWAgYm91bmQgdG8gdmFsdWUgb2YgYSBET00gZWxlbWVudC5cbiAqIEBwYXJhbSBlbCBET00gZWxlbWVudC5cbiAqIEBwYXJhbSBzaW1wbGUgRGlzYWJsZSBsaXZlIHdhdGNoIGJ5IHRpbWVyLlxuICogQHJldHVybnMgQm91bmQgcHJvcGVydHkuIFlvdSBtdXN0IGRlc3Ryb3kgaXQgdG8gc3RvcCB0aGUgc3luY2hyb25pemF0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kVmFsPFQgZXh0ZW5kcyBzdHJpbmcgfCBudW1iZXIgfCBzdHJpbmdbXT4oXG5cdGVsOiBWYWx1ZVdhdGNoZXJFbGVtZW50LCBzaW1wbGU/OiBib29sZWFuKTogRGVzdHJveWFibGVCaW5kYWJsZTxUPjtcblxuLyoqXG4gKiBCaW5kcyB2YWx1ZSBvZiBhIERPTSBlbGVtZW50IHRvIGEgYFByb3BlcnR5YC5cbiAqIEBwYXJhbSBlbCBET00gZWxlbWVudC5cbiAqIEBwYXJhbSBwcm9wZXJ0eSBQcm9wZXJ0eS5cbiAqIEBwYXJhbSBiaW5kaW5nIEJpbmRpbmcgZGlyZWN0aW9uLlxuICogQHJldHVybnMgQmluZGluZyBvYmplY3QuIFlvdSBtdXN0IGRlc3Ryb3kgaXQgdG8gc3RvcCB0aGUgc3luY2hyb25pemF0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kVmFsPFQgZXh0ZW5kcyBzdHJpbmcgfCBudW1iZXIgfCBzdHJpbmdbXT4oXG5cdGVsOiBWYWx1ZVVwZGF0ZXJFbGVtZW50PFQ+LCBwcm9wZXJ0eTogQmluZGFibGU8VD4sIGJpbmRpbmc/OiAxKTogRGVzdHJveWFibGU7XG5cbi8qKlxuICogQmluZHMgYSBgUHJvcGVydHlgIHRvIHZhbHVlIG9mIGEgRE9NIGVsZW1lbnQuXG4gKiBAcGFyYW0gZWwgRE9NIGVsZW1lbnQuXG4gKiBAcGFyYW0gcHJvcGVydHkgUHJvcGVydHkuXG4gKiBAcGFyYW0gYmluZGluZyBCaW5kaW5nIGRpcmVjdGlvbi5cbiAqIEBwYXJhbSBzaW1wbGUgRGlzYWJsZSBsaXZlIHdhdGNoIGJ5IHRpbWVyLlxuICogQHJldHVybnMgQmluZGluZyBvYmplY3QuIFlvdSBtdXN0IGRlc3Ryb3kgaXQgdG8gc3RvcCB0aGUgc3luY2hyb25pemF0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kVmFsPFQgZXh0ZW5kcyBzdHJpbmcgfCBudW1iZXIgfCBzdHJpbmdbXT4oXG5cdGVsOiBWYWx1ZVdhdGNoZXJFbGVtZW50LCBwcm9wZXJ0eTogSVByb3BlcnR5PFQ+LCBiaW5kaW5nOiAyLCBzaW1wbGU/OiBib29sZWFuKTogRGVzdHJveWFibGU7XG5cbi8qKlxuICogU2V0cyB1cCBhIHR3by13YXkgYmluZGluZyBiZXR3ZWVuIHZhbHVlIG9mIGEgRE9NIGVsZW1lbnQgYW5kIGEgYFByb3BlcnR5YC5cbiAqIEluaXRpYWxseSwgdGhlIHByb3BlcnR5IHZhbHVlIHByZXZhaWxzLlxuICogQHBhcmFtIGVsIERPTSBlbGVtZW50LlxuICogQHBhcmFtIHByb3BlcnR5IFByb3BlcnR5LlxuICogQHBhcmFtIGJpbmRpbmcgQmluZGluZyBkaXJlY3Rpb24uXG4gKiBAcGFyYW0gc2ltcGxlIERpc2FibGUgbGl2ZSB3YXRjaCBieSB0aW1lci5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZFZhbDxUIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyIHwgc3RyaW5nW10+KFxuXHRlbDogVmFsdWVVcGRhdGVyRWxlbWVudDxUPiAmIFZhbHVlV2F0Y2hlckVsZW1lbnQsIHByb3BlcnR5OiBJUHJvcGVydHk8VD4sIGJpbmRpbmc6IDMsIHNpbXBsZT86IGJvb2xlYW4pOiBEZXN0cm95YWJsZTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJpbmRWYWw8VCBleHRlbmRzIHN0cmluZyB8IG51bWJlciB8IHN0cmluZ1tdPihlbDogYW55LCBwcm9wZXJ0eTogYW55LCBiaW5kaW5nPzogbnVtYmVyLCBzaW1wbGU/OiBib29sZWFuKTogRGVzdHJveWFibGUge1xuXHRpZiAocHJvcGVydHkgPT0gbnVsbCB8fCB0eXBlb2YgcHJvcGVydHkgPT09IFwiYm9vbGVhblwiKSB7XG5cdFx0Ly8gSW4gdGhpcyBzZW1hbnRpYywgXCJwcm9wZXJ0eVwiIGFwcGFyZW50bHkgcGxheXMgcm9sZSBvZiBcInNpbXBsZVwiLlxuXHRcdGNvbnN0IHRhcmdldCA9IG5ldyBQcm9wZXJ0eTxUPigpO1xuXHRcdHJldHVybiB0YXJnZXQub3duaW5nKG5ldyBWYWx1ZVdhdGNoZXI8VD4oZWwsIHRhcmdldCwgcHJvcGVydHkpKTtcblx0fVxuXHRpZiAoYmluZGluZyA9PT0gMikge1xuXHRcdHJldHVybiBuZXcgVmFsdWVXYXRjaGVyPFQ+KGVsLCBwcm9wZXJ0eSwgc2ltcGxlKTtcblx0fVxuXHRpZiAoYmluZGluZyA9PT0gMykge1xuXHRcdHJldHVybiBuZXcgVmFsdWVCaW5kaW5nPFQ+KGVsLCBwcm9wZXJ0eSwgc2ltcGxlKTtcblx0fVxuXHRyZXR1cm4gbmV3IFZhbHVlVXBkYXRlcjxUPihlbCwgcHJvcGVydHkpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZhbHVlVXBkYXRlckVsZW1lbnQ8VCBleHRlbmRzIHN0cmluZyB8IG51bWJlciB8IHN0cmluZ1tdPiB7XG5cblx0dmFsKCk6IHN0cmluZyB8IG51bWJlciB8IHN0cmluZ1tdO1xuXG5cdHZhbCh2YWx1ZTogVCk6IHZvaWQ7XG5cblx0Y2hhbmdlKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmFsdWVXYXRjaGVyRWxlbWVudCBleHRlbmRzIElucHV0RWxlbWVudCB7XG5cblx0dmFsKCk6IHN0cmluZyB8IG51bWJlciB8IHN0cmluZ1tdO1xuXG5cdG9uKGV2ZW50OiBcImNoYW5nZVwiLCBjYWxsYmFjazogKCkgPT4gdm9pZCk6IHZvaWQ7XG5cblx0b2ZmKGV2ZW50OiBcImNoYW5nZVwiLCBjYWxsYmFjazogKCkgPT4gdm9pZCk6IHZvaWQ7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,