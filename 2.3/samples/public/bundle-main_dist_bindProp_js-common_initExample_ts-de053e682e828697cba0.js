(self["webpackChunk"] = self["webpackChunk"] || []).push([["main_dist_bindProp_js-common_initExample_ts"],{

/***/ "../../main/dist/bindProp.js":
/*!***********************************!*\
  !*** ../../main/dist/bindProp.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));

var Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));

var PropUpdater = /*#__PURE__*/function (_Class_1$default) {
  _inherits(PropUpdater, _Class_1$default);

  var _super = _createSuper(PropUpdater);

  function PropUpdater(el, prop, property) {
    var _this;

    _classCallCheck(this, PropUpdater);

    _this = _super.call(this);
    _this.el = el;
    _this.prop = prop;
    _this.property = property;

    _this._update();

    _this.own(property.onChange.listen(_this._update, _assertThisInitialized(_this)));

    return _this;
  }

  _createClass(PropUpdater, [{
    key: "_update",
    value: function _update() {
      this.el.prop(this.prop, this.property.get());

      if (this.prop === "checked") {
        this.el.change();
      }
    }
  }]);

  return PropUpdater;
}(Class_1.default);

var CheckedWatcher = /*#__PURE__*/function (_Class_1$default2) {
  _inherits(CheckedWatcher, _Class_1$default2);

  var _super2 = _createSuper(CheckedWatcher);

  function CheckedWatcher(el, target) {
    var _this2;

    _classCallCheck(this, CheckedWatcher);

    _this2 = _super2.call(this);
    _this2.el = el;
    _this2.target = target;

    _this2.sync = function () {
      return _this2._sync();
    };

    _this2._sync();

    _this2.el.on("change", _this2.sync);

    return _this2;
  }

  _createClass(CheckedWatcher, [{
    key: "destroyObject",
    value: function destroyObject() {
      this.el.off("change", this.sync);

      _get(_getPrototypeOf(CheckedWatcher.prototype), "destroyObject", this).call(this);
    }
  }, {
    key: "_sync",
    value: function _sync() {
      this.target.set(this.el.prop("checked"));
    }
  }]);

  return CheckedWatcher;
}(Class_1.default);

var CheckedBinding = /*#__PURE__*/function (_Class_1$default3) {
  _inherits(CheckedBinding, _Class_1$default3);

  var _super3 = _createSuper(CheckedBinding);

  function CheckedBinding(el, property) {
    var _this3;

    _classCallCheck(this, CheckedBinding);

    _this3 = _super3.call(this);
    _this3.el = el;
    _this3.property = property;
    _this3.syncing = false;

    _this3.sync = function () {
      return _this3._sync();
    };

    _this3._update();

    _this3.own(property.onChange.listen(_this3._update, _assertThisInitialized(_this3)));

    _this3.el.on("change", _this3.sync);

    return _this3;
  }

  _createClass(CheckedBinding, [{
    key: "destroyObject",
    value: function destroyObject() {
      this.el.off("change", this.sync);

      _get(_getPrototypeOf(CheckedBinding.prototype), "destroyObject", this).call(this);
    }
  }, {
    key: "_update",
    value: function _update() {
      if (this.syncing) {
        return;
      }

      this.el.prop("checked", this.property.get());
      this.el.change();
    }
  }, {
    key: "_sync",
    value: function _sync() {
      this.syncing = true;
      this.property.set(this.el.prop("checked"));
      this.syncing = false;
    }
  }]);

  return CheckedBinding;
}(Class_1.default);

function bindProp(el, prop, property, binding) {
  if (property == null) {
    var target = new Property_1.default();
    return target.owning(new CheckedWatcher(el, target));
  }

  if (binding === 2) {
    return new CheckedWatcher(el, property);
  }

  if (binding === 3) {
    return new CheckedBinding(el, property);
  }

  return new PropUpdater(el, prop, property);
}

exports.default = bindProp;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9iaW5kUHJvcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0YsSUFBQSxPQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQTs7QUFJQSxJQUFBLFVBQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLFlBQUEsQ0FBQSxDQUFBOztJQUVNLFc7Ozs7O0FBQ0wsdUJBQW9CLEVBQXBCLEVBQW9ELElBQXBELEVBQTBFLFFBQTFFLEVBQXFHO0FBQUE7O0FBQUE7O0FBQ3BHO0FBRG1CLFVBQUEsRUFBQSxHQUFBLEVBQUE7QUFBZ0MsVUFBQSxJQUFBLEdBQUEsSUFBQTtBQUFzQixVQUFBLFFBQUEsR0FBQSxRQUFBOztBQUV6RSxVQUFLLE9BQUw7O0FBQ0EsVUFBSyxHQUFMLENBQVMsUUFBUSxDQUFDLFFBQVQsQ0FBa0IsTUFBbEIsQ0FBeUIsTUFBSyxPQUE5QixnQ0FBVDs7QUFIb0c7QUFJcEc7Ozs7V0FFTyxtQkFBTztBQUNkLFdBQUssRUFBTCxDQUFRLElBQVIsQ0FBYSxLQUFLLElBQWxCLEVBQXdCLEtBQUssUUFBTCxDQUFjLEdBQWQsRUFBeEI7O0FBQ0EsVUFBSSxLQUFLLElBQUwsS0FBYyxTQUFsQixFQUE2QjtBQUM1QixhQUFLLEVBQUwsQ0FBUSxNQUFSO0FBQ0E7QUFDRDs7OztFQVp3QixPQUFBLENBQUEsTzs7SUFlcEIsYzs7Ozs7QUFHTCwwQkFBb0IsRUFBcEIsRUFBdUQsTUFBdkQsRUFBaUY7QUFBQTs7QUFBQTs7QUFDaEY7QUFEbUIsV0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFtQyxXQUFBLE1BQUEsR0FBQSxNQUFBOztBQUV0RCxXQUFLLElBQUwsR0FBWTtBQUFBLGFBQU0sT0FBSyxLQUFMLEVBQU47QUFBQSxLQUFaOztBQUNBLFdBQUssS0FBTDs7QUFDQSxXQUFLLEVBQUwsQ0FBUSxFQUFSLENBQVcsUUFBWCxFQUFxQixPQUFLLElBQTFCOztBQUpnRjtBQUtoRjs7OztXQUVTLHlCQUFhO0FBQ3RCLFdBQUssRUFBTCxDQUFRLEdBQVIsQ0FBWSxRQUFaLEVBQXNCLEtBQUssSUFBM0I7O0FBQ0E7QUFDQTs7O1dBRU8saUJBQUs7QUFDWixXQUFLLE1BQUwsQ0FBWSxHQUFaLENBQWdCLEtBQUssRUFBTCxDQUFRLElBQVIsQ0FBYSxTQUFiLENBQWhCO0FBQ0E7Ozs7RUFqQjJCLE9BQUEsQ0FBQSxPOztJQW9CdkIsYzs7Ozs7QUFJTCwwQkFBb0IsRUFBcEIsRUFBNEUsUUFBNUUsRUFBd0c7QUFBQTs7QUFBQTs7QUFDdkc7QUFEbUIsV0FBQSxFQUFBLEdBQUEsRUFBQTtBQUF3RCxXQUFBLFFBQUEsR0FBQSxRQUFBO0FBRnBFLFdBQUEsT0FBQSxHQUFVLEtBQVY7O0FBSVAsV0FBSyxJQUFMLEdBQVk7QUFBQSxhQUFNLE9BQUssS0FBTCxFQUFOO0FBQUEsS0FBWjs7QUFDQSxXQUFLLE9BQUw7O0FBQ0EsV0FBSyxHQUFMLENBQVMsUUFBUSxDQUFDLFFBQVQsQ0FBa0IsTUFBbEIsQ0FBeUIsT0FBSyxPQUE5QixpQ0FBVDs7QUFDQSxXQUFLLEVBQUwsQ0FBUSxFQUFSLENBQVcsUUFBWCxFQUFxQixPQUFLLElBQTFCOztBQUx1RztBQU12Rzs7OztXQUVTLHlCQUFhO0FBQ3RCLFdBQUssRUFBTCxDQUFRLEdBQVIsQ0FBWSxRQUFaLEVBQXNCLEtBQUssSUFBM0I7O0FBQ0E7QUFDQTs7O1dBRU8sbUJBQU87QUFDZCxVQUFJLEtBQUssT0FBVCxFQUFrQjtBQUNqQjtBQUNBOztBQUNELFdBQUssRUFBTCxDQUFRLElBQVIsQ0FBYSxTQUFiLEVBQXdCLEtBQUssUUFBTCxDQUFjLEdBQWQsRUFBeEI7QUFDQSxXQUFLLEVBQUwsQ0FBUSxNQUFSO0FBQ0E7OztXQUVPLGlCQUFLO0FBQ1osV0FBSyxPQUFMLEdBQWUsSUFBZjtBQUNBLFdBQUssUUFBTCxDQUFjLEdBQWQsQ0FBa0IsS0FBSyxFQUFMLENBQVEsSUFBUixDQUFhLFNBQWIsQ0FBbEI7QUFDQSxXQUFLLE9BQUwsR0FBZSxLQUFmO0FBQ0E7Ozs7RUE3QjJCLE9BQUEsQ0FBQSxPOztBQTBFN0IsU0FBd0IsUUFBeEIsQ0FBaUMsRUFBakMsRUFBMEMsSUFBMUMsRUFBd0QsUUFBeEQsRUFBd0UsT0FBeEUsRUFBd0Y7QUFDdkYsTUFBSSxRQUFRLElBQUksSUFBaEIsRUFBc0I7QUFDckIsUUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFBLENBQUEsT0FBSixFQUFmO0FBQ0EsV0FBTyxNQUFNLENBQUMsTUFBUCxDQUFjLElBQUksY0FBSixDQUFtQixFQUFuQixFQUF1QixNQUF2QixDQUFkLENBQVA7QUFDQTs7QUFDRCxNQUFJLE9BQU8sS0FBSyxDQUFoQixFQUFtQjtBQUNsQixXQUFPLElBQUksY0FBSixDQUFtQixFQUFuQixFQUF1QixRQUF2QixDQUFQO0FBQ0E7O0FBQ0QsTUFBSSxPQUFPLEtBQUssQ0FBaEIsRUFBbUI7QUFDbEIsV0FBTyxJQUFJLGNBQUosQ0FBbUIsRUFBbkIsRUFBdUIsUUFBdkIsQ0FBUDtBQUNBOztBQUNELFNBQU8sSUFBSSxXQUFKLENBQWdCLEVBQWhCLEVBQW9CLElBQXBCLEVBQTBCLFFBQTFCLENBQVA7QUFDQTs7QUFaRCxPQUFBLENBQUEsT0FBQSxHQUFBLFFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIxIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgQmluZGFibGUgZnJvbSAnLi9CaW5kYWJsZSc7XG5pbXBvcnQgQ2xhc3MgZnJvbSAnLi9DbGFzcyc7XG5pbXBvcnQgRGVzdHJveWFibGUgZnJvbSAnLi9EZXN0cm95YWJsZSc7XG5pbXBvcnQgRGVzdHJveWFibGVCaW5kYWJsZSBmcm9tICcuL0Rlc3Ryb3lhYmxlQmluZGFibGUnO1xuaW1wb3J0IElQcm9wZXJ0eSBmcm9tICcuL0lQcm9wZXJ0eSc7XG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi9Qcm9wZXJ0eSc7XG5cbmNsYXNzIFByb3BVcGRhdGVyIGV4dGVuZHMgQ2xhc3Mge1xuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBQcm9wVXBkYXRlckVsZW1lbnQsIHByaXZhdGUgcHJvcDogc3RyaW5nLCBwcml2YXRlIHByb3BlcnR5OiBCaW5kYWJsZTxib29sZWFuPikge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5fdXBkYXRlKCk7XG5cdFx0dGhpcy5vd24ocHJvcGVydHkub25DaGFuZ2UubGlzdGVuKHRoaXMuX3VwZGF0ZSwgdGhpcykpO1xuXHR9XG5cblx0cHJpdmF0ZSBfdXBkYXRlKCkge1xuXHRcdHRoaXMuZWwucHJvcCh0aGlzLnByb3AsIHRoaXMucHJvcGVydHkuZ2V0KCkpO1xuXHRcdGlmICh0aGlzLnByb3AgPT09IFwiY2hlY2tlZFwiKSB7XG5cdFx0XHR0aGlzLmVsLmNoYW5nZSgpO1xuXHRcdH1cblx0fVxufVxuXG5jbGFzcyBDaGVja2VkV2F0Y2hlciBleHRlbmRzIENsYXNzIHtcblx0cHJpdmF0ZSBzeW5jOiAoKSA9PiB2b2lkO1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IENoZWNrZWRXYXRjaGVyRWxlbWVudCwgcHJpdmF0ZSB0YXJnZXQ6IElQcm9wZXJ0eTxib29sZWFuPikge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5zeW5jID0gKCkgPT4gdGhpcy5fc3luYygpO1xuXHRcdHRoaXMuX3N5bmMoKTtcblx0XHR0aGlzLmVsLm9uKFwiY2hhbmdlXCIsIHRoaXMuc3luYyk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgZGVzdHJveU9iamVjdCgpIHtcblx0XHR0aGlzLmVsLm9mZihcImNoYW5nZVwiLCB0aGlzLnN5bmMpO1xuXHRcdHN1cGVyLmRlc3Ryb3lPYmplY3QoKTtcblx0fVxuXG5cdHByaXZhdGUgX3N5bmMoKSB7XG5cdFx0dGhpcy50YXJnZXQuc2V0KHRoaXMuZWwucHJvcChcImNoZWNrZWRcIikpO1xuXHR9XG59XG5cbmNsYXNzIENoZWNrZWRCaW5kaW5nIGV4dGVuZHMgQ2xhc3Mge1xuXHRwcml2YXRlIHN5bmM6ICgpID0+IHZvaWQ7XG5cdHByaXZhdGUgc3luY2luZyA9IGZhbHNlO1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IFByb3BVcGRhdGVyRWxlbWVudCAmIENoZWNrZWRXYXRjaGVyRWxlbWVudCwgcHJpdmF0ZSBwcm9wZXJ0eTogSVByb3BlcnR5PGJvb2xlYW4+KSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLnN5bmMgPSAoKSA9PiB0aGlzLl9zeW5jKCk7XG5cdFx0dGhpcy5fdXBkYXRlKCk7XG5cdFx0dGhpcy5vd24ocHJvcGVydHkub25DaGFuZ2UubGlzdGVuKHRoaXMuX3VwZGF0ZSwgdGhpcykpO1xuXHRcdHRoaXMuZWwub24oXCJjaGFuZ2VcIiwgdGhpcy5zeW5jKTtcblx0fVxuXG5cdHByb3RlY3RlZCBkZXN0cm95T2JqZWN0KCkge1xuXHRcdHRoaXMuZWwub2ZmKFwiY2hhbmdlXCIsIHRoaXMuc3luYyk7XG5cdFx0c3VwZXIuZGVzdHJveU9iamVjdCgpO1xuXHR9XG5cblx0cHJpdmF0ZSBfdXBkYXRlKCkge1xuXHRcdGlmICh0aGlzLnN5bmNpbmcpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5lbC5wcm9wKFwiY2hlY2tlZFwiLCB0aGlzLnByb3BlcnR5LmdldCgpKTtcblx0XHR0aGlzLmVsLmNoYW5nZSgpO1xuXHR9XG5cblx0cHJpdmF0ZSBfc3luYygpIHtcblx0XHR0aGlzLnN5bmNpbmcgPSB0cnVlO1xuXHRcdHRoaXMucHJvcGVydHkuc2V0KHRoaXMuZWwucHJvcChcImNoZWNrZWRcIikpO1xuXHRcdHRoaXMuc3luY2luZyA9IGZhbHNlO1xuXHR9XG59XG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBib29sZWFuIGBQcm9wZXJ0eWAgYm91bmQgdG8gY2hlY2tib3ggc3RhdGUgb2YgYSBET00gZWxlbWVudC5cbiAqIE9ubHkgXCJjaGVja2VkXCIgSlF1ZXJ5IHByb3BlcnR5IGlzIHN1cHBvcnRlZCBpbiB0aGlzIGNhc2UuXG4gKiBAcGFyYW0gZWwgRE9NIGVsZW1lbnQuXG4gKiBAcGFyYW0gcHJvcCBKUXVlcnkgcHJvcGVydHkgbmFtZS5cbiAqIEByZXR1cm5zIEJvdW5kIGBQcm9wZXJ0eWAuIFlvdSBtdXN0IGRlc3Ryb3kgaXQgdG8gc3RvcCB0aGUgc3luY2hyb25pemF0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kUHJvcChlbDogQ2hlY2tlZFdhdGNoZXJFbGVtZW50LCBwcm9wOiBcImNoZWNrZWRcIik6IERlc3Ryb3lhYmxlQmluZGFibGU8Ym9vbGVhbj47XG5cbi8qKlxuICogQmluZHMgYSBKUXVlcnkgcHJvcGVydHkgb2YgYSBET00gZWxlbWVudCB0byBhIGJvb2xlYW4gYFByb3BlcnR5YC5cbiAqIEBwYXJhbSBlbCBET00gZWxlbWVudC5cbiAqIEBwYXJhbSBwcm9wIEpRdWVyeSBwcm9wZXJ0eSBuYW1lLlxuICogQHBhcmFtIHByb3BlcnR5IFByb3BlcnR5LlxuICogQHBhcmFtIGJpbmRpbmcgQmluZGluZyBkaXJlY3Rpb24uXG4gKiBAcmV0dXJucyBCaW5kaW5nIG9iamVjdC4gWW91IG11c3QgZGVzdHJveSBpdCB0byBzdG9wIHRoZSBzeW5jaHJvbml6YXRpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJpbmRQcm9wKGVsOiBQcm9wVXBkYXRlckVsZW1lbnQsIHByb3A6IHN0cmluZywgcHJvcGVydHk6IEJpbmRhYmxlPGJvb2xlYW4+LCBiaW5kaW5nPzogMSk6IERlc3Ryb3lhYmxlO1xuXG4vKipcbiAqIEJpbmRzIGEgYm9vbGVhbiBgUHJvcGVydHlgIHRvIGEgSlF1ZXJ5IHByb3BlcnR5IG9mIGEgRE9NIGVsZW1lbnQuXG4gKiBPbmx5IFwiY2hlY2tlZFwiIEpRdWVyeSBwcm9wZXJ0eSBpcyBzdXBwb3J0ZWQgaW4gdGhpcyBjYXNlLlxuICogQHBhcmFtIGVsIERPTSBlbGVtZW50LlxuICogQHBhcmFtIHByb3AgSlF1ZXJ5IHByb3BlcnR5IG5hbWUuXG4gKiBAcGFyYW0gcHJvcGVydHkgUHJvcGVydHkuXG4gKiBAcGFyYW0gYmluZGluZyBCaW5kaW5nIGRpcmVjdGlvbi5cbiAqIEByZXR1cm5zIEJvdW5kIHByb3BlcnR5LiBZb3UgbXVzdCBkZXN0cm95IGl0IHRvIHN0b3AgdGhlIHN5bmNocm9uaXphdGlvbi5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZFByb3AoZWw6IENoZWNrZWRXYXRjaGVyRWxlbWVudCwgcHJvcDogXCJjaGVja2VkXCIsIHByb3BlcnR5OiBJUHJvcGVydHk8Ym9vbGVhbj4sIGJpbmRpbmc6IDIpOiBEZXN0cm95YWJsZTtcblxuLyoqXG4gKiBTZXRzIHVwIGEgdHdvLXdheSBiaW5kaW5nIGJldHdlZW4gYSBKUXVlcnkgcHJvcGVydHkgb2YgYSBET00gZWxlbWVudCBhbmQgYSBib29sZWFuIGBQcm9wZXJ0eWAuXG4gKiBJbml0aWFsbHksIHRoZSBib29sZWFuIHByb3BlcnR5IHZhbHVlIHByZXZhaWxzLlxuICogT25seSBcImNoZWNrZWRcIiBKUXVlcnkgcHJvcGVydHkgaXMgc3VwcG9ydGVkIGluIHRoaXMgY2FzZS5cbiAqIEBwYXJhbSBlbCBET00gZWxlbWVudC5cbiAqIEBwYXJhbSBwcm9wIEpRdWVyeSBwcm9wZXJ0eSBuYW1lLlxuICogQHBhcmFtIHByb3BlcnR5IFByb3BlcnR5LlxuICogQHBhcmFtIGJpbmRpbmcgQmluZGluZyBkaXJlY3Rpb24uXG4gKiBAcmV0dXJucyBCaW5kaW5nIG9iamVjdC4gWW91IG11c3QgZGVzdHJveSBpdCB0byBzdG9wIHRoZSBzeW5jaHJvbml6YXRpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJpbmRQcm9wKGVsOiBQcm9wVXBkYXRlckVsZW1lbnQgJiBDaGVja2VkV2F0Y2hlckVsZW1lbnQsIHByb3A6IFwiY2hlY2tlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdCBwcm9wZXJ0eTogSVByb3BlcnR5PGJvb2xlYW4+LCBiaW5kaW5nOiAzKTogRGVzdHJveWFibGU7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kUHJvcChlbDogYW55LCBwcm9wOiBzdHJpbmcsIHByb3BlcnR5PzogYW55LCBiaW5kaW5nPzogbnVtYmVyKTogRGVzdHJveWFibGUge1xuXHRpZiAocHJvcGVydHkgPT0gbnVsbCkge1xuXHRcdGNvbnN0IHRhcmdldCA9IG5ldyBQcm9wZXJ0eTxib29sZWFuPigpO1xuXHRcdHJldHVybiB0YXJnZXQub3duaW5nKG5ldyBDaGVja2VkV2F0Y2hlcihlbCwgdGFyZ2V0KSk7XG5cdH1cblx0aWYgKGJpbmRpbmcgPT09IDIpIHtcblx0XHRyZXR1cm4gbmV3IENoZWNrZWRXYXRjaGVyKGVsLCBwcm9wZXJ0eSk7XG5cdH1cblx0aWYgKGJpbmRpbmcgPT09IDMpIHtcblx0XHRyZXR1cm4gbmV3IENoZWNrZWRCaW5kaW5nKGVsLCBwcm9wZXJ0eSk7XG5cdH1cblx0cmV0dXJuIG5ldyBQcm9wVXBkYXRlcihlbCwgcHJvcCwgcHJvcGVydHkpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb3BVcGRhdGVyRWxlbWVudCB7XG5cblx0cHJvcChwcm9wOiBzdHJpbmcsIHZhbHVlOiBib29sZWFuKTogdm9pZDtcblxuXHRjaGFuZ2UoKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaGVja2VkV2F0Y2hlckVsZW1lbnQge1xuXG5cdHByb3AocHJvcDogXCJjaGVja2VkXCIpOiBib29sZWFuO1xuXG5cdG9uKGV2ZW50OiBcImNoYW5nZVwiLCBjYWxsYmFjazogKCkgPT4gdm9pZCk6IHZvaWQ7XG5cblx0b2ZmKGV2ZW50OiBcImNoYW5nZVwiLCBjYWxsYmFjazogKCkgPT4gdm9pZCk6IHZvaWQ7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "./common/initExample.ts":
/*!*******************************!*\
  !*** ./common/initExample.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "../../node_modules/jquery/dist/jquery.js"));

__webpack_require__(/*! core-js/stable */ "../../node_modules/core-js/stable/index.js");

__webpack_require__(/*! regenerator-runtime/runtime */ "../../node_modules/regenerator-runtime/runtime.js");

function initExample(name, links) {
  var el = jquery_1.default('<div style="float: right; width: 600px"><b>Source:</b> </div>');
  var first = true;
  links.forEach(function (link) {
    if (first) {
      first = false;
    } else {
      el.append(', ');
    }

    el.append(jquery_1.default('<a target="_blank"></a>').text(link).attr("href", "src/".concat(name, "/").concat(link, ".txt")));
  });
  jquery_1.default("body").prepend('<div><b>Example</b></div><div><a href="javascript:location.reload()">Refresh</a></div><hr style="clear: both">').prepend(el);
}

exports.default = initExample;

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,