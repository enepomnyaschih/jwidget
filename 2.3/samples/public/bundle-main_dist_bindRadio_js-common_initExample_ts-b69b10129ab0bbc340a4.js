(self["webpackChunk"] = self["webpackChunk"] || []).push([["main_dist_bindRadio_js-common_initExample_ts"],{

/***/ "../../main/dist/bindRadio.js":
/*!************************************!*\
  !*** ../../main/dist/bindRadio.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));

var Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));

var RadioUpdater = /*#__PURE__*/function (_Class_1$default) {
  _inherits(RadioUpdater, _Class_1$default);

  var _super = _createSuper(RadioUpdater);

  function RadioUpdater(el, name, property) {
    var _this;

    _classCallCheck(this, RadioUpdater);

    _this = _super.call(this);
    _this.el = el;
    _this.property = property;
    _this.selector = "input[type=radio][name='".concat(name, "']");

    _this._update();

    _this.own(property.onChange.listen(_this._update, _assertThisInitialized(_this)));

    return _this;
  }

  _createClass(RadioUpdater, [{
    key: "_update",
    value: function _update() {
      updateField(this.el, this.selector, this.property.get());
    }
  }]);

  return RadioUpdater;
}(Class_1.default);

var RadioWatcher = /*#__PURE__*/function (_Class_1$default2) {
  _inherits(RadioWatcher, _Class_1$default2);

  var _super2 = _createSuper(RadioWatcher);

  function RadioWatcher(el, name, target) {
    var _this2;

    _classCallCheck(this, RadioWatcher);

    _this2 = _super2.call(this);
    _this2.el = el;
    _this2.target = target;
    _this2.selector = "input[type=radio][name='".concat(name, "']");

    _this2.sync = function () {
      return _this2._sync();
    };

    _this2._sync();

    _this2.el.on("change", _this2.selector, _this2.sync);

    return _this2;
  }

  _createClass(RadioWatcher, [{
    key: "destroyObject",
    value: function destroyObject() {
      this.el.off("change", this.selector, this.sync);

      _get(_getPrototypeOf(RadioWatcher.prototype), "destroyObject", this).call(this);
    }
  }, {
    key: "_sync",
    value: function _sync() {
      var radio = this.el.find(this.selector + ":checked");
      this.target.set(radio.length !== 0 ? radio.attr("value") : null);
    }
  }]);

  return RadioWatcher;
}(Class_1.default);

var RadioBinding = /*#__PURE__*/function (_Class_1$default3) {
  _inherits(RadioBinding, _Class_1$default3);

  var _super3 = _createSuper(RadioBinding);

  function RadioBinding(el, name, property) {
    var _this3;

    _classCallCheck(this, RadioBinding);

    _this3 = _super3.call(this);
    _this3.el = el;
    _this3.property = property;
    _this3.syncing = false;
    _this3.selector = "input[type=radio][name='".concat(name, "']");

    _this3.sync = function () {
      return _this3._sync();
    };

    _this3._update();

    _this3.own(property.onChange.listen(_this3._update, _assertThisInitialized(_this3)));

    _this3.el.on("change", _this3.selector, _this3.sync);

    return _this3;
  }

  _createClass(RadioBinding, [{
    key: "destroyObject",
    value: function destroyObject() {
      this.el.off("change", this.selector, this.sync);

      _get(_getPrototypeOf(RadioBinding.prototype), "destroyObject", this).call(this);
    }
  }, {
    key: "_update",
    value: function _update() {
      if (!this.syncing) {
        updateField(this.el, this.selector, this.property.get());
      }
    }
  }, {
    key: "_sync",
    value: function _sync() {
      var radio = this.el.find(this.selector + ":checked");
      this.syncing = true;
      this.property.set(radio.length !== 0 ? radio.attr("value") : null);
      this.syncing = false;
    }
  }]);

  return RadioBinding;
}(Class_1.default);

function updateField(el, selector, value) {
  if (value != null) {
    var _els = el.find("".concat(selector, "[value='").concat(value, "']"));

    if (_els.length !== 0) {
      if (!_els.is(":checked")) {
        _els.prop("checked", true);

        _els.change();
      }

      return;
    }
  }

  var els = el.find(selector + ":checked");

  if (els.length !== 0) {
    els.prop("checked", false);
    els.change();
  }
}

function bindRadio(el, name, property, binding) {
  if (property == null) {
    var target = new Property_1.default();
    return target.owning(new RadioWatcher(el, name, target));
  }

  if (binding === 2) {
    return new RadioWatcher(el, name, property);
  }

  if (binding === 3) {
    return new RadioBinding(el, name, property);
  }

  return new RadioUpdater(el, name, property);
}

exports.default = bindRadio;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./common/initExample.ts":
/*!*******************************!*\
  !*** ./common/initExample.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "../../node_modules/jquery/dist/jquery.js"));

__webpack_require__(/*! core-js/stable */ "../../node_modules/core-js/stable/index.js");

__webpack_require__(/*! regenerator-runtime/runtime */ "../../node_modules/regenerator-runtime/runtime.js");

function initExample(name, links) {
  var el = jquery_1.default('<div style="float: right; width: 600px"><b>Source:</b> </div>');
  var first = true;
  links.forEach(function (link) {
    if (first) {
      first = false;
    } else {
      el.append(', ');
    }

    el.append(jquery_1.default('<a target="_blank"></a>').text(link).attr("href", "src/".concat(name, "/").concat(link, ".txt")));
  });
  jquery_1.default("body").prepend('<div><b>Example</b></div><div><a href="javascript:location.reload()">Refresh</a></div><hr style="clear: both">').prepend(el);
}

exports.default = initExample;

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,