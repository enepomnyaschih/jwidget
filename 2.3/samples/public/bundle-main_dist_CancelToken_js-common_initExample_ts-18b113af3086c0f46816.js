(self["webpackChunk"] = self["webpackChunk"] || []).push([["main_dist_CancelToken_js-common_initExample_ts"],{

/***/ "../../main/dist/CancelToken.js":
/*!**************************************!*\
  !*** ../../main/dist/CancelToken.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.runAsync = void 0;

var dummyDestroyable_1 = __importDefault(__webpack_require__(/*! ./dummyDestroyable */ "../../main/dist/dummyDestroyable.js"));

var Dispatcher_1 = __importDefault(__webpack_require__(/*! ./Dispatcher */ "../../main/dist/Dispatcher.js"));
/**
 * Cancellation token is an object that provides a signal on destruction for the bound asynchronous operations to
 * stop working. Examples of asynchronous operations that support cancellation are `defer` and `request`. In comparison
 * to "destroyable promise" approach, cancellation tokens are compatible to async/await syntax.
 */


var CancelToken = /*#__PURE__*/function () {
  function CancelToken() {
    _classCallCheck(this, CancelToken);

    this._dispatcher = new Dispatcher_1.default();
  }
  /**
   * Indicates if the token is already canceled, i.e. destroyed.
   */


  _createClass(CancelToken, [{
    key: "cancelled",
    get: function get() {
      return this._dispatcher == null;
    }
    /**
     * Adds a handler function to call on taken cancellation. If the token is already canceled, calls the
     * function immediately and returns `dummyDestroyable`. Else registers the callback for a one-time call on
     * token destruction and returns the attachment. Destroying the returned attachment results in handler
     * function removal.
     * @param handler Token cancelation callback.
     * @param scope Handler call scope.
     * @returns Handler attachment.
     */

  }, {
    key: "addHandler",
    value: function addHandler(handler, scope) {
      if (this._dispatcher) {
        return this._dispatcher.listen(handler, scope);
      } else {
        handler.call(scope);
        return dummyDestroyable_1.default;
      }
    }
    /**
     * Cancels the token. Calls all registered handler functions. An attempt to add more handler functions
     * after the token destruction results in their immediate calling.
     */

  }, {
    key: "destroy",
    value: function destroy() {
      this._dispatcher.dispatch();

      this._dispatcher.purge();

      this._dispatcher = null;
    }
  }]);

  return CancelToken;
}();

exports.default = CancelToken;
/**
 * Helper function that wraps an abstract asynchronous operation with a promise supporting cancellation tokens.
 * @param run Asyncronous operation initiation callback.
 * @param cancel Asyncronous operation cancelation callback.
 * @param cancelToken Optional cancelation token.
 * @returns Promise representing the operation with cancelation token support.
 */

function runAsync(run, cancel, cancelToken) {
  if (!cancelToken) {
    return new Promise(run);
  }

  if (cancelToken.cancelled) {
    return new Promise(function () {
      return null;
    });
  }

  var attachment = cancelToken.addHandler(cancel);
  return new Promise(function (resolve, reject) {
    run(function (value) {
      attachment.destroy();
      resolve(value);
    }, function (reason) {
      attachment.destroy();
      reject(reason);
    });
  });
}

exports.runAsync = runAsync;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9DYW5jZWxUb2tlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHRixJQUFBLGtCQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxvQkFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxZQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxjQUFBLENBQUEsQ0FBQTtBQUVBOzs7O0FBSUc7OztJQUNrQixXO0FBQXJCLHlCQUFBO0FBQUE7O0FBRVMsU0FBQSxXQUFBLEdBQWMsSUFBSSxZQUFBLENBQUEsT0FBSixFQUFkO0FBb0NSO0FBbENBOztBQUVHOzs7OztTQUNILGVBQWE7QUFDWixhQUFPLEtBQUssV0FBTCxJQUFvQixJQUEzQjtBQUNBO0FBRUQ7Ozs7Ozs7O0FBUUc7Ozs7V0FDSCxvQkFBVyxPQUFYLEVBQStCLEtBQS9CLEVBQTBDO0FBQ3pDLFVBQUksS0FBSyxXQUFULEVBQXNCO0FBQ3JCLGVBQU8sS0FBSyxXQUFMLENBQWlCLE1BQWpCLENBQXdCLE9BQXhCLEVBQWlDLEtBQWpDLENBQVA7QUFDQSxPQUZELE1BRU87QUFDTixRQUFBLE9BQU8sQ0FBQyxJQUFSLENBQWEsS0FBYjtBQUNBLGVBQU8sa0JBQUEsQ0FBQSxPQUFQO0FBQ0E7QUFDRDtBQUVEOzs7QUFHRzs7OztXQUNILG1CQUFPO0FBQ04sV0FBSyxXQUFMLENBQWlCLFFBQWpCOztBQUNBLFdBQUssV0FBTCxDQUFpQixLQUFqQjs7QUFDQSxXQUFLLFdBQUwsR0FBbUIsSUFBbkI7QUFDQTs7Ozs7O0FBckNGLE9BQUEsQ0FBQSxPQUFBLEdBQUEsV0FBQTtBQXdDQTs7Ozs7O0FBTUc7O0FBQ0gsU0FBZ0IsUUFBaEIsQ0FBNEIsR0FBNUIsRUFDNEIsTUFENUIsRUFFNEIsV0FGNUIsRUFFcUQ7QUFFcEQsTUFBSSxDQUFDLFdBQUwsRUFBa0I7QUFDakIsV0FBTyxJQUFJLE9BQUosQ0FBWSxHQUFaLENBQVA7QUFDQTs7QUFDRCxNQUFJLFdBQVcsQ0FBQyxTQUFoQixFQUEyQjtBQUMxQixXQUFPLElBQUksT0FBSixDQUFlO0FBQUEsYUFBTSxJQUFOO0FBQUEsS0FBZixDQUFQO0FBQ0E7O0FBQ0QsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLFVBQVosQ0FBdUIsTUFBdkIsQ0FBbkI7QUFDQSxTQUFPLElBQUksT0FBSixDQUFlLFVBQUMsT0FBRCxFQUFVLE1BQVYsRUFBb0I7QUFDekMsSUFBQSxHQUFHLENBQUMsVUFBQyxLQUFELEVBQStCO0FBQ2xDLE1BQUEsVUFBVSxDQUFDLE9BQVg7QUFDQSxNQUFBLE9BQU8sQ0FBQyxLQUFELENBQVA7QUFDQSxLQUhFLEVBR0EsVUFBQyxNQUFELEVBQWlCO0FBQ25CLE1BQUEsVUFBVSxDQUFDLE9BQVg7QUFDQSxNQUFBLE1BQU0sQ0FBQyxNQUFELENBQU47QUFDQSxLQU5FLENBQUg7QUFPQSxHQVJNLENBQVA7QUFTQTs7QUFwQkQsT0FBQSxDQUFBLFFBQUEsR0FBQSxRQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMSBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IERlc3Ryb3lhYmxlIGZyb20gXCIuL0Rlc3Ryb3lhYmxlXCI7XG5pbXBvcnQgZHVtbXlEZXN0cm95YWJsZSBmcm9tIFwiLi9kdW1teURlc3Ryb3lhYmxlXCI7XG5pbXBvcnQgRGlzcGF0Y2hlciBmcm9tIFwiLi9EaXNwYXRjaGVyXCI7XG5cbi8qKlxuICogQ2FuY2VsbGF0aW9uIHRva2VuIGlzIGFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIGEgc2lnbmFsIG9uIGRlc3RydWN0aW9uIGZvciB0aGUgYm91bmQgYXN5bmNocm9ub3VzIG9wZXJhdGlvbnMgdG9cbiAqIHN0b3Agd29ya2luZy4gRXhhbXBsZXMgb2YgYXN5bmNocm9ub3VzIG9wZXJhdGlvbnMgdGhhdCBzdXBwb3J0IGNhbmNlbGxhdGlvbiBhcmUgYGRlZmVyYCBhbmQgYHJlcXVlc3RgLiBJbiBjb21wYXJpc29uXG4gKiB0byBcImRlc3Ryb3lhYmxlIHByb21pc2VcIiBhcHByb2FjaCwgY2FuY2VsbGF0aW9uIHRva2VucyBhcmUgY29tcGF0aWJsZSB0byBhc3luYy9hd2FpdCBzeW50YXguXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbmNlbFRva2VuIGltcGxlbWVudHMgRGVzdHJveWFibGUge1xuXG5cdHByaXZhdGUgX2Rpc3BhdGNoZXIgPSBuZXcgRGlzcGF0Y2hlcjxhbnk+KCk7XG5cblx0LyoqXG5cdCAqIEluZGljYXRlcyBpZiB0aGUgdG9rZW4gaXMgYWxyZWFkeSBjYW5jZWxlZCwgaS5lLiBkZXN0cm95ZWQuXG5cdCAqL1xuXHRnZXQgY2FuY2VsbGVkKCkge1xuXHRcdHJldHVybiB0aGlzLl9kaXNwYXRjaGVyID09IG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhIGhhbmRsZXIgZnVuY3Rpb24gdG8gY2FsbCBvbiB0YWtlbiBjYW5jZWxsYXRpb24uIElmIHRoZSB0b2tlbiBpcyBhbHJlYWR5IGNhbmNlbGVkLCBjYWxscyB0aGVcblx0ICogZnVuY3Rpb24gaW1tZWRpYXRlbHkgYW5kIHJldHVybnMgYGR1bW15RGVzdHJveWFibGVgLiBFbHNlIHJlZ2lzdGVycyB0aGUgY2FsbGJhY2sgZm9yIGEgb25lLXRpbWUgY2FsbCBvblxuXHQgKiB0b2tlbiBkZXN0cnVjdGlvbiBhbmQgcmV0dXJucyB0aGUgYXR0YWNobWVudC4gRGVzdHJveWluZyB0aGUgcmV0dXJuZWQgYXR0YWNobWVudCByZXN1bHRzIGluIGhhbmRsZXJcblx0ICogZnVuY3Rpb24gcmVtb3ZhbC5cblx0ICogQHBhcmFtIGhhbmRsZXIgVG9rZW4gY2FuY2VsYXRpb24gY2FsbGJhY2suXG5cdCAqIEBwYXJhbSBzY29wZSBIYW5kbGVyIGNhbGwgc2NvcGUuXG5cdCAqIEByZXR1cm5zIEhhbmRsZXIgYXR0YWNobWVudC5cblx0ICovXG5cdGFkZEhhbmRsZXIoaGFuZGxlcjogKCkgPT4gYW55LCBzY29wZT86IGFueSk6IERlc3Ryb3lhYmxlIHtcblx0XHRpZiAodGhpcy5fZGlzcGF0Y2hlcikge1xuXHRcdFx0cmV0dXJuIHRoaXMuX2Rpc3BhdGNoZXIubGlzdGVuKGhhbmRsZXIsIHNjb3BlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aGFuZGxlci5jYWxsKHNjb3BlKTtcblx0XHRcdHJldHVybiBkdW1teURlc3Ryb3lhYmxlO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBDYW5jZWxzIHRoZSB0b2tlbi4gQ2FsbHMgYWxsIHJlZ2lzdGVyZWQgaGFuZGxlciBmdW5jdGlvbnMuIEFuIGF0dGVtcHQgdG8gYWRkIG1vcmUgaGFuZGxlciBmdW5jdGlvbnNcblx0ICogYWZ0ZXIgdGhlIHRva2VuIGRlc3RydWN0aW9uIHJlc3VsdHMgaW4gdGhlaXIgaW1tZWRpYXRlIGNhbGxpbmcuXG5cdCAqL1xuXHRkZXN0cm95KCkge1xuXHRcdHRoaXMuX2Rpc3BhdGNoZXIuZGlzcGF0Y2goKTtcblx0XHR0aGlzLl9kaXNwYXRjaGVyLnB1cmdlKCk7XG5cdFx0dGhpcy5fZGlzcGF0Y2hlciA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdGhhdCB3cmFwcyBhbiBhYnN0cmFjdCBhc3luY2hyb25vdXMgb3BlcmF0aW9uIHdpdGggYSBwcm9taXNlIHN1cHBvcnRpbmcgY2FuY2VsbGF0aW9uIHRva2Vucy5cbiAqIEBwYXJhbSBydW4gQXN5bmNyb25vdXMgb3BlcmF0aW9uIGluaXRpYXRpb24gY2FsbGJhY2suXG4gKiBAcGFyYW0gY2FuY2VsIEFzeW5jcm9ub3VzIG9wZXJhdGlvbiBjYW5jZWxhdGlvbiBjYWxsYmFjay5cbiAqIEBwYXJhbSBjYW5jZWxUb2tlbiBPcHRpb25hbCBjYW5jZWxhdGlvbiB0b2tlbi5cbiAqIEByZXR1cm5zIFByb21pc2UgcmVwcmVzZW50aW5nIHRoZSBvcGVyYXRpb24gd2l0aCBjYW5jZWxhdGlvbiB0b2tlbiBzdXBwb3J0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVuQXN5bmM8VD4ocnVuOiAocmVzb2x2ZTogKHZhbHVlPzogVCB8IFByb21pc2VMaWtlPFQ+KSA9PiB2b2lkLCByZWplY3Q6IChyZWFzb24/OiBhbnkpID0+IHZvaWQpID0+IHZvaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsOiAoKSA9PiB2b2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbFRva2VuPzogQ2FuY2VsVG9rZW4pOiBQcm9taXNlPFQ+IHtcblxuXHRpZiAoIWNhbmNlbFRva2VuKSB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKHJ1bik7XG5cdH1cblx0aWYgKGNhbmNlbFRva2VuLmNhbmNlbGxlZCkge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZTxUPigoKSA9PiBudWxsKTtcblx0fVxuXHRjb25zdCBhdHRhY2htZW50ID0gY2FuY2VsVG9rZW4uYWRkSGFuZGxlcihjYW5jZWwpO1xuXHRyZXR1cm4gbmV3IFByb21pc2U8VD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHJ1bigodmFsdWU/OiBUIHwgUHJvbWlzZUxpa2U8VD4pID0+IHtcblx0XHRcdGF0dGFjaG1lbnQuZGVzdHJveSgpO1xuXHRcdFx0cmVzb2x2ZSh2YWx1ZSk7XG5cdFx0fSwgKHJlYXNvbj86IGFueSkgPT4ge1xuXHRcdFx0YXR0YWNobWVudC5kZXN0cm95KCk7XG5cdFx0XHRyZWplY3QocmVhc29uKTtcblx0XHR9KVxuXHR9KTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "./common/initExample.ts":
/*!*******************************!*\
  !*** ./common/initExample.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "../../node_modules/jquery/dist/jquery.js"));

__webpack_require__(/*! core-js/stable */ "../../node_modules/core-js/stable/index.js");

__webpack_require__(/*! regenerator-runtime/runtime */ "../../node_modules/regenerator-runtime/runtime.js");

function initExample(name, links) {
  var el = jquery_1.default('<div style="float: right; width: 600px"><b>Source:</b> </div>');
  var first = true;
  links.forEach(function (link) {
    if (first) {
      first = false;
    } else {
      el.append(', ');
    }

    el.append(jquery_1.default('<a target="_blank"></a>').text(link).attr("href", "src/".concat(name, "/").concat(link, ".txt")));
  });
  jquery_1.default("body").prepend('<div><b>Example</b></div><div><a href="javascript:location.reload()">Refresh</a></div><hr style="clear: both">').prepend(el);
}

exports.default = initExample;

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,