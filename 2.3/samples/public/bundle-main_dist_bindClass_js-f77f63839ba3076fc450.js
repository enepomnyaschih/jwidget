(self["webpackChunk"] = self["webpackChunk"] || []).push([["main_dist_bindClass_js"],{

/***/ "../../main/dist/bindClass.js":
/*!************************************!*\
  !*** ../../main/dist/bindClass.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));

var ClassUpdater = /*#__PURE__*/function (_Class_1$default) {
  _inherits(ClassUpdater, _Class_1$default);

  var _super = _createSuper(ClassUpdater);

  function ClassUpdater(el, cls, property) {
    var _this;

    _classCallCheck(this, ClassUpdater);

    _this = _super.call(this);
    _this.el = el;
    _this.cls = cls;
    _this.property = property;

    _this._update();

    _this.own(property.onChange.listen(_this._update, _assertThisInitialized(_this)));

    return _this;
  }

  _createClass(ClassUpdater, [{
    key: "_update",
    value: function _update() {
      this.el.toggleClass(this.cls, !!this.property.get());
    }
  }]);

  return ClassUpdater;
}(Class_1.default);

var ClassNameUpdater = /*#__PURE__*/function (_Class_1$default2) {
  _inherits(ClassNameUpdater, _Class_1$default2);

  var _super2 = _createSuper(ClassNameUpdater);

  function ClassNameUpdater(el, property) {
    var _this2;

    _classCallCheck(this, ClassNameUpdater);

    _this2 = _super2.call(this);
    _this2.el = el;

    _this2.el.addClass(property.get());

    _this2.own(property.onChange.listen(function (_ref) {
      var value = _ref.value,
          oldValue = _ref.oldValue;

      _this2.el.removeClass(oldValue);

      _this2.el.addClass(value);
    }));

    return _this2;
  }

  return ClassNameUpdater;
}(Class_1.default);

function bindClass(el, a, b) {
  return b != null ? new ClassUpdater(el, a, b) : new ClassNameUpdater(el, a);
}

exports.default = bindClass;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9iaW5kQ2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0YsSUFBQSxPQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQTs7SUFHTSxZOzs7OztBQUNMLHdCQUFvQixFQUFwQixFQUFxRCxHQUFyRCxFQUEwRSxRQUExRSxFQUFpRztBQUFBOztBQUFBOztBQUNoRztBQURtQixVQUFBLEVBQUEsR0FBQSxFQUFBO0FBQWlDLFVBQUEsR0FBQSxHQUFBLEdBQUE7QUFBcUIsVUFBQSxRQUFBLEdBQUEsUUFBQTs7QUFFekUsVUFBSyxPQUFMOztBQUNBLFVBQUssR0FBTCxDQUFTLFFBQVEsQ0FBQyxRQUFULENBQWtCLE1BQWxCLENBQXlCLE1BQUssT0FBOUIsZ0NBQVQ7O0FBSGdHO0FBSWhHOzs7O1dBRU8sbUJBQU87QUFDZCxXQUFLLEVBQUwsQ0FBUSxXQUFSLENBQW9CLEtBQUssR0FBekIsRUFBOEIsQ0FBQyxDQUFDLEtBQUssUUFBTCxDQUFjLEdBQWQsRUFBaEM7QUFDQTs7OztFQVR5QixPQUFBLENBQUEsTzs7SUFZckIsZ0I7Ozs7O0FBQ0wsNEJBQW9CLEVBQXBCLEVBQWlELFFBQWpELEVBQTJFO0FBQUE7O0FBQUE7O0FBQzFFO0FBRG1CLFdBQUEsRUFBQSxHQUFBLEVBQUE7O0FBRW5CLFdBQUssRUFBTCxDQUFRLFFBQVIsQ0FBaUIsUUFBUSxDQUFDLEdBQVQsRUFBakI7O0FBQ0EsV0FBSyxHQUFMLENBQVMsUUFBUSxDQUFDLFFBQVQsQ0FBa0IsTUFBbEIsQ0FBeUIsZ0JBQXNCO0FBQUEsVUFBcEIsS0FBb0IsUUFBcEIsS0FBb0I7QUFBQSxVQUFiLFFBQWEsUUFBYixRQUFhOztBQUN2RCxhQUFLLEVBQUwsQ0FBUSxXQUFSLENBQW9CLFFBQXBCOztBQUNBLGFBQUssRUFBTCxDQUFRLFFBQVIsQ0FBaUIsS0FBakI7QUFDQSxLQUhRLENBQVQ7O0FBSDBFO0FBTzFFOzs7RUFSNkIsT0FBQSxDQUFBLE87O0FBMkIvQixTQUF3QixTQUF4QixDQUFrQyxFQUFsQyxFQUEyQyxDQUEzQyxFQUFtRCxDQUFuRCxFQUEwRDtBQUN6RCxTQUFRLENBQUMsSUFBSSxJQUFOLEdBQWMsSUFBSSxZQUFKLENBQWlCLEVBQWpCLEVBQXFCLENBQXJCLEVBQXdCLENBQXhCLENBQWQsR0FBMkMsSUFBSSxnQkFBSixDQUFxQixFQUFyQixFQUF5QixDQUF6QixDQUFsRDtBQUNBOztBQUZELE9BQUEsQ0FBQSxPQUFBLEdBQUEsU0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjEgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBCaW5kYWJsZSBmcm9tICcuL0JpbmRhYmxlJztcbmltcG9ydCBDbGFzcyBmcm9tICcuL0NsYXNzJztcbmltcG9ydCBEZXN0cm95YWJsZSBmcm9tICcuL0Rlc3Ryb3lhYmxlJztcblxuY2xhc3MgQ2xhc3NVcGRhdGVyIGV4dGVuZHMgQ2xhc3Mge1xuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBDbGFzc1VwZGF0ZXJFbGVtZW50LCBwcml2YXRlIGNsczogc3RyaW5nLCBwcml2YXRlIHByb3BlcnR5OiBCaW5kYWJsZTxhbnk+KSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLl91cGRhdGUoKTtcblx0XHR0aGlzLm93bihwcm9wZXJ0eS5vbkNoYW5nZS5saXN0ZW4odGhpcy5fdXBkYXRlLCB0aGlzKSk7XG5cdH1cblxuXHRwcml2YXRlIF91cGRhdGUoKSB7XG5cdFx0dGhpcy5lbC50b2dnbGVDbGFzcyh0aGlzLmNscywgISF0aGlzLnByb3BlcnR5LmdldCgpKTtcblx0fVxufVxuXG5jbGFzcyBDbGFzc05hbWVVcGRhdGVyIGV4dGVuZHMgQ2xhc3Mge1xuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBDbGFzc05hbWVVcGRhdGVyRWxlbWVudCwgcHJvcGVydHk6IEJpbmRhYmxlPHN0cmluZz4pIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMuZWwuYWRkQ2xhc3MocHJvcGVydHkuZ2V0KCkpO1xuXHRcdHRoaXMub3duKHByb3BlcnR5Lm9uQ2hhbmdlLmxpc3Rlbigoe3ZhbHVlLCBvbGRWYWx1ZX0pID0+IHtcblx0XHRcdHRoaXMuZWwucmVtb3ZlQ2xhc3Mob2xkVmFsdWUpO1xuXHRcdFx0dGhpcy5lbC5hZGRDbGFzcyh2YWx1ZSk7XG5cdFx0fSkpO1xuXHR9XG59XG5cbi8qKlxuICogQmluZHMgcHJlc2VuY2Ugb2YgYSBDU1MgY2xhc3Mgb2YgYSBET00gZWxlbWVudCB0byBhIGJvb2xlYW4gYFByb3BlcnR5YC5cbiAqIEBwYXJhbSBlbCBET00gZWxlbWVudC5cbiAqIEBwYXJhbSBjbHMgQ1NTIGNsYXNzIG5hbWUuXG4gKiBAcGFyYW0gcHJvcGVydHkgUHJvcGVydHkgdG8gYmluZCBwcmVzZW5jZSBvZiB0aGUgQ1NTIGNsYXNzIHRvLlxuICogQHJldHVybnMgQmluZGluZyBvYmplY3QuIFlvdSBtdXN0IGRlc3Ryb3kgaXQgdG8gc3RvcCB0aGUgc3luY2hyb25pemF0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kQ2xhc3MoZWw6IENsYXNzVXBkYXRlckVsZW1lbnQsIGNsczogc3RyaW5nLCBwcm9wZXJ0eTogQmluZGFibGU8Ym9vbGVhbj4pOiBEZXN0cm95YWJsZTtcblxuLyoqXG4gKiBCaW5kcyBuYW1lIG9mIGEgQ1NTIGNsYXNzIG9mIGEgRE9NIGVsZW1lbnQgdG8gYSBzdHJpbmcgYFByb3BlcnR5YC5cbiAqIEBwYXJhbSBlbCBET00gZWxlbWVudC5cbiAqIEBwYXJhbSBjbHMgUHJvcGVydHkgY29udGFpbmluZyBhIENTUyBjbGFzcyBuYW1lLlxuICogQHJldHVybnMgQmluZGluZyBvYmplY3QuIFlvdSBtdXN0IGRlc3Ryb3kgaXQgdG8gc3RvcCB0aGUgc3luY2hyb25pemF0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kQ2xhc3MoZWw6IENsYXNzTmFtZVVwZGF0ZXJFbGVtZW50LCBjbHM6IEJpbmRhYmxlPHN0cmluZz4pOiBEZXN0cm95YWJsZTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJpbmRDbGFzcyhlbDogYW55LCBhOiBhbnksIGI/OiBhbnkpOiBEZXN0cm95YWJsZSB7XG5cdHJldHVybiAoYiAhPSBudWxsKSA/IG5ldyBDbGFzc1VwZGF0ZXIoZWwsIGEsIGIpIDogbmV3IENsYXNzTmFtZVVwZGF0ZXIoZWwsIGEpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENsYXNzVXBkYXRlckVsZW1lbnQge1xuXHR0b2dnbGVDbGFzcyhjbHM6IHN0cmluZywgdmFsdWU6IGJvb2xlYW4pOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENsYXNzTmFtZVVwZGF0ZXJFbGVtZW50IHtcblxuXHRhZGRDbGFzcyhjbHM6IHN0cmluZyk6IHZvaWQ7XG5cblx0cmVtb3ZlQ2xhc3MoY2xzOiBzdHJpbmcpOiB2b2lkO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,