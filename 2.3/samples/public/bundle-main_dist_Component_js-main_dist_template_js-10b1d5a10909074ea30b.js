(self["webpackChunk"] = self["webpackChunk"] || []).push([["main_dist_Component_js-main_dist_template_js"],{

/***/ "../../main/dist/AbstractInserter.js":
/*!*******************************************!*\
  !*** ../../main/dist/AbstractInserter.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));

var DomUtils = __importStar(__webpack_require__(/*! ./DomUtils */ "../../main/dist/DomUtils.js"));

var ArrayInserter_1 = __importDefault(__webpack_require__(/*! ./collection/ArrayInserter */ "../../main/dist/collection/ArrayInserter.js"));

var AbstractInserter = /*#__PURE__*/function (_Class_1$default) {
  _inherits(AbstractInserter, _Class_1$default);

  var _super = _createSuper(AbstractInserter);

  /**
   * @param source Child element array.
   * @param el Parent element to insert children into.
   */
  function AbstractInserter(source, el) {
    var _this;

    _classCallCheck(this, AbstractInserter);

    _this = _super.call(this);
    _this.el = el;

    _this.own(new ArrayInserter_1.default(source, {
      add: function add(item, index) {
        return _this._addItem(item, index);
      },
      remove: function remove(item, index) {
        return _this._removeItem(item, index);
      }
    }));

    return _this;
  }

  _createClass(AbstractInserter, [{
    key: "_addItem",
    value: function _addItem(item, index) {
      var parent = this.el;
      var anchor = parent.childNodes[index];

      var child = this._getElement(item);

      if (anchor != null) {
        parent.insertBefore(child, anchor);
      } else {
        parent.appendChild(child);
      }
    }
  }, {
    key: "_removeItem",
    value: function _removeItem(item, _index) {
      DomUtils.remove(this._getElement(item));
    }
  }]);

  return AbstractInserter;
}(Class_1.default);

exports.default = AbstractInserter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9BYnN0cmFjdEluc2VydGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFRixJQUFBLE9BQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsUUFBQSxHQUFBLFlBQUEsQ0FBQSxPQUFBLENBQUEsWUFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxlQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSw0QkFBQSxDQUFBLENBQUE7O0lBRzhCLGdCOzs7OztBQUM3Qjs7O0FBR0c7QUFDSCw0QkFBWSxNQUFaLEVBQXVELEVBQXZELEVBQXNFO0FBQUE7O0FBQUE7O0FBQ3JFO0FBRHNELFVBQUEsRUFBQSxHQUFBLEVBQUE7O0FBRXRELFVBQUssR0FBTCxDQUFTLElBQUksZUFBQSxDQUFBLE9BQUosQ0FBa0IsTUFBbEIsRUFBMEI7QUFDbEMsTUFBQSxHQUFHLEVBQUUsYUFBQyxJQUFELEVBQU8sS0FBUDtBQUFBLGVBQWlCLE1BQUssUUFBTCxDQUFjLElBQWQsRUFBb0IsS0FBcEIsQ0FBakI7QUFBQSxPQUQ2QjtBQUVsQyxNQUFBLE1BQU0sRUFBRSxnQkFBQyxJQUFELEVBQU8sS0FBUDtBQUFBLGVBQWlCLE1BQUssV0FBTCxDQUFpQixJQUFqQixFQUF1QixLQUF2QixDQUFqQjtBQUFBO0FBRjBCLEtBQTFCLENBQVQ7O0FBRnFFO0FBTXJFOzs7O1dBSVMsa0JBQVMsSUFBVCxFQUFrQixLQUFsQixFQUErQjtBQUN4QyxVQUFNLE1BQU0sR0FBRyxLQUFLLEVBQXBCO0FBQ0EsVUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsS0FBbEIsQ0FBZjs7QUFDQSxVQUFNLEtBQUssR0FBRyxLQUFLLFdBQUwsQ0FBaUIsSUFBakIsQ0FBZDs7QUFDQSxVQUFJLE1BQU0sSUFBSSxJQUFkLEVBQW9CO0FBQ25CLFFBQUEsTUFBTSxDQUFDLFlBQVAsQ0FBb0IsS0FBcEIsRUFBMkIsTUFBM0I7QUFDQSxPQUZELE1BRU87QUFDTixRQUFBLE1BQU0sQ0FBQyxXQUFQLENBQW1CLEtBQW5CO0FBQ0E7QUFDRDs7O1dBRVMscUJBQVksSUFBWixFQUFxQixNQUFyQixFQUFtQztBQUM1QyxNQUFBLFFBQVEsQ0FBQyxNQUFULENBQWdCLEtBQUssV0FBTCxDQUFpQixJQUFqQixDQUFoQjtBQUNBOzs7O0VBNUJ3RCxPQUFBLENBQUEsTzs7QUFBMUQsT0FBQSxDQUFBLE9BQUEsR0FBQSxnQkFBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjEgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBDbGFzcyBmcm9tICcuL0NsYXNzJztcbmltcG9ydCAqIGFzIERvbVV0aWxzIGZyb20gJy4vRG9tVXRpbHMnO1xuaW1wb3J0IEFycmF5SW5zZXJ0ZXIgZnJvbSAnLi9jb2xsZWN0aW9uL0FycmF5SW5zZXJ0ZXInO1xuaW1wb3J0IFJlYWRvbmx5QmluZGFibGVBcnJheSBmcm9tICcuL1JlYWRvbmx5QmluZGFibGVBcnJheSc7XG5cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0SW5zZXJ0ZXI8VD4gZXh0ZW5kcyBDbGFzcyB7XG5cdC8qKlxuXHQgKiBAcGFyYW0gc291cmNlIENoaWxkIGVsZW1lbnQgYXJyYXkuXG5cdCAqIEBwYXJhbSBlbCBQYXJlbnQgZWxlbWVudCB0byBpbnNlcnQgY2hpbGRyZW4gaW50by5cblx0ICovXG5cdGNvbnN0cnVjdG9yKHNvdXJjZTogUmVhZG9ubHlCaW5kYWJsZUFycmF5PFQ+LCByZWFkb25seSBlbDogSFRNTEVsZW1lbnQpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMub3duKG5ldyBBcnJheUluc2VydGVyKHNvdXJjZSwge1xuXHRcdFx0YWRkOiAoaXRlbSwgaW5kZXgpID0+IHRoaXMuX2FkZEl0ZW0oaXRlbSwgaW5kZXgpLFxuXHRcdFx0cmVtb3ZlOiAoaXRlbSwgaW5kZXgpID0+IHRoaXMuX3JlbW92ZUl0ZW0oaXRlbSwgaW5kZXgpXG5cdFx0fSkpO1xuXHR9XG5cblx0cHJvdGVjdGVkIGFic3RyYWN0IF9nZXRFbGVtZW50KGl0ZW06IFQpOiBIVE1MRWxlbWVudDtcblxuXHRwcm90ZWN0ZWQgX2FkZEl0ZW0oaXRlbTogVCwgaW5kZXg6IG51bWJlcikge1xuXHRcdGNvbnN0IHBhcmVudCA9IHRoaXMuZWw7XG5cdFx0Y29uc3QgYW5jaG9yID0gcGFyZW50LmNoaWxkTm9kZXNbaW5kZXhdO1xuXHRcdGNvbnN0IGNoaWxkID0gdGhpcy5fZ2V0RWxlbWVudChpdGVtKTtcblx0XHRpZiAoYW5jaG9yICE9IG51bGwpIHtcblx0XHRcdHBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIGFuY2hvcik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZCk7XG5cdFx0fVxuXHR9XG5cblx0cHJvdGVjdGVkIF9yZW1vdmVJdGVtKGl0ZW06IFQsIF9pbmRleDogbnVtYmVyKSB7XG5cdFx0RG9tVXRpbHMucmVtb3ZlKHRoaXMuX2dldEVsZW1lbnQoaXRlbSkpO1xuXHR9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/AbstractTemplate.js":
/*!*******************************************!*\
  !*** ../../main/dist/AbstractTemplate.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var ArrayUtils_1 = __webpack_require__(/*! ./ArrayUtils */ "../../main/dist/ArrayUtils.js");

var DomUtils = __importStar(__webpack_require__(/*! ./DomUtils */ "../../main/dist/DomUtils.js"));

var StringUtils = __importStar(__webpack_require__(/*! ./StringUtils */ "../../main/dist/StringUtils.js"));
/**
 * Abstract HTML template.
 */


var AbstractTemplate = /*#__PURE__*/function () {
  function AbstractTemplate() {
    _classCallCheck(this, AbstractTemplate);

    this.prefixes = null;
    this.parentIds = null; // The parent IDs of [key] item.

    this.childIds = null; // The child IDs of [key] item.

    this.ids = null; // IDs in dependency order.
  }
  /**
   * Flag indicating if rendering of a `Component` by this template must be followed with a DOM presence check with a
   * possible `afterAppend` method call.
   */


  _createClass(AbstractTemplate, [{
    key: "requiresAfterAppend",
    get: function get() {
      return false;
    }
  }, {
    key: "_compileAttributes",
    value: function _compileAttributes(root) {
      this.prefixes = StringUtils.parseClass(root.getAttribute("jwclass"));
      root.removeAttribute("jwclass");

      var _iterator = _createForOfIteratorHelper(this.prefixes),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var prefix = _step.value;
          DomUtils.addClass(root, prefix);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this.parentIds = new Map();
      this.childIds = new Map(); // add elements to groups and fill in dependencies

      this._walkAll(root); // resolving dependencies to a plain array of IDs


      this.ids = [];

      this._backtrace("root"); // check for trash


      var parentIds = Array.from(this.parentIds.keys()); // some ID's may not have been backtraced if they are assigned to the root element,
      // so we must backtrace them to make sure that everything is processed

      for (var _i = 0, _parentIds = parentIds; _i < _parentIds.length; _i++) {
        var id = _parentIds[_i];

        this._backtrace(id);
      }

      var remainingIds = Array.from(this.parentIds.keys());

      if (this.parentIds.size !== 0) {
        console.warn("jWidget template '" + this.prefixes.join(" ") + "' has cyclic dependencies between the next jwid's: " + _toConsumableArray(remainingIds).join(", ") + ". Can't detect the desired rendering order. Rendering elements in arbitrary order...");
        ArrayUtils_1.addAll(this.ids, remainingIds);
      }

      this.prefixes = null;
      this.parentIds = null;
      this.childIds = null;
    }
  }, {
    key: "_walkAll",
    value: function _walkAll(root) {
      var _this = this;

      this._walk(root, [], [], function (el, path) {
        var attr = el.getAttribute("jwid");

        if (!attr) {
          return null;
        }

        var ids = StringUtils.parseClass(attr);
        el.removeAttribute("jwid");
        var l = ids.length;

        if (l === 0) {
          return null;
        }

        var _iterator2 = _createForOfIteratorHelper(ids),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var id = _step2.value;

            var _iterator3 = _createForOfIteratorHelper(_this.prefixes),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var prefix = _step3.value;
                DomUtils.addClass(el, prefix + "-" + id);
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }

            _this._addElement(id, el, path);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        return ids;
      });

      this._addElement("root", root, []);
    }
  }, {
    key: "_walk",
    value: function _walk(el, path, parentIds, callback) {
      if (el.nodeType !== 1) {
        // ELEMENT
        return;
      }

      var childIds = callback(el, path);

      if (path.length === 0) {
        childIds = childIds || [];
        childIds.push("root");
      }

      if (childIds !== null) {
        var _iterator4 = _createForOfIteratorHelper(childIds),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var childId = _step4.value;
            this.parentIds.set(childId, this.parentIds.get(childId) || new Set());

            var _iterator5 = _createForOfIteratorHelper(parentIds),
                _step5;

            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                var parentId = _step5.value;
                this.childIds.set(parentId, this.childIds.get(parentId) || new Set());
                this.parentIds.get(childId).add(parentId);
                this.childIds.get(parentId).add(childId);
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        parentIds = childIds;
      }

      var index = path.length;
      path.push(0);
      var childNodes = el.childNodes;

      for (var i = 0, l = childNodes.length; i < l; ++i) {
        path[index] = i;

        this._walk(childNodes[i], path, parentIds, callback);
      }

      path.pop();
    }
  }, {
    key: "_backtrace",
    value: function _backtrace(id) {
      // if this element has already been processed, skip it
      var parentIds = this.parentIds.get(id);

      if (parentIds === undefined) {
        return;
      } // if this element still has parents, skip it


      var _iterator6 = _createForOfIteratorHelper(parentIds),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var parentId = _step6.value;

          if (this.parentIds.has(parentId)) {
            return;
          }
        } // remove the element from graph

      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      this.parentIds.delete(id);
      this.ids.push(id); // traverse into children

      var childIds = this.childIds.get(id);

      if (childIds === undefined) {
        return;
      }

      var _iterator7 = _createForOfIteratorHelper(childIds),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var childId = _step7.value;

          this._backtrace(childId);
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  }]);

  return AbstractTemplate;
}();

exports.default = AbstractTemplate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/ArraySpliceResult.js":
/*!********************************************!*\
  !*** ../../main/dist/ArraySpliceResult.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var ArrayUtils = __importStar(__webpack_require__(/*! ./ArrayUtils */ "../../main/dist/ArrayUtils.js"));
/**
 * IBindableArray.splice method result.
 */


var ArraySpliceResult = /*#__PURE__*/function () {
  /**
   * @param oldContents Old array contents.
   * @param removedSegments Removed item segments.
   * @param addedSegments Added item segments.
   */
  function ArraySpliceResult(oldContents, removedSegments, addedSegments) {
    _classCallCheck(this, ArraySpliceResult);

    this.oldContents = oldContents;
    this.removedSegments = removedSegments;
    this.addedSegments = addedSegments;
  }
  /**
   * Plain array of all removed items.
   */


  _createClass(ArraySpliceResult, [{
    key: "removedItems",
    get: function get() {
      if (!this._removedItems) {
        this._removedItems = ArrayUtils.merge(this.removedSegments.map(function (indexItems) {
          return indexItems[1];
        }));
      }

      return this._removedItems;
    }
    /**
     * Plain array of all added items.
     */

  }, {
    key: "addedItems",
    get: function get() {
      if (!this._addedItems) {
        this._addedItems = ArrayUtils.merge(this.addedSegments.map(function (indexItems) {
          return indexItems[1];
        }));
      }

      return this._addedItems;
    }
    /**
     * Removed item segments converted to index and count pairs.
     */

  }, {
    key: "removeParams",
    get: function get() {
      if (!this._removeParams) {
        this._removeParams = this.removedSegments.map(function (x) {
          return [x[0], x[1].length];
        });
      }

      return this._removeParams;
    }
    /**
     * The splice call didn't change the array.
     */

  }, {
    key: "empty",
    get: function get() {
      return this.removedSegments.length === 0 && this.addedSegments.length === 0;
    }
  }]);

  return ArraySpliceResult;
}();

exports.default = ArraySpliceResult;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9BcnJheVNwbGljZVJlc3VsdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFRixJQUFBLFVBQUEsR0FBQSxZQUFBLENBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQSxDQUFBO0FBR0E7O0FBRUc7OztJQUNrQixpQjtBQUtwQjs7OztBQUlHO0FBQ0gsNkJBQXFCLFdBQXJCLEVBQ1UsZUFEVixFQUVVLGFBRlYsRUFFdUQ7QUFBQTs7QUFGbEMsU0FBQSxXQUFBLEdBQUEsV0FBQTtBQUNYLFNBQUEsZUFBQSxHQUFBLGVBQUE7QUFDQSxTQUFBLGFBQUEsR0FBQSxhQUFBO0FBQ1Q7QUFFRDs7QUFFRzs7Ozs7U0FDSCxlQUFnQjtBQUNmLFVBQUksQ0FBQyxLQUFLLGFBQVYsRUFBeUI7QUFDeEIsYUFBSyxhQUFMLEdBQXFCLFVBQVUsQ0FBQyxLQUFYLENBQWlCLEtBQUssZUFBTCxDQUFxQixHQUFyQixDQUF5QixVQUFBLFVBQVU7QUFBQSxpQkFBSSxVQUFVLENBQUMsQ0FBRCxDQUFkO0FBQUEsU0FBbkMsQ0FBakIsQ0FBckI7QUFDQTs7QUFDRCxhQUFPLEtBQUssYUFBWjtBQUNBO0FBRUQ7O0FBRUc7Ozs7U0FDSCxlQUFjO0FBQ2IsVUFBSSxDQUFDLEtBQUssV0FBVixFQUF1QjtBQUN0QixhQUFLLFdBQUwsR0FBbUIsVUFBVSxDQUFDLEtBQVgsQ0FBaUIsS0FBSyxhQUFMLENBQW1CLEdBQW5CLENBQXVCLFVBQUEsVUFBVTtBQUFBLGlCQUFJLFVBQVUsQ0FBQyxDQUFELENBQWQ7QUFBQSxTQUFqQyxDQUFqQixDQUFuQjtBQUNBOztBQUNELGFBQU8sS0FBSyxXQUFaO0FBQ0E7QUFFRDs7QUFFRzs7OztTQUNILGVBQWdCO0FBQ2YsVUFBSSxDQUFDLEtBQUssYUFBVixFQUF5QjtBQUN4QixhQUFLLGFBQUwsR0FBcUIsS0FBSyxlQUFMLENBQXFCLEdBQXJCLENBQXlCLFVBQUEsQ0FBQztBQUFBLGlCQUFJLENBQUMsQ0FBQyxDQUFDLENBQUQsQ0FBRixFQUFPLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBSyxNQUFaLENBQUo7QUFBQSxTQUExQixDQUFyQjtBQUNBOztBQUNELGFBQU8sS0FBSyxhQUFaO0FBQ0E7QUFFRDs7QUFFRzs7OztTQUNILGVBQVM7QUFDUixhQUFRLEtBQUssZUFBTCxDQUFxQixNQUFyQixLQUFnQyxDQUFqQyxJQUF3QyxLQUFLLGFBQUwsQ0FBbUIsTUFBbkIsS0FBOEIsQ0FBN0U7QUFDQTs7Ozs7O0FBbERGLE9BQUEsQ0FBQSxPQUFBLEdBQUEsaUJBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIxIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgKiBhcyBBcnJheVV0aWxzIGZyb20gXCIuL0FycmF5VXRpbHNcIjtcbmltcG9ydCBJQmluZGFibGVBcnJheSBmcm9tIFwiLi9JQmluZGFibGVBcnJheVwiO1xuXG4vKipcbiAqIElCaW5kYWJsZUFycmF5LnNwbGljZSBtZXRob2QgcmVzdWx0LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcnJheVNwbGljZVJlc3VsdDxUPiBpbXBsZW1lbnRzIElCaW5kYWJsZUFycmF5LlNwbGljZVJlc3VsdDxUPiB7XG5cdHByaXZhdGUgX3JlbW92ZWRJdGVtczogVFtdO1xuXHRwcml2YXRlIF9hZGRlZEl0ZW1zOiBUW107XG5cdHByaXZhdGUgX3JlbW92ZVBhcmFtczogSUJpbmRhYmxlQXJyYXkuSW5kZXhDb3VudFtdO1xuXG5cdC8qKlxuXHQgKiBAcGFyYW0gb2xkQ29udGVudHMgT2xkIGFycmF5IGNvbnRlbnRzLlxuXHQgKiBAcGFyYW0gcmVtb3ZlZFNlZ21lbnRzIFJlbW92ZWQgaXRlbSBzZWdtZW50cy5cblx0ICogQHBhcmFtIGFkZGVkU2VnbWVudHMgQWRkZWQgaXRlbSBzZWdtZW50cy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKHJlYWRvbmx5IG9sZENvbnRlbnRzOiBUW10sXG5cdFx0cmVhZG9ubHkgcmVtb3ZlZFNlZ21lbnRzOiBJQmluZGFibGVBcnJheS5JbmRleEl0ZW1zPFQ+W10sXG5cdFx0cmVhZG9ubHkgYWRkZWRTZWdtZW50czogSUJpbmRhYmxlQXJyYXkuSW5kZXhJdGVtczxUPltdKSB7XG5cdH1cblxuXHQvKipcblx0ICogUGxhaW4gYXJyYXkgb2YgYWxsIHJlbW92ZWQgaXRlbXMuXG5cdCAqL1xuXHRnZXQgcmVtb3ZlZEl0ZW1zKCk6IFRbXXtcblx0XHRpZiAoIXRoaXMuX3JlbW92ZWRJdGVtcykge1xuXHRcdFx0dGhpcy5fcmVtb3ZlZEl0ZW1zID0gQXJyYXlVdGlscy5tZXJnZSh0aGlzLnJlbW92ZWRTZWdtZW50cy5tYXAoaW5kZXhJdGVtcyA9PiBpbmRleEl0ZW1zWzFdKSk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLl9yZW1vdmVkSXRlbXM7XG5cdH1cblxuXHQvKipcblx0ICogUGxhaW4gYXJyYXkgb2YgYWxsIGFkZGVkIGl0ZW1zLlxuXHQgKi9cblx0Z2V0IGFkZGVkSXRlbXMoKTogVFtde1xuXHRcdGlmICghdGhpcy5fYWRkZWRJdGVtcykge1xuXHRcdFx0dGhpcy5fYWRkZWRJdGVtcyA9IEFycmF5VXRpbHMubWVyZ2UodGhpcy5hZGRlZFNlZ21lbnRzLm1hcChpbmRleEl0ZW1zID0+IGluZGV4SXRlbXNbMV0pKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuX2FkZGVkSXRlbXM7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlZCBpdGVtIHNlZ21lbnRzIGNvbnZlcnRlZCB0byBpbmRleCBhbmQgY291bnQgcGFpcnMuXG5cdCAqL1xuXHRnZXQgcmVtb3ZlUGFyYW1zKCk6IElCaW5kYWJsZUFycmF5LkluZGV4Q291bnRbXXtcblx0XHRpZiAoIXRoaXMuX3JlbW92ZVBhcmFtcykge1xuXHRcdFx0dGhpcy5fcmVtb3ZlUGFyYW1zID0gdGhpcy5yZW1vdmVkU2VnbWVudHMubWFwKHggPT4gW3hbMF0sIHhbMV0ubGVuZ3RoXSk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLl9yZW1vdmVQYXJhbXM7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIHNwbGljZSBjYWxsIGRpZG4ndCBjaGFuZ2UgdGhlIGFycmF5LlxuXHQgKi9cblx0Z2V0IGVtcHR5KCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiAodGhpcy5yZW1vdmVkU2VnbWVudHMubGVuZ3RoID09PSAwKSAmJiAodGhpcy5hZGRlZFNlZ21lbnRzLmxlbmd0aCA9PT0gMCk7XG5cdH1cbn0iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/ArrayUtils.js":
/*!*************************************!*\
  !*** ../../main/dist/ArrayUtils.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.tryReorder = exports.trySplice = exports.move = exports.addAll = exports.merge = exports.invert = exports.isIdentity = exports.backForEach = exports.binarySearch = void 0;

var ArraySpliceResult_1 = __importDefault(__webpack_require__(/*! ./ArraySpliceResult */ "../../main/dist/ArraySpliceResult.js"));
/**
 * Determines index of the first item the `isHigher` callback returns true for. If such an item does not exist,
 * returns the array length. The input array must be ordered in such a way that all values such that
 * `!isHigher(value)` go before `isHigher(value)`.
 * @param arr Sorted array.
 * @param isHigher Should return true if the argument is "higher" than the searched value.
 * @returns Array index.
 */


function binarySearch(arr, isHigher) {
  var length = arr.length;
  var len2 = length >> 1;
  var step = 1;

  while (step <= len2) {
    step <<= 1;
  }

  var index = 0;

  while (step) {
    if (index + step <= length && !isHigher(arr[index + step - 1])) {
      index += step;
    }

    step >>= 1;
  }

  return index;
}

exports.binarySearch = binarySearch;
/**
 * Iterates through array items in backward order.
 * @param arr Array.
 * @param callback Callback.
 */

function backForEach(arr, callback) {
  for (var i = arr.length - 1; i >= 0; --i) {
    callback(arr[i], i);
  }
}

exports.backForEach = backForEach;
/**
 * @param arr Array.
 * @returns Every item in `arr` is equal to its index: `arr[i] === i`.
 */

function isIdentity(arr) {
  for (var i = 0, l = arr.length; i < l; ++i) {
    if (arr[i] !== i) {
      return false;
    }
  }

  return true;
}

exports.isIdentity = isIdentity;
/**
 * Builds a new array by the rule: `result[arr[i]] === i` and returns it.
 *
 * @param arr Array to invert.
 * @returns New inverted array.
 */

function invert(arr) {
  var l = arr.length;
  var result = new Array(l);

  for (var i = 0; i < l; ++i) {
    result[arr[i]] = i;
  }

  return result;
}

exports.invert = invert;
/**
 * Builds a new array consisting of subarray items in the same order.
 *
 * @param arrays Array of subarrays.
 * @returns Merged array.
 */

function merge(arrays) {
  var result = [];

  var _iterator = _createForOfIteratorHelper(arrays),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var array = _step.value;
      addAll(result, array);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return result;
}

exports.merge = merge;
/**
 * Adds a range of new items to an array.
 * @param arr Array to modify.
 * @param items Items to add.
 * @param index Index of an item to add the new ones before. By default, appends the items to the end of array.
 */

function addAll(arr, items, index) {
  if (index === undefined) {
    var _iterator2 = _createForOfIteratorHelper(items),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var item = _step2.value;
        arr.push(item);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  } else {
    var tail = arr.splice(index, arr.length - index);
    addAll(arr, items);
    addAll(arr, tail);
  }
}

exports.addAll = addAll;
/**
 * Moves an item in an array.
 * @param arr Array to modify.
 * @param fromIndex Index of an item to move.
 * @param toIndex Index to move the item to.
 * @returns Value of the moved item.
 */

function move(arr, fromIndex, toIndex) {
  var item = arr[fromIndex];

  if (fromIndex === toIndex) {
    return item;
  }

  arr.splice(fromIndex, 1);
  arr.splice(toIndex, 0, item);
  return item;
}

exports.move = move;
/**
 * Removes and inserts item ranges.
 * @param arr Array to modify.
 * @param segmentsToRemove Array of segments to remove sorted by index asc. Segments are removed in backward order.
 * @param segmentsToAdd Array of segments to insert sorted by index asc. Segments are inserted in forward order.
 * @returns Splice result. If the array is not modified, returns undefined.
 */

function trySplice(arr, segmentsToRemove, segmentsToAdd) {
  var optimizedSegmentsToRemove = [];
  var rlast = null;

  var _iterator3 = _createForOfIteratorHelper(segmentsToRemove),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var _rparams = _step3.value;

      if (rlast && _rparams[0] === rlast[0] + rlast[1]) {
        rlast[1] += _rparams[1];
      } else {
        rlast = [_rparams[0], _rparams[1]];
        optimizedSegmentsToRemove.push(rlast);
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  var optimizedSegmentsToAdd = [];
  var alast = null;

  var _iterator4 = _createForOfIteratorHelper(segmentsToAdd),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var _aparams = _step4.value;

      if (alast && _aparams[0] === alast[0] + alast[1].length) {
        addAll(alast[1], _aparams[1]);
      } else {
        alast = [_aparams[0], _aparams[1].concat()];
        optimizedSegmentsToAdd.push(alast);
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  var oldContents = arr.concat();
  var removedSegments = [];

  for (var i = optimizedSegmentsToRemove.length - 1; i >= 0; --i) {
    var rparams = optimizedSegmentsToRemove[i];

    if (rparams[1] === 0) {
      continue;
    }

    var index = rparams[0];
    var items = arr.splice(index, rparams[1]);
    removedSegments.push([index, items]);
  }

  var addedSegments = [];

  for (var _i = 0, _optimizedSegmentsToA = optimizedSegmentsToAdd; _i < _optimizedSegmentsToA.length; _i++) {
    var aparams = _optimizedSegmentsToA[_i];

    if (!aparams[1].length) {
      continue;
    }

    addAll(arr, aparams[1], aparams[0]);
    addedSegments.push(aparams);
  }

  if (removedSegments.length === 0 && addedSegments.length === 0) {
    return undefined;
  }

  removedSegments.reverse();
  return new ArraySpliceResult_1.default(oldContents, removedSegments, addedSegments);
}

exports.trySplice = trySplice;
/**
 * Reorders array items.
 * @param arr Array to modify.
 * @param indexArray Index array. Item with index `i` will be moved to index `indexArray[i]`.
 * Must contain all indexes from 0 to (length - 1).
 * @returns Old array contents. If the array is not modified, returns undefined.
 */

function tryReorder(arr, indexArray) {
  var length = arr.length;

  if (isIdentity(indexArray)) {
    return undefined;
  }

  var oldContents = arr.concat();

  for (var i = 0; i < length; ++i) {
    arr[indexArray[i]] = oldContents[i];
  }

  return oldContents;
}

exports.tryReorder = tryReorder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/BindableArray.js":
/*!****************************************!*\
  !*** ../../main/dist/BindableArray.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var ArraySpliceResult_1 = __importDefault(__webpack_require__(/*! ./ArraySpliceResult */ "../../main/dist/ArraySpliceResult.js"));

var ArrayUtils = __importStar(__webpack_require__(/*! ./ArrayUtils */ "../../main/dist/ArrayUtils.js"));

var ArrayUtils_1 = __webpack_require__(/*! ./ArrayUtils */ "../../main/dist/ArrayUtils.js");

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));

var Dispatcher_1 = __importDefault(__webpack_require__(/*! ./Dispatcher */ "../../main/dist/Dispatcher.js"));

var index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");

var Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));
/**
 * Implementation of a bindable wrapper over a native array.
 */


var BindableArray = /*#__PURE__*/function (_Class_1$default) {
  _inherits(BindableArray, _Class_1$default);

  var _super = _createSuper(BindableArray);

  function BindableArray(a, b) {
    var _this;

    _classCallCheck(this, BindableArray);

    _this = _super.call(this);
    _this._ownsValues = false;

    if (typeof a === "boolean") {
      b = a;
      a = null;
    }

    var contents = a;
    var silent = b;
    _this._native = _toConsumableArray(contents !== null && contents !== void 0 ? contents : []);
    _this._length = _this.own(new Property_1.default(_this._native.length, silent));
    _this._onSplice = Dispatcher_1.default.make(silent);
    _this._onReplace = Dispatcher_1.default.make(silent);
    _this._onMove = Dispatcher_1.default.make(silent);
    _this._onReorder = Dispatcher_1.default.make(silent);
    _this._onClear = Dispatcher_1.default.make(silent);
    _this._onChange = Dispatcher_1.default.make(silent);
    return _this;
  }

  _createClass(BindableArray, [{
    key: "destroyObject",
    value: function destroyObject() {
      this.clear();

      _get(_getPrototypeOf(BindableArray.prototype), "destroyObject", this).call(this);
    }
  }, {
    key: Symbol.iterator,
    value: function value() {
      return this._native[Symbol.iterator]();
    }
  }, {
    key: "silent",
    get: function get() {
      return this.onChange.dummy;
    }
  }, {
    key: "length",
    get: function get() {
      return this._length;
    }
  }, {
    key: "native",
    get: function get() {
      return this._native;
    }
  }, {
    key: "onSplice",
    get: function get() {
      return this._onSplice;
    }
  }, {
    key: "onReplace",
    get: function get() {
      return this._onReplace;
    }
  }, {
    key: "onMove",
    get: function get() {
      return this._onMove;
    }
  }, {
    key: "onReorder",
    get: function get() {
      return this._onReorder;
    }
  }, {
    key: "onClear",
    get: function get() {
      return this._onClear;
    }
  }, {
    key: "onChange",
    get: function get() {
      return this._onChange;
    }
  }, {
    key: "ownValues",
    value: function ownValues() {
      this._ownsValues = true;
      return this;
    }
  }, {
    key: "get",
    value: function get(index) {
      return this._native[index];
    }
  }, {
    key: "includes",
    value: function includes(value) {
      return this._native.includes(value);
    }
  }, {
    key: "indexOf",
    value: function indexOf(value) {
      return this._native.indexOf(value);
    }
  }, {
    key: "lastIndexOf",
    value: function lastIndexOf(value) {
      return this._native.lastIndexOf(value);
    }
  }, {
    key: "every",
    value: function every(callback) {
      return this._native.every(callback);
    }
  }, {
    key: "some",
    value: function some(callback) {
      return this._native.some(callback);
    }
  }, {
    key: "forEach",
    value: function forEach(callback) {
      this._native.forEach(callback);
    }
  }, {
    key: "find",
    value: function find(callback) {
      return this._native.find(callback);
    }
  }, {
    key: "findIndex",
    value: function findIndex(callback) {
      return this._native.findIndex(callback);
    }
  }, {
    key: "reduce",
    value: function reduce(callback, initial) {
      return this._native.reduce(callback, initial);
    }
  }, {
    key: "reduceRight",
    value: function reduceRight(callback, initial) {
      return this._native.reduceRight(callback, initial);
    }
  }, {
    key: "add",
    value: function add(value, index) {
      this.addAll([value], index);
    }
  }, {
    key: "addAll",
    value: function addAll(values, index) {
      if (index === undefined) {
        index = this._native.length;
      }

      this.trySplice([], [[index, values]]);
    }
  }, {
    key: "set",
    value: function set(index, newValue) {
      var result = this.trySet(index, newValue);
      return result !== undefined ? result : this._native[index];
    }
  }, {
    key: "trySet",
    value: function trySet(index, newValue) {
      var oldValue = this._native[index];

      if (newValue === oldValue) {
        return undefined;
      }

      this._native[index] = newValue;

      this._onReplace.dispatch({
        index: index,
        oldValue: oldValue,
        newValue: newValue
      });

      this._onChange.dispatch();

      if (this._ownsValues) {
        oldValue.destroy();
      }

      return oldValue;
    }
  }, {
    key: "remove",
    value: function remove(index) {
      return this.tryRemoveAll(index, 1)[0];
    }
  }, {
    key: "removeAll",
    value: function removeAll(index, count) {
      return this.tryRemoveAll(index, count) || [];
    }
  }, {
    key: "tryRemoveAll",
    value: function tryRemoveAll(index, count) {
      var result = this.trySplice([[index, count]], []);
      return result !== undefined ? result.removedSegments[0][1].concat() : undefined;
    }
  }, {
    key: "removeValues",
    value: function removeValues(values) {
      var valueSet = new Set(values);

      var newContents = this._native.filter(function (item) {
        return !valueSet.has(item);
      });

      this.performFilter(newContents);
    }
  }, {
    key: "move",
    value: function move(fromIndex, toIndex) {
      this.tryMove(fromIndex, toIndex);
      return this._native[toIndex];
    }
  }, {
    key: "tryMove",
    value: function tryMove(fromIndex, toIndex) {
      if (fromIndex === toIndex) {
        return undefined;
      }

      var value = this._native[fromIndex];

      this._native.splice(fromIndex, 1);

      this._native.splice(toIndex, 0, value);

      this._onMove.dispatch({
        fromIndex: fromIndex,
        toIndex: toIndex,
        value: value
      });

      this._onChange.dispatch();

      return value;
    }
  }, {
    key: "clear",
    value: function clear() {
      if (this._native.length === 0) {
        return [];
      }

      var oldContents = this._native.concat();

      this._native.splice(0, this._native.length);

      this._length.set(0);

      this._onClear.dispatch(oldContents);

      this._onChange.dispatch();

      if (this._ownsValues) {
        ArrayUtils.backForEach(oldContents, index_1.destroy);
      }

      return oldContents;
    }
  }, {
    key: "splice",
    value: function splice(segmentsToRemove, segmentsToAdd) {
      var result = this.trySplice(segmentsToRemove, segmentsToAdd);
      return result !== undefined ? result : new ArraySpliceResult_1.default(this._native.concat(), [], []);
    }
  }, {
    key: "trySplice",
    value: function trySplice(segmentsToRemove, segmentsToAdd) {
      var result = ArrayUtils.trySplice(this._native, segmentsToRemove, segmentsToAdd);

      if (result === undefined) {
        return undefined;
      }

      this._length.set(this._native.length);

      if (this._length.get() === 0) {
        this._onClear.dispatch(result.oldContents);
      } else {
        this._onSplice.dispatch(result);
      }

      this._onChange.dispatch();

      if (this._ownsValues) {
        ArrayUtils.backForEach(result.removedItems, index_1.destroy);
      }

      return result;
    }
  }, {
    key: "reorder",
    value: function reorder(indexMapping) {
      this.tryReorder(indexMapping);
    }
  }, {
    key: "tryReorder",
    value: function tryReorder(indexMapping) {
      var oldContents = ArrayUtils.tryReorder(this._native, indexMapping);

      if (oldContents === undefined) {
        return undefined;
      }

      this._onReorder.dispatch({
        indexMapping: indexMapping,
        oldContents: oldContents
      });

      this._onChange.dispatch();

      return oldContents;
    }
  }, {
    key: "detectSplice",
    value: function detectSplice(newContents) {
      var segmentsToRemove = [];
      var segmentsToAdd = [];
      var oldIndexMap = new Map();

      for (var i = 0, l = this._native.length; i < l; ++i) {
        oldIndexMap.set(this._native[i], i);
      }

      var nextOldIndex = 0;
      var offset = 0;
      var newItemBuffer = [];

      function flush() {
        if (newItemBuffer.length === 0) {
          return;
        }

        segmentsToAdd.push([offset + nextOldIndex, newItemBuffer]);
        offset += newItemBuffer.length;
        newItemBuffer = [];
      }

      function testRemove(oldIndex) {
        if (oldIndex > nextOldIndex) {
          var count = oldIndex - nextOldIndex;
          segmentsToRemove.push([nextOldIndex, count]);
          offset -= count;
        }
      }

      for (var newIndex = 0, _l = newContents.length; newIndex < _l; ++newIndex) {
        var item = newContents[newIndex];
        var oldIndex = oldIndexMap.get(item);

        if (oldIndex === undefined || oldIndex < nextOldIndex) {
          newItemBuffer.push(item);
        } else {
          flush();
          testRemove(oldIndex);
          nextOldIndex = oldIndex + 1;
        }
      }

      flush();
      testRemove(this._native.length);

      if (segmentsToRemove.length !== 0 || segmentsToAdd.length !== 0) {
        return {
          segmentsToRemove: segmentsToRemove,
          segmentsToAdd: segmentsToAdd
        };
      }

      return undefined;
    }
  }, {
    key: "detectFilter",
    value: function detectFilter(newContents) {
      var segmentsToRemove = [];
      var oldIndex = 0;
      var oldLength = this._native.length;
      var newLength = newContents.length;

      for (var newIndex = 0; newIndex <= newLength; ++newIndex) {
        var newItem = newContents[newIndex];
        var count = 0;

        while (oldIndex + count < oldLength && this._native[oldIndex + count] !== newItem) {
          ++count;
        }

        if (count !== 0) {
          segmentsToRemove.push([oldIndex, count]);
        }

        oldIndex += count + 1;
      }

      return segmentsToRemove.length !== 0 ? segmentsToRemove : undefined;
    }
  }, {
    key: "detectReorder",
    value: function detectReorder(newContents) {
      var indexArray = [];
      var newIndexMap = new Map();

      for (var i = 0, l = newContents.length; i < l; ++i) {
        newIndexMap.set(newContents[i], i);
      }

      for (var _i = 0, _l2 = this._native.length; _i < _l2; ++_i) {
        indexArray.push(newIndexMap.get(this._native[_i]));
      }

      return ArrayUtils_1.isIdentity(indexArray) ? undefined : indexArray;
    }
  }, {
    key: "detectSort",
    value: function detectSort() {
      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : index_1.identity;
      var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

      var pairs = this._native.map(function (item, index) {
        return [index, callback(item, index)];
      });

      pairs.sort(function (x, y) {
        return order * index_1.cmp(x[1], y[1]);
      });
      var indexes = pairs.map(function (pair) {
        return pair[0];
      });
      return ArrayUtils_1.isIdentity(indexes) ? undefined : ArrayUtils_1.invert(indexes);
    }
  }, {
    key: "detectSortComparing",
    value: function detectSortComparing() {
      var compare = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : index_1.cmp;
      var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

      var pairs = this._native.map(function (item, index) {
        return [index, item];
      });

      pairs.sort(function (x, y) {
        return order * compare(x[1], y[1], x[0], y[0]);
      });
      var indexes = pairs.map(function (pair) {
        return pair[0];
      });
      return ArrayUtils_1.isIdentity(indexes) ? undefined : ArrayUtils_1.invert(indexes);
    }
  }, {
    key: "performSplice",
    value: function performSplice(newContents) {
      var params = this.detectSplice(newContents);

      if (params !== undefined) {
        this.trySplice(params.segmentsToRemove, params.segmentsToAdd);
      }
    }
  }, {
    key: "performFilter",
    value: function performFilter(newContents) {
      var params = this.detectFilter(newContents);

      if (params !== undefined) {
        this.trySplice(params, []);
      }
    }
  }, {
    key: "performReorder",
    value: function performReorder(newContents) {
      var indexMapping = this.detectReorder(newContents);

      if (indexMapping !== undefined) {
        this.tryReorder(indexMapping);
      }
    }
  }, {
    key: "sort",
    value: function sort(callback, order) {
      var indexMapping = this.detectSort(callback, order);

      if (indexMapping !== undefined) {
        this.tryReorder(indexMapping);
      }
    }
  }, {
    key: "sortComparing",
    value: function sortComparing(compare, order) {
      var indexMapping = this.detectSortComparing(compare, order);

      if (indexMapping !== undefined) {
        this.tryReorder(indexMapping);
      }
    }
  }, {
    key: "reverse",
    value: function reverse() {
      if (this.silent) {
        this._native.reverse();

        return;
      }

      var length = this.length.get();
      var indices = new Array(length);

      for (var i = 0; i < length; ++i) {
        indices[i] = length - i - 1;
      }

      this.reorder(indices);
    }
  }]);

  return BindableArray;
}(Class_1.default);

exports.default = BindableArray;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/BindableMap.js":
/*!**************************************!*\
  !*** ../../main/dist/BindableMap.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));

var Dispatcher_1 = __importDefault(__webpack_require__(/*! ./Dispatcher */ "../../main/dist/Dispatcher.js"));

var Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));
/**
 * Implementation of a bindable wrapper over a native map.
 */


var BindableMap = /*#__PURE__*/function (_Class_1$default) {
  _inherits(BindableMap, _Class_1$default);

  var _super = _createSuper(BindableMap);

  function BindableMap(a, b) {
    var _this;

    _classCallCheck(this, BindableMap);

    _this = _super.call(this);
    _this._ownsValues = false;

    if (typeof a === "boolean") {
      b = a;
      a = null;
    }

    var contents = a;
    var silent = b;
    _this._native = new Map(contents);
    _this._size = _this.own(new Property_1.default(_this._native.size, silent));
    _this._onSplice = Dispatcher_1.default.make(silent);
    _this._onReindex = Dispatcher_1.default.make(silent);
    _this._onClear = Dispatcher_1.default.make(silent);
    _this._onChange = Dispatcher_1.default.make(silent);
    return _this;
  }

  _createClass(BindableMap, [{
    key: "destroyObject",
    value: function destroyObject() {
      this.tryClear();

      _get(_getPrototypeOf(BindableMap.prototype), "destroyObject", this).call(this);
    }
  }, {
    key: Symbol.iterator,
    value: function value() {
      return this._native[Symbol.iterator]();
    }
  }, {
    key: "silent",
    get: function get() {
      return this.onChange.dummy;
    }
  }, {
    key: "size",
    get: function get() {
      return this._size;
    }
  }, {
    key: "native",
    get: function get() {
      return this._native;
    }
  }, {
    key: "onSplice",
    get: function get() {
      return this._onSplice;
    }
  }, {
    key: "onReindex",
    get: function get() {
      return this._onReindex;
    }
  }, {
    key: "onClear",
    get: function get() {
      return this._onClear;
    }
  }, {
    key: "onChange",
    get: function get() {
      return this._onChange;
    }
  }, {
    key: "ownValues",
    value: function ownValues() {
      this._ownsValues = true;
      return this;
    }
  }, {
    key: "has",
    value: function has(key) {
      return this._native.has(key);
    }
  }, {
    key: "get",
    value: function get(key) {
      return this._native.get(key);
    }
  }, {
    key: "keys",
    value: function keys() {
      return this._native.keys();
    }
  }, {
    key: "values",
    value: function values() {
      return this._native.values();
    }
  }, {
    key: "entries",
    value: function entries() {
      return this._native.entries();
    }
  }, {
    key: "forEach",
    value: function forEach(callback) {
      this._native.forEach(callback);
    }
  }, {
    key: "set",
    value: function set(key, value) {
      var result = this.trySet(key, value);
      return result !== undefined ? result.value : this._native.get(key);
    }
  }, {
    key: "trySet",
    value: function trySet(key, value) {
      var oldValue = this._native.get(key);

      if (value === oldValue) {
        return undefined;
      }

      this._native.set(key, value);

      if (oldValue === undefined) {
        this._size.set(this._size.get() + 1);
      }

      if (!this.silent) {
        var removedEntries = new Map();

        if (oldValue !== undefined) {
          removedEntries.set(key, oldValue);
        }

        var addedEntries = new Map();
        addedEntries.set(key, value);

        this._onSplice.dispatch({
          deletedEntries: removedEntries,
          addedEntries: addedEntries
        });

        this._onChange.dispatch();
      }

      if (oldValue !== undefined && this._ownsValues) {
        oldValue.destroy();
      }

      return {
        value: oldValue
      };
    }
  }, {
    key: "setAll",
    value: function setAll(entries) {
      if (!this.silent) {
        this.trySetAll(entries);
        return;
      }

      var _iterator = _createForOfIteratorHelper(entries),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
              key = _step$value[0],
              value = _step$value[1];

          this.trySet(key, value);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "trySetAll",
    value: function trySetAll(entries) {
      return this.trySplice([], entries);
    }
  }, {
    key: "setKey",
    value: function setKey(oldKey, newKey) {
      var value = this.trySetKey(oldKey, newKey);
      return value !== undefined ? value : this._native.get(newKey);
    }
  }, {
    key: "trySetKey",
    value: function trySetKey(oldKey, newKey) {
      if (oldKey === newKey) {
        return undefined;
      }

      var value = this._native.get(oldKey);

      if (value === undefined) {
        return undefined;
      }

      this._native.delete(oldKey);

      this._native.set(newKey, value);

      if (!this.silent) {
        this._onReindex.dispatch(new Map([[oldKey, newKey]]));

        this._onChange.dispatch();
      }

      return value;
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      var value = this._native.get(key);

      if (value === undefined) {
        return undefined;
      }

      this._native.delete(key);

      this._size.set(this._size.get() - 1);

      if (!this.silent) {
        var spliceResult = {
          addedEntries: new Map(),
          deletedEntries: new Map([[key, value]])
        };

        this._onSplice.dispatch(spliceResult);

        this._onChange.dispatch();
      }

      if (this._ownsValues) {
        value.destroy();
      }

      return value;
    }
  }, {
    key: "deleteAll",
    value: function deleteAll(keys) {
      if (!this.silent) {
        this.tryDeleteAll(keys);
        return;
      }

      var _iterator2 = _createForOfIteratorHelper(keys),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var key = _step2.value;
          this.delete(key);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "tryDeleteAll",
    value: function tryDeleteAll(keys) {
      var spliceResult = this.trySplice(keys, new Map());
      return spliceResult !== undefined ? spliceResult.deletedEntries : undefined;
    }
  }, {
    key: "clear",
    value: function clear() {
      var _a;

      return (_a = this.tryClear()) !== null && _a !== void 0 ? _a : new Map();
    }
  }, {
    key: "tryClear",
    value: function tryClear() {
      if (this._size.get() === 0) {
        return undefined;
      }

      var oldContents = new Map(this._native);

      this._native.clear();

      this._size.set(0);

      this._onClear.dispatch(oldContents);

      this._onChange.dispatch();

      if (this._ownsValues) {
        oldContents.forEach(function (value) {
          value.destroy();
        });
      }

      return oldContents;
    }
  }, {
    key: "splice",
    value: function splice(keysToDelete, entriesToUpdate) {
      var spliceResult = this.trySplice(keysToDelete, entriesToUpdate);
      return spliceResult !== undefined ? spliceResult : {
        deletedEntries: new Map(),
        addedEntries: new Map()
      };
    }
  }, {
    key: "trySplice",
    value: function trySplice(keysToDelete, entriesToUpdate) {
      var removedEntries = new Map();

      var _iterator3 = _createForOfIteratorHelper(keysToDelete),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var key = _step3.value;

          if (entriesToUpdate.has(key)) {
            continue;
          }

          var value = this._native.get(key);

          if (value === undefined) {
            continue;
          }

          this._native.delete(key);

          removedEntries.set(key, value);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      var addedEntries = new Map();

      var _iterator4 = _createForOfIteratorHelper(entriesToUpdate),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _step4$value = _slicedToArray(_step4.value, 2),
              _key = _step4$value[0],
              _value = _step4$value[1];

          var oldValue = this._native.get(_key);

          if (_value === oldValue) {
            continue;
          }

          this._native.set(_key, _value);

          addedEntries.set(_key, _value);

          if (oldValue !== undefined) {
            removedEntries.set(_key, oldValue);
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      if (removedEntries.size === 0 && addedEntries.size === 0) {
        return undefined;
      }

      var spliceResult = {
        deletedEntries: removedEntries,
        addedEntries: addedEntries
      };

      this._size.set(this._size.get() + addedEntries.size - removedEntries.size);

      if (this._size.get() === 0) {
        this._onClear.dispatch(removedEntries);
      } else {
        this._onSplice.dispatch(spliceResult);
      }

      this._onChange.dispatch();

      if (this._ownsValues) {
        removedEntries.forEach(function (value) {
          value.destroy();
        });
      }

      return spliceResult;
    }
  }, {
    key: "reindex",
    value: function reindex(keyMapping) {
      var result = this.tryReindex(keyMapping);
      return result !== undefined ? result : new Map();
    }
  }, {
    key: "tryReindex",
    value: function tryReindex(keyMapping) {
      var sanitizedMapping = new Map();

      var _iterator5 = _createForOfIteratorHelper(keyMapping),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _step5$value = _slicedToArray(_step5.value, 2),
              oldKey = _step5$value[0],
              newKey = _step5$value[1];

          if (newKey !== undefined && newKey !== oldKey && this._native.has(oldKey)) {
            sanitizedMapping.set(oldKey, newKey);
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      if (sanitizedMapping.size === 0) {
        return undefined;
      }

      var newKeys = new Set();

      var _iterator6 = _createForOfIteratorHelper(sanitizedMapping.values()),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var _newKey = _step6.value;
          newKeys.add(_newKey);
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      var removedKeys = [];
      var updatedEntries = new Map();

      var _iterator7 = _createForOfIteratorHelper(sanitizedMapping),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _step7$value = _slicedToArray(_step7.value, 2),
              _oldKey = _step7$value[0],
              _newKey2 = _step7$value[1];

          updatedEntries.set(_newKey2, this._native.get(_oldKey));

          if (!newKeys.has(_oldKey)) {
            removedKeys.push(_oldKey);
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      for (var _i2 = 0, _removedKeys = removedKeys; _i2 < _removedKeys.length; _i2++) {
        var key = _removedKeys[_i2];

        this._native.delete(key);
      }

      var _iterator8 = _createForOfIteratorHelper(updatedEntries),
          _step8;

      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var _step8$value = _slicedToArray(_step8.value, 2),
              _key2 = _step8$value[0],
              value = _step8$value[1];

          this._native.set(_key2, value);
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }

      this._onReindex.dispatch(sanitizedMapping);

      this._onChange.dispatch();

      return sanitizedMapping;
    }
  }, {
    key: "detectSplice",
    value: function detectSplice(newContents) {
      var keysToRemove = [];
      var entriesToUpdate = new Map();

      var _iterator9 = _createForOfIteratorHelper(this._native.keys()),
          _step9;

      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var key = _step9.value;

          if (!newContents.has(key)) {
            keysToRemove.push(key);
          }
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }

      var _iterator10 = _createForOfIteratorHelper(newContents),
          _step10;

      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var _step10$value = _slicedToArray(_step10.value, 2),
              _key3 = _step10$value[0],
              value = _step10$value[1];

          if (value !== this._native.get(_key3)) {
            entriesToUpdate.set(_key3, value);
          }
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }

      return keysToRemove.length === 0 && entriesToUpdate.size === 0 ? undefined : {
        keysToDelete: keysToRemove,
        entriesToUpdate: entriesToUpdate
      };
    }
  }, {
    key: "detectReindex",
    value: function detectReindex(newContents) {
      var newValueKeys = new Map();

      var _iterator11 = _createForOfIteratorHelper(newContents),
          _step11;

      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var _step11$value = _slicedToArray(_step11.value, 2),
              key = _step11$value[0],
              value = _step11$value[1];

          newValueKeys.set(value, key);
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }

      var keyMap = new Map();

      var _iterator12 = _createForOfIteratorHelper(this._native),
          _step12;

      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var _step12$value = _slicedToArray(_step12.value, 2),
              oldKey = _step12$value[0],
              _value2 = _step12$value[1];

          var newKey = newValueKeys.get(_value2);

          if (oldKey !== newKey) {
            keyMap.set(oldKey, newKey);
          }
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }

      return keyMap.size === 0 ? undefined : keyMap;
    }
  }, {
    key: "performSplice",
    value: function performSplice(newContents) {
      var params = this.detectSplice(newContents);

      if (params !== undefined) {
        this.trySplice(params.keysToDelete, params.entriesToUpdate);
      }
    }
  }, {
    key: "performReindex",
    value: function performReindex(newContents) {
      var keyMap = this.detectReindex(newContents);

      if (keyMap !== undefined) {
        this.tryReindex(keyMap);
      }
    }
  }]);

  return BindableMap;
}(Class_1.default);

exports.default = BindableMap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/BindableSet.js":
/*!**************************************!*\
  !*** ../../main/dist/BindableSet.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));

var Dispatcher_1 = __importDefault(__webpack_require__(/*! ./Dispatcher */ "../../main/dist/Dispatcher.js"));

var index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");

var Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));
/**
 * Implementation of a bindable wrapper over a native set.
 */


var BindableSet = /*#__PURE__*/function (_Class_1$default) {
  _inherits(BindableSet, _Class_1$default);

  var _super = _createSuper(BindableSet);

  function BindableSet(a, b) {
    var _this;

    _classCallCheck(this, BindableSet);

    _this = _super.call(this);
    _this._ownsValues = false;

    if (typeof a === "boolean") {
      b = a;
      a = null;
    }

    var contents = a;
    var silent = b;
    _this._native = new Set(contents);
    _this._size = _this.own(new Property_1.default(_this._native.size, silent));
    _this._onSplice = Dispatcher_1.default.make(silent);
    _this._onClear = Dispatcher_1.default.make(silent);
    _this._onChange = Dispatcher_1.default.make(silent);
    return _this;
  }

  _createClass(BindableSet, [{
    key: "destroyObject",
    value: function destroyObject() {
      this.tryClear();

      _get(_getPrototypeOf(BindableSet.prototype), "destroyObject", this).call(this);
    }
  }, {
    key: Symbol.iterator,
    value: function value() {
      return this._native[Symbol.iterator]();
    }
  }, {
    key: "silent",
    get: function get() {
      return this.onChange.dummy;
    }
  }, {
    key: "size",
    get: function get() {
      return this._size;
    }
  }, {
    key: "native",
    get: function get() {
      return this._native;
    }
  }, {
    key: "onSplice",
    get: function get() {
      return this._onSplice;
    }
  }, {
    key: "onClear",
    get: function get() {
      return this._onClear;
    }
  }, {
    key: "onChange",
    get: function get() {
      return this._onChange;
    }
  }, {
    key: "ownValues",
    value: function ownValues() {
      this._ownsValues = true;
      return this;
    }
  }, {
    key: "has",
    value: function has(value) {
      return this._native.has(value);
    }
  }, {
    key: "forEach",
    value: function forEach(callback) {
      this._native.forEach(callback);
    }
  }, {
    key: "add",
    value: function add(value) {
      return this.trySplice([], [value]) !== undefined;
    }
  }, {
    key: "addAll",
    value: function addAll(values) {
      var result = this.tryAddAll(values);
      return result !== undefined ? result : new Set();
    }
  }, {
    key: "tryAddAll",
    value: function tryAddAll(values) {
      var spliceResult = this.trySplice([], values);
      return spliceResult !== undefined ? spliceResult.addedValues : undefined;
    }
  }, {
    key: "delete",
    value: function _delete(value) {
      return this.trySplice([value], []) !== undefined;
    }
  }, {
    key: "deleteAll",
    value: function deleteAll(values) {
      var result = this.tryDeleteAll(values);
      return result !== undefined ? result : new Set();
    }
  }, {
    key: "tryDeleteAll",
    value: function tryDeleteAll(values) {
      var spliceResult = this.trySplice(values, []);
      return spliceResult !== undefined ? spliceResult.deletedValues : undefined;
    }
  }, {
    key: "clear",
    value: function clear() {
      var _a;

      return (_a = this.tryClear()) !== null && _a !== void 0 ? _a : new Set();
    }
  }, {
    key: "tryClear",
    value: function tryClear() {
      if (this._size.get() === 0) {
        return undefined;
      }

      var oldContents = new Set(this._native);

      this._native.clear();

      this._size.set(0);

      this._onClear.dispatch(oldContents);

      this._onChange.dispatch();

      if (this._ownsValues) {
        oldContents.forEach(index_1.destroy);
      }

      return oldContents;
    }
  }, {
    key: "splice",
    value: function splice(valuesToDelete, valuesToAdd) {
      var spliceResult = this.trySplice(valuesToDelete, valuesToAdd);
      return spliceResult !== undefined ? spliceResult : {
        addedValues: new Set(),
        deletedValues: new Set()
      };
    }
  }, {
    key: "trySplice",
    value: function trySplice(valuesToDelete, valuesToAdd) {
      var addedValues = new Set();

      var _iterator = _createForOfIteratorHelper(valuesToAdd),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var value = _step.value;

          if (!this._native.has(value)) {
            this._native.add(value);

            addedValues.add(value);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var valuesToAddSet = new Set(valuesToAdd);
      var deletedValues = new Set();

      var _iterator2 = _createForOfIteratorHelper(valuesToDelete),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _value = _step2.value;

          if (!valuesToAddSet.has(_value) && this._native.has(_value)) {
            this._native.delete(_value);

            deletedValues.add(_value);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      if (deletedValues.size === 0 && addedValues.size === 0) {
        return undefined;
      }

      var spliceResult = {
        deletedValues: deletedValues,
        addedValues: addedValues
      };

      this._size.set(this._size.get() - deletedValues.size + addedValues.size);

      if (this._size.get() === 0) {
        this._onClear.dispatch(deletedValues);
      } else {
        this._onSplice.dispatch(spliceResult);
      }

      this._onChange.dispatch();

      if (this._ownsValues) {
        deletedValues.forEach(index_1.destroy);
      }

      return spliceResult;
    }
  }, {
    key: "detectSplice",
    value: function detectSplice(newContents) {
      var valuesToDelete = new Set();
      var valuesToAdd = new Set();
      var oldValues = this._native;
      var newValues = new Set(newContents);

      var _iterator3 = _createForOfIteratorHelper(oldValues),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var value = _step3.value;

          if (!newValues.has(value)) {
            valuesToDelete.add(value);
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      var _iterator4 = _createForOfIteratorHelper(newValues),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _value2 = _step4.value;

          if (!oldValues.has(_value2)) {
            valuesToAdd.add(_value2);
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return valuesToDelete.size === 0 && valuesToAdd.size === 0 ? undefined : {
        valuesToDelete: valuesToDelete,
        valuesToAdd: valuesToAdd
      };
    }
  }, {
    key: "performSplice",
    value: function performSplice(newContents) {
      var spliceParams = this.detectSplice(newContents);

      if (spliceParams !== undefined) {
        this.trySplice(spliceParams.valuesToDelete, spliceParams.valuesToAdd);
      }
    }
  }]);

  return BindableSet;
}(Class_1.default);

exports.default = BindableSet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/Class.js":
/*!********************************!*\
  !*** ../../main/dist/Class.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
/**
 * Introduces object aggregation support.
 * If you call `a.own(b)`, then **b** is destroyed automatically on **a** destruction.
 * You can aggregate any object implementing `Destroyable`.
 *
 * See online documentation for details.
 */

var Class = /*#__PURE__*/function () {
  function Class() {
    _classCallCheck(this, Class);

    this._ownagePool = null;
  }
  /**
   * Aggregates the object. It means that the specified object is automatically destroyed
   * on this object destruction. The aggregated objects are destroyed in reverse order.
   * Returns the aggregated object, which makes it easy to use in field definition.
   *
   * @param obj Object to aggregate.
   */


  _createClass(Class, [{
    key: "own",
    value: function own(obj) {
      this._ownagePool = this._ownagePool || [];

      this._ownagePool.push(obj);

      return obj;
    }
    /**
     * Aggregates the object. It means that the specified object is automatically destroyed
     * on this object destruction. The aggregated objects are destroyed in reverse order.
     * Returns this object, which makes it easy to use in object instantiation.
     *
     * @param obj Object to aggregate.
     */

  }, {
    key: "owning",
    value: function owning(obj) {
      this.own(obj);
      return this;
    }
    /**
     * Class destructor invocation method. Destroys all aggregated objects and calls `destroyObject` method.
     * You must call this method explicitly from outside, because JavaScript doesn't support automatic class destructor
     * calling.
     */

  }, {
    key: "destroy",
    value: function destroy() {
      // TODO: assert(this._ownagePool != null);
      var pool = this._ownagePool;

      if (pool != null) {
        this._ownagePool = null;

        for (var i = pool.length - 1; i >= 0; --i) {
          pool[i].destroy();
        }
      }

      this.destroyObject();
    }
    /**
     * Class destructor implementation. Called inside `destroy` method *after aggregated objects destruction*.
     * The logic of class instance destruction should be implemented here. If you override this method,
     * remember to call `super.destroyObject()` at the end of the method.
     */

  }, {
    key: "destroyObject",
    value: function destroyObject() {}
  }]);

  return Class;
}();

exports.default = Class;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9DbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkU7Ozs7Ozs7Ozs7O0FBS0Y7Ozs7OztBQU1HOztJQUNHLEs7QUFBTixtQkFBQTtBQUFBOztBQUVTLFNBQUEsV0FBQSxHQUE2QixJQUE3QjtBQWtEUjtBQWhEQTs7Ozs7O0FBTUc7Ozs7O1dBQ0gsYUFBMkIsR0FBM0IsRUFBaUM7QUFDaEMsV0FBSyxXQUFMLEdBQW1CLEtBQUssV0FBTCxJQUFvQixFQUF2Qzs7QUFDQSxXQUFLLFdBQUwsQ0FBaUIsSUFBakIsQ0FBc0IsR0FBdEI7O0FBQ0EsYUFBTyxHQUFQO0FBQ0E7QUFFRDs7Ozs7O0FBTUc7Ozs7V0FDSCxnQkFBTyxHQUFQLEVBQXVCO0FBQ3RCLFdBQUssR0FBTCxDQUFTLEdBQVQ7QUFDQSxhQUFPLElBQVA7QUFDQTtBQUVEOzs7O0FBSUc7Ozs7V0FDSCxtQkFBTztBQUNOO0FBQ0EsVUFBTSxJQUFJLEdBQUcsS0FBSyxXQUFsQjs7QUFDQSxVQUFJLElBQUksSUFBSSxJQUFaLEVBQWtCO0FBQ2pCLGFBQUssV0FBTCxHQUFtQixJQUFuQjs7QUFDQSxhQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFMLEdBQWMsQ0FBM0IsRUFBOEIsQ0FBQyxJQUFJLENBQW5DLEVBQXNDLEVBQUUsQ0FBeEMsRUFBMkM7QUFDMUMsVUFBQSxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVEsT0FBUjtBQUNBO0FBQ0Q7O0FBQ0QsV0FBSyxhQUFMO0FBQ0E7QUFFRDs7OztBQUlHOzs7O1dBQ08seUJBQWEsQ0FBSzs7Ozs7O0FBRzdCLE9BQUEsQ0FBQSxPQUFBLEdBQWUsS0FBZiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjEgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBEZXN0cm95YWJsZSBmcm9tICcuL0Rlc3Ryb3lhYmxlJztcbmltcG9ydCBJQ2xhc3MgZnJvbSAnLi9JQ2xhc3MnO1xuXG4vKipcbiAqIEludHJvZHVjZXMgb2JqZWN0IGFnZ3JlZ2F0aW9uIHN1cHBvcnQuXG4gKiBJZiB5b3UgY2FsbCBgYS5vd24oYilgLCB0aGVuICoqYioqIGlzIGRlc3Ryb3llZCBhdXRvbWF0aWNhbGx5IG9uICoqYSoqIGRlc3RydWN0aW9uLlxuICogWW91IGNhbiBhZ2dyZWdhdGUgYW55IG9iamVjdCBpbXBsZW1lbnRpbmcgYERlc3Ryb3lhYmxlYC5cbiAqXG4gKiBTZWUgb25saW5lIGRvY3VtZW50YXRpb24gZm9yIGRldGFpbHMuXG4gKi9cbmNsYXNzIENsYXNzIGltcGxlbWVudHMgSUNsYXNzIHtcblxuXHRwcml2YXRlIF9vd25hZ2VQb29sOiBEZXN0cm95YWJsZVtdID0gbnVsbDtcblxuXHQvKipcblx0ICogQWdncmVnYXRlcyB0aGUgb2JqZWN0LiBJdCBtZWFucyB0aGF0IHRoZSBzcGVjaWZpZWQgb2JqZWN0IGlzIGF1dG9tYXRpY2FsbHkgZGVzdHJveWVkXG5cdCAqIG9uIHRoaXMgb2JqZWN0IGRlc3RydWN0aW9uLiBUaGUgYWdncmVnYXRlZCBvYmplY3RzIGFyZSBkZXN0cm95ZWQgaW4gcmV2ZXJzZSBvcmRlci5cblx0ICogUmV0dXJucyB0aGUgYWdncmVnYXRlZCBvYmplY3QsIHdoaWNoIG1ha2VzIGl0IGVhc3kgdG8gdXNlIGluIGZpZWxkIGRlZmluaXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSBvYmogT2JqZWN0IHRvIGFnZ3JlZ2F0ZS5cblx0ICovXG5cdG93bjxUIGV4dGVuZHMgRGVzdHJveWFibGU+KG9iajogVCk6IFQge1xuXHRcdHRoaXMuX293bmFnZVBvb2wgPSB0aGlzLl9vd25hZ2VQb29sIHx8IFtdO1xuXHRcdHRoaXMuX293bmFnZVBvb2wucHVzaChvYmopO1xuXHRcdHJldHVybiBvYmo7XG5cdH1cblxuXHQvKipcblx0ICogQWdncmVnYXRlcyB0aGUgb2JqZWN0LiBJdCBtZWFucyB0aGF0IHRoZSBzcGVjaWZpZWQgb2JqZWN0IGlzIGF1dG9tYXRpY2FsbHkgZGVzdHJveWVkXG5cdCAqIG9uIHRoaXMgb2JqZWN0IGRlc3RydWN0aW9uLiBUaGUgYWdncmVnYXRlZCBvYmplY3RzIGFyZSBkZXN0cm95ZWQgaW4gcmV2ZXJzZSBvcmRlci5cblx0ICogUmV0dXJucyB0aGlzIG9iamVjdCwgd2hpY2ggbWFrZXMgaXQgZWFzeSB0byB1c2UgaW4gb2JqZWN0IGluc3RhbnRpYXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSBvYmogT2JqZWN0IHRvIGFnZ3JlZ2F0ZS5cblx0ICovXG5cdG93bmluZyhvYmo6IERlc3Ryb3lhYmxlKTogdGhpcyB7XG5cdFx0dGhpcy5vd24ob2JqKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBDbGFzcyBkZXN0cnVjdG9yIGludm9jYXRpb24gbWV0aG9kLiBEZXN0cm95cyBhbGwgYWdncmVnYXRlZCBvYmplY3RzIGFuZCBjYWxscyBgZGVzdHJveU9iamVjdGAgbWV0aG9kLlxuXHQgKiBZb3UgbXVzdCBjYWxsIHRoaXMgbWV0aG9kIGV4cGxpY2l0bHkgZnJvbSBvdXRzaWRlLCBiZWNhdXNlIEphdmFTY3JpcHQgZG9lc24ndCBzdXBwb3J0IGF1dG9tYXRpYyBjbGFzcyBkZXN0cnVjdG9yXG5cdCAqIGNhbGxpbmcuXG5cdCAqL1xuXHRkZXN0cm95KCkge1xuXHRcdC8vIFRPRE86IGFzc2VydCh0aGlzLl9vd25hZ2VQb29sICE9IG51bGwpO1xuXHRcdGNvbnN0IHBvb2wgPSB0aGlzLl9vd25hZ2VQb29sO1xuXHRcdGlmIChwb29sICE9IG51bGwpIHtcblx0XHRcdHRoaXMuX293bmFnZVBvb2wgPSBudWxsO1xuXHRcdFx0Zm9yIChsZXQgaSA9IHBvb2wubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcblx0XHRcdFx0cG9vbFtpXS5kZXN0cm95KCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMuZGVzdHJveU9iamVjdCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENsYXNzIGRlc3RydWN0b3IgaW1wbGVtZW50YXRpb24uIENhbGxlZCBpbnNpZGUgYGRlc3Ryb3lgIG1ldGhvZCAqYWZ0ZXIgYWdncmVnYXRlZCBvYmplY3RzIGRlc3RydWN0aW9uKi5cblx0ICogVGhlIGxvZ2ljIG9mIGNsYXNzIGluc3RhbmNlIGRlc3RydWN0aW9uIHNob3VsZCBiZSBpbXBsZW1lbnRlZCBoZXJlLiBJZiB5b3Ugb3ZlcnJpZGUgdGhpcyBtZXRob2QsXG5cdCAqIHJlbWVtYmVyIHRvIGNhbGwgYHN1cGVyLmRlc3Ryb3lPYmplY3QoKWAgYXQgdGhlIGVuZCBvZiB0aGUgbWV0aG9kLlxuXHQgKi9cblx0cHJvdGVjdGVkIGRlc3Ryb3lPYmplY3QoKSB7fVxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGFzcztcbiJdLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "../../main/dist/Component.js":
/*!************************************!*\
  !*** ../../main/dist/Component.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "../../node_modules/jquery/dist/jquery.js"));

var BindableArray_1 = __importDefault(__webpack_require__(/*! ./BindableArray */ "../../main/dist/BindableArray.js"));

var BindableSet_1 = __importDefault(__webpack_require__(/*! ./BindableSet */ "../../main/dist/BindableSet.js"));

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));

var ComponentArray_1 = __importDefault(__webpack_require__(/*! ./component/ComponentArray */ "../../main/dist/component/ComponentArray.js"));

var ComponentBindable_1 = __importDefault(__webpack_require__(/*! ./component/ComponentBindable */ "../../main/dist/component/ComponentBindable.js"));

var ComponentChildren_1 = __importDefault(__webpack_require__(/*! ./component/ComponentChildren */ "../../main/dist/component/ComponentChildren.js"));

var ComponentSet_1 = __importDefault(__webpack_require__(/*! ./component/ComponentSet */ "../../main/dist/component/ComponentSet.js"));

var DomTemplate_1 = __importDefault(__webpack_require__(/*! ./DomTemplate */ "../../main/dist/DomTemplate.js"));

var DomUtils = __importStar(__webpack_require__(/*! ./DomUtils */ "../../main/dist/DomUtils.js"));

var HtmlTemplate_1 = __importDefault(__webpack_require__(/*! ./HtmlTemplate */ "../../main/dist/HtmlTemplate.js"));

var index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");

var MapUtils_1 = __webpack_require__(/*! ./MapUtils */ "../../main/dist/MapUtils.js");

var Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));

var StringUtils = __importStar(__webpack_require__(/*! ./StringUtils */ "../../main/dist/StringUtils.js"));
/**
 * Base class of UI component.
 *
 * Features:
 *
 * - Rendering by HTML template.
 * - Direct access to component elements.
 * - jQuery interface for element manipulations.
 * - Convenient API for data binding and child component management.
 */


var Component = /*#__PURE__*/function (_Class_1$default) {
  _inherits(Component, _Class_1$default);

  var _super = _createSuper(Component);

  /**
   * Plain objects of this class can be constructed. They can be used as dummy components or simple containers.
   */
  function Component() {
    var _this;

    _classCallCheck(this, Component);

    _this = _super.call(this);
    _this._parent = null;
    _this._el = null;
    _this._children = null;
    _this._wasAfterAppend = false;
    _this.__elements = null;
    _this.__bindables = null;
    _this.__arrays = null;
    _this.__sets = null;

    if (!Component.prototype._template) {
      Component.prototype._template = new HtmlTemplate_1.default('<div></div>');
    }

    return _this;
  }
  /**
   * Parent component. The property is available from component rendering beginning.
   */


  _createClass(Component, [{
    key: "parent",
    get: function get() {
      return this._parent;
    }
    /**
     * Root element. Field is available from component rendering beginning.
     */

  }, {
    key: "el",
    get: function get() {
      return this._el;
    }
    /**
     * Mutable named child components. Use this map to add child components in place of
     * elements with corresponding `jwid`. Field is available from component rendering beginning.
     */

  }, {
    key: "children",
    get: function get() {
      return this._children;
    }
    /**
     * Component template.
     */

  }, {
    key: "template",
    get: function get() {
      return this._template;
    }
  }, {
    key: "_elements",
    get: function get() {
      return this.__elements;
    }
  }, {
    key: "_bindables",
    get: function get() {
      return this.__bindables;
    }
  }, {
    key: "_arrays",
    get: function get() {
      return this.__arrays;
    }
  }, {
    key: "_sets",
    get: function get() {
      return this.__sets;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this._parent) {
        throw new Error("JW.UI.Component.destroy must be used for root and detached components only");
      }

      if (this._wasAfterAppend) {
        this.releaseDom();
      }

      if (this._el) {
        DomUtils.remove(this._el[0]);

        this.__sets.forEach(index_1.destroy);

        this.__sets = null;

        this.__arrays.forEach(index_1.destroy);

        this.__arrays = null;

        this.__bindables.forEach(index_1.destroy);

        this.__bindables = null;

        this._children.unrender();

        this.unrender();

        this._children.destroy();

        this._children = null;

        this._el.remove();
      }

      this.__elements = null;
      this._el = null;
      this.afterDestroy();

      _get(_getPrototypeOf(Component.prototype), "destroy", this).call(this);
    }
    /**
     * Component life stage method. Called during component rendering after HTML template parsing and initialization
     * of references to all elements of the template. Called before `render<ChildId>` methods and
     * `afterRender` method. It is convenient to perform some preliminary action here before child
     * components creation. But you are already able to create child components here.
     * Call `super.beforeRender()` at the first line of the method.
     */

  }, {
    key: "beforeRender",
    value: function beforeRender() {}
    /**
     * Component life stage method. Called after `beforeRender` method and `render<ChildId>` methods.
     * You should assign all elements' attributes here, create child components,
     * bind event handlers and fill component with interactivity.
     * Call `super.afterRender()` at the first line of the method.
     */

  }, {
    key: "afterRender",
    value: function afterRender() {}
    /**
     * Component life stage method. Called after first-time component appearing in HTML DOM and UI components tree.
     * Component layouting should be performed here (element size computing).
     * Component rendering is finished here.
     * Call `super.afterAppend()` at the first line of the method.
     */

  }, {
    key: "afterAppend",
    value: function afterAppend() {}
    /**
     * Component life stage method. Called during component destruction before `unrender` method call.
     * Everything that was performed in `afterAppend` method should be reverted here.
     * Call `super.releaseDom()` at the last line of the method.
     */

  }, {
    key: "releaseDom",
    value: function releaseDom() {}
    /**
     * Component life stage method. Called during component destruction before `afterDestroy` method call.
     * Everything that was performed during component
     * rendering should be reverted here. All child components are already removed by the component
     * before this method call, but the components themselves are not destroyed. You must destroy them explicitly.
     * Call `super.unrender()` at the last line of the method.
     */

  }, {
    key: "unrender",
    value: function unrender() {}
    /**
     * Component life stage method. Called during component destruction after `unrender` method call.
     * Everything that was performed during component construction should be reverted here.
     * Call `super.afterDestroy()` at the last line of the method.
     */

  }, {
    key: "afterDestroy",
    value: function afterDestroy() {}
    /**
     * Virtual method to render the component document fragment.
     * By default, renders by template.
     */

  }, {
    key: "createElement",
    value: function createElement() {
      return this._template.createElement();
    }
    /**
     * Selects component rendering strategy. This method is needed only in very rare cases.
     * By default, component is rendered outside of DOM based on `main` HTML
     * template specified by `template` annotation. You can change this by `using` method call.
     */

  }, {
    key: "using",
    value: function using(value) {
      this._template = typeof value === "string" ? new HtmlTemplate_1.default(value) : value instanceof HtmlTemplate_1.default ? value : new DomTemplate_1.default(value);
      return this;
    }
    /**
     * Renders the component. Call this method to initialize references to all elements of component and create
     * child components.
     */

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      if (this._el) {
        return this;
      }

      var output = this.createElement();
      this._el = jquery_1.default(output.root);
      this.__elements = MapUtils_1.map(output.groups, function (group) {
        return jquery_1.default(group);
      });
      this._children = new ComponentChildren_1.default(this);
      this.__bindables = new Map();
      this.__arrays = new Set();
      this.__sets = new Set();
      this.beforeRender();
      var elements = new Map(this.__elements);

      var _iterator = _createForOfIteratorHelper(elements),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
              jwId = _step$value[0],
              element = _step$value[1];

          var aliveElements = Array.from(element).filter(function (el) {
            return DomUtils.inEl(el, _this2._el[0]);
          });

          if (aliveElements.length === 0) {
            this.__elements.delete(jwId);

            continue;
          }

          if (aliveElements.length !== element.length) {
            element = jquery_1.default(aliveElements);

            this.__elements.set(jwId, element);
          }

          var jwIdCamel = StringUtils.camel(jwId);
          var renderMethodName = "render" + StringUtils.capitalize(jwIdCamel);

          if (typeof this[renderMethodName] === "function") {
            var result = this[renderMethodName](element);

            if (jwId === "root") {
              if (result instanceof BindableArray_1.default) {
                this.addArray(result, jwId);
              } else if (result instanceof BindableSet_1.default) {
                this.addSet(result, jwId);
              }
            } else {
              if (result instanceof Component) {
                this._children.set(jwId, result);
              } else if (result instanceof Property_1.default) {
                this.addBindable(result, jwId);
              } else if (result instanceof BindableArray_1.default) {
                this.addArray(result, jwId);
              } else if (result instanceof BindableSet_1.default) {
                this.addSet(result, jwId);
              } else if (result === false) {
                this.removeElement(jwId);
              }
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this.afterRender();

      if (this._template.requiresAfterAppend) {
        this._afterAppend();
      }

      return this;
    }
    /**
     * Renders component into an element. Use it to render root component only: its children must be rendered
     * using `children`, `addArray`, `addSet`, `addBindable` members.
     *
     * @param el Element to render component into.
     */

  }, {
    key: "renderTo",
    value: function renderTo(el) {
      this.render();
      jquery_1.default(el)[0].appendChild(this._el[0]);

      this._afterAppend();

      return this;
    }
    /**
     * Render component in place of an element. Use it to render root component only: its children must be rendered
     * using `children`, `addArray`, `addSet`, `addBindable` members.
     *
     * @param el Element to render component in place of.
     */

  }, {
    key: "renderAs",
    value: function renderAs(el) {
      this.render();
      DomUtils.replace(jquery_1.default(el)[0], this._el[0], true);

      this._afterAppend();

      return this;
    }
    /**
     * Remove the component from DOM. Can be used for root component only (which was added via `renderTo` or `renderAs`
     * method). All child components should be removed using `children` map or owning object deletion.
     */

  }, {
    key: "remove",
    value: function remove() {
      if (this._parent) {
        throw new Error("JW.UI.Component.remove must be used for root components only");
      }

      DomUtils.remove(this._el[0]);
      return this;
    }
    /**
     * Get element by its `jwid`.
     * @param id `jwid` of the element.
     */

  }, {
    key: "getElement",
    value: function getElement(id) {
      return this.__elements.get(id);
    }
    /**
     * Remove element by `jwid`. Element gets removed from DOM and destroyed. It is then impossible to get it by `getElement` method.
     * @param id `jwid` of the element.
     */

  }, {
    key: "removeElement",
    value: function removeElement(id) {
      var el = this.__elements.get(id);

      if (!el) {
        return this;
      }

      el.remove();

      this.__elements.delete(id);

      return this;
    }
    /**
     * Adds child component and synchronizes the component with the bindable.
     *
     * @param component Child component bindable.
     * @param id `jwid` of element to replace.
     */

  }, {
    key: "addBindable",
    value: function addBindable(component, id) {
      return new ComponentBindable_1.default(this, component, id);
    }
    /**
     * Adds an array of child components and synchronizes the component with it. As opposed to `addSet` method,
     * keeps component order.
     *
     * @param source Child component array.
     * @param el `jwid` of element to add child components into. Defaults to root element (`el`) of component.
     */

  }, {
    key: "addArray",
    value: function addArray(source, el) {
      return new ComponentArray_1.default(this, source, this._getContainerElement(el));
    }
    /**
     * Add child component set into an element. As opposed to `addArray` method, ignores
     * component order.
     *
     * @param source Child component set.
     * @param el `jwid` of element to add child components into. Defaults to root element (`el`) of component.
     */

  }, {
    key: "addSet",
    value: function addSet(source, el) {
      return new ComponentSet_1.default(this, source, this._getContainerElement(el));
    }
  }, {
    key: "_afterAppend",
    value: function _afterAppend() {
      if (this._wasAfterAppend || !this._el) {
        return;
      }

      if (this._parent && !this._parent._wasAfterAppend) {
        return;
      }

      if (!this._parent && !DomUtils.inDom(this._el[0])) {
        return;
      }

      this._wasAfterAppend = true;
      this.afterAppend();

      this._children.forEach(DomUtils._afterAppend);

      this.__arrays.forEach(DomUtils._afterAppend);

      this.__sets.forEach(DomUtils._afterAppend);
    }
  }, {
    key: "_initChild",
    value: function _initChild(component) {
      component.render();
      component._parent = this;
    }
  }, {
    key: "_doneChild",
    value: function _doneChild(component) {
      component._parent = null;
    }
  }, {
    key: "_getContainerElement",
    value: function _getContainerElement(el) {
      return el === undefined ? this._el : typeof el === "string" ? this.__elements.get(el) : jquery_1.default(el);
    }
  }]);

  return Component;
}(Class_1.default);

exports.default = Component;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/Destructor.js":
/*!*************************************!*\
  !*** ../../main/dist/Destructor.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
/**
 * Destroyable object that calls the specified callback on destruction.
 */

var Destructor = /*#__PURE__*/function () {
  /**
   * Creates a destructor instance.
   * @param callback Callback to call on destruction.
   * @param scope `callback` call scope.
   */
  function Destructor(callback, scope) {
    _classCallCheck(this, Destructor);

    this.callback = callback;
    this.scope = scope;
  }

  _createClass(Destructor, [{
    key: "destroy",
    value: function destroy() {
      if (this.callback) {
        this.callback.call(this.scope || this);
      }
    }
  }]);

  return Destructor;
}();

exports.default = Destructor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9EZXN0cnVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCRTs7Ozs7Ozs7Ozs7QUFJRjs7QUFFRzs7SUFDa0IsVTtBQUNwQjs7OztBQUlHO0FBQ0gsc0JBQW9CLFFBQXBCLEVBQW1ELEtBQW5ELEVBQThEO0FBQUE7O0FBQTFDLFNBQUEsUUFBQSxHQUFBLFFBQUE7QUFBK0IsU0FBQSxLQUFBLEdBQUEsS0FBQTtBQUFlOzs7O1dBRWxFLG1CQUFPO0FBQ04sVUFBSSxLQUFLLFFBQVQsRUFBbUI7QUFDbEIsYUFBSyxRQUFMLENBQWMsSUFBZCxDQUFtQixLQUFLLEtBQUwsSUFBYyxJQUFqQztBQUNBO0FBQ0Q7Ozs7OztBQVpGLE9BQUEsQ0FBQSxPQUFBLEdBQUEsVUFBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjEgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBEZXN0cm95YWJsZSBmcm9tICcuL0Rlc3Ryb3lhYmxlJztcblxuLyoqXG4gKiBEZXN0cm95YWJsZSBvYmplY3QgdGhhdCBjYWxscyB0aGUgc3BlY2lmaWVkIGNhbGxiYWNrIG9uIGRlc3RydWN0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZXN0cnVjdG9yIGltcGxlbWVudHMgRGVzdHJveWFibGUge1xuXHQvKipcblx0ICogQ3JlYXRlcyBhIGRlc3RydWN0b3IgaW5zdGFuY2UuXG5cdCAqIEBwYXJhbSBjYWxsYmFjayBDYWxsYmFjayB0byBjYWxsIG9uIGRlc3RydWN0aW9uLlxuXHQgKiBAcGFyYW0gc2NvcGUgYGNhbGxiYWNrYCBjYWxsIHNjb3BlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IocHJpdmF0ZSBjYWxsYmFjaz86ICgpID0+IHZvaWQsIHByaXZhdGUgc2NvcGU/OiBhbnkpIHt9XG5cblx0ZGVzdHJveSgpIHtcblx0XHRpZiAodGhpcy5jYWxsYmFjaykge1xuXHRcdFx0dGhpcy5jYWxsYmFjay5jYWxsKHRoaXMuc2NvcGUgfHwgdGhpcyk7XG5cdFx0fVxuXHR9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/Dispatcher.js":
/*!*************************************!*\
  !*** ../../main/dist/Dispatcher.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var dummyDispatcher_1 = __importDefault(__webpack_require__(/*! ./dummyDispatcher */ "../../main/dist/dummyDispatcher.js"));

var Listener_1 = __importDefault(__webpack_require__(/*! ./Listener */ "../../main/dist/Listener.js"));
/**
 * Real implementation of `IDispatcher` interface that calls handler functions on `dispatch` method call (as opposed to
 * `dummyDispatcher` which doesn't).
 * Used to dispatch messages (for example, field value change) to other objects (listeners).
 */


var Dispatcher = /*#__PURE__*/function () {
  function Dispatcher() {
    _classCallCheck(this, Dispatcher);

    this._listeners = null;
  }
  /**
   * Checks if this dispatcher is dummy, i.e. it never dispatches any messages.
   * This knowledge may help you do certain code optimizations.
   */


  _createClass(Dispatcher, [{
    key: "dummy",
    get: function get() {
      return false;
    }
    /**
     * Unregisters all listeners.
     */

  }, {
    key: "purge",
    value: function purge() {
      this._listeners = null;
    }
    /**
     * Registers a listener for this dispatcher.
     *
     * Whenever a message is dispatched with `dispatch` method, the specified handler function is called.
     *
     * You can unregister the listener destroying the returned object.
     *
     * @param handler Handler function.
     * @param scope `handler` call scope.
     */

  }, {
    key: "listen",
    value: function listen(handler, scope) {
      if (this._listeners === null) {
        this._listeners = new Set();
      }

      var listener = new Listener_1.default(this, handler, scope);

      this._listeners.add(listener);

      return listener;
    }
    /**
     * Dispatches a message, i.e. calls handler functions of all listeners.
     * @param message Message to dispatch.
     */

  }, {
    key: "dispatch",
    value: function dispatch(message) {
      if (this._listeners === null) {
        return;
      }

      var _iterator = _createForOfIteratorHelper(this._listeners),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var listener = _step.value;
          listener.handler.call(listener.scope || listener, message);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "_unbind",
    value: function _unbind(listener) {
      if (this._listeners !== null) {
        this._listeners.delete(listener);
      }
    }
    /**
     * If `dummy` argument is false, returns a new instance of `Dispatcher`. Else returns `dummyDispatcher`.
     * @param dummy Determines if dummy dispatcher should be used.
     */

  }], [{
    key: "make",
    value: function make(dummy) {
      return dummy ? dummyDispatcher_1.default : new Dispatcher();
    }
  }]);

  return Dispatcher;
}();

exports.default = Dispatcher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9EaXNwYXRjaGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0YsSUFBQSxpQkFBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsbUJBQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsVUFBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsWUFBQSxDQUFBLENBQUE7QUFFQTs7OztBQUlHOzs7SUFDa0IsVTtBQUFyQix3QkFBQTtBQUFBOztBQUVTLFNBQUEsVUFBQSxHQUErQixJQUEvQjtBQThEUjtBQTVEQTs7O0FBR0c7Ozs7O1NBQ0gsZUFBUztBQUNSLGFBQU8sS0FBUDtBQUNBO0FBRUQ7O0FBRUc7Ozs7V0FDSCxpQkFBSztBQUNKLFdBQUssVUFBTCxHQUFrQixJQUFsQjtBQUNBO0FBRUQ7Ozs7Ozs7OztBQVNHOzs7O1dBQ0gsZ0JBQU8sT0FBUCxFQUFzQyxLQUF0QyxFQUFpRDtBQUNoRCxVQUFJLEtBQUssVUFBTCxLQUFvQixJQUF4QixFQUE4QjtBQUM3QixhQUFLLFVBQUwsR0FBa0IsSUFBSSxHQUFKLEVBQWxCO0FBQ0E7O0FBQ0QsVUFBTSxRQUFRLEdBQUcsSUFBSSxVQUFBLENBQUEsT0FBSixDQUFnQixJQUFoQixFQUFzQixPQUF0QixFQUErQixLQUEvQixDQUFqQjs7QUFDQSxXQUFLLFVBQUwsQ0FBZ0IsR0FBaEIsQ0FBb0IsUUFBcEI7O0FBQ0EsYUFBTyxRQUFQO0FBQ0E7QUFFRDs7O0FBR0c7Ozs7V0FDSCxrQkFBUyxPQUFULEVBQW9CO0FBQ25CLFVBQUksS0FBSyxVQUFMLEtBQW9CLElBQXhCLEVBQThCO0FBQzdCO0FBQ0E7O0FBSGtCLGlEQUlJLEtBQUssVUFKVDtBQUFBOztBQUFBO0FBSW5CLDREQUF3QztBQUFBLGNBQTdCLFFBQTZCO0FBQ3ZDLFVBQUEsUUFBUSxDQUFDLE9BQVQsQ0FBaUIsSUFBakIsQ0FBc0IsUUFBUSxDQUFDLEtBQVQsSUFBa0IsUUFBeEMsRUFBa0QsT0FBbEQ7QUFDQTtBQU5rQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBT25COzs7V0FFRCxpQkFBUSxRQUFSLEVBQTZCO0FBQzVCLFVBQUksS0FBSyxVQUFMLEtBQW9CLElBQXhCLEVBQThCO0FBQzdCLGFBQUssVUFBTCxDQUFnQixNQUFoQixDQUF1QixRQUF2QjtBQUNBO0FBQ0Q7QUFFRDs7O0FBR0c7Ozs7V0FDSCxjQUFlLEtBQWYsRUFBNkI7QUFDNUIsYUFBTyxLQUFLLEdBQUcsaUJBQUEsQ0FBQSxPQUFILEdBQXFCLElBQUksVUFBSixFQUFqQztBQUNBOzs7Ozs7QUEvREYsT0FBQSxDQUFBLE9BQUEsR0FBQSxVQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMSBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IERlc3Ryb3lhYmxlIGZyb20gXCIuL0Rlc3Ryb3lhYmxlXCI7XG5pbXBvcnQgZHVtbXlEaXNwYXRjaGVyIGZyb20gXCIuL2R1bW15RGlzcGF0Y2hlclwiO1xuaW1wb3J0IElEaXNwYXRjaGVyIGZyb20gXCIuL0lEaXNwYXRjaGVyXCI7XG5pbXBvcnQgTGlzdGVuZXIgZnJvbSBcIi4vTGlzdGVuZXJcIjtcblxuLyoqXG4gKiBSZWFsIGltcGxlbWVudGF0aW9uIG9mIGBJRGlzcGF0Y2hlcmAgaW50ZXJmYWNlIHRoYXQgY2FsbHMgaGFuZGxlciBmdW5jdGlvbnMgb24gYGRpc3BhdGNoYCBtZXRob2QgY2FsbCAoYXMgb3Bwb3NlZCB0b1xuICogYGR1bW15RGlzcGF0Y2hlcmAgd2hpY2ggZG9lc24ndCkuXG4gKiBVc2VkIHRvIGRpc3BhdGNoIG1lc3NhZ2VzIChmb3IgZXhhbXBsZSwgZmllbGQgdmFsdWUgY2hhbmdlKSB0byBvdGhlciBvYmplY3RzIChsaXN0ZW5lcnMpLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaXNwYXRjaGVyPE0+IGltcGxlbWVudHMgSURpc3BhdGNoZXI8TT4ge1xuXG5cdHByaXZhdGUgX2xpc3RlbmVyczogU2V0PExpc3RlbmVyPE0+PiA9IG51bGw7XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGlzIGRpc3BhdGNoZXIgaXMgZHVtbXksIGkuZS4gaXQgbmV2ZXIgZGlzcGF0Y2hlcyBhbnkgbWVzc2FnZXMuXG5cdCAqIFRoaXMga25vd2xlZGdlIG1heSBoZWxwIHlvdSBkbyBjZXJ0YWluIGNvZGUgb3B0aW1pemF0aW9ucy5cblx0ICovXG5cdGdldCBkdW1teSgpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0ICogVW5yZWdpc3RlcnMgYWxsIGxpc3RlbmVycy5cblx0ICovXG5cdHB1cmdlKCkge1xuXHRcdHRoaXMuX2xpc3RlbmVycyA9IG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogUmVnaXN0ZXJzIGEgbGlzdGVuZXIgZm9yIHRoaXMgZGlzcGF0Y2hlci5cblx0ICpcblx0ICogV2hlbmV2ZXIgYSBtZXNzYWdlIGlzIGRpc3BhdGNoZWQgd2l0aCBgZGlzcGF0Y2hgIG1ldGhvZCwgdGhlIHNwZWNpZmllZCBoYW5kbGVyIGZ1bmN0aW9uIGlzIGNhbGxlZC5cblx0ICpcblx0ICogWW91IGNhbiB1bnJlZ2lzdGVyIHRoZSBsaXN0ZW5lciBkZXN0cm95aW5nIHRoZSByZXR1cm5lZCBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSBoYW5kbGVyIEhhbmRsZXIgZnVuY3Rpb24uXG5cdCAqIEBwYXJhbSBzY29wZSBgaGFuZGxlcmAgY2FsbCBzY29wZS5cblx0ICovXG5cdGxpc3RlbihoYW5kbGVyOiAobWVzc2FnZTogTSkgPT4gdm9pZCwgc2NvcGU/OiBhbnkpOiBEZXN0cm95YWJsZSB7XG5cdFx0aWYgKHRoaXMuX2xpc3RlbmVycyA9PT0gbnVsbCkge1xuXHRcdFx0dGhpcy5fbGlzdGVuZXJzID0gbmV3IFNldDxMaXN0ZW5lcjxNPj4oKTtcblx0XHR9XG5cdFx0Y29uc3QgbGlzdGVuZXIgPSBuZXcgTGlzdGVuZXI8TT4odGhpcywgaGFuZGxlciwgc2NvcGUpO1xuXHRcdHRoaXMuX2xpc3RlbmVycy5hZGQobGlzdGVuZXIpO1xuXHRcdHJldHVybiBsaXN0ZW5lcjtcblx0fVxuXG5cdC8qKlxuXHQgKiBEaXNwYXRjaGVzIGEgbWVzc2FnZSwgaS5lLiBjYWxscyBoYW5kbGVyIGZ1bmN0aW9ucyBvZiBhbGwgbGlzdGVuZXJzLlxuXHQgKiBAcGFyYW0gbWVzc2FnZSBNZXNzYWdlIHRvIGRpc3BhdGNoLlxuXHQgKi9cblx0ZGlzcGF0Y2gobWVzc2FnZT86IE0pIHtcblx0XHRpZiAodGhpcy5fbGlzdGVuZXJzID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGZvciAoY29uc3QgbGlzdGVuZXIgb2YgdGhpcy5fbGlzdGVuZXJzKSB7XG5cdFx0XHRsaXN0ZW5lci5oYW5kbGVyLmNhbGwobGlzdGVuZXIuc2NvcGUgfHwgbGlzdGVuZXIsIG1lc3NhZ2UpO1xuXHRcdH1cblx0fVxuXG5cdF91bmJpbmQobGlzdGVuZXI6IExpc3RlbmVyPE0+KSB7XG5cdFx0aWYgKHRoaXMuX2xpc3RlbmVycyAhPT0gbnVsbCkge1xuXHRcdFx0dGhpcy5fbGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIElmIGBkdW1teWAgYXJndW1lbnQgaXMgZmFsc2UsIHJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgYERpc3BhdGNoZXJgLiBFbHNlIHJldHVybnMgYGR1bW15RGlzcGF0Y2hlcmAuXG5cdCAqIEBwYXJhbSBkdW1teSBEZXRlcm1pbmVzIGlmIGR1bW15IGRpc3BhdGNoZXIgc2hvdWxkIGJlIHVzZWQuXG5cdCAqL1xuXHRzdGF0aWMgbWFrZTxNPihkdW1teTogYm9vbGVhbik6IElEaXNwYXRjaGVyPE0+IHtcblx0XHRyZXR1cm4gZHVtbXkgPyBkdW1teURpc3BhdGNoZXIgOiBuZXcgRGlzcGF0Y2hlcjxNPigpO1xuXHR9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/DomTemplate.js":
/*!**************************************!*\
  !*** ../../main/dist/DomTemplate.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "../../node_modules/jquery/dist/jquery.js"));

var AbstractTemplate_1 = __importDefault(__webpack_require__(/*! ./AbstractTemplate */ "../../main/dist/AbstractTemplate.js"));

var DomTemplate = /*#__PURE__*/function (_AbstractTemplate_1$d) {
  _inherits(DomTemplate, _AbstractTemplate_1$d);

  var _super = _createSuper(DomTemplate);

  /**
   * Creates a template instance.
   * @param el Element to process.
   */
  function DomTemplate(el) {
    var _this;

    _classCallCheck(this, DomTemplate);

    _this = _super.call(this);
    _this.output = null;
    _this.el = jquery_1.default(el)[0];
    return _this;
  }

  _createClass(DomTemplate, [{
    key: "requiresAfterAppend",
    get: function get() {
      return true;
    }
  }, {
    key: "createElement",
    value: function createElement() {
      if (this.output !== null) {
        return this.output;
      }

      this.groups = new Map();

      this._compileAttributes(this.el);

      var orderedGroups = new Map();

      var _iterator = _createForOfIteratorHelper(this.ids),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var id = _step.value;
          orderedGroups.set(id, this.groups.get(id));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this.output = {
        root: this.el,
        groups: orderedGroups
      };
      return this.output;
    }
  }, {
    key: "_addElement",
    value: function _addElement(id, el, _path) {
      var _a;

      this.groups.set(id, (_a = this.groups.get(id)) !== null && _a !== void 0 ? _a : []);
      this.groups.get(id).push(el);
    }
  }]);

  return DomTemplate;
}(AbstractTemplate_1.default);

exports.default = DomTemplate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Eb21UZW1wbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFRixJQUFBLFFBQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsa0JBQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLG9CQUFBLENBQUEsQ0FBQTs7SUFHcUIsVzs7Ozs7QUFNcEI7OztBQUdHO0FBQ0gsdUJBQVksRUFBWixFQUFvQztBQUFBOztBQUFBOztBQUNuQztBQVJPLFVBQUEsTUFBQSxHQUF5QixJQUF6QjtBQVNQLFVBQUssRUFBTCxHQUFlLFFBQUEsQ0FBQSxPQUFBLENBQU8sRUFBUCxFQUFXLENBQVgsQ0FBZjtBQUZtQztBQUduQzs7OztTQUVELGVBQXVCO0FBQ3RCLGFBQU8sSUFBUDtBQUNBOzs7V0FFRCx5QkFBYTtBQUNaLFVBQUksS0FBSyxNQUFMLEtBQWdCLElBQXBCLEVBQTBCO0FBQ3pCLGVBQU8sS0FBSyxNQUFaO0FBQ0E7O0FBQ0QsV0FBSyxNQUFMLEdBQWMsSUFBSSxHQUFKLEVBQWQ7O0FBQ0EsV0FBSyxrQkFBTCxDQUF3QixLQUFLLEVBQTdCOztBQUNBLFVBQU0sYUFBYSxHQUFHLElBQUksR0FBSixFQUF0Qjs7QUFOWSxpREFPSyxLQUFLLEdBUFY7QUFBQTs7QUFBQTtBQU9aLDREQUEyQjtBQUFBLGNBQWhCLEVBQWdCO0FBQzFCLFVBQUEsYUFBYSxDQUFDLEdBQWQsQ0FBa0IsRUFBbEIsRUFBc0IsS0FBSyxNQUFMLENBQVksR0FBWixDQUFnQixFQUFoQixDQUF0QjtBQUNBO0FBVFc7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFVWixXQUFLLE1BQUwsR0FBYztBQUFDLFFBQUEsSUFBSSxFQUFFLEtBQUssRUFBWjtBQUFnQixRQUFBLE1BQU0sRUFBRTtBQUF4QixPQUFkO0FBQ0EsYUFBTyxLQUFLLE1BQVo7QUFDQTs7O1dBRVMscUJBQVksRUFBWixFQUF3QixFQUF4QixFQUF5QyxLQUF6QyxFQUFpRTs7O0FBQzFFLFdBQUssTUFBTCxDQUFZLEdBQVosQ0FBZ0IsRUFBaEIsRUFBb0IsQ0FBQSxFQUFBLEdBQUEsS0FBSyxNQUFMLENBQVksR0FBWixDQUFnQixFQUFoQixDQUFBLE1BQW1CLElBQW5CLElBQW1CLEVBQUEsS0FBQSxLQUFBLENBQW5CLEdBQW1CLEVBQW5CLEdBQXVCLEVBQTNDO0FBQ0EsV0FBSyxNQUFMLENBQVksR0FBWixDQUFnQixFQUFoQixFQUFvQixJQUFwQixDQUF5QixFQUF6QjtBQUNBOzs7O0VBcEN1QyxrQkFBQSxDQUFBLE87O0FBQXpDLE9BQUEsQ0FBQSxPQUFBLEdBQUEsV0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjEgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBqUXVlcnkgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCBBYnN0cmFjdFRlbXBsYXRlIGZyb20gJy4vQWJzdHJhY3RUZW1wbGF0ZSc7XG5pbXBvcnQgVGVtcGxhdGVPdXRwdXQgZnJvbSAnLi9UZW1wbGF0ZU91dHB1dCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERvbVRlbXBsYXRlIGV4dGVuZHMgQWJzdHJhY3RUZW1wbGF0ZSB7XG5cblx0cHJpdmF0ZSBlbDogSFRNTEVsZW1lbnQ7XG5cdHByaXZhdGUgb3V0cHV0OiBUZW1wbGF0ZU91dHB1dCA9IG51bGw7XG5cdHByaXZhdGUgZ3JvdXBzOiBNYXA8c3RyaW5nLCBIVE1MRWxlbWVudFtdPjtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHRlbXBsYXRlIGluc3RhbmNlLlxuXHQgKiBAcGFyYW0gZWwgRWxlbWVudCB0byBwcm9jZXNzLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoZWw6IEhUTUxFbGVtZW50IHwgSlF1ZXJ5KSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLmVsID0gPGFueT5qUXVlcnkoZWwpWzBdO1xuXHR9XG5cblx0Z2V0IHJlcXVpcmVzQWZ0ZXJBcHBlbmQoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRjcmVhdGVFbGVtZW50KCk6IFRlbXBsYXRlT3V0cHV0IHtcblx0XHRpZiAodGhpcy5vdXRwdXQgIT09IG51bGwpIHtcblx0XHRcdHJldHVybiB0aGlzLm91dHB1dDtcblx0XHR9XG5cdFx0dGhpcy5ncm91cHMgPSBuZXcgTWFwPHN0cmluZywgSFRNTEVsZW1lbnRbXT4oKTtcblx0XHR0aGlzLl9jb21waWxlQXR0cmlidXRlcyh0aGlzLmVsKTtcblx0XHRjb25zdCBvcmRlcmVkR3JvdXBzID0gbmV3IE1hcDxzdHJpbmcsIEhUTUxFbGVtZW50W10+KCk7XG5cdFx0Zm9yIChjb25zdCBpZCBvZiB0aGlzLmlkcykge1xuXHRcdFx0b3JkZXJlZEdyb3Vwcy5zZXQoaWQsIHRoaXMuZ3JvdXBzLmdldChpZCkpO1xuXHRcdH1cblx0XHR0aGlzLm91dHB1dCA9IHtyb290OiB0aGlzLmVsLCBncm91cHM6IG9yZGVyZWRHcm91cHN9O1xuXHRcdHJldHVybiB0aGlzLm91dHB1dDtcblx0fVxuXG5cdHByb3RlY3RlZCBfYWRkRWxlbWVudChpZDogc3RyaW5nLCBlbDogSFRNTEVsZW1lbnQsIF9wYXRoOiByZWFkb25seSBudW1iZXJbXSkge1xuXHRcdHRoaXMuZ3JvdXBzLnNldChpZCwgdGhpcy5ncm91cHMuZ2V0KGlkKSA/PyBbXSk7XG5cdFx0dGhpcy5ncm91cHMuZ2V0KGlkKS5wdXNoKGVsKTtcblx0fVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==

/***/ }),

/***/ "../../main/dist/DomUtils.js":
/*!***********************************!*\
  !*** ../../main/dist/DomUtils.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports._afterAppend = exports.replace = exports.remove = exports.insert = exports.parseHtml = exports.addClass = exports.hasClass = exports.inEl = exports.inDom = exports.isTextInput = exports.isElement = void 0;

var jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "../../node_modules/jquery/dist/jquery.js"));
/**
 * Some code is taken from jQuery. We are not happy with standard jQuery.parseHtml, because it is slow.
 * We implement an own parseHtml which omits a good bunch of useless manipulations.
 */


var wrapMap = new Map([["option", [1, "<select multiple='multiple'>", "</select>"]], ["thead", [1, "<table>", "</table>"]], ["col", [2, "<table><colgroup>", "</colgroup></table>"]], ["tr", [2, "<table><tbody>", "</tbody></table>"]], ["td", [3, "<table><tbody><tr>", "</tr></tbody></table>"]], ["_default", [0, "", ""]]]);
wrapMap.set("optgroup", wrapMap.get("option"));
wrapMap.set("tbody", wrapMap.get("thead"));
wrapMap.set("tfoot", wrapMap.get("thead"));
wrapMap.set("colgroup", wrapMap.get("thead"));
wrapMap.set("caption", wrapMap.get("thead"));
wrapMap.set("th", wrapMap.get("td"));
var rtagName = /^<([\w:]+)/;
var _fragment = null;
/**
 * Checks if value is a jQuery element.
 */

function isElement(value) {
  return value instanceof jquery_1.default.fn.init;
}

exports.isElement = isElement;
var lifeInputTags = ["text", "password", "email", "number", "search", "tel", "url"];
/**
 * Checks if the element is a text input.
 *
 * @param el Element.
 * @returns Element is a text input.
 */

function isTextInput(el) {
  var tagName = el.prop("tagName");

  if (tagName === "INPUT") {
    var type = el.attr("type");
    return !type || lifeInputTags.indexOf(type.toLowerCase()) !== -1;
  }

  return tagName === "TEXTAREA";
}

exports.isTextInput = isTextInput;
/**
 * Checks if current HTML document body contains the specified element.
 *
 * @param el HTML element.
 * @returns Element is in DOM.
 */

function inDom(el) {
  while (el) {
    if (el.tagName.toLowerCase() === "body") {
      return true;
    }

    el = el.parentNode;
  }

  return false;
}

exports.inDom = inDom;
/**
 * Checks deeply if one HTML element is a descendant of another element.
 *
 * @param descendantEl Descendant HTML element to check.
 * @param ancestorEl Ancestor HTML element to check.
 * @returns Element is a descendant of another element.
 */

function inEl(descendantEl, ancestorEl) {
  while (descendantEl) {
    if (descendantEl === ancestorEl) {
      return true;
    }

    descendantEl = descendantEl.parentElement;
  }

  return false;
}

exports.inEl = inEl;
/**
 * Checks if element contains the specified CSS class name.
 *
 * @param el HTML element.
 * @param cls Single CSS class name.
 * @return Element contains this CSS class name.
 */

function hasClass(el, cls) {
  return (" " + el.className + " ").indexOf(cls) !== -1;
}

exports.hasClass = hasClass;
/**
 * Adds the specified CSS class name to element unless it already contains it.
 *
 * @param el HTML element.
 * @param cls Single CSS class name.
 */

function addClass(el, cls) {
  if (!el.className) {
    el.className = cls;
  } else if (!hasClass(el, cls)) {
    el.className += " " + cls;
  }
}

exports.addClass = addClass;
/**
 * Parses HTML and builds a new DOM element.
 *
 * @param html HTML code to parse.
 * @returns New HTML element.
 */

function parseHtml(html) {
  var _a;

  if (_fragment) {
    _fragment.textContent = "";
  } else {
    _fragment = document.createDocumentFragment();
  }

  var el = document.createElement("div");

  _fragment.appendChild(el);

  var tagName = rtagName.exec(html)[1];
  var wrap = (_a = wrapMap.get(tagName)) !== null && _a !== void 0 ? _a : wrapMap.get("_default");
  el.innerHTML = wrap[1] + html + wrap[2];

  for (var i = 0; i < wrap[0]; ++i) {
    el = el.firstChild;
  }

  return el.firstChild;
}

exports.parseHtml = parseHtml;
/**
 * Inserts element as a child at specified position.
 *
 * @param parent Element to insert into.
 * @param child Element to insert.
 * @param index Position to insert at.
 */

function insert(parent, child, index) {
  if (index == null || index >= parent.childNodes.length) {
    parent.appendChild(child);
  } else {
    parent.insertBefore(child, parent.childNodes.item(index));
  }
}

exports.insert = insert;
/**
 * Removes element from DOM.
 *
 * @param el Element to remove.
 */

function remove(el) {
  if (el.parentNode) {
    el.parentNode.removeChild(el);
  }
}

exports.remove = remove;
/**
 * Replaces one HTML element with another.
 *
 * @param removeEl Element to replace.
 * @param insertEl Element to replace `removeEl` with.
 * @param attrs If true, retains element `id` and `class`
 */

function replace(removeEl, insertEl, attrs) {
  var parentEl = removeEl.parentNode;

  if (!parentEl) {
    return;
  }

  var id = attrs ? removeEl.getAttribute("id") : null,
      cls = attrs ? removeEl.getAttribute("class") : null;
  parentEl.replaceChild(insertEl, removeEl);

  if (id) {
    insertEl.setAttribute("id", id);
  }

  if (cls) {
    addClass(insertEl, cls);
  }
}

exports.replace = replace;

function _afterAppend(child) {
  child._afterAppend();
}

exports._afterAppend = _afterAppend;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/HtmlTemplate.js":
/*!***************************************!*\
  !*** ../../main/dist/HtmlTemplate.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var AbstractTemplate_1 = __importDefault(__webpack_require__(/*! ./AbstractTemplate */ "../../main/dist/AbstractTemplate.js"));

var DomUtils = __importStar(__webpack_require__(/*! ./DomUtils */ "../../main/dist/DomUtils.js"));
/**
 * HTML template. This class compiles the input template only once, and uses element cloning further on to
 * optimize rendering performance.
 */


var HtmlTemplate = /*#__PURE__*/function (_AbstractTemplate_1$d) {
  _inherits(HtmlTemplate, _AbstractTemplate_1$d);

  var _super = _createSuper(HtmlTemplate);

  /**
   * @param html Input HTML.
   */
  function HtmlTemplate(html) {
    var _this;

    _classCallCheck(this, HtmlTemplate);

    _this = _super.call(this);
    _this.html = html;
    _this.mirror = null;
    return _this;
  }

  _createClass(HtmlTemplate, [{
    key: "createElement",
    value: function createElement() {
      this._compile();

      var root = this.mirror.cloneNode(true);
      var groups = new Map();

      var _iterator = _createForOfIteratorHelper(this.ids),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var id = _step.value;
          groups.set(id, this.groups.get(id).map(function (path) {
            return path.reduce(function (el, index) {
              return el.childNodes[index];
            }, root);
          }));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return {
        root: root,
        groups: groups
      };
    }
  }, {
    key: "_addElement",
    value: function _addElement(id, _el, path) {
      var _a;

      this.groups.set(id, (_a = this.groups.get(id)) !== null && _a !== void 0 ? _a : []);
      this.groups.get(id).push(path.concat());
    }
  }, {
    key: "_compile",
    value: function _compile() {
      if (this.mirror !== null) {
        return;
      }

      this.mirror = DomUtils.parseHtml(this.html);
      this.groups = new Map();

      this._compileAttributes(this.mirror);
    }
  }]);

  return HtmlTemplate;
}(AbstractTemplate_1.default);

exports.default = HtmlTemplate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9IdG1sVGVtcGxhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVGLElBQUEsa0JBQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLG9CQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLFFBQUEsR0FBQSxZQUFBLENBQUEsT0FBQSxDQUFBLFlBQUEsQ0FBQSxDQUFBO0FBR0E7OztBQUdHOzs7SUFDa0IsWTs7Ozs7QUFLcEI7O0FBRUc7QUFDSCx3QkFBcUIsSUFBckIsRUFBaUM7QUFBQTs7QUFBQTs7QUFDaEM7QUFEb0IsVUFBQSxJQUFBLEdBQUEsSUFBQTtBQU5iLFVBQUEsTUFBQSxHQUFzQixJQUF0QjtBQU15QjtBQUVoQzs7OztXQUVELHlCQUFhO0FBQ1osV0FBSyxRQUFMOztBQUNBLFVBQU0sSUFBSSxHQUFpQixLQUFLLE1BQUwsQ0FBWSxTQUFaLENBQXNCLElBQXRCLENBQTNCO0FBQ0EsVUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFKLEVBQWY7O0FBSFksaURBSUssS0FBSyxHQUpWO0FBQUE7O0FBQUE7QUFJWiw0REFBMkI7QUFBQSxjQUFoQixFQUFnQjtBQUMxQixVQUFBLE1BQU0sQ0FBQyxHQUFQLENBQVcsRUFBWCxFQUFlLEtBQUssTUFBTCxDQUFZLEdBQVosQ0FBZ0IsRUFBaEIsRUFBb0IsR0FBcEIsQ0FDZCxVQUFBLElBQUk7QUFBQSxtQkFBSSxJQUFJLENBQUMsTUFBTCxDQUFZLFVBQUMsRUFBRCxFQUFLLEtBQUw7QUFBQSxxQkFBNEIsRUFBRSxDQUFDLFVBQUgsQ0FBYyxLQUFkLENBQTVCO0FBQUEsYUFBWixFQUE4RCxJQUE5RCxDQUFKO0FBQUEsV0FEVSxDQUFmO0FBRUE7QUFQVztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQVFaLGFBQU87QUFBQyxRQUFBLElBQUksRUFBSixJQUFEO0FBQU8sUUFBQSxNQUFNLEVBQU47QUFBUCxPQUFQO0FBQ0E7OztXQUVTLHFCQUFZLEVBQVosRUFBd0IsR0FBeEIsRUFBMEMsSUFBMUMsRUFBaUU7OztBQUMxRSxXQUFLLE1BQUwsQ0FBWSxHQUFaLENBQWdCLEVBQWhCLEVBQW9CLENBQUEsRUFBQSxHQUFBLEtBQUssTUFBTCxDQUFZLEdBQVosQ0FBZ0IsRUFBaEIsQ0FBQSxNQUFtQixJQUFuQixJQUFtQixFQUFBLEtBQUEsS0FBQSxDQUFuQixHQUFtQixFQUFuQixHQUF1QixFQUEzQztBQUNBLFdBQUssTUFBTCxDQUFZLEdBQVosQ0FBZ0IsRUFBaEIsRUFBb0IsSUFBcEIsQ0FBeUIsSUFBSSxDQUFDLE1BQUwsRUFBekI7QUFDQTs7O1dBRU8sb0JBQVE7QUFDZixVQUFJLEtBQUssTUFBTCxLQUFnQixJQUFwQixFQUEwQjtBQUN6QjtBQUNBOztBQUNELFdBQUssTUFBTCxHQUFjLFFBQVEsQ0FBQyxTQUFULENBQW1CLEtBQUssSUFBeEIsQ0FBZDtBQUNBLFdBQUssTUFBTCxHQUFjLElBQUksR0FBSixFQUFkOztBQUNBLFdBQUssa0JBQUwsQ0FBd0IsS0FBSyxNQUE3QjtBQUNBOzs7O0VBbkN3QyxrQkFBQSxDQUFBLE87O0FBQTFDLE9BQUEsQ0FBQSxPQUFBLEdBQUEsWUFBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjEgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBBYnN0cmFjdFRlbXBsYXRlIGZyb20gJy4vQWJzdHJhY3RUZW1wbGF0ZSc7XG5pbXBvcnQgKiBhcyBEb21VdGlscyBmcm9tICcuL0RvbVV0aWxzJztcbmltcG9ydCBUZW1wbGF0ZU91dHB1dCBmcm9tICcuL1RlbXBsYXRlT3V0cHV0JztcblxuLyoqXG4gKiBIVE1MIHRlbXBsYXRlLiBUaGlzIGNsYXNzIGNvbXBpbGVzIHRoZSBpbnB1dCB0ZW1wbGF0ZSBvbmx5IG9uY2UsIGFuZCB1c2VzIGVsZW1lbnQgY2xvbmluZyBmdXJ0aGVyIG9uIHRvXG4gKiBvcHRpbWl6ZSByZW5kZXJpbmcgcGVyZm9ybWFuY2UuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEh0bWxUZW1wbGF0ZSBleHRlbmRzIEFic3RyYWN0VGVtcGxhdGUge1xuXG5cdHByaXZhdGUgbWlycm9yOiBIVE1MRWxlbWVudCA9IG51bGw7XG5cdHByaXZhdGUgZ3JvdXBzOiBNYXA8c3RyaW5nLCBudW1iZXJbXVtdPjtcblxuXHQvKipcblx0ICogQHBhcmFtIGh0bWwgSW5wdXQgSFRNTC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKHJlYWRvbmx5IGh0bWw6IHN0cmluZykge1xuXHRcdHN1cGVyKCk7XG5cdH1cblxuXHRjcmVhdGVFbGVtZW50KCk6IFRlbXBsYXRlT3V0cHV0IHtcblx0XHR0aGlzLl9jb21waWxlKCk7XG5cdFx0Y29uc3Qgcm9vdCA9IDxIVE1MRWxlbWVudD4odGhpcy5taXJyb3IuY2xvbmVOb2RlKHRydWUpKTtcblx0XHRjb25zdCBncm91cHMgPSBuZXcgTWFwPHN0cmluZywgSFRNTEVsZW1lbnRbXT4oKTtcblx0XHRmb3IgKGNvbnN0IGlkIG9mIHRoaXMuaWRzKSB7XG5cdFx0XHRncm91cHMuc2V0KGlkLCB0aGlzLmdyb3Vwcy5nZXQoaWQpLm1hcChcblx0XHRcdFx0cGF0aCA9PiBwYXRoLnJlZHVjZSgoZWwsIGluZGV4KSA9PiA8SFRNTEVsZW1lbnQ+ZWwuY2hpbGROb2Rlc1tpbmRleF0sIHJvb3QpKSk7XG5cdFx0fVxuXHRcdHJldHVybiB7cm9vdCwgZ3JvdXBzfTtcblx0fVxuXG5cdHByb3RlY3RlZCBfYWRkRWxlbWVudChpZDogc3RyaW5nLCBfZWw6IEhUTUxFbGVtZW50LCBwYXRoOiByZWFkb25seSBudW1iZXJbXSkge1xuXHRcdHRoaXMuZ3JvdXBzLnNldChpZCwgdGhpcy5ncm91cHMuZ2V0KGlkKSA/PyBbXSk7XG5cdFx0dGhpcy5ncm91cHMuZ2V0KGlkKS5wdXNoKHBhdGguY29uY2F0KCkpO1xuXHR9XG5cblx0cHJpdmF0ZSBfY29tcGlsZSgpIHtcblx0XHRpZiAodGhpcy5taXJyb3IgIT09IG51bGwpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5taXJyb3IgPSBEb21VdGlscy5wYXJzZUh0bWwodGhpcy5odG1sKTtcblx0XHR0aGlzLmdyb3VwcyA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXJbXVtdPigpO1xuXHRcdHRoaXMuX2NvbXBpbGVBdHRyaWJ1dGVzKHRoaXMubWlycm9yKTtcblx0fVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==

/***/ }),

/***/ "../../main/dist/IterableUtils.js":
/*!****************************************!*\
  !*** ../../main/dist/IterableUtils.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.index = exports.count = exports.filter = exports.map = void 0;
/**
 * Maps iterable items. Returns an array containing results of a callback call for each iterable item.
 * @param iterable Iterable.
 * @param callback Mapping function.
 * @returns Mapped array.
 */

function map(iterable, callback) {
  var result = [];

  var _iterator = _createForOfIteratorHelper(iterable),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var item = _step.value;
      result.push(callback(item));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return result;
}

exports.map = map;
/**
 * Filters an iterable by criteria. Builds an array consisting of items a callback returns true for.
 * @param iterable Iterable.
 * @param callback Criteria callback.
 * @returns Filtered array.
 */

function filter(iterable, callback) {
  var result = [];

  var _iterator2 = _createForOfIteratorHelper(iterable),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var item = _step2.value;

      if (callback(item)) {
        result.push(item);
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return result;
}

exports.filter = filter;
/**
 * Counts items matching a criteria. Returns number of items which `callback` returns true for.
 * @param iterable Iterable.
 * @param callback Criteria callback.
 * @returns Number of items.
 */

function count(iterable, callback) {
  var result = 0;

  var _iterator3 = _createForOfIteratorHelper(iterable),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var item = _step3.value;

      if (callback(item)) {
        ++result;
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  return result;
}

exports.count = count;
/**
 * Indexes an iterable. Builds and returns a new map by rule: key is the result of the indexer function call,
 * value is the corresponding item.
 * @param iterable Iterable.
 * @param callback Indexer function.
 * @returns Index.
 */

function index(iterable, callback) {
  var result = new Map();

  var _iterator4 = _createForOfIteratorHelper(iterable),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var item = _step4.value;
      result.set(callback(item), item);
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  return result;
}

exports.index = index;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9JdGVyYWJsZVV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCRTs7Ozs7Ozs7Ozs7O0FBRUY7Ozs7O0FBS0c7O0FBQ0gsU0FBZ0IsR0FBaEIsQ0FBMEIsUUFBMUIsRUFBaUQsUUFBakQsRUFBeUU7QUFDeEUsTUFBTSxNQUFNLEdBQVEsRUFBcEI7O0FBRHdFLDZDQUV2RCxRQUZ1RDtBQUFBOztBQUFBO0FBRXhFLHdEQUEyQjtBQUFBLFVBQWxCLElBQWtCO0FBQzFCLE1BQUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxRQUFRLENBQUMsSUFBRCxDQUFwQjtBQUNBO0FBSnVFO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBS3hFLFNBQU8sTUFBUDtBQUNBOztBQU5ELE9BQUEsQ0FBQSxHQUFBLEdBQUEsR0FBQTtBQVFBOzs7OztBQUtHOztBQUNILFNBQWdCLE1BQWhCLENBQTBCLFFBQTFCLEVBQWlELFFBQWpELEVBQStFO0FBQzlFLE1BQU0sTUFBTSxHQUFRLEVBQXBCOztBQUQ4RSw4Q0FFN0QsUUFGNkQ7QUFBQTs7QUFBQTtBQUU5RSwyREFBMkI7QUFBQSxVQUFsQixJQUFrQjs7QUFDMUIsVUFBSSxRQUFRLENBQUMsSUFBRCxDQUFaLEVBQW9CO0FBQ25CLFFBQUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxJQUFaO0FBQ0E7QUFDRDtBQU42RTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU85RSxTQUFPLE1BQVA7QUFDQTs7QUFSRCxPQUFBLENBQUEsTUFBQSxHQUFBLE1BQUE7QUFVQTs7Ozs7QUFLRzs7QUFDSCxTQUFnQixLQUFoQixDQUF5QixRQUF6QixFQUFnRCxRQUFoRCxFQUE4RTtBQUM3RSxNQUFJLE1BQU0sR0FBRyxDQUFiOztBQUQ2RSw4Q0FFNUQsUUFGNEQ7QUFBQTs7QUFBQTtBQUU3RSwyREFBMkI7QUFBQSxVQUFsQixJQUFrQjs7QUFDMUIsVUFBSSxRQUFRLENBQUMsSUFBRCxDQUFaLEVBQW9CO0FBQ25CLFVBQUUsTUFBRjtBQUNBO0FBQ0Q7QUFONEU7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFPN0UsU0FBTyxNQUFQO0FBQ0E7O0FBUkQsT0FBQSxDQUFBLEtBQUEsR0FBQSxLQUFBO0FBVUE7Ozs7OztBQU1HOztBQUNILFNBQWdCLEtBQWhCLENBQTRCLFFBQTVCLEVBQW1ELFFBQW5ELEVBQTJFO0FBQzFFLE1BQU0sTUFBTSxHQUFHLElBQUksR0FBSixFQUFmOztBQUQwRSw4Q0FFekQsUUFGeUQ7QUFBQTs7QUFBQTtBQUUxRSwyREFBMkI7QUFBQSxVQUFsQixJQUFrQjtBQUMxQixNQUFBLE1BQU0sQ0FBQyxHQUFQLENBQVcsUUFBUSxDQUFDLElBQUQsQ0FBbkIsRUFBMkIsSUFBM0I7QUFDQTtBQUp5RTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUsxRSxTQUFPLE1BQVA7QUFDQTs7QUFORCxPQUFBLENBQUEsS0FBQSxHQUFBLEtBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIxIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG4vKipcbiAqIE1hcHMgaXRlcmFibGUgaXRlbXMuIFJldHVybnMgYW4gYXJyYXkgY29udGFpbmluZyByZXN1bHRzIG9mIGEgY2FsbGJhY2sgY2FsbCBmb3IgZWFjaCBpdGVyYWJsZSBpdGVtLlxuICogQHBhcmFtIGl0ZXJhYmxlIEl0ZXJhYmxlLlxuICogQHBhcmFtIGNhbGxiYWNrIE1hcHBpbmcgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyBNYXBwZWQgYXJyYXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXA8VCwgVT4oaXRlcmFibGU6IEl0ZXJhYmxlPFQ+LCBjYWxsYmFjazogKGl0ZW06IFQpID0+IFUpOiBVW10ge1xuXHRjb25zdCByZXN1bHQ6IFVbXSA9IFtdO1xuXHRmb3IgKGxldCBpdGVtIG9mIGl0ZXJhYmxlKSB7XG5cdFx0cmVzdWx0LnB1c2goY2FsbGJhY2soaXRlbSkpO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRmlsdGVycyBhbiBpdGVyYWJsZSBieSBjcml0ZXJpYS4gQnVpbGRzIGFuIGFycmF5IGNvbnNpc3Rpbmcgb2YgaXRlbXMgYSBjYWxsYmFjayByZXR1cm5zIHRydWUgZm9yLlxuICogQHBhcmFtIGl0ZXJhYmxlIEl0ZXJhYmxlLlxuICogQHBhcmFtIGNhbGxiYWNrIENyaXRlcmlhIGNhbGxiYWNrLlxuICogQHJldHVybnMgRmlsdGVyZWQgYXJyYXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXI8VD4oaXRlcmFibGU6IEl0ZXJhYmxlPFQ+LCBjYWxsYmFjazogKGl0ZW06IFQpID0+IGJvb2xlYW4pOiBUW10ge1xuXHRjb25zdCByZXN1bHQ6IFRbXSA9IFtdO1xuXHRmb3IgKGxldCBpdGVtIG9mIGl0ZXJhYmxlKSB7XG5cdFx0aWYgKGNhbGxiYWNrKGl0ZW0pKSB7XG5cdFx0XHRyZXN1bHQucHVzaChpdGVtKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDb3VudHMgaXRlbXMgbWF0Y2hpbmcgYSBjcml0ZXJpYS4gUmV0dXJucyBudW1iZXIgb2YgaXRlbXMgd2hpY2ggYGNhbGxiYWNrYCByZXR1cm5zIHRydWUgZm9yLlxuICogQHBhcmFtIGl0ZXJhYmxlIEl0ZXJhYmxlLlxuICogQHBhcmFtIGNhbGxiYWNrIENyaXRlcmlhIGNhbGxiYWNrLlxuICogQHJldHVybnMgTnVtYmVyIG9mIGl0ZW1zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY291bnQ8VD4oaXRlcmFibGU6IEl0ZXJhYmxlPFQ+LCBjYWxsYmFjazogKGl0ZW06IFQpID0+IGJvb2xlYW4pIHtcblx0bGV0IHJlc3VsdCA9IDA7XG5cdGZvciAobGV0IGl0ZW0gb2YgaXRlcmFibGUpIHtcblx0XHRpZiAoY2FsbGJhY2soaXRlbSkpIHtcblx0XHRcdCsrcmVzdWx0O1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEluZGV4ZXMgYW4gaXRlcmFibGUuIEJ1aWxkcyBhbmQgcmV0dXJucyBhIG5ldyBtYXAgYnkgcnVsZToga2V5IGlzIHRoZSByZXN1bHQgb2YgdGhlIGluZGV4ZXIgZnVuY3Rpb24gY2FsbCxcbiAqIHZhbHVlIGlzIHRoZSBjb3JyZXNwb25kaW5nIGl0ZW0uXG4gKiBAcGFyYW0gaXRlcmFibGUgSXRlcmFibGUuXG4gKiBAcGFyYW0gY2FsbGJhY2sgSW5kZXhlciBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIEluZGV4LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5kZXg8ViwgSz4oaXRlcmFibGU6IEl0ZXJhYmxlPFY+LCBjYWxsYmFjazogKGl0ZW06IFYpID0+IEspOiBNYXA8SywgVj4ge1xuXHRjb25zdCByZXN1bHQgPSBuZXcgTWFwPEssIFY+KCk7XG5cdGZvciAobGV0IGl0ZW0gb2YgaXRlcmFibGUpIHtcblx0XHRyZXN1bHQuc2V0KGNhbGxiYWNrKGl0ZW0pLCBpdGVtKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==

/***/ }),

/***/ "../../main/dist/Listener.js":
/*!***********************************!*\
  !*** ../../main/dist/Listener.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var Listener = /*#__PURE__*/function () {
  function Listener(_dispatcher, handler, scope) {
    _classCallCheck(this, Listener);

    this._dispatcher = _dispatcher;
    this.handler = handler;
    this.scope = scope;
  }

  _createClass(Listener, [{
    key: "destroy",
    value: function destroy() {
      this._dispatcher._unbind(this);
    }
  }]);

  return Listener;
}();

exports.default = Listener;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9MaXN0ZW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkU7Ozs7Ozs7Ozs7OztJQUttQixRO0FBRXBCLG9CQUFvQixXQUFwQixFQUF5RCxPQUF6RCxFQUFpRyxLQUFqRyxFQUEyRztBQUFBOztBQUF2RixTQUFBLFdBQUEsR0FBQSxXQUFBO0FBQXFDLFNBQUEsT0FBQSxHQUFBLE9BQUE7QUFBd0MsU0FBQSxLQUFBLEdBQUEsS0FBQTtBQUNoRzs7OztXQUVELG1CQUFPO0FBQ04sV0FBSyxXQUFMLENBQWlCLE9BQWpCLENBQXlCLElBQXpCO0FBQ0E7Ozs7OztBQVBGLE9BQUEsQ0FBQSxPQUFBLEdBQUEsUUFBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjEgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBEZXN0cm95YWJsZSBmcm9tICcuL0Rlc3Ryb3lhYmxlJztcbmltcG9ydCBEaXNwYXRjaGVyIGZyb20gJy4vRGlzcGF0Y2hlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpc3RlbmVyPFA+IGltcGxlbWVudHMgRGVzdHJveWFibGUge1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgX2Rpc3BhdGNoZXI6IERpc3BhdGNoZXI8UD4sIHJlYWRvbmx5IGhhbmRsZXI6IChtZXNzYWdlOiBQKSA9PiB2b2lkLCByZWFkb25seSBzY29wZTogYW55KSB7XG5cdH1cblxuXHRkZXN0cm95KCkge1xuXHRcdHRoaXMuX2Rpc3BhdGNoZXIuX3VuYmluZCh0aGlzKTtcblx0fVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==

/***/ }),

/***/ "../../main/dist/MapUtils.js":
/*!***********************************!*\
  !*** ../../main/dist/MapUtils.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getIterableValues = exports.getIterableKeys = exports.filter = exports.map = void 0;
/**
 * Builds a new map of results of callback function call for each map entry with the same keys.
 * @param map Map.
 * @param callback Mapping function.
 * @returns Mapped map.
 */

function map(map, callback) {
  var result = new Map();

  var _iterator = _createForOfIteratorHelper(map),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _slicedToArray(_step.value, 2),
          key = _step$value[0],
          value = _step$value[1];

      result.set(key, callback(value, key));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return result;
}

exports.map = map;
/**
 * Builds a new map of map entries the callback function returns a truthy value for.
 * @param map Iterable.
 * @param callback Criteria callback.
 * @returns Filtered map.
 */

function filter(map, callback) {
  var result = new Map();

  var _iterator2 = _createForOfIteratorHelper(map),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _step2$value = _slicedToArray(_step2.value, 2),
          key = _step2$value[0],
          value = _step2$value[1];

      if (callback(value, key)) {
        result.set(key, value);
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return result;
}

exports.filter = filter; // Some functions mitigating a serious design flaw of modern JS API. Native methods return Iterator instead of Iterable.

function getIterableKeys(map) {
  return _defineProperty({}, Symbol.iterator, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var _iterator3, _step3, _step3$value, key, _;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _iterator3 = _createForOfIteratorHelper(map);
            _context.prev = 1;

            _iterator3.s();

          case 3:
            if ((_step3 = _iterator3.n()).done) {
              _context.next = 9;
              break;
            }

            _step3$value = _slicedToArray(_step3.value, 2), key = _step3$value[0], _ = _step3$value[1];
            _context.next = 7;
            return key;

          case 7:
            _context.next = 3;
            break;

          case 9:
            _context.next = 14;
            break;

          case 11:
            _context.prev = 11;
            _context.t0 = _context["catch"](1);

            _iterator3.e(_context.t0);

          case 14:
            _context.prev = 14;

            _iterator3.f();

            return _context.finish(14);

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 11, 14, 17]]);
  }));
}

exports.getIterableKeys = getIterableKeys;

function getIterableValues(map) {
  return _defineProperty({}, Symbol.iterator, /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var _iterator4, _step4, _step4$value, _, value;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _iterator4 = _createForOfIteratorHelper(map);
            _context2.prev = 1;

            _iterator4.s();

          case 3:
            if ((_step4 = _iterator4.n()).done) {
              _context2.next = 9;
              break;
            }

            _step4$value = _slicedToArray(_step4.value, 2), _ = _step4$value[0], value = _step4$value[1];
            _context2.next = 7;
            return value;

          case 7:
            _context2.next = 3;
            break;

          case 9:
            _context2.next = 14;
            break;

          case 11:
            _context2.prev = 11;
            _context2.t0 = _context2["catch"](1);

            _iterator4.e(_context2.t0);

          case 14:
            _context2.prev = 14;

            _iterator4.f();

            return _context2.finish(14);

          case 17:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[1, 11, 14, 17]]);
  }));
}

exports.getIterableValues = getIterableValues;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NYXBVdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFRjs7Ozs7QUFLRzs7QUFDSCxTQUFnQixHQUFoQixDQUE2QixHQUE3QixFQUE2RCxRQUE3RCxFQUE4RjtBQUM3RixNQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUosRUFBZjs7QUFENkYsNkNBRXBFLEdBRm9FO0FBQUE7O0FBQUE7QUFFN0Ysd0RBQThCO0FBQUE7QUFBQSxVQUFwQixHQUFvQjtBQUFBLFVBQWYsS0FBZTs7QUFDN0IsTUFBQSxNQUFNLENBQUMsR0FBUCxDQUFXLEdBQVgsRUFBZ0IsUUFBUSxDQUFDLEtBQUQsRUFBUSxHQUFSLENBQXhCO0FBQ0E7QUFKNEY7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFLN0YsU0FBTyxNQUFQO0FBQ0E7O0FBTkQsT0FBQSxDQUFBLEdBQUEsR0FBQSxHQUFBO0FBUUE7Ozs7O0FBS0c7O0FBQ0gsU0FBZ0IsTUFBaEIsQ0FBNkIsR0FBN0IsRUFBNkQsUUFBN0QsRUFBb0c7QUFDbkcsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFKLEVBQWY7O0FBRG1HLDhDQUUxRSxHQUYwRTtBQUFBOztBQUFBO0FBRW5HLDJEQUE4QjtBQUFBO0FBQUEsVUFBcEIsR0FBb0I7QUFBQSxVQUFmLEtBQWU7O0FBQzdCLFVBQUksUUFBUSxDQUFDLEtBQUQsRUFBUSxHQUFSLENBQVosRUFBMEI7QUFDekIsUUFBQSxNQUFNLENBQUMsR0FBUCxDQUFXLEdBQVgsRUFBZ0IsS0FBaEI7QUFDQTtBQUNEO0FBTmtHO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBT25HLFNBQU8sTUFBUDtBQUNBOztBQVJELE9BQUEsQ0FBQSxNQUFBLEdBQUEsTUFBQSxDLENBVUE7O0FBRUEsU0FBZ0IsZUFBaEIsQ0FBc0MsR0FBdEMsRUFBb0U7QUFDbkUsNkJBQ0UsTUFBTSxDQUFDLFFBRFQsdUNBQ29CO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxvREFDSyxHQURMO0FBQUE7O0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSw0REFDTixHQURNLG9CQUNELENBREM7QUFBQTtBQUVqQixtQkFBTSxHQUFOOztBQUZpQjtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQUFBOztBQUFBOztBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBRHBCO0FBT0E7O0FBUkQsT0FBQSxDQUFBLGVBQUEsR0FBQSxlQUFBOztBQVVBLFNBQWdCLGlCQUFoQixDQUF3QyxHQUF4QyxFQUFzRTtBQUNyRSw2QkFDRSxNQUFNLENBQUMsUUFEVCx1Q0FDb0I7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG9EQUNPLEdBRFA7QUFBQTs7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLDREQUNOLENBRE0sb0JBQ0gsS0FERztBQUFBO0FBRWpCLG1CQUFNLEtBQU47O0FBRmlCO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUFBO0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FEcEI7QUFPQTs7QUFSRCxPQUFBLENBQUEsaUJBQUEsR0FBQSxpQkFBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjEgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbi8qKlxuICogQnVpbGRzIGEgbmV3IG1hcCBvZiByZXN1bHRzIG9mIGNhbGxiYWNrIGZ1bmN0aW9uIGNhbGwgZm9yIGVhY2ggbWFwIGVudHJ5IHdpdGggdGhlIHNhbWUga2V5cy5cbiAqIEBwYXJhbSBtYXAgTWFwLlxuICogQHBhcmFtIGNhbGxiYWNrIE1hcHBpbmcgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyBNYXBwZWQgbWFwLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFwPEssIFQsIFU+KG1hcDogSXRlcmFibGU8cmVhZG9ubHkgW0ssIFRdPiwgY2FsbGJhY2s6ICh2YWx1ZTogVCwga2V5OiBLKSA9PiBVKTogTWFwPEssIFU+IHtcblx0Y29uc3QgcmVzdWx0ID0gbmV3IE1hcDxLLCBVPigpO1xuXHRmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgbWFwKSB7XG5cdFx0cmVzdWx0LnNldChrZXksIGNhbGxiYWNrKHZhbHVlLCBrZXkpKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEJ1aWxkcyBhIG5ldyBtYXAgb2YgbWFwIGVudHJpZXMgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHJldHVybnMgYSB0cnV0aHkgdmFsdWUgZm9yLlxuICogQHBhcmFtIG1hcCBJdGVyYWJsZS5cbiAqIEBwYXJhbSBjYWxsYmFjayBDcml0ZXJpYSBjYWxsYmFjay5cbiAqIEByZXR1cm5zIEZpbHRlcmVkIG1hcC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlcjxLLCBWPihtYXA6IEl0ZXJhYmxlPHJlYWRvbmx5IFtLLCBWXT4sIGNhbGxiYWNrOiAodmFsdWU6IFYsIGtleTogSykgPT4gYm9vbGVhbik6IE1hcDxLLCBWPiB7XG5cdGNvbnN0IHJlc3VsdCA9IG5ldyBNYXA8SywgVj4oKTtcblx0Zm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIG1hcCkge1xuXHRcdGlmIChjYWxsYmFjayh2YWx1ZSwga2V5KSkge1xuXHRcdFx0cmVzdWx0LnNldChrZXksIHZhbHVlKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gU29tZSBmdW5jdGlvbnMgbWl0aWdhdGluZyBhIHNlcmlvdXMgZGVzaWduIGZsYXcgb2YgbW9kZXJuIEpTIEFQSS4gTmF0aXZlIG1ldGhvZHMgcmV0dXJuIEl0ZXJhdG9yIGluc3RlYWQgb2YgSXRlcmFibGUuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJdGVyYWJsZUtleXM8SywgVj4obWFwOiBJdGVyYWJsZTxyZWFkb25seSBbSywgVl0+KTogSXRlcmFibGU8Sz4ge1xuXHRyZXR1cm4ge1xuXHRcdFtTeW1ib2wuaXRlcmF0b3JdOiBmdW5jdGlvbiogKCkge1xuXHRcdFx0Zm9yIChjb25zdCBba2V5LCBfXSBvZiBtYXApIHtcblx0XHRcdFx0eWllbGQga2V5O1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEl0ZXJhYmxlVmFsdWVzPEssIFY+KG1hcDogSXRlcmFibGU8cmVhZG9ubHkgW0ssIFZdPik6IEl0ZXJhYmxlPFY+IHtcblx0cmV0dXJuIHtcblx0XHRbU3ltYm9sLml0ZXJhdG9yXTogZnVuY3Rpb24qICgpIHtcblx0XHRcdGZvciAoY29uc3QgW18sIHZhbHVlXSBvZiBtYXApIHtcblx0XHRcdFx0eWllbGQgdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==

/***/ }),

/***/ "../../main/dist/Mapper.js":
/*!*********************************!*\
  !*** ../../main/dist/Mapper.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.mapPropertiesByReducer = exports.mapProperties = void 0;

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));

var Destructor_1 = __importDefault(__webpack_require__(/*! ./Destructor */ "../../main/dist/Destructor.js"));

var index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");

var Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));
/**
 * Listens source properties modification and recreates target value via mapping function.
 *
 * @param T Target property value type.
 */


var Mapper = /*#__PURE__*/function (_Class_1$default) {
  _inherits(Mapper, _Class_1$default);

  var _super = _createSuper(Mapper);

  /**
   * @param sources Source properties.
   * @param create Mapping function.
   * @param config Configuration.
   */
  function Mapper(sources, create) {
    var _this;

    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, Mapper);

    var _a, _b;

    _this = _super.call(this);
    _this.sources = sources;
    _this._create = create;
    _this._destroy = config.destroy;
    _this._scope = config.scope || _assertThisInitialized(_this);
    _this._target = (_a = config.target) !== null && _a !== void 0 ? _a : new Property_1.default(null, _this.sources.every(function (source) {
      return source.silent;
    }));
    _this._viaNull = (_b = config.viaNull) !== null && _b !== void 0 ? _b : false;
    _this._sourceValues = null;
    _this._targetValue = null;

    _this.update();

    _this.sources.forEach(_this.bind, _assertThisInitialized(_this));

    return _this;
  }
  /**
   * Target property.
   */


  _createClass(Mapper, [{
    key: "target",
    get: function get() {
      return this._target;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "destroyObject",
    value: function destroyObject() {
      var oldValue = this.target.get();

      if (this._destroy && oldValue === this._targetValue) {
        this._target.set(null);

        this._done();
      }

      this._create = null;
      this._destroy = null;
      this._scope = null;
      this._target = null;
      this._sourceValues = null;
      this._targetValue = null;

      _get(_getPrototypeOf(Mapper.prototype), "destroyObject", this).call(this);
    }
    /**
     * Listens to the specified dispatcher and issues target value recalculation on any message.
     * @param dispatcher Dispatcher.
     * @returns this
     */

  }, {
    key: "listen",
    value: function listen(dispatcher) {
      return this.owning(dispatcher.listen(this.update, this));
    }
    /**
     * Watches over the specified property and issues target value recalculation on its change.
     * @param property Property.
     * @returns this
     */

  }, {
    key: "bind",
    value: function bind(property) {
      return this.listen(property.onChange);
    }
    /**
     * Updates target property forcibly.
     */

  }, {
    key: "update",
    value: function update() {
      if (this._viaNull) {
        this._target.set(null);

        this._done();
      }

      var values = this.sources.map(function (source) {
        return source.get();
      });

      var newValue = this._create.apply(this._scope, values);

      this._target.set(newValue);

      if (!this._viaNull) {
        this._done();
      }

      this._targetValue = newValue;
      this._sourceValues = values;
    }
  }, {
    key: "_done",
    value: function _done() {
      if (this._destroy && this._sourceValues) {
        this._destroy.apply(this._scope, [this._targetValue].concat(this._sourceValues));
      }
    }
  }]);

  return Mapper;
}(Class_1.default);

(function (Mapper) {
  /**
   * Mapper by reducer. Kind of mapper optimized for working with collections of similar properties.
   */
  var ByReducer = /*#__PURE__*/function (_Class_1$default2) {
    _inherits(ByReducer, _Class_1$default2);

    var _super2 = _createSuper(ByReducer);

    /**
     * @param sources Source bindables.
     * @param reducer Mapping reducer.
     * @param target Target property.
     */
    function ByReducer(sources, callback, initial, target) {
      var _this2;

      _classCallCheck(this, ByReducer);

      _this2 = _super2.call(this);
      _this2.sources = sources;
      _this2.callback = callback;
      _this2.initial = initial;
      _this2._target = target !== null && target !== void 0 ? target : new Property_1.default(null, _this2.sources.every(function (source) {
        return source.silent;
      }));

      _this2._update();

      _this2.sources.forEach(_this2._bind, _assertThisInitialized(_this2));

      return _this2;
    }
    /**
     * Target property.
     */


    _createClass(ByReducer, [{
      key: "target",
      get: function get() {
        return this._target;
      }
    }, {
      key: "_update",
      value: function _update() {
        var values = this.sources.map(function (source) {
          return source.get();
        });

        this._target.set(values.reduce(this.callback, this.initial));
      }
    }, {
      key: "_bind",
      value: function _bind(property) {
        return this.owning(property.onChange.listen(this._update, this));
      }
    }]);

    return ByReducer;
  }(Class_1.default);

  Mapper.ByReducer = ByReducer;
})(Mapper || (Mapper = {}));

exports.default = Mapper;
/**
 * @param sources Source properties.
 * @param create Mapping function.
 * @param config Configuration.
 * @returns Target property.
 */

function mapProperties(sources, create) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (!sources.every(function (source) {
    return source.silent;
  })) {
    var _target = new Property_1.default();

    return _target.owning(new Mapper(sources, create, {
      target: _target,
      destroy: config.destroy,
      scope: config.scope,
      viaNull: config.viaNull
    }));
  }

  var sourceValues = sources.map(function (source) {
    return source.get();
  });
  var targetValue = create.apply(config.scope, sourceValues);
  var target = new Property_1.default(targetValue, true);

  if (config.destroy === index_1.destroy) {
    target.ownValue();
  } else if (config.destroy) {
    target.own(new Destructor_1.default(function () {
      return config.destroy.apply(config.scope, [targetValue].concat(_toConsumableArray(sourceValues)));
    }));
  }

  return target;
}

exports.mapProperties = mapProperties;

function mapPropertiesByReducer(sources, callback, initial) {
  if (!sources.every(function (source) {
    return source.silent;
  })) {
    var target = new Property_1.default();
    return target.owning(new Mapper.ByReducer(sources, callback, initial, target));
  }

  return new Property_1.default(sources.map(function (source) {
    return source.get();
  }).reduce(callback, initial), true);
}

exports.mapPropertiesByReducer = mapPropertiesByReducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/Property.js":
/*!***********************************!*\
  !*** ../../main/dist/Property.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));

var Dispatcher_1 = __importDefault(__webpack_require__(/*! ./Dispatcher */ "../../main/dist/Dispatcher.js"));

var index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");

var Mapper_1 = __webpack_require__(/*! ./Mapper */ "../../main/dist/Mapper.js");
/**
 * Container for a value. Provides basic data binding functionality.
 */


var Property = /*#__PURE__*/function (_Class_1$default) {
  _inherits(Property, _Class_1$default);

  var _super = _createSuper(Property);

  /**
   * Constructs a property and sets initial value.
   * @param value Initial value.
   * @param silent If true, uses `dummyDispatcher` implementation for `onChange`.
   */
  function Property() {
    var _this;

    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var silent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    _classCallCheck(this, Property);

    _this = _super.call(this);
    _this.value = value;
    _this._ownsValue = false;
    _this._onChange = Dispatcher_1.default.make(silent);
    return _this;
  }

  _createClass(Property, [{
    key: "destroyObject",
    value: function destroyObject() {
      if (this._ownsValue) {
        index_1.destroy(this.value);
      }

      _get(_getPrototypeOf(Property.prototype), "destroyObject", this).call(this);
    }
    /**
     * Checks if this property never dispatches any messages. This knowledge may help you do certain code optimizations.
     */

  }, {
    key: "silent",
    get: function get() {
      return this._onChange.dummy;
    }
    /**
     * Property value is changed. Triggered in result of `set` method call if the value has been changed.
     */

  }, {
    key: "onChange",
    get: function get() {
      return this._onChange;
    }
    /**
     * Returns current property value.
     * Think twice before calling this method - probably it makes sense to use some kind of binding instead?
     */

  }, {
    key: "get",
    value: function get() {
      return this.value;
    }
    /**
     * Changes the property value and dispatches a change message if the value has truly been changed.
     * @param value New value to set.
     */

  }, {
    key: "set",
    value: function set(value) {
      if (value === undefined) {
        value = null;
      }

      var oldValue = this.value;

      if (oldValue === value) {
        return;
      }

      this.value = value;

      this._onChange.dispatch({
        sender: this,
        value: value,
        oldValue: oldValue
      });

      if (this._ownsValue) {
        index_1.destroy(oldValue);
      }
    }
    /**
     * Makes this property an owner of its value. It means that the value is
     * destroyed automatically on reassignment or destruction of the
     * property.
     */

  }, {
    key: "ownValue",
    value: function ownValue() {
      this._ownsValue = true;
      return this;
    }
    /**
     * Builds a new property containing the result of the callback function called
     * on this property value. To stop synchronization, destroy the result property.
     * In comparison to `mapDestroyable` method, doesn't destroy the previously assigned target values.
     * To map multiple properties, use `Mapper`.
     *
     * @param create Mapping function.
     * @param config Mapping configuration.
     */

  }, {
    key: "map",
    value: function map(create, config) {
      return Mapper_1.mapProperties([this], create, config);
    }
  }]);

  return Property;
}(Class_1.default);

exports.default = Property;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Qcm9wZXJ0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0YsSUFBQSxPQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQTs7QUFFQSxJQUFBLFlBQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxTQUFBLENBQUE7O0FBR0EsSUFBQSxRQUFBLEdBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQTtBQUVBOztBQUVHOzs7SUFDa0IsUTs7Ozs7QUFLcEI7Ozs7QUFJRztBQUNILHNCQUE4RDtBQUFBOztBQUFBLFFBQXhDLEtBQXdDLHVFQUE3QixJQUE2QjtBQUFBLFFBQXZCLE1BQXVCLHVFQUFMLEtBQUs7O0FBQUE7O0FBQzdEO0FBRHFCLFVBQUEsS0FBQSxHQUFBLEtBQUE7QUFUZCxVQUFBLFVBQUEsR0FBYSxLQUFiO0FBV1AsVUFBSyxTQUFMLEdBQWlCLFlBQUEsQ0FBQSxPQUFBLENBQVcsSUFBWCxDQUEyQyxNQUEzQyxDQUFqQjtBQUY2RDtBQUc3RDs7OztXQUVTLHlCQUFhO0FBQ3RCLFVBQUksS0FBSyxVQUFULEVBQXFCO0FBQ3BCLFFBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBUSxLQUFLLEtBQWI7QUFDQTs7QUFDRDtBQUNBO0FBRUQ7O0FBRUc7Ozs7U0FDSCxlQUFVO0FBQ1QsYUFBTyxLQUFLLFNBQUwsQ0FBZSxLQUF0QjtBQUNBO0FBRUQ7O0FBRUc7Ozs7U0FDSCxlQUFZO0FBQ1gsYUFBTyxLQUFLLFNBQVo7QUFDQTtBQUVEOzs7QUFHRzs7OztXQUNILGVBQUc7QUFDRixhQUFPLEtBQUssS0FBWjtBQUNBO0FBRUQ7OztBQUdHOzs7O1dBQ0gsYUFBSSxLQUFKLEVBQVk7QUFDWCxVQUFJLEtBQUssS0FBSyxTQUFkLEVBQXlCO0FBQ3hCLFFBQUEsS0FBSyxHQUFHLElBQVI7QUFDQTs7QUFDRCxVQUFNLFFBQVEsR0FBRyxLQUFLLEtBQXRCOztBQUNBLFVBQUksUUFBUSxLQUFLLEtBQWpCLEVBQXdCO0FBQ3ZCO0FBQ0E7O0FBQ0QsV0FBSyxLQUFMLEdBQWEsS0FBYjs7QUFDQSxXQUFLLFNBQUwsQ0FBZSxRQUFmLENBQXdCO0FBQUUsUUFBQSxNQUFNLEVBQUUsSUFBVjtBQUFnQixRQUFBLEtBQUssRUFBRSxLQUF2QjtBQUE4QixRQUFBLFFBQVEsRUFBRTtBQUF4QyxPQUF4Qjs7QUFDQSxVQUFJLEtBQUssVUFBVCxFQUFxQjtBQUNwQixRQUFBLE9BQUEsQ0FBQSxPQUFBLENBQVEsUUFBUjtBQUNBO0FBQ0Q7QUFFRDs7OztBQUlHOzs7O1dBQ0gsb0JBQVE7QUFDUCxXQUFLLFVBQUwsR0FBa0IsSUFBbEI7QUFDQSxhQUFPLElBQVA7QUFDQTtBQUVEOzs7Ozs7OztBQVFHOzs7O1dBQ0gsYUFBTyxNQUFQLEVBQWdDLE1BQWhDLEVBQXlEO0FBQ3hELGFBQU8sUUFBQSxDQUFBLGFBQUEsQ0FBYyxDQUFDLElBQUQsQ0FBZCxFQUFzQixNQUF0QixFQUE4QixNQUE5QixDQUFQO0FBQ0E7Ozs7RUFwRnVDLE9BQUEsQ0FBQSxPOztBQUF6QyxPQUFBLENBQUEsT0FBQSxHQUFBLFFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIxIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgQmluZGFibGUgZnJvbSBcIi4vQmluZGFibGVcIjtcbmltcG9ydCBDbGFzcyBmcm9tIFwiLi9DbGFzc1wiO1xuaW1wb3J0IERlc3Ryb3lhYmxlQmluZGFibGUgZnJvbSBcIi4vRGVzdHJveWFibGVCaW5kYWJsZVwiO1xuaW1wb3J0IERpc3BhdGNoZXIgZnJvbSBcIi4vRGlzcGF0Y2hlclwiO1xuaW1wb3J0IElEaXNwYXRjaGVyIGZyb20gXCIuL0lEaXNwYXRjaGVyXCI7XG5pbXBvcnQge2Rlc3Ryb3l9IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgSVByb3BlcnR5IGZyb20gXCIuL0lQcm9wZXJ0eVwiO1xuaW1wb3J0IExpc3RlbmFibGUgZnJvbSBcIi4vTGlzdGVuYWJsZVwiO1xuaW1wb3J0IHtkZWZhdWx0IGFzIE1hcHBlciwgbWFwUHJvcGVydGllc30gZnJvbSBcIi4vTWFwcGVyXCI7XG5cbi8qKlxuICogQ29udGFpbmVyIGZvciBhIHZhbHVlLiBQcm92aWRlcyBiYXNpYyBkYXRhIGJpbmRpbmcgZnVuY3Rpb25hbGl0eS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvcGVydHk8Vj4gZXh0ZW5kcyBDbGFzcyBpbXBsZW1lbnRzIElQcm9wZXJ0eTxWPiB7XG5cdHByaXZhdGUgX293bnNWYWx1ZSA9IGZhbHNlO1xuXG5cdHByb3RlY3RlZCBfb25DaGFuZ2U6IElEaXNwYXRjaGVyPEJpbmRhYmxlLkNoYW5nZU1lc3NhZ2U8Vj4+O1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgcHJvcGVydHkgYW5kIHNldHMgaW5pdGlhbCB2YWx1ZS5cblx0ICogQHBhcmFtIHZhbHVlIEluaXRpYWwgdmFsdWUuXG5cdCAqIEBwYXJhbSBzaWxlbnQgSWYgdHJ1ZSwgdXNlcyBgZHVtbXlEaXNwYXRjaGVyYCBpbXBsZW1lbnRhdGlvbiBmb3IgYG9uQ2hhbmdlYC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKHByb3RlY3RlZCB2YWx1ZTogViA9IG51bGwsIHNpbGVudDogYm9vbGVhbiA9IGZhbHNlKSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLl9vbkNoYW5nZSA9IERpc3BhdGNoZXIubWFrZTxCaW5kYWJsZS5DaGFuZ2VNZXNzYWdlPFY+PihzaWxlbnQpO1xuXHR9XG5cblx0cHJvdGVjdGVkIGRlc3Ryb3lPYmplY3QoKSB7XG5cdFx0aWYgKHRoaXMuX293bnNWYWx1ZSkge1xuXHRcdFx0ZGVzdHJveSh0aGlzLnZhbHVlKTtcblx0XHR9XG5cdFx0c3VwZXIuZGVzdHJveU9iamVjdCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGlzIHByb3BlcnR5IG5ldmVyIGRpc3BhdGNoZXMgYW55IG1lc3NhZ2VzLiBUaGlzIGtub3dsZWRnZSBtYXkgaGVscCB5b3UgZG8gY2VydGFpbiBjb2RlIG9wdGltaXphdGlvbnMuXG5cdCAqL1xuXHRnZXQgc2lsZW50KCkge1xuXHRcdHJldHVybiB0aGlzLl9vbkNoYW5nZS5kdW1teTtcblx0fVxuXG5cdC8qKlxuXHQgKiBQcm9wZXJ0eSB2YWx1ZSBpcyBjaGFuZ2VkLiBUcmlnZ2VyZWQgaW4gcmVzdWx0IG9mIGBzZXRgIG1ldGhvZCBjYWxsIGlmIHRoZSB2YWx1ZSBoYXMgYmVlbiBjaGFuZ2VkLlxuXHQgKi9cblx0Z2V0IG9uQ2hhbmdlKCk6IExpc3RlbmFibGU8QmluZGFibGUuQ2hhbmdlTWVzc2FnZTxWPj4ge1xuXHRcdHJldHVybiB0aGlzLl9vbkNoYW5nZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGN1cnJlbnQgcHJvcGVydHkgdmFsdWUuXG5cdCAqIFRoaW5rIHR3aWNlIGJlZm9yZSBjYWxsaW5nIHRoaXMgbWV0aG9kIC0gcHJvYmFibHkgaXQgbWFrZXMgc2Vuc2UgdG8gdXNlIHNvbWUga2luZCBvZiBiaW5kaW5nIGluc3RlYWQ/XG5cdCAqL1xuXHRnZXQoKTogViB7XG5cdFx0cmV0dXJuIHRoaXMudmFsdWU7XG5cdH1cblxuXHQvKipcblx0ICogQ2hhbmdlcyB0aGUgcHJvcGVydHkgdmFsdWUgYW5kIGRpc3BhdGNoZXMgYSBjaGFuZ2UgbWVzc2FnZSBpZiB0aGUgdmFsdWUgaGFzIHRydWx5IGJlZW4gY2hhbmdlZC5cblx0ICogQHBhcmFtIHZhbHVlIE5ldyB2YWx1ZSB0byBzZXQuXG5cdCAqL1xuXHRzZXQodmFsdWU6IFYpIHtcblx0XHRpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dmFsdWUgPSBudWxsO1xuXHRcdH1cblx0XHRjb25zdCBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG5cdFx0aWYgKG9sZFZhbHVlID09PSB2YWx1ZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR0aGlzLnZhbHVlID0gdmFsdWU7XG5cdFx0dGhpcy5fb25DaGFuZ2UuZGlzcGF0Y2goeyBzZW5kZXI6IHRoaXMsIHZhbHVlOiB2YWx1ZSwgb2xkVmFsdWU6IG9sZFZhbHVlIH0pO1xuXHRcdGlmICh0aGlzLl9vd25zVmFsdWUpIHtcblx0XHRcdGRlc3Ryb3kob2xkVmFsdWUpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBNYWtlcyB0aGlzIHByb3BlcnR5IGFuIG93bmVyIG9mIGl0cyB2YWx1ZS4gSXQgbWVhbnMgdGhhdCB0aGUgdmFsdWUgaXNcblx0ICogZGVzdHJveWVkIGF1dG9tYXRpY2FsbHkgb24gcmVhc3NpZ25tZW50IG9yIGRlc3RydWN0aW9uIG9mIHRoZVxuXHQgKiBwcm9wZXJ0eS5cblx0ICovXG5cdG93blZhbHVlKCk6IHRoaXMge1xuXHRcdHRoaXMuX293bnNWYWx1ZSA9IHRydWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogQnVpbGRzIGEgbmV3IHByb3BlcnR5IGNvbnRhaW5pbmcgdGhlIHJlc3VsdCBvZiB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gY2FsbGVkXG5cdCAqIG9uIHRoaXMgcHJvcGVydHkgdmFsdWUuIFRvIHN0b3Agc3luY2hyb25pemF0aW9uLCBkZXN0cm95IHRoZSByZXN1bHQgcHJvcGVydHkuXG5cdCAqIEluIGNvbXBhcmlzb24gdG8gYG1hcERlc3Ryb3lhYmxlYCBtZXRob2QsIGRvZXNuJ3QgZGVzdHJveSB0aGUgcHJldmlvdXNseSBhc3NpZ25lZCB0YXJnZXQgdmFsdWVzLlxuXHQgKiBUbyBtYXAgbXVsdGlwbGUgcHJvcGVydGllcywgdXNlIGBNYXBwZXJgLlxuXHQgKlxuXHQgKiBAcGFyYW0gY3JlYXRlIE1hcHBpbmcgZnVuY3Rpb24uXG5cdCAqIEBwYXJhbSBjb25maWcgTWFwcGluZyBjb25maWd1cmF0aW9uLlxuXHQgKi9cblx0bWFwPFU+KGNyZWF0ZTogKHZhbHVlOiBWKSA9PiBVLCBjb25maWc/OiBNYXBwZXIuQ29uZmlnPFU+KTogRGVzdHJveWFibGVCaW5kYWJsZTxVPiB7XG5cdFx0cmV0dXJuIG1hcFByb3BlcnRpZXMoW3RoaXNdLCBjcmVhdGUsIGNvbmZpZyk7XG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "../../main/dist/SetUtils.js":
/*!***********************************!*\
  !*** ../../main/dist/SetUtils.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getDifference = void 0;
/**
 * Returns an array of all items that are present in a subtractor, but not in a subtrahend.
 * @param subtractor Subtractor.
 * @param subtrahend Subtrahend.
 * @returns Difference.
 */

function getDifference(subtractor, subtrahend) {
  var result = [];

  var _iterator = _createForOfIteratorHelper(subtractor),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var item = _step.value;

      if (!subtrahend.has(item)) {
        result.push(item);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return result;
}

exports.getDifference = getDifference;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TZXRVdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkU7Ozs7Ozs7Ozs7OztBQU1GOzs7OztBQUtHOztBQUNILFNBQWdCLGFBQWhCLENBQWlDLFVBQWpDLEVBQTBELFVBQTFELEVBQWdGO0FBQy9FLE1BQU0sTUFBTSxHQUFRLEVBQXBCOztBQUQrRSw2Q0FFOUQsVUFGOEQ7QUFBQTs7QUFBQTtBQUUvRSx3REFBNkI7QUFBQSxVQUFwQixJQUFvQjs7QUFDNUIsVUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFYLENBQWUsSUFBZixDQUFMLEVBQTJCO0FBQzFCLFFBQUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxJQUFaO0FBQ0E7QUFDRDtBQU44RTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU8vRSxTQUFPLE1BQVA7QUFDQTs7QUFSRCxPQUFBLENBQUEsYUFBQSxHQUFBLGFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIxIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5leHBvcnQgaW50ZXJmYWNlIFNldExpa2U8VD4ge1xuXHRoYXModmFsdWU6IFQpOiBib29sZWFuO1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgYWxsIGl0ZW1zIHRoYXQgYXJlIHByZXNlbnQgaW4gYSBzdWJ0cmFjdG9yLCBidXQgbm90IGluIGEgc3VidHJhaGVuZC5cbiAqIEBwYXJhbSBzdWJ0cmFjdG9yIFN1YnRyYWN0b3IuXG4gKiBAcGFyYW0gc3VidHJhaGVuZCBTdWJ0cmFoZW5kLlxuICogQHJldHVybnMgRGlmZmVyZW5jZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERpZmZlcmVuY2U8VD4oc3VidHJhY3RvcjogSXRlcmFibGU8VD4sIHN1YnRyYWhlbmQ6IFNldExpa2U8VD4pOiBUW10ge1xuXHRjb25zdCByZXN1bHQ6IFRbXSA9IFtdO1xuXHRmb3IgKGxldCBpdGVtIG9mIHN1YnRyYWN0b3IpIHtcblx0XHRpZiAoIXN1YnRyYWhlbmQuaGFzKGl0ZW0pKSB7XG5cdFx0XHRyZXN1bHQucHVzaChpdGVtKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "../../main/dist/StringUtils.js":
/*!**************************************!*\
  !*** ../../main/dist/StringUtils.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.parseClass = exports.camel = exports.capitalize = void 0;
/**
 * Capitalizes first symbol.
 *
 *     JW.strings.capitalize("vasya")  // "Vasya"
 */

function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.substr(1);
}

exports.capitalize = capitalize;
/**
 * Converts hyphen-style to camelStyle.
 *
 *     JW.strings.camel("i-love-js")  // "iLoveJs"
 */

function camel(str) {
  return String(str).replace(/-([a-z])/ig, _fcamel);
}

exports.camel = camel;
/**
 * Parses CSS class string and returns array of CSS class names.
 * Supports strings, untrimmed strings, space-separated strings, arrays
 * and subarrays.
 *
 *     parseClass("  a    b "); // ["a", "b"]
 */

function parseClass(str) {
  if (str == null) {
    return [];
  }

  str = str.trim();

  if (str === "") {
    return [];
  }

  return str.split(/\s+/);
}

exports.parseClass = parseClass;

function _fcamel(_a, b) {
  return b.toUpperCase();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TdHJpbmdVdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkU7Ozs7OztBQUVGOzs7O0FBSUc7O0FBQ0gsU0FBZ0IsVUFBaEIsQ0FBMkIsR0FBM0IsRUFBc0M7QUFDckMsU0FBTyxHQUFHLENBQUMsTUFBSixDQUFXLENBQVgsRUFBYyxXQUFkLEtBQThCLEdBQUcsQ0FBQyxNQUFKLENBQVcsQ0FBWCxDQUFyQztBQUNBOztBQUZELE9BQUEsQ0FBQSxVQUFBLEdBQUEsVUFBQTtBQUlBOzs7O0FBSUc7O0FBQ0gsU0FBZ0IsS0FBaEIsQ0FBc0IsR0FBdEIsRUFBaUM7QUFDaEMsU0FBTyxNQUFNLENBQUMsR0FBRCxDQUFOLENBQVksT0FBWixDQUFvQixZQUFwQixFQUFrQyxPQUFsQyxDQUFQO0FBQ0E7O0FBRkQsT0FBQSxDQUFBLEtBQUEsR0FBQSxLQUFBO0FBSUE7Ozs7OztBQU1HOztBQUNILFNBQWdCLFVBQWhCLENBQTJCLEdBQTNCLEVBQXNDO0FBQ3JDLE1BQUksR0FBRyxJQUFJLElBQVgsRUFBaUI7QUFDaEIsV0FBTyxFQUFQO0FBQ0E7O0FBQ0QsRUFBQSxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUosRUFBTjs7QUFDQSxNQUFJLEdBQUcsS0FBSyxFQUFaLEVBQWdCO0FBQ2YsV0FBTyxFQUFQO0FBQ0E7O0FBQ0QsU0FBTyxHQUFHLENBQUMsS0FBSixDQUFVLEtBQVYsQ0FBUDtBQUNBOztBQVRELE9BQUEsQ0FBQSxVQUFBLEdBQUEsVUFBQTs7QUFXQSxTQUFTLE9BQVQsQ0FBaUIsRUFBakIsRUFBNkIsQ0FBN0IsRUFBc0M7QUFDckMsU0FBTyxDQUFDLENBQUMsV0FBRixFQUFQO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIxIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG4vKipcbiAqIENhcGl0YWxpemVzIGZpcnN0IHN5bWJvbC5cbiAqXG4gKiAgICAgSlcuc3RyaW5ncy5jYXBpdGFsaXplKFwidmFzeWFcIikgIC8vIFwiVmFzeWFcIlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHI6IHN0cmluZyk6IHN0cmluZyB7XG5cdHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc3Vic3RyKDEpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGh5cGhlbi1zdHlsZSB0byBjYW1lbFN0eWxlLlxuICpcbiAqICAgICBKVy5zdHJpbmdzLmNhbWVsKFwiaS1sb3ZlLWpzXCIpICAvLyBcImlMb3ZlSnNcIlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FtZWwoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRyZXR1cm4gU3RyaW5nKHN0cikucmVwbGFjZSgvLShbYS16XSkvaWcsIF9mY2FtZWwpO1xufVxuXG4vKipcbiAqIFBhcnNlcyBDU1MgY2xhc3Mgc3RyaW5nIGFuZCByZXR1cm5zIGFycmF5IG9mIENTUyBjbGFzcyBuYW1lcy5cbiAqIFN1cHBvcnRzIHN0cmluZ3MsIHVudHJpbW1lZCBzdHJpbmdzLCBzcGFjZS1zZXBhcmF0ZWQgc3RyaW5ncywgYXJyYXlzXG4gKiBhbmQgc3ViYXJyYXlzLlxuICpcbiAqICAgICBwYXJzZUNsYXNzKFwiICBhICAgIGIgXCIpOyAvLyBbXCJhXCIsIFwiYlwiXVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDbGFzcyhzdHI6IHN0cmluZyk6IHN0cmluZ1tdIHtcblx0aWYgKHN0ciA9PSBudWxsKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdHN0ciA9IHN0ci50cmltKCk7XG5cdGlmIChzdHIgPT09IFwiXCIpIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0cmV0dXJuIHN0ci5zcGxpdCgvXFxzKy8pO1xufVxuXG5mdW5jdGlvbiBfZmNhbWVsKF9hOiBzdHJpbmcsIGI6IHN0cmluZyk6IHN0cmluZyB7XG5cdHJldHVybiBiLnRvVXBwZXJDYXNlKCk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/Switcher.js":
/*!***********************************!*\
  !*** ../../main/dist/Switcher.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));
/**
 * Listens source property modification and calls the specified functions.
 */


var Switcher = /*#__PURE__*/function (_Class_1$default) {
  _inherits(Switcher, _Class_1$default);

  var _super = _createSuper(Switcher);

  /**
   * @param source Source property.
   * @param config Configuration.
   */
  function Switcher(source) {
    var _this;

    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Switcher);

    _this = _super.call(this);
    _this.source = source;
    _this._init = config.init;
    _this._done = config.done;
    _this._scope = config.scope || _assertThisInitialized(_this);
    _this._acceptNil = config.acceptNil || false;

    _this._doInit();

    _this.own(source.onChange.listen(_this._update, _assertThisInitialized(_this)));

    return _this;
  }

  _createClass(Switcher, [{
    key: "destroyObject",
    value: function destroyObject() {
      this._doDone();

      this._init = null;
      this._done = null;
      this._scope = null;
      this._value = null;

      _get(_getPrototypeOf(Switcher.prototype), "destroyObject", this).call(this);
    }
  }, {
    key: "_update",
    value: function _update() {
      this._doDone();

      this._doInit();
    }
  }, {
    key: "_doInit",
    value: function _doInit() {
      this._value = this.source.get();

      if (this._init && (this._acceptNil || this._value != null)) {
        this._init.call(this._scope, this._value);
      }
    }
  }, {
    key: "_doDone",
    value: function _doDone() {
      if (this._done && (this._acceptNil || this._value != null)) {
        this._done.call(this._scope, this._value);
      }

      this._value = null;
    }
  }]);

  return Switcher;
}(Class_1.default);

exports.default = Switcher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Td2l0Y2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0YsSUFBQSxPQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQTtBQUVBOztBQUVHOzs7SUFDRyxROzs7OztBQU9MOzs7QUFHRztBQUNILG9CQUFxQixNQUFyQixFQUF5RTtBQUFBOztBQUFBLFFBQS9CLE1BQStCLHVFQUFGLEVBQUU7O0FBQUE7O0FBQ3hFO0FBRG9CLFVBQUEsTUFBQSxHQUFBLE1BQUE7QUFFcEIsVUFBSyxLQUFMLEdBQWEsTUFBTSxDQUFDLElBQXBCO0FBQ0EsVUFBSyxLQUFMLEdBQWEsTUFBTSxDQUFDLElBQXBCO0FBQ0EsVUFBSyxNQUFMLEdBQWMsTUFBTSxDQUFDLEtBQVAsaUNBQWQ7QUFDQSxVQUFLLFVBQUwsR0FBa0IsTUFBTSxDQUFDLFNBQVAsSUFBb0IsS0FBdEM7O0FBQ0EsVUFBSyxPQUFMOztBQUNBLFVBQUssR0FBTCxDQUFTLE1BQU0sQ0FBQyxRQUFQLENBQWdCLE1BQWhCLENBQXVCLE1BQUssT0FBNUIsZ0NBQVQ7O0FBUHdFO0FBUXhFOzs7O1dBRVMseUJBQWE7QUFDdEIsV0FBSyxPQUFMOztBQUNBLFdBQUssS0FBTCxHQUFhLElBQWI7QUFDQSxXQUFLLEtBQUwsR0FBYSxJQUFiO0FBQ0EsV0FBSyxNQUFMLEdBQWMsSUFBZDtBQUNBLFdBQUssTUFBTCxHQUFjLElBQWQ7O0FBQ0E7QUFDQTs7O1dBRU8sbUJBQU87QUFDZCxXQUFLLE9BQUw7O0FBQ0EsV0FBSyxPQUFMO0FBQ0E7OztXQUVPLG1CQUFPO0FBQ2QsV0FBSyxNQUFMLEdBQWMsS0FBSyxNQUFMLENBQVksR0FBWixFQUFkOztBQUNBLFVBQUksS0FBSyxLQUFMLEtBQWUsS0FBSyxVQUFMLElBQW1CLEtBQUssTUFBTCxJQUFlLElBQWpELENBQUosRUFBNEQ7QUFDM0QsYUFBSyxLQUFMLENBQVcsSUFBWCxDQUFnQixLQUFLLE1BQXJCLEVBQTZCLEtBQUssTUFBbEM7QUFDQTtBQUNEOzs7V0FFTyxtQkFBTztBQUNkLFVBQUksS0FBSyxLQUFMLEtBQWUsS0FBSyxVQUFMLElBQW1CLEtBQUssTUFBTCxJQUFlLElBQWpELENBQUosRUFBNEQ7QUFDM0QsYUFBSyxLQUFMLENBQVcsSUFBWCxDQUFnQixLQUFLLE1BQXJCLEVBQTZCLEtBQUssTUFBbEM7QUFDQTs7QUFDRCxXQUFLLE1BQUwsR0FBYyxJQUFkO0FBQ0E7Ozs7RUEvQ3dCLE9BQUEsQ0FBQSxPOztBQW9GMUIsT0FBQSxDQUFBLE9BQUEsR0FBZSxRQUFmIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMSBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IEJpbmRhYmxlIGZyb20gJy4vQmluZGFibGUnO1xuaW1wb3J0IENsYXNzIGZyb20gJy4vQ2xhc3MnO1xuXG4vKipcbiAqIExpc3RlbnMgc291cmNlIHByb3BlcnR5IG1vZGlmaWNhdGlvbiBhbmQgY2FsbHMgdGhlIHNwZWNpZmllZCBmdW5jdGlvbnMuXG4gKi9cbmNsYXNzIFN3aXRjaGVyPFQ+IGV4dGVuZHMgQ2xhc3Mge1xuXHRwcml2YXRlIF9pbml0OiBTd2l0Y2hlci5DYWxsYmFjazxUPjtcblx0cHJpdmF0ZSBfZG9uZTogU3dpdGNoZXIuQ2FsbGJhY2s8VD47XG5cdHByaXZhdGUgX3Njb3BlOiBhbnk7XG5cdHByaXZhdGUgX2FjY2VwdE5pbDogYm9vbGVhbjtcblx0cHJpdmF0ZSBfdmFsdWU6IFQ7XG5cblx0LyoqXG5cdCAqIEBwYXJhbSBzb3VyY2UgU291cmNlIHByb3BlcnR5LlxuXHQgKiBAcGFyYW0gY29uZmlnIENvbmZpZ3VyYXRpb24uXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihyZWFkb25seSBzb3VyY2U6IEJpbmRhYmxlPFQ+LCBjb25maWc6IFN3aXRjaGVyLkNvbmZpZzxUPiA9IHt9KSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLl9pbml0ID0gY29uZmlnLmluaXQ7XG5cdFx0dGhpcy5fZG9uZSA9IGNvbmZpZy5kb25lO1xuXHRcdHRoaXMuX3Njb3BlID0gY29uZmlnLnNjb3BlIHx8IHRoaXM7XG5cdFx0dGhpcy5fYWNjZXB0TmlsID0gY29uZmlnLmFjY2VwdE5pbCB8fCBmYWxzZTtcblx0XHR0aGlzLl9kb0luaXQoKTtcblx0XHR0aGlzLm93bihzb3VyY2Uub25DaGFuZ2UubGlzdGVuKHRoaXMuX3VwZGF0ZSwgdGhpcykpO1xuXHR9XG5cblx0cHJvdGVjdGVkIGRlc3Ryb3lPYmplY3QoKSB7XG5cdFx0dGhpcy5fZG9Eb25lKCk7XG5cdFx0dGhpcy5faW5pdCA9IG51bGw7XG5cdFx0dGhpcy5fZG9uZSA9IG51bGw7XG5cdFx0dGhpcy5fc2NvcGUgPSBudWxsO1xuXHRcdHRoaXMuX3ZhbHVlID0gbnVsbDtcblx0XHRzdXBlci5kZXN0cm95T2JqZWN0KCk7XG5cdH1cblxuXHRwcml2YXRlIF91cGRhdGUoKSB7XG5cdFx0dGhpcy5fZG9Eb25lKCk7XG5cdFx0dGhpcy5fZG9Jbml0KCk7XG5cdH1cblxuXHRwcml2YXRlIF9kb0luaXQoKSB7XG5cdFx0dGhpcy5fdmFsdWUgPSB0aGlzLnNvdXJjZS5nZXQoKTtcblx0XHRpZiAodGhpcy5faW5pdCAmJiAodGhpcy5fYWNjZXB0TmlsIHx8IHRoaXMuX3ZhbHVlICE9IG51bGwpKSB7XG5cdFx0XHR0aGlzLl9pbml0LmNhbGwodGhpcy5fc2NvcGUsIHRoaXMuX3ZhbHVlKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIF9kb0RvbmUoKSB7XG5cdFx0aWYgKHRoaXMuX2RvbmUgJiYgKHRoaXMuX2FjY2VwdE5pbCB8fCB0aGlzLl92YWx1ZSAhPSBudWxsKSkge1xuXHRcdFx0dGhpcy5fZG9uZS5jYWxsKHRoaXMuX3Njb3BlLCB0aGlzLl92YWx1ZSk7XG5cdFx0fVxuXHRcdHRoaXMuX3ZhbHVlID0gbnVsbDtcblx0fVxufVxuXG5uYW1lc3BhY2UgU3dpdGNoZXIge1xuXHQvKipcblx0ICogU3dpdGNoZXIgY2FsbGJhY2suXG5cdCAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIENhbGxiYWNrPFQ+IHtcblx0XHQodmFsdWU6IFQpOiBhbnk7XG5cdH1cblxuXHQvKipcblx0ICogQ29uZmlndXJhdGlvbiBvZiBTd2l0Y2hlci5cblx0ICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQ29uZmlnPFQ+IHtcblx0XHQvKipcblx0XHQgKiBWYWx1ZSBpbml0aWFsaXphdGlvbiBjYWxsYmFjay5cblx0XHQgKi9cblx0XHRyZWFkb25seSBpbml0PzogQ2FsbGJhY2s8VD47XG5cblx0XHQvKipcblx0XHQgKiBWYWx1ZSByZWxlYXNpbmcgY2FsbGJhY2suXG5cdFx0ICovXG5cdFx0cmVhZG9ubHkgZG9uZT86IENhbGxiYWNrPFQ+O1xuXG5cdFx0LyoqXG5cdFx0ICogYGluaXRgIGFuZCBgZG9uZWAgY2FsbCBzY29wZS4gRGVmYXVsdHMgdG8gc3dpdGNoZXIgaXRzZWxmLlxuXHRcdCAqL1xuXHRcdHJlYWRvbmx5IHNjb3BlPzogYW55O1xuXG5cdFx0LyoqXG5cdFx0ICogU2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdGhlIGNhbGxiYWNrcyB0byBiZSBjYWxsZWQgZXZlbiBpZiBvbmUgb2Ygc291cmNlIHZhbHVlcyBpcyBudWxsLlxuXHRcdCAqL1xuXHRcdHJlYWRvbmx5IGFjY2VwdE5pbD86IGJvb2xlYW47XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/collection/AbstractMapper.js":
/*!****************************************************!*\
  !*** ../../main/dist/collection/AbstractMapper.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var Class_1 = __importDefault(__webpack_require__(/*! ../Class */ "../../main/dist/Class.js"));
/**
 * Binds one collection to another, filling it with results of a function call for each value of the source collection.
 */


var AbstractMapper = /*#__PURE__*/function (_Class_1$default) {
  _inherits(AbstractMapper, _Class_1$default);

  var _super = _createSuper(AbstractMapper);

  function AbstractMapper(_create) {
    var _this;

    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, AbstractMapper);

    _this = _super.call(this);
    _this._create = _create;
    _this._destroy = config.destroy;
    return _this;
  }

  _createClass(AbstractMapper, [{
    key: "destroyObject",
    value: function destroyObject() {
      this._create = null;
      this._destroy = null;

      _get(_getPrototypeOf(AbstractMapper.prototype), "destroyObject", this).call(this);
    }
  }]);

  return AbstractMapper;
}(Class_1.default);

exports.default = AbstractMapper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb2xsZWN0aW9uL0Fic3RyYWN0TWFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFRixJQUFBLE9BQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUFBO0FBRUE7O0FBRUc7OztJQUNZLGM7Ozs7O0FBSWQsMEJBQWdDLE9BQWhDLEVBQWlHO0FBQUE7O0FBQUEsUUFBeEMsTUFBd0MsdUVBQUYsRUFBRTs7QUFBQTs7QUFDaEc7QUFEK0IsVUFBQSxPQUFBLEdBQUEsT0FBQTtBQUUvQixVQUFLLFFBQUwsR0FBZ0IsTUFBTSxDQUFDLE9BQXZCO0FBRmdHO0FBR2hHOzs7O1dBRVMseUJBQWE7QUFDdEIsV0FBSyxPQUFMLEdBQWUsSUFBZjtBQUNBLFdBQUssUUFBTCxHQUFnQixJQUFoQjs7QUFDQTtBQUNBOzs7O0VBYjBDLE9BQUEsQ0FBQSxPOztBQWdCNUMsT0FBQSxDQUFBLE9BQUEsR0FBZSxjQUFmIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMSBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IENsYXNzIGZyb20gJy4uL0NsYXNzJztcblxuLyoqXG4gKiBCaW5kcyBvbmUgY29sbGVjdGlvbiB0byBhbm90aGVyLCBmaWxsaW5nIGl0IHdpdGggcmVzdWx0cyBvZiBhIGZ1bmN0aW9uIGNhbGwgZm9yIGVhY2ggdmFsdWUgb2YgdGhlIHNvdXJjZSBjb2xsZWN0aW9uLlxuICovXG5hYnN0cmFjdCBjbGFzcyBBYnN0cmFjdE1hcHBlcjxULCBVPiBleHRlbmRzIENsYXNzIHtcblxuXHRwcm90ZWN0ZWQgX2Rlc3Ryb3k6IChpdGVtOiBVLCBkYXRhOiBUKSA9PiB2b2lkO1xuXG5cdHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgX2NyZWF0ZTogKGRhdGE6IFQpID0+IFUsIGNvbmZpZzogQWJzdHJhY3RNYXBwZXIuQ29uZmlnPFQsIFU+ID0ge30pIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMuX2Rlc3Ryb3kgPSBjb25maWcuZGVzdHJveTtcblx0fVxuXG5cdHByb3RlY3RlZCBkZXN0cm95T2JqZWN0KCkge1xuXHRcdHRoaXMuX2NyZWF0ZSA9IG51bGw7XG5cdFx0dGhpcy5fZGVzdHJveSA9IG51bGw7XG5cdFx0c3VwZXIuZGVzdHJveU9iamVjdCgpO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFic3RyYWN0TWFwcGVyO1xuXG5uYW1lc3BhY2UgQWJzdHJhY3RNYXBwZXIge1xuXHQvKipcblx0ICogU2lnbmF0dXJlIG9mIGBBYnN0cmFjdE1hcHBlci5Db25maWcuZGVzdHJveWAgY2FsbGJhY2suXG5cdCAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIERlc3Ryb3lDYWxsYmFjazxULCBVPiB7XG5cdFx0KHRhcmdldFZhbHVlOiBVLCBzb3VyY2VWYWx1ZTogVCk6IHZvaWQ7XG5cdH1cblxuXHQvKipcblx0ICogQ29uZmlndXJhdGlvbiBvZiBgQWJzdHJhY3RNYXBwZXJgLlxuXHQgKi9cblx0ZXhwb3J0IGludGVyZmFjZSBDb25maWc8VCwgVT4ge1xuXHRcdC8qKlxuXHRcdCAqIERlc3RydWN0b3Igb2YgYSBtYXBwZWQgdmFsdWUuIERlc3Ryb3lzIGEgdmFsdWUgd2hlbiBpdCBsZWF2ZXMgdGhlIHRhcmdldCBjb2xsZWN0aW9uLlxuXHRcdCAqL1xuXHRcdHJlYWRvbmx5IGRlc3Ryb3k/OiBEZXN0cm95Q2FsbGJhY2s8VCwgVT47XG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "../../main/dist/collection/ArrayInserter.js":
/*!***************************************************!*\
  !*** ../../main/dist/collection/ArrayInserter.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var Class_1 = __importDefault(__webpack_require__(/*! ../Class */ "../../main/dist/Class.js"));
/**
 * Handles all messages of `ReadonlyBindableArray` with a combination of three callbacks.
 */


var ArrayInserter = /*#__PURE__*/function (_Class_1$default) {
  _inherits(ArrayInserter, _Class_1$default);

  var _super = _createSuper(ArrayInserter);

  /**
   * @param source Source array.
   * @param config Inserter configuration.
   */
  function ArrayInserter(source) {
    var _this;

    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, ArrayInserter);

    _this = _super.call(this);
    _this.source = source;
    _this._add = config.add;
    _this._remove = config.remove;
    _this._clear = config.clear;

    _this._addItems(_this.source.native, 0);

    _this.own(source.onSplice.listen(_this._onSplice, _assertThisInitialized(_this)));

    _this.own(source.onReplace.listen(_this._onReplace, _assertThisInitialized(_this)));

    _this.own(source.onMove.listen(_this._onMove, _assertThisInitialized(_this)));

    _this.own(source.onClear.listen(_this._onClear, _assertThisInitialized(_this)));

    _this.own(source.onReorder.listen(_this._onReorder, _assertThisInitialized(_this)));

    return _this;
  }

  _createClass(ArrayInserter, [{
    key: "destroyObject",
    value: function destroyObject() {
      this._doClearItems(this.source.native);

      this._add = null;
      this._remove = null;
      this._clear = null;

      _get(_getPrototypeOf(ArrayInserter.prototype), "destroyObject", this).call(this);
    }
  }, {
    key: "_addItems",
    value: function _addItems(items, index) {
      if (!this._add) {
        return;
      }

      for (var i = 0; i < items.length; ++i) {
        this._add(items[i], i + index);
      }
    }
  }, {
    key: "_removeItems",
    value: function _removeItems(items, index) {
      if (!this._remove) {
        return;
      }

      for (var i = items.length - 1; i >= 0; --i) {
        this._remove(items[i], i + index);
      }
    }
  }, {
    key: "_doClearItems",
    value: function _doClearItems(items) {
      if (items.length === 0) {
        return;
      }

      if (this._clear) {
        this._clear(items);
      } else {
        this._removeItems(items, 0);
      }
    }
  }, {
    key: "_onSplice",
    value: function _onSplice(spliceResult) {
      var oldContents = spliceResult.oldContents,
          removedItems = spliceResult.removedItems; // if there is an effective clearing function, just reset the controller

      if (this._clear && 3 * removedItems.length > 2 * oldContents.length) {
        this._clear(oldContents);

        this._addItems(this.source.native, 0);

        return;
      } // else, splice the elements


      var removedSegments = spliceResult.removedSegments,
          addedSegments = spliceResult.addedSegments;

      for (var i = removedSegments.length - 1; i >= 0; --i) {
        var removeRarams = removedSegments[i];

        this._removeItems(removeRarams[1], removeRarams[0]);
      }

      for (var _i = 0, l = addedSegments.length; _i < l; ++_i) {
        var addParams = addedSegments[_i];

        this._addItems(addParams[1], addParams[0]);
      }
    }
  }, {
    key: "_onReplace",
    value: function _onReplace(message) {
      if (this._remove) {
        this._remove(message.oldValue, message.index);
      }

      if (this._add) {
        this._add(message.newValue, message.index);
      }
    }
  }, {
    key: "_onMove",
    value: function _onMove(message) {
      if (this._remove) {
        this._remove(message.value, message.fromIndex);
      }

      if (this._add) {
        this._add(message.value, message.toIndex);
      }
    }
  }, {
    key: "_onClear",
    value: function _onClear(oldContents) {
      this._doClearItems(oldContents);
    }
  }, {
    key: "_onReorder",
    value: function _onReorder(message) {
      this._doClearItems(message.oldContents);

      this._addItems(this.source.native, 0);
    }
  }]);

  return ArrayInserter;
}(Class_1.default);

exports.default = ArrayInserter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/collection/ArrayMapper.js":
/*!*************************************************!*\
  !*** ../../main/dist/collection/ArrayMapper.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.startMappingArray = void 0;

var ArrayUtils_1 = __webpack_require__(/*! ../ArrayUtils */ "../../main/dist/ArrayUtils.js");

var BindableArray_1 = __importDefault(__webpack_require__(/*! ../BindableArray */ "../../main/dist/BindableArray.js"));

var Destructor_1 = __importDefault(__webpack_require__(/*! ../Destructor */ "../../main/dist/Destructor.js"));

var AbstractMapper_1 = __importDefault(__webpack_require__(/*! ./AbstractMapper */ "../../main/dist/collection/AbstractMapper.js"));
/**
 * `AbstractMapper` implementation for arrays.
 */


var ArrayMapper = /*#__PURE__*/function (_AbstractMapper_1$def) {
  _inherits(ArrayMapper, _AbstractMapper_1$def);

  var _super = _createSuper(ArrayMapper);

  /**
   * @param source Source array.
   * @param create Mapping callback.
   * @param config Mapper configuration.
   */
  function ArrayMapper(source, create) {
    var _this;

    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, ArrayMapper);

    _this = _super.call(this, create, config);
    _this.source = source;
    _this._targetCreated = config.target == null;
    _this._target = _this._targetCreated ? new BindableArray_1.default(_this.source.silent) : config.target;

    _this._target.addAll(_this._createItems(_this.source.native));

    _this.own(source.onSplice.listen(_this._onSplice, _assertThisInitialized(_this)));

    _this.own(source.onReplace.listen(_this._onReplace, _assertThisInitialized(_this)));

    _this.own(source.onMove.listen(_this._onMove, _assertThisInitialized(_this)));

    _this.own(source.onClear.listen(_this._onClear, _assertThisInitialized(_this)));

    _this.own(source.onReorder.listen(_this._onReorder, _assertThisInitialized(_this)));

    return _this;
  }
  /**
   * Target array.
   */


  _createClass(ArrayMapper, [{
    key: "target",
    get: function get() {
      return this._target;
    }
  }, {
    key: "destroyObject",
    value: function destroyObject() {
      this._destroyItems(this._target.clear(), this.source.native);

      if (this._targetCreated) {
        this._target.destroy();
      }

      _get(_getPrototypeOf(ArrayMapper.prototype), "destroyObject", this).call(this);
    }
  }, {
    key: "_createItems",
    value: function _createItems(datas) {
      return datas.map(this._create);
    }
  }, {
    key: "_destroyItems",
    value: function _destroyItems(items, datas) {
      if (this._destroy === undefined) {
        return;
      }

      for (var i = items.length - 1; i >= 0; --i) {
        this._destroy(items[i], datas[i]);
      }
    }
  }, {
    key: "_onSplice",
    value: function _onSplice(sourceResult) {
      var _this2 = this;

      var addedSegments = sourceResult.addedSegments;
      var segmentsToAdd = addedSegments.map(function (addParams) {
        return [addParams[0], _this2._createItems(addParams[1])];
      });

      var targetResult = this._target.trySplice(sourceResult.removeParams, segmentsToAdd);

      var sourceRemovedSegments = sourceResult.removedSegments;
      var targetRemovedSegments = targetResult.removedSegments;

      for (var i = targetRemovedSegments.length - 1; i >= 0; --i) {
        this._destroyItems(targetRemovedSegments[i][1], sourceRemovedSegments[i][1]);
      }
    }
  }, {
    key: "_onReplace",
    value: function _onReplace(message) {
      var newItem = this._create(message.newValue);

      var oldItem = this._target.trySet(message.index, newItem);

      if (this._destroy != null) {
        this._destroy(oldItem, message.oldValue);
      }
    }
  }, {
    key: "_onMove",
    value: function _onMove(message) {
      this._target.tryMove(message.fromIndex, message.toIndex);
    }
  }, {
    key: "_onClear",
    value: function _onClear(oldContents) {
      this._destroyItems(this._target.clear(), oldContents);
    }
  }, {
    key: "_onReorder",
    value: function _onReorder(message) {
      this._target.tryReorder(message.indexMapping);
    }
  }]);

  return ArrayMapper;
}(AbstractMapper_1.default);

exports.default = ArrayMapper;
/**
 * Creates a new array bound to another array with `ArrayMapper`.
 * @param source Source array.
 * @param create Mapping callback.
 * @param config Mapper configuration.
 * @returns Target array.
 */

function startMappingArray(source, create) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (!source.silent) {
    var _target = new BindableArray_1.default();

    return _target.owning(new ArrayMapper(source, create, {
      target: _target,
      destroy: config.destroy
    }));
  }

  var target = new BindableArray_1.default(source.native.map(create), true);

  if (config.destroy) {
    var sourceValues = source.native.concat();
    target.own(new Destructor_1.default(function () {
      return ArrayUtils_1.backForEach(target.native, function (item, index) {
        config.destroy(item, sourceValues[index]);
      });
    }));
  }

  return target;
}

exports.startMappingArray = startMappingArray;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/collection/SetMapper.js":
/*!***********************************************!*\
  !*** ../../main/dist/collection/SetMapper.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.startMappingSet = void 0;

var BindableSet_1 = __importDefault(__webpack_require__(/*! ../BindableSet */ "../../main/dist/BindableSet.js"));

var Destructor_1 = __importDefault(__webpack_require__(/*! ../Destructor */ "../../main/dist/Destructor.js"));

var index_1 = __webpack_require__(/*! ../index */ "../../main/dist/index.js");

var IterableUtils_1 = __webpack_require__(/*! ../IterableUtils */ "../../main/dist/IterableUtils.js");

var MapUtils_1 = __webpack_require__(/*! ../MapUtils */ "../../main/dist/MapUtils.js");

var AbstractMapper_1 = __importDefault(__webpack_require__(/*! ./AbstractMapper */ "../../main/dist/collection/AbstractMapper.js"));
/**
 * `AbstractMapper` implementation for sets.
 */


var SetMapper = /*#__PURE__*/function (_AbstractMapper_1$def) {
  _inherits(SetMapper, _AbstractMapper_1$def);

  var _super = _createSuper(SetMapper);

  /**
   * @param source Source set.
   * @param create Mapping callback.
   * @param config Mapper configuration.
   */
  function SetMapper(source, create) {
    var _this;

    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, SetMapper);

    _this = _super.call(this, create, config);
    _this.source = source;
    _this._items = new Map();
    _this._targetCreated = config.target == null;
    _this._target = _this._targetCreated ? new BindableSet_1.default(_this.source.silent) : config.target;

    _this._target.tryAddAll(_this._createItems(source));

    _this.own(source.onSplice.listen(_this._onSplice, _assertThisInitialized(_this)));

    _this.own(source.onClear.listen(_this._onClear, _assertThisInitialized(_this)));

    return _this;
  }
  /**
   * Target set.
   */


  _createClass(SetMapper, [{
    key: "target",
    get: function get() {
      return this._target;
    }
  }, {
    key: "destroyObject",
    value: function destroyObject() {
      this._target.tryDeleteAll(this._getItems(this.source));

      this._destroyItems(this.source);

      if (this._targetCreated) {
        this._target.destroy();
      }

      _get(_getPrototypeOf(SetMapper.prototype), "destroyObject", this).call(this);
    }
  }, {
    key: "_getItems",
    value: function _getItems(datas) {
      var _this2 = this;

      return IterableUtils_1.map(datas, function (data) {
        return _this2._items.get(data);
      });
    }
  }, {
    key: "_createItems",
    value: function _createItems(datas) {
      var items = [];

      var _iterator = _createForOfIteratorHelper(datas),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var data = _step.value;

          var item = this._create(data);

          items.push(item);

          this._items.set(data, item);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return items;
    }
  }, {
    key: "_destroyItems",
    value: function _destroyItems(datas) {
      if (this._destroy === undefined) {
        return;
      }

      var _iterator2 = _createForOfIteratorHelper(datas),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var data = _step2.value;

          var item = this._items.get(data);

          this._items.delete(data);

          this._destroy(item, data);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "_onSplice",
    value: function _onSplice(spliceResult) {
      var deletedValues = spliceResult.deletedValues,
          addedValues = spliceResult.addedValues;

      this._target.trySplice(this._getItems(deletedValues), this._createItems(addedValues));

      this._destroyItems(deletedValues);
    }
  }, {
    key: "_onClear",
    value: function _onClear(oldContents) {
      this._target.tryDeleteAll(this._getItems(oldContents));

      this._destroyItems(oldContents);
    }
  }]);

  return SetMapper;
}(AbstractMapper_1.default);

exports.default = SetMapper;
/**
 * Creates a new set bound to another set with `SetMapper`.
 * @param source Source set.
 * @param create Mapping callback.
 * @param config Mapper configuration.
 * @returns Target set.
 */

function startMappingSet(source, create) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (!source.silent) {
    var _target = new BindableSet_1.default();

    return _target.owning(new SetMapper(source, create, {
      target: _target,
      destroy: config.destroy
    }));
  }

  if (config.destroy && config.destroy !== index_1.destroy) {
    var mapping = new Map(IterableUtils_1.map(source, function (data) {
      return [data, create(data)];
    }));

    var _target2 = new BindableSet_1.default(MapUtils_1.getIterableValues(mapping), true);

    _target2.own(new Destructor_1.default(function () {
      return mapping.forEach(config.destroy);
    }));

    return _target2;
  }

  var target = new BindableSet_1.default(IterableUtils_1.map(source, create), true);

  if (config.destroy) {
    target.ownValues();
  }

  return target;
}

exports.startMappingSet = startMappingSet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/component/ComponentArray.js":
/*!***************************************************!*\
  !*** ../../main/dist/component/ComponentArray.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var Class_1 = __importDefault(__webpack_require__(/*! ../Class */ "../../main/dist/Class.js"));

var ArrayMapper_1 = __importDefault(__webpack_require__(/*! ../collection/ArrayMapper */ "../../main/dist/collection/ArrayMapper.js"));

var DomUtils = __importStar(__webpack_require__(/*! ../DomUtils */ "../../main/dist/DomUtils.js"));

var ComponentInserter_1 = __importDefault(__webpack_require__(/*! ./ComponentInserter */ "../../main/dist/component/ComponentInserter.js"));

var ComponentArray = /*#__PURE__*/function (_Class_1$default) {
  _inherits(ComponentArray, _Class_1$default);

  var _super = _createSuper(ComponentArray);

  function ComponentArray(parent, source, el) {
    var _this;

    _classCallCheck(this, ComponentArray);

    _this = _super.call(this);
    _this.parent = parent;
    _this.source = source;

    parent._arrays.add(_assertThisInitialized(_this));

    var mapper = _this.own(new ArrayMapper_1.default(source, function (child) {
      _this.parent._initChild(child);

      return child;
    }, {
      destroy: function destroy(child) {
        _this.parent._doneChild(child);
      }
    }));

    _this.own(new ComponentInserter_1.default(mapper.target, el[0]));

    return _this;
  }

  _createClass(ComponentArray, [{
    key: "destroy",
    value: function destroy() {
      this.parent._arrays.delete(this);

      _get(_getPrototypeOf(ComponentArray.prototype), "destroy", this).call(this);
    }
  }, {
    key: "_afterAppend",
    value: function _afterAppend() {
      this.source.forEach(DomUtils._afterAppend);
    }
  }]);

  return ComponentArray;
}(Class_1.default);

exports.default = ComponentArray;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnQvQ29tcG9uZW50QXJyYXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFRixJQUFBLE9BQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsYUFBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsMkJBQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsUUFBQSxHQUFBLFlBQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFBLENBQUE7O0FBRUEsSUFBQSxtQkFBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEscUJBQUEsQ0FBQSxDQUFBOztJQUVxQixjOzs7OztBQUNwQiwwQkFBb0IsTUFBcEIsRUFBK0MsTUFBL0MsRUFBeUYsRUFBekYsRUFBbUc7QUFBQTs7QUFBQTs7QUFDbEc7QUFEbUIsVUFBQSxNQUFBLEdBQUEsTUFBQTtBQUEyQixVQUFBLE1BQUEsR0FBQSxNQUFBOztBQUU5QyxJQUFBLE1BQU0sQ0FBQyxPQUFQLENBQWUsR0FBZjs7QUFFQSxRQUFNLE1BQU0sR0FBRyxNQUFLLEdBQUwsQ0FBUyxJQUFJLGFBQUEsQ0FBQSxPQUFKLENBQXNDLE1BQXRDLEVBQThDLFVBQUMsS0FBRCxFQUFVO0FBQy9FLFlBQUssTUFBTCxDQUFZLFVBQVosQ0FBdUIsS0FBdkI7O0FBQ0EsYUFBTyxLQUFQO0FBQ0EsS0FIdUIsRUFHckI7QUFDRixNQUFBLE9BQU8sRUFBRSxpQkFBQyxLQUFELEVBQVU7QUFDbEIsY0FBSyxNQUFMLENBQVksVUFBWixDQUF1QixLQUF2QjtBQUNBO0FBSEMsS0FIcUIsQ0FBVCxDQUFmOztBQVNBLFVBQUssR0FBTCxDQUFTLElBQUksbUJBQUEsQ0FBQSxPQUFKLENBQXNCLE1BQU0sQ0FBQyxNQUE3QixFQUFxQyxFQUFFLENBQUMsQ0FBRCxDQUF2QyxDQUFUOztBQWJrRztBQWNsRzs7OztXQUVELG1CQUFPO0FBQ04sV0FBSyxNQUFMLENBQVksT0FBWixDQUFvQixNQUFwQixDQUEyQixJQUEzQjs7QUFDQTtBQUNBOzs7V0FFRCx3QkFBWTtBQUNYLFdBQUssTUFBTCxDQUFZLE9BQVosQ0FBb0IsUUFBUSxDQUFDLFlBQTdCO0FBQ0E7Ozs7RUF4QjBDLE9BQUEsQ0FBQSxPOztBQUE1QyxPQUFBLENBQUEsT0FBQSxHQUFBLGNBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIxIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgQ2xhc3MgZnJvbSAnLi4vQ2xhc3MnO1xuaW1wb3J0IEFycmF5TWFwcGVyIGZyb20gJy4uL2NvbGxlY3Rpb24vQXJyYXlNYXBwZXInO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9Db21wb25lbnQnO1xuaW1wb3J0ICogYXMgRG9tVXRpbHMgZnJvbSAnLi4vRG9tVXRpbHMnO1xuaW1wb3J0IFJlYWRvbmx5QmluZGFibGVBcnJheSBmcm9tICcuLi9SZWFkb25seUJpbmRhYmxlQXJyYXknO1xuaW1wb3J0IENvbXBvbmVudEluc2VydGVyIGZyb20gJy4vQ29tcG9uZW50SW5zZXJ0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRBcnJheSBleHRlbmRzIENsYXNzIHtcblx0Y29uc3RydWN0b3IocHJpdmF0ZSBwYXJlbnQ6IENvbXBvbmVudCwgcHJpdmF0ZSBzb3VyY2U6IFJlYWRvbmx5QmluZGFibGVBcnJheTxDb21wb25lbnQ+LCBlbDogSlF1ZXJ5KSB7XG5cdFx0c3VwZXIoKTtcblx0XHRwYXJlbnQuX2FycmF5cy5hZGQodGhpcyk7XG5cblx0XHRjb25zdCBtYXBwZXIgPSB0aGlzLm93bihuZXcgQXJyYXlNYXBwZXI8Q29tcG9uZW50LCBDb21wb25lbnQ+KHNvdXJjZSwgKGNoaWxkKSA9PiB7XG5cdFx0XHR0aGlzLnBhcmVudC5faW5pdENoaWxkKGNoaWxkKTtcblx0XHRcdHJldHVybiBjaGlsZDtcblx0XHR9LCB7XG5cdFx0XHRkZXN0cm95OiAoY2hpbGQpID0+IHtcblx0XHRcdFx0dGhpcy5wYXJlbnQuX2RvbmVDaGlsZChjaGlsZCk7XG5cdFx0XHR9XG5cdFx0fSkpO1xuXG5cdFx0dGhpcy5vd24obmV3IENvbXBvbmVudEluc2VydGVyKG1hcHBlci50YXJnZXQsIGVsWzBdKSk7XG5cdH1cblxuXHRkZXN0cm95KCkge1xuXHRcdHRoaXMucGFyZW50Ll9hcnJheXMuZGVsZXRlKHRoaXMpO1xuXHRcdHN1cGVyLmRlc3Ryb3koKTtcblx0fVxuXG5cdF9hZnRlckFwcGVuZCgpIHtcblx0XHR0aGlzLnNvdXJjZS5mb3JFYWNoKERvbVV0aWxzLl9hZnRlckFwcGVuZCk7XG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "../../main/dist/component/ComponentBindable.js":
/*!******************************************************!*\
  !*** ../../main/dist/component/ComponentBindable.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var Class_1 = __importDefault(__webpack_require__(/*! ../Class */ "../../main/dist/Class.js"));

var Switcher_1 = __importDefault(__webpack_require__(/*! ../Switcher */ "../../main/dist/Switcher.js"));

var ComponentBindable = /*#__PURE__*/function (_Class_1$default) {
  _inherits(ComponentBindable, _Class_1$default);

  var _super = _createSuper(ComponentBindable);

  function ComponentBindable(parent, component, id) {
    var _this;

    _classCallCheck(this, ComponentBindable);

    _this = _super.call(this);
    _this.parent = parent;
    _this.id = id;

    parent._bindables.set(_this.id, _assertThisInitialized(_this));

    _this.own(new Switcher_1.default(component, {
      init: function init(child) {
        _this.parent.children.set(_this.id, child);
      },
      done: function done() {
        _this.parent.children.delete(_this.id);
      }
    }));

    return _this;
  }

  _createClass(ComponentBindable, [{
    key: "destroy",
    value: function destroy() {
      this.parent._bindables.delete(this.id);

      _get(_getPrototypeOf(ComponentBindable.prototype), "destroy", this).call(this);
    }
  }]);

  return ComponentBindable;
}(Class_1.default);

exports.default = ComponentBindable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnQvQ29tcG9uZW50QmluZGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdGLElBQUEsT0FBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsVUFBQSxDQUFBLENBQUE7O0FBRUEsSUFBQSxVQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUEsQ0FBQTs7SUFFcUIsaUI7Ozs7O0FBQ3BCLDZCQUFvQixNQUFwQixFQUF1QyxTQUF2QyxFQUErRSxFQUEvRSxFQUF5RjtBQUFBOztBQUFBOztBQUN4RjtBQURtQixVQUFBLE1BQUEsR0FBQSxNQUFBO0FBQTJELFVBQUEsRUFBQSxHQUFBLEVBQUE7O0FBRTlFLElBQUEsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsR0FBbEIsQ0FBc0IsTUFBSyxFQUEzQjs7QUFFQSxVQUFLLEdBQUwsQ0FBUyxJQUFJLFVBQUEsQ0FBQSxPQUFKLENBQXdCLFNBQXhCLEVBQW1DO0FBQzNDLE1BQUEsSUFBSSxFQUFFLGNBQUEsS0FBSyxFQUFHO0FBQ2IsY0FBSyxNQUFMLENBQVksUUFBWixDQUFxQixHQUFyQixDQUF5QixNQUFLLEVBQTlCLEVBQWtDLEtBQWxDO0FBQ0EsT0FIMEM7QUFJM0MsTUFBQSxJQUFJLEVBQUUsZ0JBQUs7QUFDVixjQUFLLE1BQUwsQ0FBWSxRQUFaLENBQXFCLE1BQXJCLENBQTRCLE1BQUssRUFBakM7QUFDQTtBQU4wQyxLQUFuQyxDQUFUOztBQUp3RjtBQVl4Rjs7OztXQUVELG1CQUFPO0FBQ04sV0FBSyxNQUFMLENBQVksVUFBWixDQUF1QixNQUF2QixDQUE4QixLQUFLLEVBQW5DOztBQUNBO0FBQ0E7Ozs7RUFsQjZDLE9BQUEsQ0FBQSxPOztBQUEvQyxPQUFBLENBQUEsT0FBQSxHQUFBLGlCQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMSBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IEJpbmRhYmxlIGZyb20gJy4uL0JpbmRhYmxlJztcbmltcG9ydCBDbGFzcyBmcm9tICcuLi9DbGFzcyc7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL0NvbXBvbmVudCc7XG5pbXBvcnQgU3dpdGNoZXIgZnJvbSAnLi4vU3dpdGNoZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRCaW5kYWJsZSBleHRlbmRzIENsYXNzIHtcblx0Y29uc3RydWN0b3IocHJpdmF0ZSBwYXJlbnQ6IENvbXBvbmVudCwgY29tcG9uZW50OiBCaW5kYWJsZTxDb21wb25lbnQ+LCBwcml2YXRlIGlkOiBzdHJpbmcpIHtcblx0XHRzdXBlcigpO1xuXHRcdHBhcmVudC5fYmluZGFibGVzLnNldCh0aGlzLmlkLCB0aGlzKTtcblxuXHRcdHRoaXMub3duKG5ldyBTd2l0Y2hlcjxDb21wb25lbnQ+KGNvbXBvbmVudCwge1xuXHRcdFx0aW5pdDogY2hpbGQgPT4ge1xuXHRcdFx0XHR0aGlzLnBhcmVudC5jaGlsZHJlbi5zZXQodGhpcy5pZCwgY2hpbGQpO1xuXHRcdFx0fSxcblx0XHRcdGRvbmU6ICgpID0+IHtcblx0XHRcdFx0dGhpcy5wYXJlbnQuY2hpbGRyZW4uZGVsZXRlKHRoaXMuaWQpO1xuXHRcdFx0fVxuXHRcdH0pKTtcblx0fVxuXG5cdGRlc3Ryb3koKSB7XG5cdFx0dGhpcy5wYXJlbnQuX2JpbmRhYmxlcy5kZWxldGUodGhpcy5pZCk7XG5cdFx0c3VwZXIuZGVzdHJveSgpO1xuXHR9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/component/ComponentChild.js":
/*!***************************************************!*\
  !*** ../../main/dist/component/ComponentChild.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var DomUtils = __importStar(__webpack_require__(/*! ../DomUtils */ "../../main/dist/DomUtils.js"));

var ComponentChild = /*#__PURE__*/function () {
  function ComponentChild(parent, child) {
    _classCallCheck(this, ComponentChild);

    this.parent = parent;
    this.child = child;
  }

  _createClass(ComponentChild, [{
    key: "attach",
    value: function attach(name) {
      // JW.assertNull(this.name);
      this._name = name;
      this._el = this.parent._elements.get(name);

      this.parent._initChild(this.child);

      this.parent._elements.set(name, this.child.el);

      DomUtils.replace(this._el[0], this.child.el[0], true);

      this.child._afterAppend();
    }
  }, {
    key: "detach",
    value: function detach() {
      // JW.assertString(this.name, JW.isNotBlank);
      if (this.parent._elements.get(this._name) === this.child.el) {
        this.parent._elements.set(this._name, this._el);
      }

      DomUtils.replace(this.child.el[0], this._el[0]);

      this.parent._doneChild(this.child);

      this._el = null;
      this._name = null;
    }
  }]);

  return ComponentChild;
}();

exports.default = ComponentChild;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnQvQ29tcG9uZW50Q2hpbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0YsSUFBQSxRQUFBLEdBQUEsWUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUEsQ0FBQTs7SUFFcUIsYztBQUtwQiwwQkFBb0IsTUFBcEIsRUFBK0MsS0FBL0MsRUFBK0Q7QUFBQTs7QUFBM0MsU0FBQSxNQUFBLEdBQUEsTUFBQTtBQUEyQixTQUFBLEtBQUEsR0FBQSxLQUFBO0FBQW9COzs7O1dBRW5FLGdCQUFPLElBQVAsRUFBbUI7QUFDbEI7QUFDQSxXQUFLLEtBQUwsR0FBYSxJQUFiO0FBQ0EsV0FBSyxHQUFMLEdBQVcsS0FBSyxNQUFMLENBQVksU0FBWixDQUFzQixHQUF0QixDQUEwQixJQUExQixDQUFYOztBQUNBLFdBQUssTUFBTCxDQUFZLFVBQVosQ0FBdUIsS0FBSyxLQUE1Qjs7QUFDQSxXQUFLLE1BQUwsQ0FBWSxTQUFaLENBQXNCLEdBQXRCLENBQTBCLElBQTFCLEVBQWdDLEtBQUssS0FBTCxDQUFXLEVBQTNDOztBQUNBLE1BQUEsUUFBUSxDQUFDLE9BQVQsQ0FBaUIsS0FBSyxHQUFMLENBQVMsQ0FBVCxDQUFqQixFQUE4QixLQUFLLEtBQUwsQ0FBVyxFQUFYLENBQWMsQ0FBZCxDQUE5QixFQUFnRCxJQUFoRDs7QUFDQSxXQUFLLEtBQUwsQ0FBVyxZQUFYO0FBQ0E7OztXQUVELGtCQUFNO0FBQ0w7QUFDQSxVQUFJLEtBQUssTUFBTCxDQUFZLFNBQVosQ0FBc0IsR0FBdEIsQ0FBMEIsS0FBSyxLQUEvQixNQUEwQyxLQUFLLEtBQUwsQ0FBVyxFQUF6RCxFQUE2RDtBQUM1RCxhQUFLLE1BQUwsQ0FBWSxTQUFaLENBQXNCLEdBQXRCLENBQTBCLEtBQUssS0FBL0IsRUFBc0MsS0FBSyxHQUEzQztBQUNBOztBQUNELE1BQUEsUUFBUSxDQUFDLE9BQVQsQ0FBaUIsS0FBSyxLQUFMLENBQVcsRUFBWCxDQUFjLENBQWQsQ0FBakIsRUFBbUMsS0FBSyxHQUFMLENBQVMsQ0FBVCxDQUFuQzs7QUFDQSxXQUFLLE1BQUwsQ0FBWSxVQUFaLENBQXVCLEtBQUssS0FBNUI7O0FBQ0EsV0FBSyxHQUFMLEdBQVcsSUFBWDtBQUNBLFdBQUssS0FBTCxHQUFhLElBQWI7QUFDQTs7Ozs7O0FBMUJGLE9BQUEsQ0FBQSxPQUFBLEdBQUEsY0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjEgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vQ29tcG9uZW50JztcbmltcG9ydCAqIGFzIERvbVV0aWxzIGZyb20gJy4uL0RvbVV0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcG9uZW50Q2hpbGQge1xuXG5cdHByaXZhdGUgX25hbWU6IHN0cmluZztcblx0cHJpdmF0ZSBfZWw6IEpRdWVyeTtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHBhcmVudDogQ29tcG9uZW50LCBwcml2YXRlIGNoaWxkOiBDb21wb25lbnQpIHt9XG5cblx0YXR0YWNoKG5hbWU6IHN0cmluZykge1xuXHRcdC8vIEpXLmFzc2VydE51bGwodGhpcy5uYW1lKTtcblx0XHR0aGlzLl9uYW1lID0gbmFtZTtcblx0XHR0aGlzLl9lbCA9IHRoaXMucGFyZW50Ll9lbGVtZW50cy5nZXQobmFtZSk7XG5cdFx0dGhpcy5wYXJlbnQuX2luaXRDaGlsZCh0aGlzLmNoaWxkKTtcblx0XHR0aGlzLnBhcmVudC5fZWxlbWVudHMuc2V0KG5hbWUsIHRoaXMuY2hpbGQuZWwpO1xuXHRcdERvbVV0aWxzLnJlcGxhY2UodGhpcy5fZWxbMF0sIHRoaXMuY2hpbGQuZWxbMF0sIHRydWUpO1xuXHRcdHRoaXMuY2hpbGQuX2FmdGVyQXBwZW5kKCk7XG5cdH1cblxuXHRkZXRhY2goKSB7XG5cdFx0Ly8gSlcuYXNzZXJ0U3RyaW5nKHRoaXMubmFtZSwgSlcuaXNOb3RCbGFuayk7XG5cdFx0aWYgKHRoaXMucGFyZW50Ll9lbGVtZW50cy5nZXQodGhpcy5fbmFtZSkgPT09IHRoaXMuY2hpbGQuZWwpIHtcblx0XHRcdHRoaXMucGFyZW50Ll9lbGVtZW50cy5zZXQodGhpcy5fbmFtZSwgdGhpcy5fZWwpO1xuXHRcdH1cblx0XHREb21VdGlscy5yZXBsYWNlKHRoaXMuY2hpbGQuZWxbMF0sIHRoaXMuX2VsWzBdKTtcblx0XHR0aGlzLnBhcmVudC5fZG9uZUNoaWxkKHRoaXMuY2hpbGQpO1xuXHRcdHRoaXMuX2VsID0gbnVsbDtcblx0XHR0aGlzLl9uYW1lID0gbnVsbDtcblx0fVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==

/***/ }),

/***/ "../../main/dist/component/ComponentChildInserter.js":
/*!***********************************************************!*\
  !*** ../../main/dist/component/ComponentChildInserter.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var BindableMap_1 = __importDefault(__webpack_require__(/*! ../BindableMap */ "../../main/dist/BindableMap.js"));

var ComponentChildInserter = /*#__PURE__*/function (_BindableMap_1$defaul) {
  _inherits(ComponentChildInserter, _BindableMap_1$defaul);

  var _super = _createSuper(ComponentChildInserter);

  function ComponentChildInserter() {
    _classCallCheck(this, ComponentChildInserter);

    return _super.call(this, true);
  }

  _createClass(ComponentChildInserter, [{
    key: "trySet",
    value: function trySet(key, value) {
      var result = _get(_getPrototypeOf(ComponentChildInserter.prototype), "trySet", this).call(this, key, value);

      if (result === undefined) {
        return undefined;
      }

      var removedValue = result.value;

      if (removedValue) {
        removedValue.detach();
      }

      value.attach(key);
      return result;
    }
  }, {
    key: "trySetKey",
    value: function trySetKey(oldKey, newKey) {
      var item = _get(_getPrototypeOf(ComponentChildInserter.prototype), "trySetKey", this).call(this, oldKey, newKey);

      if (item === undefined) {
        return undefined;
      }

      item.detach();
      item.attach(newKey);
      return item;
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      var item = _get(_getPrototypeOf(ComponentChildInserter.prototype), "delete", this).call(this, key);

      if (item === undefined) {
        return undefined;
      }

      item.detach();
      return item;
    }
  }, {
    key: "trySplice",
    value: function trySplice(keysToRemove, entriesToUpdate) {
      var spliceResult = _get(_getPrototypeOf(ComponentChildInserter.prototype), "trySplice", this).call(this, keysToRemove, entriesToUpdate);

      if (spliceResult === undefined) {
        return undefined;
      }

      spliceResult.deletedEntries.forEach(this._detach, this);
      spliceResult.addedEntries.forEach(this._attach, this);
      return spliceResult;
    }
  }, {
    key: "tryClear",
    value: function tryClear() {
      var oldContents = _get(_getPrototypeOf(ComponentChildInserter.prototype), "tryClear", this).call(this);

      if (oldContents === undefined) {
        return undefined;
      }

      oldContents.forEach(this._detach, this);
      return oldContents;
    }
  }, {
    key: "tryReindex",
    value: function tryReindex(keyMapping) {
      var result = _get(_getPrototypeOf(ComponentChildInserter.prototype), "tryReindex", this).call(this, keyMapping);

      if (result === undefined) {
        return undefined;
      }

      var _iterator = _createForOfIteratorHelper(keyMapping.values()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var newKey = _step.value;
          var value = this.get(newKey);
          value.detach();
          value.attach(newKey);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return result;
    }
  }, {
    key: "_attach",
    value: function _attach(item, key) {
      item.attach(key);
    }
  }, {
    key: "_detach",
    value: function _detach(item) {
      item.detach();
    }
  }]);

  return ComponentChildInserter;
}(BindableMap_1.default);

exports.default = ComponentChildInserter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnQvQ29tcG9uZW50Q2hpbGRJbnNlcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUYsSUFBQSxhQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBLENBQUE7O0lBS3FCLHNCOzs7OztBQUVwQixvQ0FBQTtBQUFBOztBQUFBLDZCQUNPLElBRFA7QUFFQzs7OztXQUVELGdCQUFPLEdBQVAsRUFBb0IsS0FBcEIsRUFBeUM7QUFDeEMsVUFBTSxNQUFNLHNGQUFnQixHQUFoQixFQUFxQixLQUFyQixDQUFaOztBQUNBLFVBQUksTUFBTSxLQUFLLFNBQWYsRUFBMEI7QUFDekIsZUFBTyxTQUFQO0FBQ0E7O0FBQ0QsVUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLEtBQTVCOztBQUNBLFVBQUksWUFBSixFQUFrQjtBQUNqQixRQUFBLFlBQVksQ0FBQyxNQUFiO0FBQ0E7O0FBQ0QsTUFBQSxLQUFLLENBQUMsTUFBTixDQUFhLEdBQWI7QUFDQSxhQUFPLE1BQVA7QUFDQTs7O1dBRUQsbUJBQVUsTUFBVixFQUEwQixNQUExQixFQUF3QztBQUN2QyxVQUFNLElBQUkseUZBQW1CLE1BQW5CLEVBQTJCLE1BQTNCLENBQVY7O0FBQ0EsVUFBSSxJQUFJLEtBQUssU0FBYixFQUF3QjtBQUN2QixlQUFPLFNBQVA7QUFDQTs7QUFDRCxNQUFBLElBQUksQ0FBQyxNQUFMO0FBQ0EsTUFBQSxJQUFJLENBQUMsTUFBTCxDQUFZLE1BQVo7QUFDQSxhQUFPLElBQVA7QUFDQTs7O1dBRUQsaUJBQU8sR0FBUCxFQUFrQjtBQUNqQixVQUFNLElBQUksc0ZBQWdCLEdBQWhCLENBQVY7O0FBQ0EsVUFBSSxJQUFJLEtBQUssU0FBYixFQUF3QjtBQUN2QixlQUFPLFNBQVA7QUFDQTs7QUFDRCxNQUFBLElBQUksQ0FBQyxNQUFMO0FBQ0EsYUFBTyxJQUFQO0FBQ0E7OztXQUVELG1CQUFVLFlBQVYsRUFDSSxlQURKLEVBQ3dEO0FBQ3ZELFVBQU0sWUFBWSx5RkFBbUIsWUFBbkIsRUFBaUMsZUFBakMsQ0FBbEI7O0FBQ0EsVUFBSSxZQUFZLEtBQUssU0FBckIsRUFBZ0M7QUFDL0IsZUFBTyxTQUFQO0FBQ0E7O0FBQ0QsTUFBQSxZQUFZLENBQUMsY0FBYixDQUE0QixPQUE1QixDQUFvQyxLQUFLLE9BQXpDLEVBQWtELElBQWxEO0FBQ0EsTUFBQSxZQUFZLENBQUMsWUFBYixDQUEwQixPQUExQixDQUFrQyxLQUFLLE9BQXZDLEVBQWdELElBQWhEO0FBQ0EsYUFBTyxZQUFQO0FBQ0E7OztXQUVELG9CQUFRO0FBQ1AsVUFBTSxXQUFXLHVGQUFqQjs7QUFDQSxVQUFJLFdBQVcsS0FBSyxTQUFwQixFQUErQjtBQUM5QixlQUFPLFNBQVA7QUFDQTs7QUFDRCxNQUFBLFdBQVcsQ0FBQyxPQUFaLENBQW9CLEtBQUssT0FBekIsRUFBa0MsSUFBbEM7QUFDQSxhQUFPLFdBQVA7QUFDQTs7O1dBRUQsb0JBQVcsVUFBWCxFQUFrRDtBQUNqRCxVQUFNLE1BQU0sMEZBQW9CLFVBQXBCLENBQVo7O0FBQ0EsVUFBSSxNQUFNLEtBQUssU0FBZixFQUEwQjtBQUN6QixlQUFPLFNBQVA7QUFDQTs7QUFKZ0QsaURBSzlCLFVBQVUsQ0FBQyxNQUFYLEVBTDhCO0FBQUE7O0FBQUE7QUFLakQsNERBQXdDO0FBQUEsY0FBL0IsTUFBK0I7QUFDdkMsY0FBTSxLQUFLLEdBQUcsS0FBSyxHQUFMLENBQVMsTUFBVCxDQUFkO0FBQ0EsVUFBQSxLQUFLLENBQUMsTUFBTjtBQUNBLFVBQUEsS0FBSyxDQUFDLE1BQU4sQ0FBYSxNQUFiO0FBQ0E7QUFUZ0Q7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFVakQsYUFBTyxNQUFQO0FBQ0E7OztXQUVELGlCQUFRLElBQVIsRUFBOEIsR0FBOUIsRUFBeUM7QUFDeEMsTUFBQSxJQUFJLENBQUMsTUFBTCxDQUFZLEdBQVo7QUFDQTs7O1dBRUQsaUJBQVEsSUFBUixFQUE0QjtBQUMzQixNQUFBLElBQUksQ0FBQyxNQUFMO0FBQ0E7Ozs7RUE3RWtELGFBQUEsQ0FBQSxPOztBQUFwRCxPQUFBLENBQUEsT0FBQSxHQUFBLHNCQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMSBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IEJpbmRhYmxlTWFwIGZyb20gJy4uL0JpbmRhYmxlTWFwJztcbmltcG9ydCBJQmluZGFibGVNYXAgZnJvbSAnLi4vSUJpbmRhYmxlTWFwJztcbmltcG9ydCBTb21lIGZyb20gJy4uL1NvbWUnO1xuaW1wb3J0IENvbXBvbmVudENoaWxkIGZyb20gJy4vQ29tcG9uZW50Q2hpbGQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRDaGlsZEluc2VydGVyIGV4dGVuZHMgQmluZGFibGVNYXA8c3RyaW5nLCBDb21wb25lbnRDaGlsZD4ge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKHRydWUpO1xuXHR9XG5cblx0dHJ5U2V0KGtleTogc3RyaW5nLCB2YWx1ZTogQ29tcG9uZW50Q2hpbGQpOiBTb21lPENvbXBvbmVudENoaWxkPiB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gc3VwZXIudHJ5U2V0KGtleSwgdmFsdWUpO1xuXHRcdGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Y29uc3QgcmVtb3ZlZFZhbHVlID0gcmVzdWx0LnZhbHVlO1xuXHRcdGlmIChyZW1vdmVkVmFsdWUpIHtcblx0XHRcdHJlbW92ZWRWYWx1ZS5kZXRhY2goKTtcblx0XHR9XG5cdFx0dmFsdWUuYXR0YWNoKGtleSk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHRyeVNldEtleShvbGRLZXk6IHN0cmluZywgbmV3S2V5OiBzdHJpbmcpOiBDb21wb25lbnRDaGlsZCB7XG5cdFx0Y29uc3QgaXRlbSA9IHN1cGVyLnRyeVNldEtleShvbGRLZXksIG5ld0tleSk7XG5cdFx0aWYgKGl0ZW0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aXRlbS5kZXRhY2goKTtcblx0XHRpdGVtLmF0dGFjaChuZXdLZXkpO1xuXHRcdHJldHVybiBpdGVtO1xuXHR9XG5cblx0ZGVsZXRlKGtleTogc3RyaW5nKTogQ29tcG9uZW50Q2hpbGQge1xuXHRcdGNvbnN0IGl0ZW0gPSBzdXBlci5kZWxldGUoa2V5KTtcblx0XHRpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpdGVtLmRldGFjaCgpO1xuXHRcdHJldHVybiBpdGVtO1xuXHR9XG5cblx0dHJ5U3BsaWNlKGtleXNUb1JlbW92ZTogSXRlcmFibGU8c3RyaW5nPixcblx0XHRcdCAgZW50cmllc1RvVXBkYXRlOiBSZWFkb25seU1hcDxzdHJpbmcsIENvbXBvbmVudENoaWxkPik6IElCaW5kYWJsZU1hcC5TcGxpY2VSZXN1bHQ8c3RyaW5nLCBDb21wb25lbnRDaGlsZD4ge1xuXHRcdGNvbnN0IHNwbGljZVJlc3VsdCA9IHN1cGVyLnRyeVNwbGljZShrZXlzVG9SZW1vdmUsIGVudHJpZXNUb1VwZGF0ZSk7XG5cdFx0aWYgKHNwbGljZVJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRzcGxpY2VSZXN1bHQuZGVsZXRlZEVudHJpZXMuZm9yRWFjaCh0aGlzLl9kZXRhY2gsIHRoaXMpO1xuXHRcdHNwbGljZVJlc3VsdC5hZGRlZEVudHJpZXMuZm9yRWFjaCh0aGlzLl9hdHRhY2gsIHRoaXMpO1xuXHRcdHJldHVybiBzcGxpY2VSZXN1bHQ7XG5cdH1cblxuXHR0cnlDbGVhcigpOiBNYXA8c3RyaW5nLCBDb21wb25lbnRDaGlsZD4ge1xuXHRcdGNvbnN0IG9sZENvbnRlbnRzID0gc3VwZXIudHJ5Q2xlYXIoKTtcblx0XHRpZiAob2xkQ29udGVudHMgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0b2xkQ29udGVudHMuZm9yRWFjaCh0aGlzLl9kZXRhY2gsIHRoaXMpO1xuXHRcdHJldHVybiBvbGRDb250ZW50cztcblx0fVxuXG5cdHRyeVJlaW5kZXgoa2V5TWFwcGluZzogUmVhZG9ubHlNYXA8c3RyaW5nLCBzdHJpbmc+KTogTWFwPHN0cmluZywgc3RyaW5nPiB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gc3VwZXIudHJ5UmVpbmRleChrZXlNYXBwaW5nKTtcblx0XHRpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAobGV0IG5ld0tleSBvZiBrZXlNYXBwaW5nLnZhbHVlcygpKSB7XG5cdFx0XHRjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0KG5ld0tleSk7XG5cdFx0XHR2YWx1ZS5kZXRhY2goKTtcblx0XHRcdHZhbHVlLmF0dGFjaChuZXdLZXkpO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0X2F0dGFjaChpdGVtOiBDb21wb25lbnRDaGlsZCwga2V5OiBzdHJpbmcpIHtcblx0XHRpdGVtLmF0dGFjaChrZXkpO1xuXHR9XG5cblx0X2RldGFjaChpdGVtOiBDb21wb25lbnRDaGlsZCkge1xuXHRcdGl0ZW0uZGV0YWNoKCk7XG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "../../main/dist/component/ComponentChildren.js":
/*!******************************************************!*\
  !*** ../../main/dist/component/ComponentChildren.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var BindableMap_1 = __importDefault(__webpack_require__(/*! ../BindableMap */ "../../main/dist/BindableMap.js"));

var MapUtils_1 = __webpack_require__(/*! ../MapUtils */ "../../main/dist/MapUtils.js");

var SetUtils_1 = __webpack_require__(/*! ../SetUtils */ "../../main/dist/SetUtils.js");

var ComponentChild_1 = __importDefault(__webpack_require__(/*! ./ComponentChild */ "../../main/dist/component/ComponentChild.js"));

var ComponentChildInserter_1 = __importDefault(__webpack_require__(/*! ./ComponentChildInserter */ "../../main/dist/component/ComponentChildInserter.js"));

var ComponentChildren = /*#__PURE__*/function (_BindableMap_1$defaul) {
  _inherits(ComponentChildren, _BindableMap_1$defaul);

  var _super = _createSuper(ComponentChildren);

  function ComponentChildren(component) {
    var _this;

    _classCallCheck(this, ComponentChildren);

    _this = _super.call(this, true);
    _this.component = component;
    _this.target = new ComponentChildInserter_1.default();
    return _this;
  }

  _createClass(ComponentChildren, [{
    key: "unrender",
    value: function unrender() {
      this.target.destroy();
    }
  }, {
    key: "trySet",
    value: function trySet(key, value) {
      var result = _get(_getPrototypeOf(ComponentChildren.prototype), "trySet", this).call(this, key, value);

      if (result === undefined) {
        return undefined;
      }

      var child = new ComponentChild_1.default(this.component, value);
      this.target.trySet(key, child);
      return result;
    }
  }, {
    key: "trySetKey",
    value: function trySetKey(oldKey, newKey) {
      var value = _get(_getPrototypeOf(ComponentChildren.prototype), "trySetKey", this).call(this, oldKey, newKey);

      if (value === undefined) {
        return undefined;
      }

      this.target.trySetKey(oldKey, newKey);
      return value;
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      var value = _get(_getPrototypeOf(ComponentChildren.prototype), "delete", this).call(this, key);

      if (value === undefined) {
        return undefined;
      }

      this.target.delete(key);
      return value;
    }
  }, {
    key: "trySplice",
    value: function trySplice(keysToRemove, entriesToUpdate) {
      var _this2 = this;

      var spliceResult = _get(_getPrototypeOf(ComponentChildren.prototype), "trySplice", this).call(this, keysToRemove, entriesToUpdate);

      if (spliceResult === undefined) {
        return undefined;
      }

      var deletedEntries = spliceResult.deletedEntries,
          addedEntries = spliceResult.addedEntries;
      var children = MapUtils_1.map(addedEntries, function (value) {
        return new ComponentChild_1.default(_this2.component, value);
      });
      this.target.trySplice(SetUtils_1.getDifference(MapUtils_1.getIterableKeys(deletedEntries), addedEntries), children);
      return spliceResult;
    }
  }, {
    key: "tryClear",
    value: function tryClear() {
      var oldContents = _get(_getPrototypeOf(ComponentChildren.prototype), "tryClear", this).call(this);

      if (oldContents === undefined) {
        return undefined;
      }

      this.target.tryClear();
      return oldContents;
    }
  }, {
    key: "tryReindex",
    value: function tryReindex(keyMapping) {
      var result = _get(_getPrototypeOf(ComponentChildren.prototype), "tryReindex", this).call(this, keyMapping);

      if (result === undefined) {
        return undefined;
      }

      this.target.tryReindex(keyMapping);
      return result;
    }
  }]);

  return ComponentChildren;
}(BindableMap_1.default);

exports.default = ComponentChildren;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnQvQ29tcG9uZW50Q2hpbGRyZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVGLElBQUEsYUFBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsZ0JBQUEsQ0FBQSxDQUFBOztBQUdBLElBQUEsVUFBQSxHQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUE7O0FBQ0EsSUFBQSxVQUFBLEdBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQTs7QUFFQSxJQUFBLGdCQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxrQkFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSx3QkFBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsMEJBQUEsQ0FBQSxDQUFBOztJQUVxQixpQjs7Ozs7QUFJcEIsNkJBQW9CLFNBQXBCLEVBQXdDO0FBQUE7O0FBQUE7O0FBQ3ZDLDhCQUFNLElBQU47QUFEbUIsVUFBQSxTQUFBLEdBQUEsU0FBQTtBQUVuQixVQUFLLE1BQUwsR0FBYyxJQUFJLHdCQUFBLENBQUEsT0FBSixFQUFkO0FBRnVDO0FBR3ZDOzs7O1dBRUQsb0JBQVE7QUFDUCxXQUFLLE1BQUwsQ0FBWSxPQUFaO0FBQ0E7OztXQUVELGdCQUFPLEdBQVAsRUFBb0IsS0FBcEIsRUFBb0M7QUFDbkMsVUFBTSxNQUFNLGlGQUFnQixHQUFoQixFQUFxQixLQUFyQixDQUFaOztBQUNBLFVBQUksTUFBTSxLQUFLLFNBQWYsRUFBMEI7QUFDekIsZUFBTyxTQUFQO0FBQ0E7O0FBQ0QsVUFBTSxLQUFLLEdBQUcsSUFBSSxnQkFBQSxDQUFBLE9BQUosQ0FBbUIsS0FBSyxTQUF4QixFQUFtQyxLQUFuQyxDQUFkO0FBQ0EsV0FBSyxNQUFMLENBQVksTUFBWixDQUFtQixHQUFuQixFQUF3QixLQUF4QjtBQUNBLGFBQU8sTUFBUDtBQUNBOzs7V0FFRCxtQkFBVSxNQUFWLEVBQTBCLE1BQTFCLEVBQXdDO0FBQ3ZDLFVBQU0sS0FBSyxvRkFBbUIsTUFBbkIsRUFBMkIsTUFBM0IsQ0FBWDs7QUFDQSxVQUFJLEtBQUssS0FBSyxTQUFkLEVBQXlCO0FBQ3hCLGVBQU8sU0FBUDtBQUNBOztBQUNELFdBQUssTUFBTCxDQUFZLFNBQVosQ0FBc0IsTUFBdEIsRUFBOEIsTUFBOUI7QUFDQSxhQUFPLEtBQVA7QUFDQTs7O1dBRUQsaUJBQU8sR0FBUCxFQUFrQjtBQUNqQixVQUFNLEtBQUssaUZBQWdCLEdBQWhCLENBQVg7O0FBQ0EsVUFBSSxLQUFLLEtBQUssU0FBZCxFQUF5QjtBQUN4QixlQUFPLFNBQVA7QUFDQTs7QUFDRCxXQUFLLE1BQUwsQ0FBWSxNQUFaLENBQW1CLEdBQW5CO0FBQ0EsYUFBTyxLQUFQO0FBQ0E7OztXQUVELG1CQUFVLFlBQVYsRUFDSSxlQURKLEVBQ21EO0FBQUE7O0FBQ2xELFVBQU0sWUFBWSxvRkFBbUIsWUFBbkIsRUFBaUMsZUFBakMsQ0FBbEI7O0FBQ0EsVUFBSSxZQUFZLEtBQUssU0FBckIsRUFBZ0M7QUFDL0IsZUFBTyxTQUFQO0FBQ0E7O0FBSmlELFVBSzNDLGNBTDJDLEdBS1gsWUFMVyxDQUszQyxjQUwyQztBQUFBLFVBSzNCLFlBTDJCLEdBS1gsWUFMVyxDQUszQixZQUwyQjtBQU1sRCxVQUFNLFFBQVEsR0FBRyxVQUFBLENBQUEsR0FBQSxDQUFJLFlBQUosRUFBa0IsVUFBQSxLQUFLO0FBQUEsZUFBSSxJQUFJLGdCQUFBLENBQUEsT0FBSixDQUFtQixNQUFJLENBQUMsU0FBeEIsRUFBbUMsS0FBbkMsQ0FBSjtBQUFBLE9BQXZCLENBQWpCO0FBQ0EsV0FBSyxNQUFMLENBQVksU0FBWixDQUFzQixVQUFBLENBQUEsYUFBQSxDQUFjLFVBQUEsQ0FBQSxlQUFBLENBQWdCLGNBQWhCLENBQWQsRUFBK0MsWUFBL0MsQ0FBdEIsRUFBb0YsUUFBcEY7QUFDQSxhQUFPLFlBQVA7QUFDQTs7O1dBRUQsb0JBQVE7QUFDUCxVQUFNLFdBQVcsa0ZBQWpCOztBQUNBLFVBQUksV0FBVyxLQUFLLFNBQXBCLEVBQStCO0FBQzlCLGVBQU8sU0FBUDtBQUNBOztBQUNELFdBQUssTUFBTCxDQUFZLFFBQVo7QUFDQSxhQUFPLFdBQVA7QUFDQTs7O1dBRUQsb0JBQVcsVUFBWCxFQUFrRDtBQUNqRCxVQUFNLE1BQU0scUZBQW9CLFVBQXBCLENBQVo7O0FBQ0EsVUFBSSxNQUFNLEtBQUssU0FBZixFQUEwQjtBQUN6QixlQUFPLFNBQVA7QUFDQTs7QUFDRCxXQUFLLE1BQUwsQ0FBWSxVQUFaLENBQXVCLFVBQXZCO0FBQ0EsYUFBTyxNQUFQO0FBQ0E7Ozs7RUFyRTZDLGFBQUEsQ0FBQSxPOztBQUEvQyxPQUFBLENBQUEsT0FBQSxHQUFBLGlCQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMSBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IEJpbmRhYmxlTWFwIGZyb20gJy4uL0JpbmRhYmxlTWFwJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vQ29tcG9uZW50JztcbmltcG9ydCBJQmluZGFibGVNYXAgZnJvbSAnLi4vSUJpbmRhYmxlTWFwJztcbmltcG9ydCB7Z2V0SXRlcmFibGVLZXlzLCBtYXB9IGZyb20gXCIuLi9NYXBVdGlsc1wiO1xuaW1wb3J0IHtnZXREaWZmZXJlbmNlfSBmcm9tIFwiLi4vU2V0VXRpbHNcIjtcbmltcG9ydCBTb21lIGZyb20gJy4uL1NvbWUnO1xuaW1wb3J0IENvbXBvbmVudENoaWxkIGZyb20gJy4vQ29tcG9uZW50Q2hpbGQnO1xuaW1wb3J0IENvbXBvbmVudENoaWxkSW5zZXJ0ZXIgZnJvbSAnLi9Db21wb25lbnRDaGlsZEluc2VydGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcG9uZW50Q2hpbGRyZW4gZXh0ZW5kcyBCaW5kYWJsZU1hcDxzdHJpbmcsIENvbXBvbmVudD4ge1xuXG5cdHByaXZhdGUgdGFyZ2V0OiBDb21wb25lbnRDaGlsZEluc2VydGVyO1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgY29tcG9uZW50OiBDb21wb25lbnQpIHtcblx0XHRzdXBlcih0cnVlKTtcblx0XHR0aGlzLnRhcmdldCA9IG5ldyBDb21wb25lbnRDaGlsZEluc2VydGVyKCk7XG5cdH1cblxuXHR1bnJlbmRlcigpIHtcblx0XHR0aGlzLnRhcmdldC5kZXN0cm95KCk7XG5cdH1cblxuXHR0cnlTZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBDb21wb25lbnQpOiBTb21lPENvbXBvbmVudD4ge1xuXHRcdGNvbnN0IHJlc3VsdCA9IHN1cGVyLnRyeVNldChrZXksIHZhbHVlKTtcblx0XHRpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGNvbnN0IGNoaWxkID0gbmV3IENvbXBvbmVudENoaWxkKHRoaXMuY29tcG9uZW50LCB2YWx1ZSk7XG5cdFx0dGhpcy50YXJnZXQudHJ5U2V0KGtleSwgY2hpbGQpO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHR0cnlTZXRLZXkob2xkS2V5OiBzdHJpbmcsIG5ld0tleTogc3RyaW5nKTogQ29tcG9uZW50IHtcblx0XHRjb25zdCB2YWx1ZSA9IHN1cGVyLnRyeVNldEtleShvbGRLZXksIG5ld0tleSk7XG5cdFx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHRoaXMudGFyZ2V0LnRyeVNldEtleShvbGRLZXksIG5ld0tleSk7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cblx0ZGVsZXRlKGtleTogc3RyaW5nKTogQ29tcG9uZW50IHtcblx0XHRjb25zdCB2YWx1ZSA9IHN1cGVyLmRlbGV0ZShrZXkpO1xuXHRcdGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0aGlzLnRhcmdldC5kZWxldGUoa2V5KTtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblxuXHR0cnlTcGxpY2Uoa2V5c1RvUmVtb3ZlOiBJdGVyYWJsZTxzdHJpbmc+LFxuXHRcdFx0ICBlbnRyaWVzVG9VcGRhdGU6IFJlYWRvbmx5TWFwPHN0cmluZywgQ29tcG9uZW50Pik6IElCaW5kYWJsZU1hcC5TcGxpY2VSZXN1bHQ8c3RyaW5nLCBDb21wb25lbnQ+IHtcblx0XHRjb25zdCBzcGxpY2VSZXN1bHQgPSBzdXBlci50cnlTcGxpY2Uoa2V5c1RvUmVtb3ZlLCBlbnRyaWVzVG9VcGRhdGUpO1xuXHRcdGlmIChzcGxpY2VSZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Y29uc3Qge2RlbGV0ZWRFbnRyaWVzLCBhZGRlZEVudHJpZXN9ID0gc3BsaWNlUmVzdWx0O1xuXHRcdGNvbnN0IGNoaWxkcmVuID0gbWFwKGFkZGVkRW50cmllcywgdmFsdWUgPT4gbmV3IENvbXBvbmVudENoaWxkKHRoaXMuY29tcG9uZW50LCB2YWx1ZSkpO1xuXHRcdHRoaXMudGFyZ2V0LnRyeVNwbGljZShnZXREaWZmZXJlbmNlKGdldEl0ZXJhYmxlS2V5cyhkZWxldGVkRW50cmllcyksIGFkZGVkRW50cmllcyksIGNoaWxkcmVuKTtcblx0XHRyZXR1cm4gc3BsaWNlUmVzdWx0O1xuXHR9XG5cblx0dHJ5Q2xlYXIoKTogTWFwPHN0cmluZywgQ29tcG9uZW50PiB7XG5cdFx0Y29uc3Qgb2xkQ29udGVudHMgPSBzdXBlci50cnlDbGVhcigpO1xuXHRcdGlmIChvbGRDb250ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0aGlzLnRhcmdldC50cnlDbGVhcigpO1xuXHRcdHJldHVybiBvbGRDb250ZW50cztcblx0fVxuXG5cdHRyeVJlaW5kZXgoa2V5TWFwcGluZzogUmVhZG9ubHlNYXA8c3RyaW5nLCBzdHJpbmc+KTogTWFwPHN0cmluZywgc3RyaW5nPiB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gc3VwZXIudHJ5UmVpbmRleChrZXlNYXBwaW5nKTtcblx0XHRpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHRoaXMudGFyZ2V0LnRyeVJlaW5kZXgoa2V5TWFwcGluZyk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==

/***/ }),

/***/ "../../main/dist/component/ComponentInserter.js":
/*!******************************************************!*\
  !*** ../../main/dist/component/ComponentInserter.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var AbstractInserter_1 = __importDefault(__webpack_require__(/*! ../AbstractInserter */ "../../main/dist/AbstractInserter.js"));

var ComponentInserter = /*#__PURE__*/function (_AbstractInserter_1$d) {
  _inherits(ComponentInserter, _AbstractInserter_1$d);

  var _super = _createSuper(ComponentInserter);

  function ComponentInserter() {
    _classCallCheck(this, ComponentInserter);

    return _super.apply(this, arguments);
  }

  _createClass(ComponentInserter, [{
    key: "_getElement",
    value: function _getElement(item) {
      return item.el[0];
    }
  }, {
    key: "_addItem",
    value: function _addItem(item, index) {
      _get(_getPrototypeOf(ComponentInserter.prototype), "_addItem", this).call(this, item, index);

      item._afterAppend();
    }
  }]);

  return ComponentInserter;
}(AbstractInserter_1.default);

exports.default = ComponentInserter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnQvQ29tcG9uZW50SW5zZXJ0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVGLElBQUEsa0JBQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLHFCQUFBLENBQUEsQ0FBQTs7SUFHcUIsaUI7Ozs7Ozs7Ozs7Ozs7V0FDVixxQkFBWSxJQUFaLEVBQTJCO0FBQ3BDLGFBQU8sSUFBSSxDQUFDLEVBQUwsQ0FBUSxDQUFSLENBQVA7QUFDQTs7O1dBRVMsa0JBQVMsSUFBVCxFQUEwQixLQUExQixFQUF1QztBQUNoRCxzRkFBZSxJQUFmLEVBQXFCLEtBQXJCOztBQUNBLE1BQUEsSUFBSSxDQUFDLFlBQUw7QUFDQTs7OztFQVI2QyxrQkFBQSxDQUFBLE87O0FBQS9DLE9BQUEsQ0FBQSxPQUFBLEdBQUEsaUJBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIxIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgQWJzdHJhY3RJbnNlcnRlciBmcm9tICcuLi9BYnN0cmFjdEluc2VydGVyJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vQ29tcG9uZW50JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcG9uZW50SW5zZXJ0ZXIgZXh0ZW5kcyBBYnN0cmFjdEluc2VydGVyPENvbXBvbmVudD4ge1xuXHRwcm90ZWN0ZWQgX2dldEVsZW1lbnQoaXRlbTogQ29tcG9uZW50KTogSFRNTEVsZW1lbnQge1xuXHRcdHJldHVybiBpdGVtLmVsWzBdO1xuXHR9XG5cblx0cHJvdGVjdGVkIF9hZGRJdGVtKGl0ZW06IENvbXBvbmVudCwgaW5kZXg6IG51bWJlcikge1xuXHRcdHN1cGVyLl9hZGRJdGVtKGl0ZW0sIGluZGV4KTtcblx0XHRpdGVtLl9hZnRlckFwcGVuZCgpO1xuXHR9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/component/ComponentObserver.js":
/*!******************************************************!*\
  !*** ../../main/dist/component/ComponentObserver.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var Class_1 = __importDefault(__webpack_require__(/*! ../Class */ "../../main/dist/Class.js"));

var DomUtils = __importStar(__webpack_require__(/*! ../DomUtils */ "../../main/dist/DomUtils.js"));

var ComponentObserver = /*#__PURE__*/function (_Class_1$default) {
  _inherits(ComponentObserver, _Class_1$default);

  var _super = _createSuper(ComponentObserver);

  function ComponentObserver(source, el) {
    var _this;

    _classCallCheck(this, ComponentObserver);

    _this = _super.call(this);
    _this.el = el;
    _this.len = 0;

    _this.own(source.onSplice.listen(function (spliceResult) {
      var _iterator = _createForOfIteratorHelper(spliceResult.deletedValues),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var value = _step.value;

          _this._removeValue(value);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var _iterator2 = _createForOfIteratorHelper(spliceResult.addedValues),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _value = _step2.value;

          _this._addValue(_value);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }));

    _this.own(source.onClear.listen(function (values) {
      var _iterator3 = _createForOfIteratorHelper(values),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var value = _step3.value;

          _this._removeValue(value);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }));

    return _this;
  }

  _createClass(ComponentObserver, [{
    key: "_addValue",
    value: function _addValue(value) {
      var parent = this.el;
      var anchor = parent.childNodes[this.len];
      var child = value.el[0];

      if (anchor != null) {
        parent.insertBefore(child, anchor);
      } else {
        parent.appendChild(child);
      }

      ++this.len;

      value._afterAppend();
    }
  }, {
    key: "_removeValue",
    value: function _removeValue(value) {
      DomUtils.remove(value.el[0]);
      --this.len;
    }
  }]);

  return ComponentObserver;
}(Class_1.default);

exports.default = ComponentObserver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnQvQ29tcG9uZW50T2JzZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVGLElBQUEsT0FBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsVUFBQSxDQUFBLENBQUE7O0FBRUEsSUFBQSxRQUFBLEdBQUEsWUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUEsQ0FBQTs7SUFHcUIsaUI7Ozs7O0FBR3BCLDZCQUFZLE1BQVosRUFBNEQsRUFBNUQsRUFBMkU7QUFBQTs7QUFBQTs7QUFDMUU7QUFEMkQsVUFBQSxFQUFBLEdBQUEsRUFBQTtBQUZwRCxVQUFBLEdBQUEsR0FBYyxDQUFkOztBQUlQLFVBQUssR0FBTCxDQUFTLE1BQU0sQ0FBQyxRQUFQLENBQWdCLE1BQWhCLENBQXVCLFVBQUEsWUFBWSxFQUFHO0FBQUEsaURBQzFCLFlBQVksQ0FBQyxhQURhO0FBQUE7O0FBQUE7QUFDOUMsNERBQWdEO0FBQUEsY0FBckMsS0FBcUM7O0FBQy9DLGdCQUFLLFlBQUwsQ0FBa0IsS0FBbEI7QUFDQTtBQUg2QztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLGtEQUkxQixZQUFZLENBQUMsV0FKYTtBQUFBOztBQUFBO0FBSTlDLCtEQUE4QztBQUFBLGNBQW5DLE1BQW1DOztBQUM3QyxnQkFBSyxTQUFMLENBQWUsTUFBZjtBQUNBO0FBTjZDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFPOUMsS0FQUSxDQUFUOztBQVFBLFVBQUssR0FBTCxDQUFTLE1BQU0sQ0FBQyxPQUFQLENBQWUsTUFBZixDQUFzQixVQUFBLE1BQU0sRUFBRztBQUFBLGtEQUNuQixNQURtQjtBQUFBOztBQUFBO0FBQ3ZDLCtEQUE0QjtBQUFBLGNBQWpCLEtBQWlCOztBQUMzQixnQkFBSyxZQUFMLENBQWtCLEtBQWxCO0FBQ0E7QUFIc0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUl2QyxLQUpRLENBQVQ7O0FBVjBFO0FBZTFFOzs7O1dBRU8sbUJBQVUsS0FBVixFQUEwQjtBQUNqQyxVQUFNLE1BQU0sR0FBRyxLQUFLLEVBQXBCO0FBQ0EsVUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsS0FBSyxHQUF2QixDQUFmO0FBQ0EsVUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEVBQU4sQ0FBUyxDQUFULENBQWQ7O0FBQ0EsVUFBSSxNQUFNLElBQUksSUFBZCxFQUFvQjtBQUNuQixRQUFBLE1BQU0sQ0FBQyxZQUFQLENBQW9CLEtBQXBCLEVBQTJCLE1BQTNCO0FBQ0EsT0FGRCxNQUVPO0FBQ04sUUFBQSxNQUFNLENBQUMsV0FBUCxDQUFtQixLQUFuQjtBQUNBOztBQUNELFFBQUUsS0FBSyxHQUFQOztBQUNBLE1BQUEsS0FBSyxDQUFDLFlBQU47QUFDQTs7O1dBRU8sc0JBQWEsS0FBYixFQUE2QjtBQUNwQyxNQUFBLFFBQVEsQ0FBQyxNQUFULENBQWdCLEtBQUssQ0FBQyxFQUFOLENBQVMsQ0FBVCxDQUFoQjtBQUNBLFFBQUUsS0FBSyxHQUFQO0FBQ0E7Ozs7RUFwQzZDLE9BQUEsQ0FBQSxPOztBQUEvQyxPQUFBLENBQUEsT0FBQSxHQUFBLGlCQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMSBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IENsYXNzIGZyb20gJy4uL0NsYXNzJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vQ29tcG9uZW50JztcbmltcG9ydCAqIGFzIERvbVV0aWxzIGZyb20gJy4uL0RvbVV0aWxzJztcbmltcG9ydCBSZWFkb25seUJpbmRhYmxlU2V0IGZyb20gJy4uL1JlYWRvbmx5QmluZGFibGVTZXQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRPYnNlcnZlciBleHRlbmRzIENsYXNzIHtcblx0cHJpdmF0ZSBsZW46IG51bWJlciA9IDA7XG5cblx0Y29uc3RydWN0b3Ioc291cmNlOiBSZWFkb25seUJpbmRhYmxlU2V0PENvbXBvbmVudD4sIHByaXZhdGUgZWw6IEhUTUxFbGVtZW50KSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLm93bihzb3VyY2Uub25TcGxpY2UubGlzdGVuKHNwbGljZVJlc3VsdCA9PiB7XG5cdFx0XHRmb3IgKGNvbnN0IHZhbHVlIG9mIHNwbGljZVJlc3VsdC5kZWxldGVkVmFsdWVzKSB7XG5cdFx0XHRcdHRoaXMuX3JlbW92ZVZhbHVlKHZhbHVlKTtcblx0XHRcdH1cblx0XHRcdGZvciAoY29uc3QgdmFsdWUgb2Ygc3BsaWNlUmVzdWx0LmFkZGVkVmFsdWVzKSB7XG5cdFx0XHRcdHRoaXMuX2FkZFZhbHVlKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9KSk7XG5cdFx0dGhpcy5vd24oc291cmNlLm9uQ2xlYXIubGlzdGVuKHZhbHVlcyA9PiB7XG5cdFx0XHRmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVWYWx1ZSh2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fSkpXG5cdH1cblxuXHRwcml2YXRlIF9hZGRWYWx1ZSh2YWx1ZTogQ29tcG9uZW50KSB7XG5cdFx0Y29uc3QgcGFyZW50ID0gdGhpcy5lbDtcblx0XHRjb25zdCBhbmNob3IgPSBwYXJlbnQuY2hpbGROb2Rlc1t0aGlzLmxlbl07XG5cdFx0Y29uc3QgY2hpbGQgPSB2YWx1ZS5lbFswXTtcblx0XHRpZiAoYW5jaG9yICE9IG51bGwpIHtcblx0XHRcdHBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIGFuY2hvcik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZCk7XG5cdFx0fVxuXHRcdCsrdGhpcy5sZW47XG5cdFx0dmFsdWUuX2FmdGVyQXBwZW5kKCk7XG5cdH1cblxuXHRwcml2YXRlIF9yZW1vdmVWYWx1ZSh2YWx1ZTogQ29tcG9uZW50KSB7XG5cdFx0RG9tVXRpbHMucmVtb3ZlKHZhbHVlLmVsWzBdKTtcblx0XHQtLXRoaXMubGVuO1xuXHR9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/component/ComponentSet.js":
/*!*************************************************!*\
  !*** ../../main/dist/component/ComponentSet.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var Class_1 = __importDefault(__webpack_require__(/*! ../Class */ "../../main/dist/Class.js"));

var SetMapper_1 = __importDefault(__webpack_require__(/*! ../collection/SetMapper */ "../../main/dist/collection/SetMapper.js"));

var DomUtils = __importStar(__webpack_require__(/*! ../DomUtils */ "../../main/dist/DomUtils.js"));

var ComponentObserver_1 = __importDefault(__webpack_require__(/*! ./ComponentObserver */ "../../main/dist/component/ComponentObserver.js"));

var ComponentSet = /*#__PURE__*/function (_Class_1$default) {
  _inherits(ComponentSet, _Class_1$default);

  var _super = _createSuper(ComponentSet);

  function ComponentSet(parent, source, el) {
    var _this;

    _classCallCheck(this, ComponentSet);

    _this = _super.call(this);
    _this.parent = parent;
    _this.source = source;

    parent._sets.add(_assertThisInitialized(_this));

    var mapper = _this.own(new SetMapper_1.default(source, function (child) {
      _this.parent._initChild(child);

      return child;
    }, {
      destroy: function destroy(child) {
        _this.parent._doneChild(child);
      }
    }));

    _this.own(new ComponentObserver_1.default(mapper.target, el[0]));

    return _this;
  }

  _createClass(ComponentSet, [{
    key: "destroy",
    value: function destroy() {
      this.parent._sets.delete(this);

      _get(_getPrototypeOf(ComponentSet.prototype), "destroy", this).call(this);
    }
  }, {
    key: "_afterAppend",
    value: function _afterAppend() {
      this.source.forEach(DomUtils._afterAppend);
    }
  }]);

  return ComponentSet;
}(Class_1.default);

exports.default = ComponentSet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnQvQ29tcG9uZW50U2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUYsSUFBQSxPQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxVQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLFdBQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLHlCQUFBLENBQUEsQ0FBQTs7QUFFQSxJQUFBLFFBQUEsR0FBQSxZQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsbUJBQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLHFCQUFBLENBQUEsQ0FBQTs7SUFFcUIsWTs7Ozs7QUFDcEIsd0JBQW9CLE1BQXBCLEVBQStDLE1BQS9DLEVBQXVGLEVBQXZGLEVBQWlHO0FBQUE7O0FBQUE7O0FBQ2hHO0FBRG1CLFVBQUEsTUFBQSxHQUFBLE1BQUE7QUFBMkIsVUFBQSxNQUFBLEdBQUEsTUFBQTs7QUFFOUMsSUFBQSxNQUFNLENBQUMsS0FBUCxDQUFhLEdBQWI7O0FBRUEsUUFBTSxNQUFNLEdBQUcsTUFBSyxHQUFMLENBQVMsSUFBSSxXQUFBLENBQUEsT0FBSixDQUFvQyxNQUFwQyxFQUE0QyxVQUFBLEtBQUssRUFBRztBQUMzRSxZQUFLLE1BQUwsQ0FBWSxVQUFaLENBQXVCLEtBQXZCOztBQUNBLGFBQU8sS0FBUDtBQUNBLEtBSHVCLEVBR3JCO0FBQ0YsTUFBQSxPQUFPLEVBQUUsaUJBQUEsS0FBSyxFQUFHO0FBQ2hCLGNBQUssTUFBTCxDQUFZLFVBQVosQ0FBdUIsS0FBdkI7QUFDQTtBQUhDLEtBSHFCLENBQVQsQ0FBZjs7QUFTQSxVQUFLLEdBQUwsQ0FBUyxJQUFJLG1CQUFBLENBQUEsT0FBSixDQUFzQixNQUFNLENBQUMsTUFBN0IsRUFBcUMsRUFBRSxDQUFDLENBQUQsQ0FBdkMsQ0FBVDs7QUFiZ0c7QUFjaEc7Ozs7V0FFRCxtQkFBTztBQUNOLFdBQUssTUFBTCxDQUFZLEtBQVosQ0FBa0IsTUFBbEIsQ0FBeUIsSUFBekI7O0FBQ0E7QUFDQTs7O1dBRUQsd0JBQVk7QUFDWCxXQUFLLE1BQUwsQ0FBWSxPQUFaLENBQW9CLFFBQVEsQ0FBQyxZQUE3QjtBQUNBOzs7O0VBeEJ3QyxPQUFBLENBQUEsTzs7QUFBMUMsT0FBQSxDQUFBLE9BQUEsR0FBQSxZQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMSBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IENsYXNzIGZyb20gJy4uL0NsYXNzJztcbmltcG9ydCBTZXRNYXBwZXIgZnJvbSBcIi4uL2NvbGxlY3Rpb24vU2V0TWFwcGVyXCI7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL0NvbXBvbmVudCc7XG5pbXBvcnQgKiBhcyBEb21VdGlscyBmcm9tICcuLi9Eb21VdGlscyc7XG5pbXBvcnQgUmVhZG9ubHlCaW5kYWJsZVNldCBmcm9tICcuLi9SZWFkb25seUJpbmRhYmxlU2V0JztcbmltcG9ydCBDb21wb25lbnRPYnNlcnZlciBmcm9tICcuL0NvbXBvbmVudE9ic2VydmVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcG9uZW50U2V0IGV4dGVuZHMgQ2xhc3Mge1xuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHBhcmVudDogQ29tcG9uZW50LCBwcml2YXRlIHNvdXJjZTogUmVhZG9ubHlCaW5kYWJsZVNldDxDb21wb25lbnQ+LCBlbDogSlF1ZXJ5KSB7XG5cdFx0c3VwZXIoKTtcblx0XHRwYXJlbnQuX3NldHMuYWRkKHRoaXMpO1xuXG5cdFx0Y29uc3QgbWFwcGVyID0gdGhpcy5vd24obmV3IFNldE1hcHBlcjxDb21wb25lbnQsIENvbXBvbmVudD4oc291cmNlLCBjaGlsZCA9PiB7XG5cdFx0XHR0aGlzLnBhcmVudC5faW5pdENoaWxkKGNoaWxkKTtcblx0XHRcdHJldHVybiBjaGlsZDtcblx0XHR9LCB7XG5cdFx0XHRkZXN0cm95OiBjaGlsZCA9PiB7XG5cdFx0XHRcdHRoaXMucGFyZW50Ll9kb25lQ2hpbGQoY2hpbGQpO1xuXHRcdFx0fVxuXHRcdH0pKTtcblxuXHRcdHRoaXMub3duKG5ldyBDb21wb25lbnRPYnNlcnZlcihtYXBwZXIudGFyZ2V0LCBlbFswXSkpO1xuXHR9XG5cblx0ZGVzdHJveSgpIHtcblx0XHR0aGlzLnBhcmVudC5fc2V0cy5kZWxldGUodGhpcyk7XG5cdFx0c3VwZXIuZGVzdHJveSgpO1xuXHR9XG5cblx0X2FmdGVyQXBwZW5kKCkge1xuXHRcdHRoaXMuc291cmNlLmZvckVhY2goRG9tVXRpbHMuX2FmdGVyQXBwZW5kKTtcblx0fVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==

/***/ }),

/***/ "../../main/dist/dummyDestroyable.js":
/*!*******************************************!*\
  !*** ../../main/dist/dummyDestroyable.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
/**
 * Dummy implementation of `Destroyable` interface.
 * Exposes `destroy` method which does nothing.
 */

var dummyDestroyable = {
  destroy: function destroy() {}
};
exports.default = dummyDestroyable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kdW1teURlc3Ryb3lhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCRTs7Ozs7QUFJRjs7O0FBR0c7O0FBQ0gsSUFBTSxnQkFBZ0IsR0FBZ0I7QUFDckMsRUFBQSxPQURxQyxxQkFDOUIsQ0FDTjtBQUZvQyxDQUF0QztBQUtBLE9BQUEsQ0FBQSxPQUFBLEdBQWUsZ0JBQWYiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIxIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgRGVzdHJveWFibGUgZnJvbSBcIi4vRGVzdHJveWFibGVcIjtcblxuLyoqXG4gKiBEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBgRGVzdHJveWFibGVgIGludGVyZmFjZS5cbiAqIEV4cG9zZXMgYGRlc3Ryb3lgIG1ldGhvZCB3aGljaCBkb2VzIG5vdGhpbmcuXG4gKi9cbmNvbnN0IGR1bW15RGVzdHJveWFibGU6IERlc3Ryb3lhYmxlID0geyAvLyBBbiBleHRyYSB2YXJpYWJsZSBoZWxwcyBJbnRlbGxpU2Vuc2UgdG8gZmluZCB0aGlzIGltcG9ydFxuXHRkZXN0cm95KCkge1xuXHR9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBkdW1teURlc3Ryb3lhYmxlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==

/***/ }),

/***/ "../../main/dist/dummyDispatcher.js":
/*!******************************************!*\
  !*** ../../main/dist/dummyDispatcher.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var dummyDestroyable_1 = __importDefault(__webpack_require__(/*! ./dummyDestroyable */ "../../main/dist/dummyDestroyable.js"));

var DummyDispatcher = /*#__PURE__*/function () {
  function DummyDispatcher() {
    _classCallCheck(this, DummyDispatcher);
  }

  _createClass(DummyDispatcher, [{
    key: "dummy",
    get: function get() {
      return true;
    }
  }, {
    key: "purge",
    value: function purge() {}
  }, {
    key: "listen",
    value: function listen(_handler, _scope) {
      return dummyDestroyable_1.default;
    }
  }, {
    key: "dispatch",
    value: function dispatch(_message) {}
  }]);

  return DummyDispatcher;
}();
/**
 * Dummy implementation of `Listenable<any>` interface.
 * As opposed to `Dispatcher`, doesn't really register any listeners, but just pretends it does that.
 */


var dummyDispatcher = new DummyDispatcher(); // An extra variable helps IntelliSense to find this import

exports.default = dummyDispatcher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kdW1teURpc3BhdGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHRixJQUFBLGtCQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxvQkFBQSxDQUFBLENBQUE7O0lBR00sZTs7Ozs7OztTQUVMLGVBQVM7QUFDUixhQUFPLElBQVA7QUFDQTs7O1dBRUQsaUJBQUssQ0FDSjs7O1dBRUQsZ0JBQU8sUUFBUCxFQUF3QyxNQUF4QyxFQUFvRDtBQUNuRCxhQUFPLGtCQUFBLENBQUEsT0FBUDtBQUNBOzs7V0FFRCxrQkFBUyxRQUFULEVBQXVCLENBQ3RCOzs7OztBQUdGOzs7QUFHRzs7O0FBQ0gsSUFBTSxlQUFlLEdBQXNCLElBQUksZUFBSixFQUEzQyxDLENBQW1FOztBQUNuRSxPQUFBLENBQUEsT0FBQSxHQUFlLGVBQWYiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIxIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgRGVzdHJveWFibGUgZnJvbSBcIi4vRGVzdHJveWFibGVcIjtcbmltcG9ydCBkdW1teURlc3Ryb3lhYmxlIGZyb20gXCIuL2R1bW15RGVzdHJveWFibGVcIjtcbmltcG9ydCBJRGlzcGF0Y2hlciBmcm9tIFwiLi9JRGlzcGF0Y2hlclwiO1xuXG5jbGFzcyBEdW1teURpc3BhdGNoZXIgaW1wbGVtZW50cyBJRGlzcGF0Y2hlcjxhbnk+IHtcblxuXHRnZXQgZHVtbXkoKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRwdXJnZSgpOiB2b2lkIHtcblx0fVxuXG5cdGxpc3RlbihfaGFuZGxlcjogKG1lc3NhZ2U6IGFueSkgPT4gYW55LCBfc2NvcGU/OiBhbnkpOiBEZXN0cm95YWJsZSB7XG5cdFx0cmV0dXJuIGR1bW15RGVzdHJveWFibGU7XG5cdH1cblxuXHRkaXNwYXRjaChfbWVzc2FnZT86IGFueSk6IHZvaWQge1xuXHR9XG59XG5cbi8qKlxuICogRHVtbXkgaW1wbGVtZW50YXRpb24gb2YgYExpc3RlbmFibGU8YW55PmAgaW50ZXJmYWNlLlxuICogQXMgb3Bwb3NlZCB0byBgRGlzcGF0Y2hlcmAsIGRvZXNuJ3QgcmVhbGx5IHJlZ2lzdGVyIGFueSBsaXN0ZW5lcnMsIGJ1dCBqdXN0IHByZXRlbmRzIGl0IGRvZXMgdGhhdC5cbiAqL1xuY29uc3QgZHVtbXlEaXNwYXRjaGVyID0gPElEaXNwYXRjaGVyPGFueT4+KG5ldyBEdW1teURpc3BhdGNoZXIoKSk7IC8vIEFuIGV4dHJhIHZhcmlhYmxlIGhlbHBzIEludGVsbGlTZW5zZSB0byBmaW5kIHRoaXMgaW1wb3J0XG5leHBvcnQgZGVmYXVsdCBkdW1teURpc3BhdGNoZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/index.js":
/*!********************************!*\
  !*** ../../main/dist/index.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Binding = exports.TWOWAY = exports.WATCH = exports.UPDATE = exports.destroy = exports.smartCmp = exports.cmp = exports.identity = void 0;

var internal_1 = __webpack_require__(/*! ./internal */ "../../main/dist/internal.js");

var internal_2 = __webpack_require__(/*! ./internal */ "../../main/dist/internal.js");

Object.defineProperty(exports, "identity", ({
  enumerable: true,
  get: function get() {
    return internal_2.identity;
  }
}));
/**
 * Universal and sophisticated comparer for array sorting. Broadly speaking, it:
 *
 * - Returns 1, if x > y
 * - Returns -1, if x < y
 * - Returns 0, if x == y
 *
 * See online documentation for details.
 */

function cmp(x, y) {
  return smartCmp(x, y);
}

exports.cmp = cmp;
/**
 * Universal and sophisticated comparer for array sorting. Broadly speaking, it:
 *
 * - Returns 1, if x > y
 * - Returns -1, if x < y
 * - Returns 0, if x == y
 *
 * See online documentation for details.
 */

function smartCmp(x, y, config) {
  var xRank = getTypeRank(x);
  var yRank = getTypeRank(y);

  if (xRank !== yRank) {
    return internal_1.cmpPrimitives(xRank, yRank);
  }

  switch (xRank) {
    case "array":
      return cmpArrays(x, y, config);

    case "boolean":
      return cmpBooleans(x, y);

    case "string":
      return cmpStrings(x, y, config);

    default:
      return internal_1.cmpPrimitives(x, y);
  }
}

exports.smartCmp = smartCmp;

function getTypeRank(x) {
  return x === undefined ? "0" : x === null ? "1" : Array.isArray(x) ? "array" : _typeof(x);
}

function cmpArrays(x, y, config) {
  var n = Math.min(x.length, y.length);

  for (var i = 0; i < n; ++i) {
    var result = smartCmp(x[i], y[i], config);

    if (result) {
      return result;
    }
  }

  return internal_1.cmpPrimitives(x.length, y.length);
}

function cmpBooleans(x, y) {
  return x ? y ? 0 : 1 : y ? -1 : 0;
}

function cmpStrings(x, y, config) {
  x = x || "";
  y = y || "";

  if (config && config.caseInsensitive) {
    x = x.toLowerCase();
    y = y.toLowerCase();
  }

  if (!config || !config.compareNumbersInStrings) {
    return internal_1.cmpPrimitives(x, y);
  }

  var xIndex = 0;
  var yIndex = 0;

  while (true) {
    var xLength = x.substr(xIndex).search(/\d+/);

    if (xLength === -1) {
      xLength = x.length - xIndex;
    }

    var yLength = y.substr(yIndex).search(/\d+/);

    if (yLength === -1) {
      yLength = y.length - yIndex;
    }

    var result1 = internal_1.cmpPrimitives(x.substr(xIndex, xLength), y.substr(yIndex, yLength));

    if (result1) {
      return result1;
    }

    xIndex += xLength;
    yIndex += yLength;
    var xMatches = /^\d+/.exec(x.substr(xIndex));
    var yMatches = /^\d+/.exec(y.substr(yIndex));

    if (xMatches == null || yMatches == null) {
      return cmpBooleans(xMatches != null, yMatches != null);
    }

    var xNumber = +xMatches[0];
    var yNumber = +yMatches[0];
    var result2 = internal_1.cmpPrimitives(xNumber, yNumber);

    if (result2) {
      return result2;
    }

    xIndex += xMatches[0].length;
    yIndex += yMatches[0].length;
  }
}
/**
 * Calls object method `destroy` if available. Can be used in mapper configuration.
 */


function destroy(obj) {
  if (obj && typeof obj.destroy === "function") {
    obj.destroy();
  }
}

exports.destroy = destroy;
/**
 * Shorthand for Binding.UPDATE.
 */

exports.UPDATE = 1;
/**
 * Shorthand for Binding.WATCH.
 */

exports.WATCH = 2;
/**
 * Shorthand for Binding.TWOWAY.
 */

exports.TWOWAY = 3;
/**
 * jWidget binding modes. All options have shorthands.
 */

var Binding;

(function (Binding) {
  /**
   * Bind invoker to argument. Always used as default binding.
   */
  Binding[Binding["UPDATE"] = 1] = "UPDATE";
  /**
   * Bind argument to invoker. Always supplied with a no-argument method, which creates the property automatically.
   */

  Binding[Binding["WATCH"] = 2] = "WATCH";
  /**
   * Bind invoker and argument to each other. UPDATE-binding is applied first.
   */

  Binding[Binding["TWOWAY"] = 3] = "TWOWAY";
})(Binding = exports.Binding || (exports.Binding = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/internal.js":
/*!***********************************!*\
  !*** ../../main/dist/internal.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cmpPrimitives = exports.identity = void 0;

function identity(x) {
  return x;
}

exports.identity = identity;

function cmpPrimitives(x, y) {
  return x > y ? 1 : x < y ? -1 : 0;
}

exports.cmpPrimitives = cmpPrimitives;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbnRlcm5hbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkU7Ozs7Ozs7QUFFRixTQUFnQixRQUFoQixDQUE0QixDQUE1QixFQUFnQztBQUMvQixTQUFPLENBQVA7QUFDQTs7QUFGRCxPQUFBLENBQUEsUUFBQSxHQUFBLFFBQUE7O0FBSUEsU0FBZ0IsYUFBaEIsQ0FBOEIsQ0FBOUIsRUFBc0MsQ0FBdEMsRUFBNkM7QUFDNUMsU0FBUSxDQUFDLEdBQUcsQ0FBTCxHQUFVLENBQVYsR0FBZSxDQUFDLEdBQUcsQ0FBTCxHQUFVLENBQUMsQ0FBWCxHQUFlLENBQXBDO0FBQ0E7O0FBRkQsT0FBQSxDQUFBLGFBQUEsR0FBQSxhQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMSBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5PFQ+KHg6IFQpOiBUIHtcblx0cmV0dXJuIHg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbXBQcmltaXRpdmVzKHg6IGFueSwgeSA6IGFueSk6IG51bWJlciB7XG5cdHJldHVybiAoeCA+IHkpID8gMSA6ICh4IDwgeSkgPyAtMSA6IDA7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/template.js":
/*!***********************************!*\
  !*** ../../main/dist/template.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2021 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var HtmlTemplate_1 = __importDefault(__webpack_require__(/*! ./HtmlTemplate */ "../../main/dist/HtmlTemplate.js"));
/**
 * Defines HTML template for a `Component` subclass.
 * @param html Template HTML string.
 */


function default_1(html) {
  return function (target) {
    target.prototype._template = new HtmlTemplate_1.default(html);
  };
}

exports.default = default_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90ZW1wbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkU7Ozs7Ozs7Ozs7OztBQUVGLElBQUEsY0FBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsZ0JBQUEsQ0FBQSxDQUFBO0FBRUE7OztBQUdHOzs7QUFDSCxTQUFBLFNBQUEsQ0FBeUIsSUFBekIsRUFBcUM7QUFDcEMsU0FBTyxVQUFVLE1BQVYsRUFBcUI7QUFDM0IsSUFBQSxNQUFNLENBQUMsU0FBUCxDQUFpQixTQUFqQixHQUE2QixJQUFJLGNBQUEsQ0FBQSxPQUFKLENBQWlCLElBQWpCLENBQTdCO0FBQ0EsR0FGRDtBQUdBOztBQUpELE9BQUEsQ0FBQSxPQUFBLEdBQUEsU0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjEgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBIdG1sVGVtcGxhdGUgZnJvbSBcIi4vSHRtbFRlbXBsYXRlXCI7XG5cbi8qKlxuICogRGVmaW5lcyBIVE1MIHRlbXBsYXRlIGZvciBhIGBDb21wb25lbnRgIHN1YmNsYXNzLlxuICogQHBhcmFtIGh0bWwgVGVtcGxhdGUgSFRNTCBzdHJpbmcuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChodG1sOiBzdHJpbmcpOiBhbnkge1xuXHRyZXR1cm4gZnVuY3Rpb24gKHRhcmdldDogYW55KSB7XG5cdFx0dGFyZ2V0LnByb3RvdHlwZS5fdGVtcGxhdGUgPSBuZXcgSHRtbFRlbXBsYXRlKGh0bWwpO1xuXHR9O1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,