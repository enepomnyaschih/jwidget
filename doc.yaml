name: jWidget 2

references:
  # External references
  lodash:
    label: Lodash
    href: https://lodash.com
  underscore:
    label: Underscore.js
    href: http://underscorejs.org
  jquery:
    label: jQuery
    href: http://api.jquery.com
  JQuery:
    href: http://api.jquery.com
  Promise:
    href: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
  PromiseAll:
    href: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all
    label: Promise.all
  PromiseRace:
    href: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race
    label: Promise.race
  PromiseThen:
    href: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then
    label: Promise.then
  PromiseCatch:
    href: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch
    label: Promise.catch
  jqXHR:
    href: http://api.jquery.com/jquery.ajax/
  Thenable:
    href: https://www.npmjs.com/package/@types/es6-promise
  setTimeout:
    href: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout
  clearTimeout:
    href: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearTimeout
  setInterval:
    href: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval
  clearInterval:
    href: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval

  # Pages
  DocumentationRoot:
    file: doc
    label: Documentation root

  # Terms
  falsy:
    file: jwidget
    symbol: isFalsy
  truthy:
    file: jwidget
    symbol: isTruthy
  destroyed:
    file: jwidget/Destroyable
    member: destroy
  destroying:
    file: jwidget/Destroyable
    member: destroy
  destruction:
    file: jwidget/Destroyable
    member: destroy
  destroys:
    file: jwidget/Destroyable
    member: destroy
  triggered:
    file: jwidget/IEvent
    member: trigger
  triggers:
    file: jwidget/IEvent
    member: trigger

  # Core
  CoreUtils:
    file: jwidget
  Binding:
    file: jwidget
    symbol: Binding
  CollectionFlags:
    file: jwidget
    symbol: CollectionFlags
  TWOWAY:
    file: jwidget
    symbol: Binding
  cmp:
    file: jwidget
    symbol: cmp
  destroyFunction:
    file: jwidget
    symbol: destroy
    label: destroy
  newIid:
    file: jwidget
    symbol: newIid

  # ArrayUtils
  backEvery:
    file: jwidget/ArrayUtils
    symbol: backEvery

  # Destroyable
  destroy:
    file: jwidget/Destroyable
    member: destroy
  baseDestroy:
    file: jwidget/Destroyable
    member: destroy
    label: destroy

  # Identifiable
  iid:
    file: jwidget/Identifiable
    member: iid

  # IClass
  own:
    file: jwidget/IClass
    member: own
  trigger:
    file: jwidget/IEvent
    member: trigger

  # Class
  destroyObject:
    file: jwidget/Class
    member: destroyObject

  # Listenable
  listenMethod:
    file: jwidget/Listenable
    member: listen
    label: listen

  # Bindable
  getOfBindable:
    file: jwidget/Bindable
    member: get
    label: get
  mapOfBindable:
    file: jwidget/Bindable
    member: map
    label: map

  # IProperty
  ownValue:
    file: jwidget/IProperty
    member: ownValue

  # Property
  setOfProperty:
    file: jwidget/IProperty
    member: set
    label: set

  # Switcher
  initOfSwitcher:
    file: jwidget/Switcher
    symbol: Switcher.Config
    member: init
    label: init

  doneOfSwitcher:
    file: jwidget/Switcher
    symbol: Switcher.Config
    member: done
    label: done

  # Component
  beforeRender:
    file: jwidget/Component
    member: beforeRender

  renderTo:
    file: jwidget/Component
    member: renderTo

  # Collection
  collections:
    file: jwidget/ReadonlyCollection
    label: Collections

  # List
  findOfList:
    file: jwidget/ReadonlyList
    member: find
    label: find

  # Mappers
  mappers:
    file: jwidget/mapper/AbstractMapper
    label: Mappers

  ListMapper:
    file: jwidget/mapper/list

  MapMapper:
    file: jwidget/mapper/map

  SetMapper:
    file: jwidget/mapper/set

  createMapper:
    file: jwidget/mapper/collection
    symbol: createMapper

  mapCollection:
    file: jwidget/mapper/collection
    symbol: mapCollection

  mapList:
    file: jwidget/mapper/list
    symbol: mapList

  mapMap:
    file: jwidget/mapper/map
    symbol: mapMap

  mapSet:
    file: jwidget/mapper/set
    symbol: mapSet

  # Filterers
  filterers:
    file: jwidget/filterer/AbstractFilterer
    label: Filterers

  ListFilterer:
    file: jwidget/filterer/list

  MapFilterer:
    file: jwidget/filterer/map

  SetFilterer:
    file: jwidget/filterer/set

  createFilterer:
    file: jwidget/filterer/collection
    symbol: createFilterer

  filterCollection:
    file: jwidget/filterer/collection
    symbol: filterCollection

  filterList:
    file: jwidget/filterer/list
    symbol: filterList

  filterMap:
    file: jwidget/filterer/map
    symbol: filterMap

  filterSet:
    file: jwidget/filterer/set
    symbol: filterSet

  # Counters
  counters:
    file: jwidget/counter/AbstractCounter
    label: Counters

  ListCounter:
    file: jwidget/counter/list

  MapCounter:
    file: jwidget/counter/map

  SetCounter:
    file: jwidget/counter/set

  createCounter:
    file: jwidget/counter/collection
    symbol: createCounter

  countCollection:
    file: jwidget/counter/collection
    symbol: countCollection

  countList:
    file: jwidget/counter/list
    symbol: countList

  countMap:
    file: jwidget/counter/map
    symbol: countMap

  countSet:
    file: jwidget/counter/set
    symbol: countSet

  # Indexers
  indexers:
    file: jwidget/indexer/AbstractIndexer
    label: Indexers

  ListIndexer:
    file: jwidget/indexer/list

  MapIndexer:
    file: jwidget/indexer/map

  SetIndexer:
    file: jwidget/indexer/set

  createIndexer:
    file: jwidget/indexer/collection
    symbol: createIndexer

  indexCollection:
    file: jwidget/indexer/collection
    symbol: indexCollection

  indexList:
    file: jwidget/indexer/list
    symbol: indexList

  indexMap:
    file: jwidget/indexer/map
    symbol: indexMap

  indexSet:
    file: jwidget/indexer/set
    symbol: indexSet

  # ConvertersToSet
  convertersToSet:
    file: jwidget/convertertoset/AbstractConverterToSet
    label: Converters to set

  ListConverterToSet:
    file: jwidget/convertertoset/list

  MapConverterToSet:
    file: jwidget/convertertoset/map

  SetConverterToSet:
    file: jwidget/convertertoset/set

  createConverterToSet:
    file: jwidget/convertertoset/collection
    symbol: createConverterToSet

  collectionToSet:
    file: jwidget/convertertoset/collection
    symbol: collectionToSet

  listToSet:
    file: jwidget/convertertoset/list
    symbol: listToSet

  mapToSet:
    file: jwidget/convertertoset/map
    symbol: mapToSet

  setToSet:
    file: jwidget/convertertoset/set
    symbol: setToSet

  # ConvertersToList
  convertersToList:
    file: jwidget/convertertolist/AbstractConverterToList
    label: Converters to list

  ListConverterToList:
    file: jwidget/convertertolist/list

  MapConverterToList:
    file: jwidget/convertertolist/map

  SetConverterToList:
    file: jwidget/convertertolist/set

  createConverterToList:
    file: jwidget/convertertolist/collection
    symbol: createConverterToList

  collectionToList:
    file: jwidget/convertertolist/collection
    symbol: collectionToList

  listToList:
    file: jwidget/convertertolist/list
    symbol: listToList

  mapToList:
    file: jwidget/convertertolist/map
    symbol: mapToList

  setToList:
    file: jwidget/convertertolist/set
    symbol: setToList

  # SortersComparing
  sortersComparing:
    file: jwidget/sortercomparing/AbstractSorterComparing
    label: Sorters (comparing)

  ListSorterComparing:
    file: jwidget/sortercomparing/list

  MapSorterComparing:
    file: jwidget/sortercomparing/map

  SetSorterComparing:
    file: jwidget/sortercomparing/set

  createSorterComparing:
    file: jwidget/sortercomparing/collection
    symbol: createSorterComparing

  sortCollectionComparing:
    file: jwidget/sortercomparing/collection
    symbol: sortCollectionComparing

  sortListComparing:
    file: jwidget/sortercomparing/list
    symbol: sortListComparing

  sortMapComparing:
    file: jwidget/sortercomparing/map
    symbol: sortMapComparing

  sortSetComparing:
    file: jwidget/sortercomparing/set
    symbol: sortSetComparing

  # Observers
  observers:
    file: jwidget/observer/AbstractObserver
    label: Observers

  ListObserver:
    file: jwidget/observer/list

  MapObserver:
    file: jwidget/observer/map

  SetObserver:
    file: jwidget/observer/set

  createObserver:
    file: jwidget/observer/collection
    symbol: createObserver

  # Inserters
  inserters:
    file: jwidget/inserter/list
    label: Inserters

  ListInserter:
    file: jwidget/inserter/list

  MapInserter:
    file: jwidget/inserter/map

  # Mergers
  mergers:
    file: jwidget/merger/list
    label: Mergers

  ListMerger:
    file: jwidget/merger/list

  mergeLists:
    file: jwidget/merger/list
    symbol: mergeLists

  mergeNoSync:
    file: jwidget/merger/list
    symbol: mergeNoSync

  # Reversers
  reversers:
    file: jwidget/reverser/list
    label: Reversers

  ListReverser:
    file: jwidget/reverser/list

  reverseList:
    file: jwidget/reverser/list
    symbol: reverseList

includes:
  DocumentationIndex: |
    <div class="container-fluid">
      <h5>%DocumentationRoot</h5>
      <div class="row">
        <div class="col-4">
          <h5>Utilities</h5>
          <ul class="list-unstyled">
            <li>%CoreUtils</li>
            <li>%ArrayUtils</li>
            <li>%DictionaryUtils</li>
            <li>%DomUtils</li>
            <li>%StringUtils</li>
          </ul>
          <h5>Core interfaces</h5>
          <ul class="list-unstyled">
            <li>%Destroyable</li>
            <li>%Identifiable</li>
            <li>%Listenable</li>
            <li>%Bindable</li>
            <li>%DestroyableBindable</li>
          </ul>
        </div>
        <div class="col-4">
          <h5>Auxiliary interfaces</h5>
          <ul class="list-unstyled">
            <li>%Dictionary</li>
            <li>%Some</li>
          </ul>
          <h5>Core classes and their interfaces</h5>
          <ul class="list-unstyled">
            <li>%Class, %IClass</li>
            <li>%Event, %IEvent</li>
            <li>%Property, %IProperty</li>
          </ul>
          <h5>UI core</h5>
          <ul class="list-unstyled">
            <li>%Component</li>
            <li>%template</li>
            <li>%listen</li>
          </ul>
        </div>
        <div class="col-4">
          <h5>Model bindings for %Property</h5>
          <ul class="list-unstyled">
            <li>%Copier</li>
            <li>%Mapper</li>
            <li>%Switcher</li>
          </ul>
          <h5>View bindings for %Property</h5>
          <ul class="list-unstyled" style="column-count: 2">
            <li>%bindAttr</li>
            <li>%bindClass</li>
            <li>%bindCss</li>
            <li>%bindDisplay</li>
            <li>%bindHtml</li>
            <li>%bindProp</li>
            <li>%bindRadio</li>
            <li>%bindText</li>
            <li>%bindVal</li>
          </ul>
        </div>
      </div>
      <hr>
      <div class="row">
        <div class="col-8">
          <h5>Collections</h5>
          <table class="table table-sm">
            <tbody>
              <tr>
                <td>%ReadonlyCollection</td>
                <td>%ReadonlyList</td>
                <td>%ReadonlyMap</td>
                <td>%ReadonlySet</td>
              </tr>
              <tr>
                <td>%DestroyableReadonlyCollection</td>
                <td>%DestroyableReadonlyList</td>
                <td>%DestroyableReadonlyMap</td>
                <td>%DestroyableReadonlySet</td>
              </tr>
              <tr>
                <td>%ICollection</td>
                <td>%IList</td>
                <td>%IMap</td>
                <td>%ISet</td>
              </tr>
              <tr>
                <td></td>
                <td>%List</td>
                <td>%Map</td>
                <td>%Set</td>
              </tr>
            </tbody>
          </table>
        </div>
        <div class="col-4">
          <h5>Collection bindings</h5>
          <ul class="list-unstyled" style="column-count: 2">
            <li>%mappers</li>
            <li>%filterers</li>
            <li>%counters</li>
            <li>%indexers</li>
            <li>%convertersToSet</li>
            <li>%convertersToList</li>
            <li>%sortersComparing</li>
            <li>%observers</li>
            <li>%inserters</li>
            <li>%mergers</li>
            <li>%reversers</li>
          </ul>
        </div>
      </div>
      <hr>
      <div class="row">
        <div class="col-4">
          <h5>Routing</h5>
          <ul class="list-unstyled">
            <li>%hash</li>
            <li>%Router</li>
            <li>%UIRouter</li>
            <li>%Endpoint</li>
          </ul>
          <h5>Destroyable adapters</h5>
          <ul class="list-unstyled">
            <li>%Destructor</li>
            <li>%Interval</li>
          </ul>
        </div>
        <div class="col-4">
          <h5>AJAX and asyncronous operations</h5>
          <ul class="list-unstyled">
            <li>%CancelToken</li>
            <li>%defer</li>
            <li>%request</li>
          </ul>
          <h5>Other tools</h5>
          <ul class="list-unstyled">
            <li>%DomInserter</li>
            <li>%DomTemplate</li>
            <li>%HtmlTemplate</li>
            <li>%Reducer</li>
          </ul>
        </div>
        <div class="col-4">
          <h5>References (low level stuff)</h5>
          <ul class="list-unstyled">
            <li>%AbstractTemplate</li>
            <li>%dummyDestroyable</li>
            <li>%dummyEvent</li>
            <li>%IndexCount</li>
            <li>%IndexItems</li>
            <li>%ListSpliceResult</li>
            <li>%TemplateOutput</li>
          </ul>
        </div>
      </div>
    </div>

  MainPage: |
    <div class="container">
      <div class="jumbotron">
        <h1 class="display-4">jWidget 2</h1>
        <p class="lead">Object-oriented TypeScript Model-View framework.</p>
        <hr class="my-4">
        <p>Being straight competitor to the other frontend frameworks, jWidget is good for developers who respect
        the principles of object-oriented programming and appreciate good application performance.</p>
      </div>
      <p>jWidget 2 is available as <a href="https://www.npmjs.com/package/jwidget">npm package</a>.</p>
      <pre>
      npm install --save jwidget
      </pre>
      <p>jWidget features:</p>
      <ul>
        <li>Base class %Class for object aggregation.</li>
        <li>%Event class for event listening and triggering.</li>
        <li>%Property class for value binding.</li>
        <li>%collections, algorithms, synchronizers.</li>
        <li>%Component for UI component creation and inheritance with HTML templates and DOM bindings.</li>
        <li>and many other...</li>
      </ul>
      <p>jWidget is a pure object-oriented solution which doesn't rely on mystic custom HTML templates and unclear
      update cycles. Each object simply listens events and handles them in very straightforward way. Look at the next
      example:</p>
      <pre>
      import {%TWOWAY} from "jwidget";
      import %bindText from "jwidget/bindText";
      import %bindVal from "jwidget/bindVal";
      import %Component from "jwidget/Component";
      import %Property from "jwidget/Property";
      import %template from "jwidget/template";

      @template(`<div class="greeter">
                   <p>Your name: <input jwid="name-field" type="text"></p>
                   <div jwid="greeting"></div>
                 </div>`)
      class Greeter extends %Component {

          private name = new %Property("guest");

          protected renderNameField(el: JQuery) {
              // Bind element value to property
              %bindVal(el, this.name, %TWOWAY);
          }

          protected renderGreeting(el: JQuery) {
              // Build greeting message
              const text = this.name.%mapOfBindable(name => `Hello, ${name}!`);

              // Bind element text to message
              %bindText(el, text);
          }
      }

      $(() => {
          new Greeter().%renderTo("body");
      });
      </pre>
      %example:greeter
      <p>Sure, in Angular and React this code would be much shorter, but in jWidget you see clearly how it works. This
      gives you confidence in your ability to implement as complicated and big MV application as you would like to. You
      are free to use all well-known OOD patterns and follow OOD
      <a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)" target="_blank">SOLID principles</a>. Read the
      %tutorial for more examples.</p>
      <p>The difference between jWidget and other Model-View frameworks is the approach of working with properties and
      collections. In other frameworks, data binding is performed implicitly via HTML templates. In jWidget, data binding
      is performed explicitly using %Property and its bindings. Instead of special tags-repeaters in HTML templates, you work with
      collections explicitly using %collections and their synchronizers.</p>
      <p>This approach is more effective: data binding is not constrained by connection between model and view. All the same
      practices are used to bind model objects to each other and to bind view components to each other.</p>
      <p>Project license is <a href="https://www.gnu.org/licenses/lgpl-3.0.en.html" target="_blank">LGPLv3</a>.</p>
      <p>Find source code and bug tracker at <a href="https://github.com/enepomnyaschih/jwidget" target="_blank">GitHub</a>.</p>
    </div>

  EventExample: |
    <p>It is smart to store the event as %IEvent internally, and expose it as %Listenable externally to deny direct
    control over the event by the clients.</p>
    <pre>
    class Example {
        private _changeEvent = new %Event<number>();

        get changeEvent(): %Listenable<number> {
            return this._changeEvent;
        }

        // ...

            // We can't trigger public changeEvent, but we can trigger private _changeEvent
            this._changeEvent.%trigger(value);

        // ...
    }
    </pre>

  PropertyExample: |
    <p>It is sometimes smart to store the property as %IProperty internally, and expose it as %Bindable or
    %DestroyableBindable externally to deny direct control over the property by the clients.</p>
    <pre>
    class Example {
        private _size = new %Property<number>(0);

        get size(): %Bindable<number> {
            return this._size;
        }

        // ...

            // We can't set public size, but we can set private _size
            this._size.%set(value);

        // ...
    }
    </pre>
