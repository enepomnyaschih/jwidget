Ext.data.JsonP.JW_Event({"tagname":"class","name":"JW.Event","autodetected":{},"files":[{"filename":"event.js","href":"event2.html#JW-Event"}],"extends":"JW.Class","members":[{"name":"_iid","tagname":"property","owner":"JW.Class","id":"property-_iid","meta":{}},{"name":"constructor","tagname":"property","owner":"JW.Class","id":"property-constructor","meta":{}},{"name":"constructor","tagname":"method","owner":"JW.Event","id":"method-constructor","meta":{}},{"name":"_super","tagname":"method","owner":"JW.Class","id":"method-_super","meta":{}},{"name":"bind","tagname":"method","owner":"JW.Event","id":"method-bind","meta":{}},{"name":"destroy","tagname":"method","owner":"JW.Class","id":"method-destroy","meta":{}},{"name":"purge","tagname":"method","owner":"JW.Event","id":"method-purge","meta":{}},{"name":"trigger","tagname":"method","owner":"JW.Event","id":"method-trigger","meta":{}},{"name":"unbind","tagname":"method","owner":"JW.Event","id":"method-unbind","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-JW.Event","short_doc":"&lt;P extends JW.EventParams&gt;\n\nКласс события. ...","component":false,"superclasses":["JW.Class"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'><a href='#!/api/JW.Class' rel='JW.Class' class='docClass'>JW.Class</a><div class='subclass '><strong>JW.Event</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/event2.html#JW-Event' target='_blank'>event.js</a></div></pre><div class='doc-contents'><p><code>&lt;P extends <a href=\"#!/api/JW.EventParams\" rel=\"JW.EventParams\" class=\"docClass\">JW.EventParams</a>&gt;</code></p>\n\n<p>Класс события. Используется для того, чтобы оповещать какие-то объекты (клиенты) о каких-то событиях (например, об\nизменении значения какой-то переменной).</p>\n\n<p><strong>Замечание:</strong> Уничтожение событий объекта и отписка от сторонних событий, как правило, осуществляется в деструкторе.</p>\n\n<p>Полный пример класса, выбрасывающего события:</p>\n\n<pre><code>var Dispatcher = function() {\n    Dispatcher._super.call(this);\n    this.items = [];\n    this.addEvent = new <a href=\"#!/api/JW.Event\" rel=\"JW.Event\" class=\"docClass\">JW.Event</a>();\n    this.removeEvent = new <a href=\"#!/api/JW.Event\" rel=\"JW.Event\" class=\"docClass\">JW.Event</a>();\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(Dispatcher, // &lt;T&gt;\n          <a href=\"#!/api/JW.Class\" rel=\"JW.Class\" class=\"docClass\">JW.Class</a>, {\n    // Array&lt;T&gt; items;\n    // <a href=\"#!/api/JW.Event\" rel=\"JW.Event\" class=\"docClass\">JW.Event</a>&lt;Dispatcher.EventParams&lt;T&gt;&gt; addEvent;\n    // <a href=\"#!/api/JW.Event\" rel=\"JW.Event\" class=\"docClass\">JW.Event</a>&lt;Dispatcher.EventParams&lt;T&gt;&gt; removeEvent;\n\n    // override\n    destroy: function() {\n        this.removeEvent.destroy();\n        this.addEvent.destroy();\n        this._super();\n    },\n\n    addItem: function(item, index) {\n        this.items.splice(index, 0, item);\n        this.addEvent.trigger(new Dispatcher.EventParams(this, item, index));\n    },\n\n    removeItem: function(index) {\n        var item = this.items.splice(index, 1)[0];\n        this.removeEvent.trigger(new Dispatcher.EventParams(this, item, index));\n    }\n});\n\nDispatcher.EventParams = function(sender, item, index) {\n    Dispatcher.EventParams._super.call(this, sender);\n    this.item = item;\n    this.index = index;\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(Dispatcher.EventParams, // &lt;T&gt;\n          <a href=\"#!/api/JW.EventParams\" rel=\"JW.EventParams\" class=\"docClass\">JW.EventParams</a>, {\n    // Dispatcher sender;\n    // T item;\n    // Integer index;\n});\n</code></pre>\n\n<p>Пример использования этих событий:</p>\n\n<pre><code>var Client = function(dispatcher) {\n    Client._super.call(this);\n    this.dispatcher = dispatcher;\n    this._addAttachment = this.dispatcher.addEvent.bind(this._onAdd, this);\n    this._removeAttachment = this.dispatcher.removeEvent.bind(this._onRemove, this);\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(Client, <a href=\"#!/api/JW.Class\" rel=\"JW.Class\" class=\"docClass\">JW.Class</a>, {\n    // Dispatcher dispatcher;\n    // <a href=\"#!/api/JW.EventAttachment\" rel=\"JW.EventAttachment\" class=\"docClass\">JW.EventAttachment</a> _addAttachment;\n    // <a href=\"#!/api/JW.EventAttachment\" rel=\"JW.EventAttachment\" class=\"docClass\">JW.EventAttachment</a> _removeAttachment;\n\n    // override\n    destroy: function() {\n        this._removeAttachment.destroy();\n        this._addAttachment.destroy();\n        this._super();\n    },\n\n    _onAdd: function(params) {\n        console.log(params.item, \" item is added at \", params.index);\n    },\n\n    _onRemove: function(params) {\n        console.log(params.item, \" item is removed at \", params.index);\n    }\n});\n</code></pre>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-_iid' class='member first-child inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/JW.Class' rel='JW.Class' class='defined-in docClass'>JW.Class</a><br/><a href='source/class.html#JW-Class-property-_iid' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.Class-property-_iid' class='name expandable'>_iid</a> : number<span class=\"signature\"></span></div><div class='description'><div class='short'>Instance ID. ...</div><div class='long'><p>Instance ID.</p>\n\n<p>Автоинкрементный уникальный идентификатор объекта. Каждый экземпляр <a href=\"#!/api/JW.Class\" rel=\"JW.Class\" class=\"docClass\">JW.Class</a> получает такой идентификатор.\nИспользуется в множестве <a href=\"#!/api/JW.AbstractSet\" rel=\"JW.AbstractSet\" class=\"docClass\">JW.AbstractSet</a> в качестве ключа словаря для быстрого поиска.</p>\n</div></div></div><div id='property-constructor' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/JW.Class' rel='JW.Class' class='defined-in docClass'>JW.Class</a><br/><a href='source/class.html#JW-Class-property-constructor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.Class-property-constructor' class='name expandable'>constructor</a> : Function<span class=\"signature\"></span></div><div class='description'><div class='short'>Конструктор как класс. ...</div><div class='long'><p>Конструктор как класс. Если в вашем распоряжении есть некоторый объект, то вы с легкостью можете узнать его класс\nвоспользовавшись полем <a href=\"#!/api/JW.Class-property-constructor\" rel=\"JW.Class-property-constructor\" class=\"docClass\">constructor</a>.</p>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.Event'>JW.Event</span><br/><a href='source/event2.html#JW-Event-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/JW.Event-method-constructor' class='name expandable'>JW.Event</a>( <span class='pre'></span> ) : <a href=\"#!/api/JW.Event\" rel=\"JW.Event\" class=\"docClass\">JW.Event</a><span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/JW.Event\" rel=\"JW.Event\" class=\"docClass\">JW.Event</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-_super' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/JW.Class' rel='JW.Class' class='defined-in docClass'>JW.Class</a><br/><a href='source/class.html#JW-Class-method-_super' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.Class-method-_super' class='name expandable'>_super</a>( <span class='pre'></span> ) : Mixed<span class=\"signature\"></span></div><div class='description'><div class='short'>Этот метод доступен только внутри методов класса, переданных в функцию JW.extend при создании данного класса. ...</div><div class='long'><p>Этот метод доступен только внутри методов класса, переданных в функцию <a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a> при создании данного класса. Метод\n<a href=\"#!/api/JW.Class-method-_super\" rel=\"JW.Class-method-_super\" class=\"docClass\">_super</a> - это простой способ вызова того же метода базового класса:</p>\n\n<pre><code>...\n// Метод класса\nmyMethod: function(a, b, c) {\n    return this._super(a, b) + c;\n}\n...\n</code></pre>\n\n<p>Эквивалентный вариант:</p>\n\n<pre><code>...\n// Метод класса\nmyMethod: function(a, b, c) {\n    return MyClass.superclass.myMethod.call(this, a, b) + c;\n}\n...\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Mixed</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-bind' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.Event'>JW.Event</span><br/><a href='source/event2.html#JW-Event-method-bind' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.Event-method-bind' class='name expandable'>bind</a>( <span class='pre'>callback, scope</span> ) : <a href=\"#!/api/JW.EventAttachment\" rel=\"JW.EventAttachment\" class=\"docClass\">JW.EventAttachment</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Подписаться на событие. ...</div><div class='long'><p>Подписаться на событие.</p>\n\n<p>Всякий раз, когда методом <a href=\"#!/api/JW.Event-method-trigger\" rel=\"JW.Event-method-trigger\" class=\"docClass\">trigger</a> будет выброшено событие, будет вызван обработчик callback в контексте scope.</p>\n\n<p>Обработчик можно отписать путем уничтожения возвращенного экземпляра <a href=\"#!/api/JW.EventAttachment\" rel=\"JW.EventAttachment\" class=\"docClass\">JW.EventAttachment</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>callback</span> : Function<div class='sub-desc'><p><code>callback(params: P): void</code></p>\n\n<p>Функция-обработчик события.</p>\n</div></li><li><span class='pre'>scope</span> : Object<div class='sub-desc'><p>Контекст вызова callback.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/JW.EventAttachment\" rel=\"JW.EventAttachment\" class=\"docClass\">JW.EventAttachment</a></span><div class='sub-desc'><p><code>&lt;P&gt;</code> Подписка на событие.</p>\n</div></li></ul></div></div></div><div id='method-destroy' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/JW.Class' rel='JW.Class' class='defined-in docClass'>JW.Class</a><br/><a href='source/class.html#JW-Class-method-destroy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.Class-method-destroy' class='name expandable'>destroy</a>( <span class='pre'></span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Деструктор класса. ...</div><div class='long'><p>Деструктор класса. Сюда рекомендуется помещать всю логику уничтожения экземпляра класса. Этот метод нужно явно\nвызывать снаружи, поскольку JavaScript не поддерживает автоматические деструкторы классов. Этот метод можно\nперегружать, не забывая вызывать деструктор базового класса:</p>\n\n<pre><code>destroy: function() {\n    // Освобождаем ресурсы\n    ...\n    // Вызываем деструктор базового класса\n    this._super();\n}\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-purge' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.Event'>JW.Event</span><br/><a href='source/event2.html#JW-Event-method-purge' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.Event-method-purge' class='name expandable'>purge</a>( <span class='pre'></span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Отписывает все обработчики событий. ...</div><div class='long'><p>Отписывает все обработчики событий. Автоматически вызывается в деструкторе события.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-trigger' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.Event'>JW.Event</span><br/><a href='source/event2.html#JW-Event-method-trigger' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.Event-method-trigger' class='name expandable'>trigger</a>( <span class='pre'>params</span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Выбрасывает событие, оповещает клиенты. ...</div><div class='long'><p>Выбрасывает событие, оповещает клиенты.</p>\n\n<pre><code>this.myEvent.trigger(new <a href=\"#!/api/JW.EventParams\" rel=\"JW.EventParams\" class=\"docClass\">JW.EventParams</a>(this));\n</code></pre>\n\n<p>Тем самым мы вызвали все обработчики, подписанные методом <a href=\"#!/api/JW.Event-method-bind\" rel=\"JW.Event-method-bind\" class=\"docClass\">bind</a> на событие myEvent, с параметрами\n<code>new <a href=\"#!/api/JW.EventParams\" rel=\"JW.EventParams\" class=\"docClass\">JW.EventParams</a>(this)</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>params</span> : P<div class='sub-desc'><p>Параметры события.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-unbind' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.Event'>JW.Event</span><br/><a href='source/event2.html#JW-Event-method-unbind' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.Event-method-unbind' class='name expandable'>unbind</a>( <span class='pre'>attachment</span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Отписывает обработчик, подписанный методом bind. ...</div><div class='long'><p>Отписывает обработчик, подписанный методом <a href=\"#!/api/JW.Event-method-bind\" rel=\"JW.Event-method-bind\" class=\"docClass\">bind</a>.</p>\n\n<p>Эквивалентен вызову <code>attachment.destroy()</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>attachment</span> : <a href=\"#!/api/JW.EventAttachment\" rel=\"JW.EventAttachment\" class=\"docClass\">JW.EventAttachment</a><div class='sub-desc'><p><code>&lt;P&gt;</code> Подписка на событие.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});