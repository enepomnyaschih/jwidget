Ext.data.JsonP.JW_UI_Component({"tagname":"class","name":"JW.UI.Component","autodetected":{},"files":[{"filename":"component.js","href":"component3.html#JW-UI-Component"}],"extends":"JW.Class","members":[{"name":"_iid","tagname":"property","owner":"JW.Class","id":"property-_iid","meta":{}},{"name":"children","tagname":"property","owner":"JW.UI.Component","id":"property-children","meta":{}},{"name":"constructor","tagname":"property","owner":"JW.Class","id":"property-constructor","meta":{}},{"name":"el","tagname":"property","owner":"JW.UI.Component","id":"property-el","meta":{}},{"name":"parent","tagname":"property","owner":"JW.UI.Component","id":"property-parent","meta":{}},{"name":"templates","tagname":"property","owner":"JW.UI.Component","id":"property-templates","meta":{}},{"name":"wasAfterAppend","tagname":"property","owner":"JW.UI.Component","id":"property-wasAfterAppend","meta":{}},{"name":"constructor","tagname":"method","owner":"JW.UI.Component","id":"method-constructor","meta":{}},{"name":"_super","tagname":"method","owner":"JW.Class","id":"method-_super","meta":{}},{"name":"addArray","tagname":"method","owner":"JW.UI.Component","id":"method-addArray","meta":{}},{"name":"addCollection","tagname":"method","owner":"JW.UI.Component","id":"method-addCollection","meta":{}},{"name":"addReplaceable","tagname":"method","owner":"JW.UI.Component","id":"method-addReplaceable","meta":{}},{"name":"afterAppend","tagname":"method","owner":"JW.UI.Component","id":"method-afterAppend","meta":{}},{"name":"afterDestroy","tagname":"method","owner":"JW.UI.Component","id":"method-afterDestroy","meta":{}},{"name":"afterRender","tagname":"method","owner":"JW.UI.Component","id":"method-afterRender","meta":{}},{"name":"beforeRender","tagname":"method","owner":"JW.UI.Component","id":"method-beforeRender","meta":{}},{"name":"destroy","tagname":"method","owner":"JW.Class","id":"method-destroy","meta":{}},{"name":"destroyObject","tagname":"method","owner":"JW.Class","id":"method-destroyObject","meta":{}},{"name":"getElement","tagname":"method","owner":"JW.UI.Component","id":"method-getElement","meta":{}},{"name":"own","tagname":"method","owner":"JW.Class","id":"method-own","meta":{}},{"name":"releaseDom","tagname":"method","owner":"JW.UI.Component","id":"method-releaseDom","meta":{}},{"name":"remove","tagname":"method","owner":"JW.UI.Component","id":"method-remove","meta":{"chainable":true}},{"name":"removeElement","tagname":"method","owner":"JW.UI.Component","id":"method-removeElement","meta":{}},{"name":"render","tagname":"method","owner":"JW.UI.Component","id":"method-render","meta":{"chainable":true}},{"name":"renderAs","tagname":"method","owner":"JW.UI.Component","id":"method-renderAs","meta":{"chainable":true}},{"name":"renderTo","tagname":"method","owner":"JW.UI.Component","id":"method-renderTo","meta":{"chainable":true}},{"name":"unrender","tagname":"method","owner":"JW.UI.Component","id":"method-unrender","meta":{}},{"name":"using","tagname":"method","owner":"JW.UI.Component","id":"method-using","meta":{"chainable":true}}],"alternateClassNames":[],"aliases":{},"id":"class-JW.UI.Component","short_doc":"Base class of UI component. ...","component":false,"superclasses":["JW.Class"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'><a href='#!/api/JW.Class' rel='JW.Class' class='docClass'>JW.Class</a><div class='subclass '><strong>JW.UI.Component</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/component3.html#JW-UI-Component' target='_blank'>component.js</a></div></pre><div class='doc-contents'><p>Base class of UI component.</p>\n\n<p>Features:</p>\n\n<ul>\n<li>Rendering by HTML template</li>\n<li>Direct access to component elements</li>\n<li><a href=\"http://api.jquery.com/\">jQuery-interface</a> for element manipulations</li>\n<li>Convenient API for child component management</li>\n</ul>\n\n\n<p>jWidget has very simple interface, but pretty unusual philosophy, which guarantees Model-View architecture\nfollowing without a lot of effort. Let's start with examples.</p>\n\n<h3>jWidget UI-component example</h3>\n\n<pre><code>// Define namespace\nvar MyApp = {};\n\n// Define component constructor\nMyApp.Component = function(message, link) {\n    MyApp.Component.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.message = message;\n    this.link = link;\n};\n\n// Inherit from <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(MyApp.Component, <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, {\n    // String message;\n    // String link;\n\n    // override\n    <a href=\"#!/api/JW.UI.Component-method-afterRender\" rel=\"JW.UI.Component-method-afterRender\" class=\"docClass\">afterRender</a>: function() {\n        this.<a href=\"#!/api/JW.Class-method-_super\" rel=\"JW.Class-method-_super\" class=\"docClass\">_super</a>();\n        this.<a href=\"#!/api/JW.UI.Component-method-getElement\" rel=\"JW.UI.Component-method-getElement\" class=\"docClass\">getElement</a>(\"hello-message\").text(this.message);\n        this.<a href=\"#!/api/JW.UI.Component-method-getElement\" rel=\"JW.UI.Component-method-getElement\" class=\"docClass\">getElement</a>(\"link\").attr(\"href\", this.link);\n    }\n});\n\n<a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a>(MyApp.Component, {\n    main:\n        '&lt;div jwclass=\"myapp-component\"&gt;' +\n            '&lt;div jwid=\"hello-message\"&gt;&lt;/div&gt;' +\n            '&lt;a href=\"#\" jwid=\"link\"&gt;Click me!&lt;/a&gt;' +\n        '&lt;/div&gt;'\n});\n</code></pre>\n\n<p>Let's learn, how HTML-template works. Each component has main template, which is passed into\n<a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a> function with name <code>main</code> and defaults to\n<code>&lt;div&gt;&lt;/div&gt;</code>. You can add other templates as well, they'll be available in component's field\n<code><a href=\"#!/api/JW.UI.Component-property-templates\" rel=\"JW.UI.Component-property-templates\" class=\"docClass\">this.templates</a>.&lt;template_name&gt;</code> (but they are not used usually).\nSubclass inherits superclass templates.</p>\n\n<p>Take a note at special attributes <code>jwclass</code> and <code>jwid</code>. <code>jwclass</code> is root CSS-class of component,\n<code>jwid</code> is a suffix to <code>jwclass</code> in this element. So, next HTML fragment will be rendered in result\nof this component rendering:</p>\n\n<pre><code>&lt;div class=\"myapp-component\"&gt;\n    &lt;div class=\"myapp-component-hello-message\"&gt;&lt;/div&gt;\n    &lt;a href=\"#\" class=\"myapp-component-link\"&gt;Click me!&lt;/a&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>You can retrieve an element by its <code>jwid</code> using method <a href=\"#!/api/JW.UI.Component-method-getElement\" rel=\"JW.UI.Component-method-getElement\" class=\"docClass\">getElement</a>. Result of this method is\na <a href=\"http://api.jquery.com/\">jQuery-wrapper</a> over this element. Root element always has jwid \"root\".\nIn addition, root element of the component is stored in <a href=\"#!/api/JW.UI.Component-property-el\" rel=\"JW.UI.Component-property-el\" class=\"docClass\">el</a> property.</p>\n\n<h3>Component creation in code</h3>\n\n<p>Component can be created by simple construction of component object. After that, you can use method <a href=\"#!/api/JW.UI.Component-method-renderTo\" rel=\"JW.UI.Component-method-renderTo\" class=\"docClass\">renderTo</a>\nor <a href=\"#!/api/JW.UI.Component-method-renderAs\" rel=\"JW.UI.Component-method-renderAs\" class=\"docClass\">renderAs</a> in order to insert this component into DOM.</p>\n\n<pre><code>var component;\n\njQuery(function() {\n    component = new MyApp.Component(\"Hello world!\", \"http://google.com\");\n    component.<a href=\"#!/api/JW.UI.Component-method-renderTo\" rel=\"JW.UI.Component-method-renderTo\" class=\"docClass\">renderTo</a>(\"body\");\n});\n</code></pre>\n\n<h3>Child components</h3>\n\n<p>There are 5 ways to add a child component:</p>\n\n<ul>\n<li>Add a child component into <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a> map with a key equal to <code>jwid</code> of element to replace with the child\ncomponent. Usually it is done in <a href=\"#!/api/JW.UI.Component-method-afterRender\" rel=\"JW.UI.Component-method-afterRender\" class=\"docClass\">afterRender</a> method.</li>\n<li>Add an easily replaceable child component using <a href=\"#!/api/JW.UI.Component-method-addReplaceable\" rel=\"JW.UI.Component-method-addReplaceable\" class=\"docClass\">addReplaceable</a> method. Pass <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a> there and\nthe framework will provide the continuous synchronization with this property during application running.</li>\n<li>Add an array of child components into some element using <a href=\"#!/api/JW.UI.Component-method-addArray\" rel=\"JW.UI.Component-method-addArray\" class=\"docClass\">addArray</a> method. If the passed array\nis <a href=\"#!/api/JW.ObservableArray\" rel=\"JW.ObservableArray\" class=\"docClass\">JW.ObservableArray</a>, then framework will provide the continuous synchronization with this array during\napplication running.</li>\n<li>Add a collection of child components into some element using <a href=\"#!/api/JW.UI.Component-method-addCollection\" rel=\"JW.UI.Component-method-addCollection\" class=\"docClass\">addCollection</a> method. As opposed to <a href=\"#!/api/JW.UI.Component-method-addArray\" rel=\"JW.UI.Component-method-addArray\" class=\"docClass\">addArray</a>\nmethod, <a href=\"#!/api/JW.UI.Component-method-addCollection\" rel=\"JW.UI.Component-method-addCollection\" class=\"docClass\">addCollection</a> doesn't keep the child component order. A newly added component is always appended to the\nend. If the passed collection is observable, then framework will provide the continuous synchronization with this\ncollection during application running.</li>\n<li>Define method <code>render&lt;ChildId&gt;</code>, where <code>&lt;ChildId&gt;</code> is <code>jwid</code> of element,\nwritten in CamelCase with capitalized first letter. Example: <code>renderArticle</code> (renders element <code>jwid=\"article\"</code>).\nIf the method returns <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a> or <a href=\"#!/api/JW.AbstractCollection\" rel=\"JW.AbstractCollection\" class=\"docClass\">JW.AbstractCollection</a>, then result will be treated as child component\nor child component collection. Define method <code>renderRoot</code> to render root element, but you can return <a href=\"#!/api/JW.AbstractCollection\" rel=\"JW.AbstractCollection\" class=\"docClass\">JW.AbstractCollection</a>\nonly there.\nSee <strong>More about render&lt;ChildId&gt; method</strong> paragraph for details.</li>\n</ul>\n\n\n<p>Such interface provides simplicity, at one hand, and flexibility in Model-View architecture following regard,\nat another hand.</p>\n\n<p><a href=\"#!/guide/ensample1\">Getting started. Part 1. Model and view</a></p>\n\n<h3>More about child component collections</h3>\n\n<p>It is convenient to use <a href=\"#!/api/JW.AbstractCollection-method-S-S-mapObjects\" rel=\"JW.AbstractCollection-method-S-S-mapObjects\" class=\"docClass\">JW.AbstractCollection.$$mapObjects</a> method to convert data collections into UI component collections.\nThanks to it, view will be updated on data update automatically.</p>\n\n<p>That's the reason why we recommend to use jWidget collections in data model instead of native JavaScript\nArray and Object: jWidget collections have observable implementations which can be synchronized to each other.</p>\n\n<p><a href=\"#!/guide/ensample6\">Getting started. Part 6. Collection synchronizers</a></p>\n\n<h3>More about render&lt;ChildId&gt; method</h3>\n\n<p>You can define method <code>render&lt;ChildId&gt;</code> for every element in HTML template that has attribute <code>jwid</code>.\n<code>&lt;ChildId&gt;</code> equals to this <code>jwid</code>, written in CamelCase with capitalized first letter. Method signature:</p>\n\n<p><code>renderChildId(el: <a href=\"http://api.jquery.com/\">jQuery</a>): Mixed</code></p>\n\n<p><code>el</code> - element with corresponding <code>jwid</code>.</p>\n\n<p>Depending on the returned result of this method, there are next capabilities:</p>\n\n<ul>\n<li>If method returns <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, then it will be added into <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a> map and will become a child component.\nDoesn't work for root element.</li>\n<li>If method returns <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>, then it will be added as easily replaceable child component by\nmethod <a href=\"#!/api/JW.UI.Component-method-addReplaceable\" rel=\"JW.UI.Component-method-addReplaceable\" class=\"docClass\">addReplaceable</a>. Doesn't work for root element.</li>\n<li>If method returns <a href=\"#!/api/JW.AbstractArray\" rel=\"JW.AbstractArray\" class=\"docClass\">JW.AbstractArray</a>, then it will be added as child array by method <a href=\"#!/api/JW.UI.Component-method-addArray\" rel=\"JW.UI.Component-method-addArray\" class=\"docClass\">addArray</a>.</li>\n<li>If method returns <a href=\"#!/api/JW.AbstractCollection\" rel=\"JW.AbstractCollection\" class=\"docClass\">JW.AbstractCollection</a> (which is not <a href=\"#!/api/JW.AbstractArray\" rel=\"JW.AbstractArray\" class=\"docClass\">JW.AbstractArray</a>), then it will be added as child\ncollection by method <a href=\"#!/api/JW.UI.Component-method-addCollection\" rel=\"JW.UI.Component-method-addCollection\" class=\"docClass\">addCollection</a>.</li>\n<li>If method returns <code>false</code> (===), then element will be removed from component HTML. Doesn't work for root element.</li>\n<li>In any other case, framework won't perform any additional action.</li>\n</ul>\n\n\n<h3>Components removal and destruction</h3>\n\n<p>You can destroy the component via <a href=\"#!/api/JW.UI.Component-method-destroy\" rel=\"JW.UI.Component-method-destroy\" class=\"docClass\">destroy</a> method. However you can not destroy a component which is added into\nanother one as a child (framework will throw an exception in this case). You must remove child component from a\nparent first. To remove the component from a parent, you must perform the operation opposite to adding operation.</p>\n\n<ul>\n<li>If you have added a component to <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a> object, you must remove it via\n<a href=\"#!/api/JW.AbstractMap-method-remove\" rel=\"JW.AbstractMap-method-remove\" class=\"docClass\">remove</a> method.</li>\n<li>Method <a href=\"#!/api/JW.UI.Component-method-addReplaceable\" rel=\"JW.UI.Component-method-addReplaceable\" class=\"docClass\">addReplaceable</a> returns an instance of <a href=\"#!/api/JW.UI.Component.Replaceable\" rel=\"JW.UI.Component.Replaceable\" class=\"docClass\">JW.UI.Component.Replaceable</a>. Its destruction removes the\nreplaceable child.</li>\n<li>Method <a href=\"#!/api/JW.UI.Component-method-addArray\" rel=\"JW.UI.Component-method-addArray\" class=\"docClass\">addArray</a> returns an instance of <a href=\"#!/api/JW.UI.Component.Array\" rel=\"JW.UI.Component.Array\" class=\"docClass\">JW.UI.Component.Array</a>. Its destruction removes the array.</li>\n<li>Method <a href=\"#!/api/JW.UI.Component-method-addCollection\" rel=\"JW.UI.Component-method-addCollection\" class=\"docClass\">addCollection</a> returns an instance of <a href=\"#!/api/JW.UI.Component.Collection\" rel=\"JW.UI.Component.Collection\" class=\"docClass\">JW.UI.Component.Collection</a>. Its destruction removes the collection.</li>\n</ul>\n\n\n<p>As soon as child component is removed, you can destroy it:</p>\n\n<pre><code>this.<a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a>.<a href=\"#!/api/JW.AbstractMap-method-remove\" rel=\"JW.AbstractMap-method-remove\" class=\"docClass\">remove</a>(\"comments\").<a href=\"#!/api/JW.Class-method-destroy\" rel=\"JW.Class-method-destroy\" class=\"docClass\">destroy</a>();\n</code></pre>\n\n<p>Another example:</p>\n\n<pre><code>// should be called not before the rendering initiation\ninitLabels: function() {\n    this._labelViews = this.labels.<a href=\"#!/api/JW.AbstractArray-method-S-S-mapObjects\" rel=\"JW.AbstractArray-method-S-S-mapObjects\" class=\"docClass\">$$mapObjects</a>(function(label) {\n        return new LabelView(label);\n    }, this);\n    // Add labels into element with jwid=\"labels\"\n    this._labelArray = this.<a href=\"#!/api/JW.UI.Component-method-addArray\" rel=\"JW.UI.Component-method-addArray\" class=\"docClass\">addArray</a>(this._labelViews, \"labels\");\n},\n\nclearLabels: function() {\n    this._labelArray.<a href=\"#!/api/JW.Class-method-destroy\" rel=\"JW.Class-method-destroy\" class=\"docClass\">destroy</a>();\n    this._labelArray = null;\n    this._labelViews.<a href=\"#!/api/JW.Class-method-destroy\" rel=\"JW.Class-method-destroy\" class=\"docClass\">destroy</a>();\n    this._labelViews = null;\n}\n</code></pre>\n\n<p>You don't need to remove child components explicitly all the time. On parent component destruction, framework\nautomatically removes all the children before <a href=\"#!/api/JW.UI.Component-method-unrender\" rel=\"JW.UI.Component-method-unrender\" class=\"docClass\">unrender</a> method call. However, it doesn't destroy them.\nYou can use aggregation method <a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a> to destroy the child components. So, usually your code will\nlook as simple as this:</p>\n\n<pre><code>renderTitleBox: function() {\n    return this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(new TitleBox());\n},\n\nrenderLabels: function() {\n    return this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(this.labels.<a href=\"#!/api/JW.AbstractArray-method-S-S-mapObjects\" rel=\"JW.AbstractArray-method-S-S-mapObjects\" class=\"docClass\">$$mapObjects</a>(function(label) {\n        return new LabelView(label);\n    }, this));\n}\n</code></pre>\n\n<h3>Common practices of child component management</h3>\n\n<p><strong>Create child component</strong></p>\n\n<p>This example describes how to create and destroy a child component with <code>jwid=\"title-box\"</code>.</p>\n\n<pre><code>var MyComponent = function() {\n    MyComponent.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(MyComponent, <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, {\n    renderTitleBox: function() {\n        return this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(new TitleBox());\n    }\n});\n\n<a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a>(MyComponent, {\n    main:\n        '&lt;div jwclass=\"my-component\"&gt;' +\n            '&lt;div jwid=\"title-box\"&gt;&lt;/div&gt;' +\n        '&lt;/div&gt;'\n});\n</code></pre>\n\n<p><strong>Create replaceable child component</strong></p>\n\n<p>This example describes how to create an easily replaceable child component with <code>jwid=\"document\"</code>.\nAssume that you have a property \"document\" and want to replace an old document view with a new one\non document change.</p>\n\n<pre><code>var MyComponent = function(document) {\n    MyComponent.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.document = document;\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(MyComponent, <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, {\n    // <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>&lt;Document&gt; document;\n\n    renderDocument: function() {\n        return this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(this.document.<a href=\"#!/api/JW.Property-method-S-S-mapObject\" rel=\"JW.Property-method-S-S-mapObject\" class=\"docClass\">$$mapObject</a>(function(document) {\n            return new DocumentView(document);\n        }, this));\n    }\n});\n\n<a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a>(MyComponent, {\n    main:\n        '&lt;div jwclass=\"my-component\"&gt;' +\n            '&lt;div jwid=\"document\"&gt;&lt;/div&gt;' +\n        '&lt;/div&gt;'\n});\n</code></pre>\n\n<p><strong>Create child collection</strong></p>\n\n<p>This example describes how to create and destroy child components by data collection, and insert them into\nelement with <code>jwid=\"labels\"</code>. If data collection is observable, child collection will be constantly synchronized with data.</p>\n\n<pre><code>var MyComponent = function(labels) {\n    MyComponent.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.labels = labels;\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(MyComponent, <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, {\n    // <a href=\"#!/api/JW.AbstractArray\" rel=\"JW.AbstractArray\" class=\"docClass\">JW.AbstractArray</a>&lt;Label&gt; labels;\n\n    renderLabels: function() {\n        return this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(this.labels.<a href=\"#!/api/JW.AbstractArray-method-S-S-mapObjects\" rel=\"JW.AbstractArray-method-S-S-mapObjects\" class=\"docClass\">$$mapObjects</a>(function(label) {\n            return new LabelView(label);\n        }, this));\n    }\n});\n\n<a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a>(MyComponent, {\n    main:\n        '&lt;div jwclass=\"my-component\"&gt;' +\n            '&lt;div jwid=\"labels\"&gt;&lt;/div&gt;' +\n        '&lt;/div&gt;'\n});\n</code></pre>\n\n<p><strong>Add existing components as children</strong></p>\n\n<p>This example describes how to insert child components which were created by someone else, and therefore\nshouldn't be destroyed automatically. Here, \"titleBox\" can be either <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, or\n<a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>&lt;<a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>>, or <a href=\"#!/api/JW.AbstractCollection\" rel=\"JW.AbstractCollection\" class=\"docClass\">JW.AbstractCollection</a>&lt;<a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>>.</p>\n\n<pre><code>var MyComponent = function(titleBox) {\n    MyComponent.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.titleBox = titleBox;\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(MyComponent, <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, {\n    // Mixed titleBox;\n\n    renderTitleBox: function() {\n        return this.titleBox;\n    }\n});\n\n<a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a>(MyComponent, {\n    main:\n        '&lt;div jwclass=\"my-component\"&gt;' +\n            '&lt;div jwid=\"title-box\"&gt;&lt;/div&gt;' +\n        '&lt;/div&gt;'\n});\n</code></pre>\n\n<h3>Component life stages</h3>\n\n<p>Each component has several stages of life.</p>\n\n<ol>\n<li>Like in all other classes, <strong>constructor</strong> is called first. Usually all fields are defined and assigned to\ntheir initial values here, events are created etc. Only component model should be touched here, view is completely\nignored. Notice that component is not rendered after construction yet, so it doesn't have\nfields <a href=\"#!/api/JW.UI.Component-property-el\" rel=\"JW.UI.Component-property-el\" class=\"docClass\">el</a> and <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a>, methods <a href=\"#!/api/JW.UI.Component-method-addArray\" rel=\"JW.UI.Component-method-addArray\" class=\"docClass\">addArray</a>, <a href=\"#!/api/JW.UI.Component-method-addCollection\" rel=\"JW.UI.Component-method-addCollection\" class=\"docClass\">addCollection</a> and <a href=\"#!/api/JW.UI.Component-method-addReplaceable\" rel=\"JW.UI.Component-method-addReplaceable\" class=\"docClass\">addReplaceable</a> won't work.\nThe main reason of that is to give you ability to\ndo something else between component construction and rendering, for example, change some field values and call\nsome methods. Second reason: it is not recommended to call virtual methods in constructor in any object-oriented\nlanguage. You can render the component directly by calling <a href=\"#!/api/JW.UI.Component-method-render\" rel=\"JW.UI.Component-method-render\" class=\"docClass\">render</a>, <a href=\"#!/api/JW.UI.Component-method-renderTo\" rel=\"JW.UI.Component-method-renderTo\" class=\"docClass\">renderTo</a>, <a href=\"#!/api/JW.UI.Component-method-renderAs\" rel=\"JW.UI.Component-method-renderAs\" class=\"docClass\">renderAs</a>,\nor by adding this component into another component as a child. For example, component will be rendered immediately\nafter adding into <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a> map. You can invoke component rendering multiple times, but it will be rendered only\non first invokation.</li>\n<li>Method <a href=\"#!/api/JW.UI.Component-method-beforeRender\" rel=\"JW.UI.Component-method-beforeRender\" class=\"docClass\">beforeRender</a> is called during rendering, after HTML template reading and initialization of all links to\nthis template elements. It is convenient to perform some preliminary action here before child components creation.\nBut you are already able to create child components here. <code>this._super()</code> call is performed at first line\nof method.</li>\n<li>All <code>render&lt;ChildId&gt;</code> methods are called for HTML template elements, i.e. child component\ncreation is performed.</li>\n<li>Method <a href=\"#!/api/JW.UI.Component-method-afterRender\" rel=\"JW.UI.Component-method-afterRender\" class=\"docClass\">afterRender</a> is called. You should assign all elements' attributes here, create child components,\nbind to events and fill component with interactivity. Component rendering is finished here.\n<code>this._super()</code> call is performed at first line of method.</li>\n<li>Method <a href=\"#!/api/JW.UI.Component-method-afterAppend\" rel=\"JW.UI.Component-method-afterAppend\" class=\"docClass\">afterAppend</a> is called after first-time component appearing in HTML DOM and UI components tree.\nComponent layouting should be performed here (calculate element sizes).\n<code>this._super()</code> call is performed at first line of method.</li>\n<li>Method <a href=\"#!/api/JW.UI.Component-method-releaseDom\" rel=\"JW.UI.Component-method-releaseDom\" class=\"docClass\">releaseDom</a> is called during component destruction. Everything that was performed in <a href=\"#!/api/JW.UI.Component-method-afterAppend\" rel=\"JW.UI.Component-method-afterAppend\" class=\"docClass\">afterAppend</a> method,\ni.e. on step 5, should be reverted here. <code>this._super()</code> method call is performed at last line of method.</li>\n<li>Method <a href=\"#!/api/JW.UI.Component-method-unrender\" rel=\"JW.UI.Component-method-unrender\" class=\"docClass\">unrender</a> is called during component destruction. Everything that was performed during component\nrendering, i.e. on steps 2-4, should be reverted here. All child components are already removed by framework\nbefore this method call, but the components themselves are not destroyed. You must destroy them explicitly unless\nyou used <a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a> method to aggregate them.\n<code>this._super()</code> method call is performed at last line of method.</li>\n<li>Method <a href=\"#!/api/JW.UI.Component-method-afterDestroy\" rel=\"JW.UI.Component-method-afterDestroy\" class=\"docClass\">afterDestroy</a> is called during component destruction. Everything that was performed in component\nconstructor, i.e. on step 1, should be reverted here. <code>this._super()</code> method call is performed\nat last line of method.</li>\n</ol>\n\n\n<h3>Intergration with jWidget SDK</h3>\n\n<p>jWidget UI library is integrated with <a href=\"https://github.com/enepomnyaschih/jwsdk/wiki/en\">jWidget SDK</a> perfectly, and\nit gives you nice code optimizations of JS-code out of the box and capability to extract HTML templates into\nseparate files. For example, you can simplify the very first example by splitting code into 2 files:</p>\n\n<p><strong>component.js</strong></p>\n\n<pre><code>// Define namespace\nvar MyApp = {};\n\n// Define component constructor\nMyApp.Component = function(message, link) {\n    MyApp.Component.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.message = message;\n    this.link = link;\n};\n\n// Inherit from <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(MyApp.Component, <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, {\n    // String message;\n    // String link;\n\n    // override\n    <a href=\"#!/api/JW.UI.Component-method-afterRender\" rel=\"JW.UI.Component-method-afterRender\" class=\"docClass\">afterRender</a>: function() {\n        this.<a href=\"#!/api/JW.Class-method-_super\" rel=\"JW.Class-method-_super\" class=\"docClass\">_super</a>();\n        this.<a href=\"#!/api/JW.UI.Component-method-getElement\" rel=\"JW.UI.Component-method-getElement\" class=\"docClass\">getElement</a>(\"hello-message\").text(this.message);\n        this.<a href=\"#!/api/JW.UI.Component-method-getElement\" rel=\"JW.UI.Component-method-getElement\" class=\"docClass\">getElement</a>(\"link\").attr(\"href\", this.link);\n    }\n});\n</code></pre>\n\n<p><strong>component.jw.html</strong></p>\n\n<pre><code>&lt;div jwclass=\"myapp-component\"&gt;\n    &lt;div jwid=\"hello-message\"&gt;&lt;/div&gt;\n    &lt;a href=\"#\" jwid=\"link\"&gt;Click me!&lt;/a&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>To make this work, you just need to register the next resources in corresponding jWidget SDK package:</p>\n\n<pre><code>{\n    \"resources\" : [\n        \"component.js\",\n        \"component.jw.html : MyApp.Component\",\n        ...\n    ]\n}\n</code></pre>\n\n<p>Sure, you can use jWidget even without jWidget SDK, but in this case you'll need to either load HTML templates\ndinamically or define them explicitly right in JavaScript code using <a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a> function.</p>\n\n<p>See more complicated example in article:</p>\n\n<p><a href=\"#!/guide/ensample7\">Getting started. Part 7. Project infrastructure</a></p>\n\n<h3>Clear-div persistence</h3>\n\n<p>As of jWidget 1.4, you may render child collections to non-blank DOM elements. In this case, all existing nodes\nstay at the end of the element. The most common application of this feature\nis <a href=\"https://css-tricks.com/the-how-and-why-of-clearing-floats/\" target=\"_blank\">clear-div usage</a>.</p>\n\n<iframe style=\"border: 1px solid green; padding: 10px;\" width=\"600\" height=\"260\" src=\"http://enepomnyaschih.github.io/mt/1.4/jwui-clear-div.html\"></iframe>\n\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-_iid' class='member first-child inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/JW.Class' rel='JW.Class' class='defined-in docClass'>JW.Class</a><br/><a href='source/class.html#JW-Class-property-_iid' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.Class-property-_iid' class='name expandable'>_iid</a> : number<span class=\"signature\"></span></div><div class='description'><div class='short'>Instance ID. ...</div><div class='long'><p>Instance ID.</p>\n\n<p>Auto-incremental object unique ID. Each <a href=\"#!/api/JW.Class\" rel=\"JW.Class\" class=\"docClass\">JW.Class</a> instance gets such identifier.\nUsed in <a href=\"#!/api/JW.AbstractSet\" rel=\"JW.AbstractSet\" class=\"docClass\">JW.AbstractSet</a> as map key for quick item access.</p>\n</div></div></div><div id='property-children' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-property-children' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-property-children' class='name expandable'>children</a> : <a href=\"#!/api/JW.AbstractMap\" rel=\"JW.AbstractMap\" class=\"docClass\">JW.AbstractMap</a><span class=\"signature\"></span></div><div class='description'><div class='short'>&lt;JW.UI.Component&gt; (mutable) Named child components. ...</div><div class='long'><p><code>&lt;<a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>&gt;</code> (mutable) Named child components. Use this map to add child components in place of\nelements with corresponding <code>jwid</code>. Field is available from component rendering beginning.</p>\n</div></div></div><div id='property-constructor' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/JW.Class' rel='JW.Class' class='defined-in docClass'>JW.Class</a><br/><a href='source/class.html#JW-Class-property-constructor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.Class-property-constructor' class='name expandable'>constructor</a> : Function<span class=\"signature\"></span></div><div class='description'><div class='short'>Constructor as class. ...</div><div class='long'><p>Constructor as class. If you have an object, you can get its class using this field.</p>\n</div></div></div><div id='property-el' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-property-el' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-property-el' class='name expandable'>el</a> : <a href=\"#!/api/jQuery\" rel=\"jQuery\" class=\"docClass\">jQuery</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Root element. ...</div><div class='long'><p>Root element. Field is available from component rendering beginning.</p>\n</div></div></div><div id='property-parent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-property-parent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-property-parent' class='name expandable'>parent</a> : <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Parent component. ...</div><div class='long'><p>Parent component. Field is available from component rendering beginning.</p>\n</div></div></div><div id='property-templates' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-property-templates' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-property-templates' class='name expandable'>templates</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>&lt;JW.UI.Component.Template&gt; Map from template ID to the template. ...</div><div class='long'><p><code>&lt;<a href=\"#!/api/JW.UI.Component.Template\" rel=\"JW.UI.Component.Template\" class=\"docClass\">JW.UI.Component.Template</a>&gt;</code> Map from template ID to the template. Templates are defined by <a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a> method.</p>\n</div></div></div><div id='property-wasAfterAppend' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-property-wasAfterAppend' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-property-wasAfterAppend' class='name expandable'>wasAfterAppend</a> : boolean<span class=\"signature\"></span></div><div class='description'><div class='short'><p>Was <a href=\"#!/api/JW.UI.Component-method-afterAppend\" rel=\"JW.UI.Component-method-afterAppend\" class=\"docClass\">afterAppend</a> called?</p>\n</div><div class='long'><p>Was <a href=\"#!/api/JW.UI.Component-method-afterAppend\" rel=\"JW.UI.Component-method-afterAppend\" class=\"docClass\">afterAppend</a> called?</p>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/JW.UI.Component-method-constructor' class='name expandable'>JW.UI.Component</a>( <span class='pre'></span> ) : <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a><span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-_super' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/JW.Class' rel='JW.Class' class='defined-in docClass'>JW.Class</a><br/><a href='source/class.html#JW-Class-method-_super' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.Class-method-_super' class='name expandable'>_super</a>( <span class='pre'></span> ) : Mixed<span class=\"signature\"></span></div><div class='description'><div class='short'>This method is available only inside class methods that were passed into JW.extend method. ...</div><div class='long'><p>This method is available only inside class methods that were passed into <a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a> method.\nThis method is an easy way of the same superclass method calling:</p>\n\n<pre><code>...\n// Class method\nmyMethod: function(a, b, c) {\n    return this.<a href=\"#!/api/JW.Class-method-_super\" rel=\"JW.Class-method-_super\" class=\"docClass\">_super</a>(a, b) + c;\n}\n...\n</code></pre>\n\n<p>Equivalent code without <a href=\"#!/api/JW.Class-method-_super\" rel=\"JW.Class-method-_super\" class=\"docClass\">_super</a> usage:</p>\n\n<pre><code>...\n// Class method\nmyMethod: function(a, b, c) {\n    return MyClass.<a href=\"#!/api/JW.Class-static-property-superclass\" rel=\"JW.Class-static-property-superclass\" class=\"docClass\">superclass</a>.myMethod.call(this, a, b) + c;\n}\n...\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Mixed</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-addArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-method-addArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-addArray' class='name expandable'>addArray</a>( <span class='pre'>components, [el]</span> ) : <a href=\"#!/api/JW.UI.Component.Array\" rel=\"JW.UI.Component.Array\" class=\"docClass\">JW.UI.Component.Array</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Add child component array into specified element. ...</div><div class='long'><p>Add child component array into specified element. As opposed to <a href=\"#!/api/JW.UI.Component-method-addCollection\" rel=\"JW.UI.Component-method-addCollection\" class=\"docClass\">addCollection</a> method, keeps\ncomponent order. However, it works slower and accepts array only.</p>\n\n<p>Based on <a href=\"#!/api/JW.UI.Inserter\" rel=\"JW.UI.Inserter\" class=\"docClass\">JW.UI.Inserter</a> synchronizer. Thanks to that, if you'll pass an instance of\n<a href=\"#!/api/JW.ObservableArray\" rel=\"JW.ObservableArray\" class=\"docClass\">JW.ObservableArray</a> as \"components\", then view will be synchronized with this array content of fly.</p>\n\n<p>It is convenient to create \"components\" array from data array using <a href=\"#!/api/JW.AbstractArray-method-S-S-mapObjects\" rel=\"JW.AbstractArray-method-S-S-mapObjects\" class=\"docClass\">JW.AbstractArray.$$mapObjects</a> method,\ni.e. by <a href=\"#!/api/JW.AbstractCollection.Mapper\" rel=\"JW.AbstractCollection.Mapper\" class=\"docClass\">JW.AbstractCollection.Mapper</a> instantiation.</p>\n\n<p>Method returns an instance of <a href=\"#!/api/JW.UI.Component.Array\" rel=\"JW.UI.Component.Array\" class=\"docClass\">JW.UI.Component.Array</a>. This object is purposed for child component array\nremoval from parent component. Use <a href=\"#!/api/JW.Class-method-destroy\" rel=\"JW.Class-method-destroy\" class=\"docClass\">destroy</a> method to do this.\nAlso, the array will be removed from parent component on parent component destruction right\nbefore <a href=\"#!/api/JW.UI.Component-method-unrender\" rel=\"JW.UI.Component-method-unrender\" class=\"docClass\">unrender</a> method call.\nBut notice that child components inside this array won't be destroyed automatically.\nUsually it can be done by corresponding <a href=\"#!/api/JW.AbstractCollection.Mapper\" rel=\"JW.AbstractCollection.Mapper\" class=\"docClass\">JW.AbstractCollection.Mapper</a> or array destruction in <a href=\"#!/api/JW.UI.Component-method-unrender\" rel=\"JW.UI.Component-method-unrender\" class=\"docClass\">unrender</a> method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>components</span> : <a href=\"#!/api/JW.AbstractArray\" rel=\"JW.AbstractArray\" class=\"docClass\">JW.AbstractArray</a><div class='sub-desc'><p>Child component array.</p>\n</div></li><li><span class='pre'>el</span> : <a href=\"#!/api/jQuery\" rel=\"jQuery\" class=\"docClass\">jQuery</a>/string (optional)<div class='sub-desc'><p>Element to add child components into, or its <code>jwid</code>.\nDefaults to root element (<a href=\"#!/api/JW.UI.Component-property-el\" rel=\"JW.UI.Component-property-el\" class=\"docClass\">el</a>) of component.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/JW.UI.Component.Array\" rel=\"JW.UI.Component.Array\" class=\"docClass\">JW.UI.Component.Array</a></span><div class='sub-desc'><p>Child component array wrapper.</p>\n</div></li></ul></div></div></div><div id='method-addCollection' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-method-addCollection' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-addCollection' class='name expandable'>addCollection</a>( <span class='pre'>components, [el]</span> ) : <a href=\"#!/api/JW.UI.Component.Collection\" rel=\"JW.UI.Component.Collection\" class=\"docClass\">JW.UI.Component.Collection</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Add child component collection into specified element. ...</div><div class='long'><p>Add child component collection into specified element. As opposed to <a href=\"#!/api/JW.UI.Component-method-addArray\" rel=\"JW.UI.Component-method-addArray\" class=\"docClass\">addArray</a> method, ignores\ncomponent order. However, it works faster and accepts any kind of collection, not array only.</p>\n\n<p>If you'll pass an instance of JW.ObservableCollection as \"components\",\nthen view will be synchronized with this collection content of fly.</p>\n\n<p>It is convenient to create \"components\" collection from data collection using\n<a href=\"#!/api/JW.AbstractCollection-method-S-S-mapObjects\" rel=\"JW.AbstractCollection-method-S-S-mapObjects\" class=\"docClass\">JW.AbstractCollection.$$mapObjects</a> method, i.e. by <a href=\"#!/api/JW.AbstractCollection.Mapper\" rel=\"JW.AbstractCollection.Mapper\" class=\"docClass\">JW.AbstractCollection.Mapper</a> instantiation.</p>\n\n<p>Method returns an instance of <a href=\"#!/api/JW.UI.Component.Collection\" rel=\"JW.UI.Component.Collection\" class=\"docClass\">JW.UI.Component.Collection</a>. This object is purposed for child component\ncollection removal from parent component. Use <a href=\"#!/api/JW.Class-method-destroy\" rel=\"JW.Class-method-destroy\" class=\"docClass\">destroy</a> method to do this.\nAlso, the collection will be removed from parent component on parent component destruction right\nbefore <a href=\"#!/api/JW.UI.Component-method-unrender\" rel=\"JW.UI.Component-method-unrender\" class=\"docClass\">unrender</a> method call.\nBut notice that child components inside this collection won't be destroyed automatically.\nUsually it can be done by corresponding <a href=\"#!/api/JW.AbstractCollection.Mapper\" rel=\"JW.AbstractCollection.Mapper\" class=\"docClass\">JW.AbstractCollection.Mapper</a> or collection destruction in <a href=\"#!/api/JW.UI.Component-method-unrender\" rel=\"JW.UI.Component-method-unrender\" class=\"docClass\">unrender</a> method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>components</span> : <a href=\"#!/api/JW.AbstractCollection\" rel=\"JW.AbstractCollection\" class=\"docClass\">JW.AbstractCollection</a><div class='sub-desc'><p>Child component collection.</p>\n</div></li><li><span class='pre'>el</span> : <a href=\"#!/api/jQuery\" rel=\"jQuery\" class=\"docClass\">jQuery</a>/string (optional)<div class='sub-desc'><p>Element to add child components into, or its <code>jwid</code>.\nDefaults to root element (<a href=\"#!/api/JW.UI.Component-property-el\" rel=\"JW.UI.Component-property-el\" class=\"docClass\">el</a>) of component.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/JW.UI.Component.Collection\" rel=\"JW.UI.Component.Collection\" class=\"docClass\">JW.UI.Component.Collection</a></span><div class='sub-desc'><p>Child component collection wrapper.</p>\n</div></li></ul></div></div></div><div id='method-addReplaceable' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-method-addReplaceable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-addReplaceable' class='name expandable'>addReplaceable</a>( <span class='pre'>component, id</span> ) : <a href=\"#!/api/JW.UI.Component.Replaceable\" rel=\"JW.UI.Component.Replaceable\" class=\"docClass\">JW.UI.Component.Replaceable</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Add an easily replaceable child component into specified element. ...</div><div class='long'><p>Add an easily replaceable child component into specified element.</p>\n\n<p>Pass an instance of <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>&lt;<a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>>, and view will be synchronized with this property of fly.</p>\n\n<p>It is convenient to create \"component\" property from data property using <a href=\"#!/api/JW.Property-method-S-S-mapObject\" rel=\"JW.Property-method-S-S-mapObject\" class=\"docClass\">JW.Property.$$mapObject</a> method.</p>\n\n<p>Method returns an instance of <a href=\"#!/api/JW.UI.Component.Replaceable\" rel=\"JW.UI.Component.Replaceable\" class=\"docClass\">JW.UI.Component.Replaceable</a>. This object is purposed for replaceable child\nremoval from parent component. Use <a href=\"#!/api/JW.Class-method-destroy\" rel=\"JW.Class-method-destroy\" class=\"docClass\">destroy</a> method to do this.\nAlso, the replaceable will be removed from parent component on parent component destruction right\nbefore <a href=\"#!/api/JW.UI.Component-method-unrender\" rel=\"JW.UI.Component-method-unrender\" class=\"docClass\">unrender</a> method call.\nBut notice that child component inside this property won't be destroyed automatically.\nUsually it can be done by corresponding <a href=\"#!/api/JW.Mapper\" rel=\"JW.Mapper\" class=\"docClass\">JW.Mapper</a> or property destruction in <a href=\"#!/api/JW.UI.Component-method-unrender\" rel=\"JW.UI.Component-method-unrender\" class=\"docClass\">unrender</a> method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>component</span> : <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a><div class='sub-desc'><p><code>&lt;<a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>&gt;</code> Child component property.</p>\n</div></li><li><span class='pre'>id</span> : String<div class='sub-desc'><p>jwId of element to replace.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/JW.UI.Component.Replaceable\" rel=\"JW.UI.Component.Replaceable\" class=\"docClass\">JW.UI.Component.Replaceable</a></span><div class='sub-desc'><p>Replaceable child component wrapper.</p>\n</div></li></ul></div></div></div><div id='method-afterAppend' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-method-afterAppend' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-afterAppend' class='name expandable'>afterAppend</a>( <span class='pre'></span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Component life stage method. ...</div><div class='long'><p>Component life stage method. Called after first-time component appearing in HTML DOM and UI components tree.\nComponent layouting should be performed here (calculate element sizes).\nComponent rendering is finished here. <code>this._super()</code> call is performed at first line of method.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-afterDestroy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-method-afterDestroy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-afterDestroy' class='name expandable'>afterDestroy</a>( <span class='pre'></span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Component life stage method. ...</div><div class='long'><p>Component life stage method. Called during component destruction after <a href=\"#!/api/JW.UI.Component-method-unrender\" rel=\"JW.UI.Component-method-unrender\" class=\"docClass\">unrender</a> method call.\nEverything that was performed during component construction should be reverted here.\n<code>this._super()</code> method call is performed at last line of method.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-afterRender' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-method-afterRender' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-afterRender' class='name expandable'>afterRender</a>( <span class='pre'></span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Component life stage method. ...</div><div class='long'><p>Component life stage method. Called after <a href=\"#!/api/JW.UI.Component-method-beforeRender\" rel=\"JW.UI.Component-method-beforeRender\" class=\"docClass\">beforeRender</a> method and <code>render&lt;ChildId&gt;</code> methods.\nYou should assign all elements' attributes here, create child components,\nbind to events and fill component with interactivity. <code>this._super()</code> call is performed at\nfirst line of method.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-beforeRender' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-method-beforeRender' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-beforeRender' class='name expandable'>beforeRender</a>( <span class='pre'></span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Component life stage method. ...</div><div class='long'><p>Component life stage method. Called during component rendering after HTML template parsing and initialization\nof references to all elements of the template. Called before <code>render&lt;ChildId&gt;</code> methods and\n<a href=\"#!/api/JW.UI.Component-method-afterRender\" rel=\"JW.UI.Component-method-afterRender\" class=\"docClass\">afterRender</a> method. It is convenient to perform some preliminary action here before child\ncomponents creation. But you are already able to create child components here. <code>this._super()</code>\ncall is performed at first line of method.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-destroy' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/JW.Class' rel='JW.Class' class='defined-in docClass'>JW.Class</a><br/><a href='source/class.html#JW-Class-method-destroy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.Class-method-destroy' class='name expandable'>destroy</a>( <span class='pre'></span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Class destructor invocation method. ...</div><div class='long'><p>Class destructor invocation method. Destroys all aggregated objects and calls <a href=\"#!/api/JW.Class-method-destroyObject\" rel=\"JW.Class-method-destroyObject\" class=\"docClass\">destroyObject</a> method.\nYou must call this method explicitly from outside, because JavaScript doesn't support automatic class destructor\ncalling. Alternatively (and optimally), you should use method <a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a> to aggregate this object inside some another.</p>\n\n<pre><code>var object = new MyClass();\n\n// ...\n\n// Once object is not needed anymore, destroy it\nobject.<a href=\"#!/api/JW.Class-method-destroy\" rel=\"JW.Class-method-destroy\" class=\"docClass\">destroy</a>();\n</code></pre>\n\n<p>You can override this method in a subclass to do some preliminary work before aggregated objects destruction.\nFor example, <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a> overrides this method to remove child components before their destruction,\nbefore child components are usually aggregated inside the component.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-destroyObject' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/JW.Class' rel='JW.Class' class='defined-in docClass'>JW.Class</a><br/><a href='source/class.html#JW-Class-method-destroyObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.Class-method-destroyObject' class='name expandable'>destroyObject</a>( <span class='pre'></span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Class destructor implementation. ...</div><div class='long'><p>Class destructor implementation. Called inside <a href=\"#!/api/JW.Class-method-destroy\" rel=\"JW.Class-method-destroy\" class=\"docClass\">destroy</a> method after aggregated objects destruction.\nThe logic of class instance destruction should be implemented here. If you override this method,\ndon't forget to call superclass destructor at the end of the method:</p>\n\n<pre><code>destroyObject: function() {\n    // Release resources\n    ...\n    // Call superclass destructor\n    this.<a href=\"#!/api/JW.Class-method-_super\" rel=\"JW.Class-method-_super\" class=\"docClass\">_super</a>();\n}\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-getElement' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-method-getElement' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-getElement' class='name expandable'>getElement</a>( <span class='pre'>jwid</span> ) : <a href=\"#!/api/jQuery\" rel=\"jQuery\" class=\"docClass\">jQuery</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Get element by its jwid. ...</div><div class='long'><p>Get element by its <code>jwid</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>jwid</span> : string<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/jQuery\" rel=\"jQuery\" class=\"docClass\">jQuery</a></span><div class='sub-desc'><p>Element.</p>\n</div></li></ul></div></div></div><div id='method-own' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/JW.Class' rel='JW.Class' class='defined-in docClass'>JW.Class</a><br/><a href='source/class.html#JW-Class-method-own' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.Class-method-own' class='name expandable'>own</a>( <span class='pre'>obj</span> ) : <a href=\"#!/api/JW.Class\" rel=\"JW.Class\" class=\"docClass\">JW.Class</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Aggregate a specified object in a current one. ...</div><div class='long'><p>Aggregate a specified object in a current one. It means that the specified object will be destroyed automatically\non this object destruction. The aggregated objects are destroyed in a reversive order.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : <a href=\"#!/api/JW.Class\" rel=\"JW.Class\" class=\"docClass\">JW.Class</a><div class='sub-desc'><p>An aggregated object.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/JW.Class\" rel=\"JW.Class\" class=\"docClass\">JW.Class</a></span><div class='sub-desc'><p>An aggregated object (obj).</p>\n</div></li></ul></div></div></div><div id='method-releaseDom' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-method-releaseDom' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-releaseDom' class='name expandable'>releaseDom</a>( <span class='pre'></span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Component life stage method. ...</div><div class='long'><p>Component life stage method. Called during component destruction before <a href=\"#!/api/JW.UI.Component-method-unrender\" rel=\"JW.UI.Component-method-unrender\" class=\"docClass\">unrender</a> method call.\nEverything that was performed in <a href=\"#!/api/JW.UI.Component-method-afterAppend\" rel=\"JW.UI.Component-method-afterAppend\" class=\"docClass\">afterAppend</a> method should be reverted here.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-remove' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-method-remove' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-remove' class='name expandable'>remove</a>( <span class='pre'></span> ) : <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a><span class=\"signature\"><span class='chainable' >chainable</span></span></div><div class='description'><div class='short'>Remove component from DOM. ...</div><div class='long'><p>Remove component from DOM. Can be used for root component only (which was added via <a href=\"#!/api/JW.UI.Component-method-renderTo\" rel=\"JW.UI.Component-method-renderTo\" class=\"docClass\">renderTo</a> or <a href=\"#!/api/JW.UI.Component-method-renderAs\" rel=\"JW.UI.Component-method-renderAs\" class=\"docClass\">renderAs</a>\nmethod. All child components should be removed using <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a> or <a href=\"#!/api/JW.UI.Component.Array\" rel=\"JW.UI.Component.Array\" class=\"docClass\">JW.UI.Component.Array</a> stuff.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='method-removeElement' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-method-removeElement' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-removeElement' class='name expandable'>removeElement</a>( <span class='pre'>jwid</span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove element by jwid. ...</div><div class='long'><p>Remove element by <code>jwid</code>. Element will be removed from DOM and it will be impossible to get it\nby <a href=\"#!/api/JW.UI.Component-method-getElement\" rel=\"JW.UI.Component-method-getElement\" class=\"docClass\">getElement</a> method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>jwid</span> : string<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-render' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-method-render' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-render' class='name expandable'>render</a>( <span class='pre'></span> ) : <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a><span class=\"signature\"><span class='chainable' >chainable</span></span></div><div class='description'><div class='short'>Renders component. ...</div><div class='long'><p>Renders component. Call this method to initialize references to all elements of component and create\nchild components. This method is called automatically in next cases:</p>\n\n<ul>\n<li>One of methods <a href=\"#!/api/JW.UI.Component-method-renderTo\" rel=\"JW.UI.Component-method-renderTo\" class=\"docClass\">renderTo</a>, <a href=\"#!/api/JW.UI.Component-method-renderAs\" rel=\"JW.UI.Component-method-renderAs\" class=\"docClass\">renderAs</a> is called</li>\n<li>The component is added into another component as a child</li>\n</ul>\n\n\n<p>Feel free to call component rendering multiple times: it will be rendered only once.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='method-renderAs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-method-renderAs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-renderAs' class='name expandable'>renderAs</a>( <span class='pre'>[el]</span> ) : <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a><span class=\"signature\"><span class='chainable' >chainable</span></span></div><div class='description'><div class='short'>Render component in place of specified element. ...</div><div class='long'><p>Render component in place of specified element. Use it to render root component only: its children must be rendered\nusing <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a> or <a href=\"#!/api/JW.UI.Component-method-addArray\" rel=\"JW.UI.Component-method-addArray\" class=\"docClass\">addArray</a> stuff.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>el</span> : <a href=\"#!/api/jQuery\" rel=\"jQuery\" class=\"docClass\">jQuery</a> (optional)<div class='sub-desc'><p>Element to render in place of.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='method-renderTo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-method-renderTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-renderTo' class='name expandable'>renderTo</a>( <span class='pre'>[el]</span> ) : <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a><span class=\"signature\"><span class='chainable' >chainable</span></span></div><div class='description'><div class='short'>Render component into specified element. ...</div><div class='long'><p>Render component into specified element. Use it to render root component only: its children must be rendered\nusing <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a> or <a href=\"#!/api/JW.UI.Component-method-addArray\" rel=\"JW.UI.Component-method-addArray\" class=\"docClass\">addArray</a> stuff.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>el</span> : <a href=\"#!/api/jQuery\" rel=\"jQuery\" class=\"docClass\">jQuery</a> (optional)<div class='sub-desc'><p>Element to render into.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='method-unrender' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-method-unrender' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-unrender' class='name expandable'>unrender</a>( <span class='pre'></span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Component life stage method. ...</div><div class='long'><p>Component life stage method. Called during component destruction before <a href=\"#!/api/JW.UI.Component-method-afterDestroy\" rel=\"JW.UI.Component-method-afterDestroy\" class=\"docClass\">afterDestroy</a> method call.\nEverything that was performed during component\nrendering should be reverted here. All child component arrays are already removed by framework\nbefore this method call, but the components themselves are not destroyed. You must destroy them explicitly.\nUnlike arrays, named child component will be destroyed automatically after <a href=\"#!/api/JW.UI.Component-method-unrender\" rel=\"JW.UI.Component-method-unrender\" class=\"docClass\">unrender</a> method, so you must\nremove them from <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a> map if you want to keep them alive. <code>this._super()</code> method call is performed\nat last line of method.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-using' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component3.html#JW-UI-Component-method-using' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-using' class='name expandable'>using</a>( <span class='pre'>value</span> ) : <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a><span class=\"signature\"><span class='chainable' >chainable</span></span></div><div class='description'><div class='short'>Selects component rendering strategy. ...</div><div class='long'><p>Selects component rendering strategy. By default, component is rendered outside of DOM based on <code>main</code> HTML\ntemplate specified by <a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a> method. You can change this by passing one of the next values\ninto <a href=\"#!/api/JW.UI.Component-method-using\" rel=\"JW.UI.Component-method-using\" class=\"docClass\">using</a> method of the component:</p>\n\n<ul>\n<li><a href=\"#!/api/JW.UI.Component.Template\" rel=\"JW.UI.Component.Template\" class=\"docClass\">JW.UI.Component.Template</a> or String - use this template explicitly for rendering</li>\n<li>DOMElement or jQuery - build component on top of existing DOM element. Special attributes <code>jwclass</code> and <code>jwid</code>\nwill be processed the usual way</li>\n</ul>\n\n\n<p><strong>Disclaimer:</strong> We strongly encourage you to use standard rendering strategy via <a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a>, or at least\ncreate <a href=\"#!/api/JW.UI.Component.Template\" rel=\"JW.UI.Component.Template\" class=\"docClass\">JW.UI.Component.Template</a> instances to store your HTML templates. They work 3 times faster compared to\nraw HTML rendering thanks to preliminary compilation and node cloning method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>Template or element to use for component rendering.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});