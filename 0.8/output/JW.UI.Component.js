Ext.data.JsonP.JW_UI_Component({"tagname":"class","name":"JW.UI.Component","autodetected":{},"files":[{"filename":"component.js","href":"component2.html#JW-UI-Component"}],"extends":"JW.Class","members":[{"name":"_iid","tagname":"property","owner":"JW.Class","id":"property-_iid","meta":{}},{"name":"allChildren","tagname":"property","owner":"JW.UI.Component","id":"property-allChildren","meta":{}},{"name":"children","tagname":"property","owner":"JW.UI.Component","id":"property-children","meta":{}},{"name":"constructor","tagname":"property","owner":"JW.Class","id":"property-constructor","meta":{}},{"name":"destroyed","tagname":"property","owner":"JW.UI.Component","id":"property-destroyed","meta":{}},{"name":"el","tagname":"property","owner":"JW.UI.Component","id":"property-el","meta":{}},{"name":"parent","tagname":"property","owner":"JW.UI.Component","id":"property-parent","meta":{}},{"name":"replacedEl","tagname":"property","owner":"JW.UI.Component","id":"property-replacedEl","meta":{}},{"name":"templates","tagname":"property","owner":"JW.UI.Component","id":"property-templates","meta":{}},{"name":"wasAfterAppend","tagname":"property","owner":"JW.UI.Component","id":"property-wasAfterAppend","meta":{}},{"name":"constructor","tagname":"method","owner":"JW.UI.Component","id":"method-constructor","meta":{}},{"name":"_super","tagname":"method","owner":"JW.Class","id":"method-_super","meta":{}},{"name":"addArray","tagname":"method","owner":"JW.UI.Component","id":"method-addArray","meta":{}},{"name":"afterAppend","tagname":"method","owner":"JW.UI.Component","id":"method-afterAppend","meta":{}},{"name":"beforeRender","tagname":"method","owner":"JW.UI.Component","id":"method-beforeRender","meta":{}},{"name":"destroy","tagname":"method","owner":"JW.Class","id":"method-destroy","meta":{}},{"name":"destroyComponent","tagname":"method","owner":"JW.UI.Component","id":"method-destroyComponent","meta":{}},{"name":"getElement","tagname":"method","owner":"JW.UI.Component","id":"method-getElement","meta":{}},{"name":"own","tagname":"method","owner":"JW.Class","id":"method-own","meta":{}},{"name":"remove","tagname":"method","owner":"JW.UI.Component","id":"method-remove","meta":{}},{"name":"removeElement","tagname":"method","owner":"JW.UI.Component","id":"method-removeElement","meta":{}},{"name":"render","tagname":"method","owner":"JW.UI.Component","id":"method-render","meta":{}},{"name":"renderAs","tagname":"method","owner":"JW.UI.Component","id":"method-renderAs","meta":{}},{"name":"renderComponent","tagname":"method","owner":"JW.UI.Component","id":"method-renderComponent","meta":{}},{"name":"renderTo","tagname":"method","owner":"JW.UI.Component","id":"method-renderTo","meta":{}},{"name":"setElement","tagname":"method","owner":"JW.UI.Component","id":"method-setElement","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-JW.UI.Component","short_doc":"Base class of UI component. ...","component":false,"superclasses":["JW.Class"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'><a href='#!/api/JW.Class' rel='JW.Class' class='docClass'>JW.Class</a><div class='subclass '><strong>JW.UI.Component</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/component2.html#JW-UI-Component' target='_blank'>component.js</a></div></pre><div class='doc-contents'><p>Base class of UI component.</p>\n\n<p>Features:</p>\n\n<ul>\n<li>Rendering by HTML template</li>\n<li>Direct access to component elements</li>\n<li><a href=\"http://api.jquery.com/\">jQuery-interface</a> for element manipulations</li>\n<li>Convenient API for child component management</li>\n</ul>\n\n\n<p>jWidget has very simple interface, but pretty unusual philosophy, which guarantees Model-View architecture\nfollowing without a lot of effort. Let's start with examples.</p>\n\n<h3>jWidget UI-component example</h3>\n\n<pre><code>// Define namespace\nvar MyApp = {};\n\n// Define component constructor\nMyApp.Component = function(message, link) {\n    MyApp.Component.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.message = message;\n    this.link = link;\n};\n\n// Inherit from <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(MyApp.Component, <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, {\n    // String message;\n    // String link;\n\n    // override\n    <a href=\"#!/api/JW.UI.Component-method-renderComponent\" rel=\"JW.UI.Component-method-renderComponent\" class=\"docClass\">renderComponent</a>: function() {\n        this.<a href=\"#!/api/JW.Class-method-_super\" rel=\"JW.Class-method-_super\" class=\"docClass\">_super</a>();\n        this.<a href=\"#!/api/JW.UI.Component-method-getElement\" rel=\"JW.UI.Component-method-getElement\" class=\"docClass\">getElement</a>(\"hello-message\").text(message);\n        this.<a href=\"#!/api/JW.UI.Component-method-getElement\" rel=\"JW.UI.Component-method-getElement\" class=\"docClass\">getElement</a>(\"link\").attr(\"href\", this.link);\n    }\n});\n\n<a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a>(MyApp.Component, {\n    main:\n        '&lt;div jwclass=\"myapp-component\"&gt;' +\n            '&lt;div jwid=\"hello-message\" /&gt;' +\n            '&lt;a href=\"#\" jwid=\"link\"&gt;Click me!&lt;/a&gt;' +\n        '&lt;/div&gt;'\n});\n</code></pre>\n\n<p>Let's learn, how HTML-template works. Each component has main template, which is passed into\n<a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a> function with name <code>main</code> and defaults to\n<code>&lt;div /&gt;</code>. You can add other templates as well, they'll be available in component's field\n<code><a href=\"#!/api/JW.UI.Component-property-templates\" rel=\"JW.UI.Component-property-templates\" class=\"docClass\">this.templates</a>.&lt;template_name&gt;</code> (but they are not used usually).\nSubclass inherits superclass templates.</p>\n\n<p>Take a note at special attributes <code>jwclass</code> and <code>jwid</code>. <code>jwclass</code> is root CSS-class of component,\n<code>jwid</code> is a suffix to <code>jwclass</code> in this element. So, next HTML fragment will be rendered in result\nof this component rendering:</p>\n\n<pre><code>&lt;div class=\"myapp-component\"&gt;\n    &lt;div class=\"myapp-component-hello-message\" /&gt;\n    &lt;a href=\"#\" class=\"myapp-component-link\"&gt;Click me!&lt;/a&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>You can retrieve an element by its <code>jwid</code> using method <a href=\"#!/api/JW.UI.Component-method-getElement\" rel=\"JW.UI.Component-method-getElement\" class=\"docClass\">getElement</a>. Result of this method is\na <a href=\"http://api.jquery.com/\">jQuery-wrapper</a> over this element. In addition, each component\nhas field <a href=\"#!/api/JW.UI.Component-property-el\" rel=\"JW.UI.Component-property-el\" class=\"docClass\">el</a>, which refers to root jQuery-element of the component.</p>\n\n<h3>Component creation in code</h3>\n\n<p>Component can be created by simple construction of component object. After that, you can use method <a href=\"#!/api/JW.UI.Component-method-renderTo\" rel=\"JW.UI.Component-method-renderTo\" class=\"docClass\">renderTo</a>\nor <a href=\"#!/api/JW.UI.Component-method-renderAs\" rel=\"JW.UI.Component-method-renderAs\" class=\"docClass\">renderAs</a> in order to insert this component into DOM.</p>\n\n<pre><code>var component;\n\njQuery(function() {\n    component = new MyApp.Component(\"Hello world!\", \"http://google.com\");\n    component.<a href=\"#!/api/JW.UI.Component-method-renderTo\" rel=\"JW.UI.Component-method-renderTo\" class=\"docClass\">renderTo</a>(\"body\");\n});\n</code></pre>\n\n<h3>Child components</h3>\n\n<p>There are 3 ways to add a child component:</p>\n\n<ul>\n<li>Add a child component into <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a> map with a key equal to <code>jwid</code> of element to replace with the child\ncomponent. Usually it is done in <a href=\"#!/api/JW.UI.Component-method-renderComponent\" rel=\"JW.UI.Component-method-renderComponent\" class=\"docClass\">renderComponent</a> method.</li>\n<li>Add an array of child components into some element using <a href=\"#!/api/JW.UI.Component-method-addArray\" rel=\"JW.UI.Component-method-addArray\" class=\"docClass\">addArray</a> method. If the passed array\nis <a href=\"#!/api/JW.ObservableArray\" rel=\"JW.ObservableArray\" class=\"docClass\">JW.ObservableArray</a>, then framework will provide the continuous synchronization with this array during\napplication running.</li>\n<li>Define method <code>render&lt;ChildId&gt;</code>, where <code>&lt;ChildId&gt;</code> is <code>jwid</code> of element,\nwritten in CamelCase with capitalized first letter. Example: <code>renderArticle</code> (renders element <code>jwid=\"article\"</code>).\nIf the method returns <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a> or <a href=\"#!/api/JW.AbstractArray\" rel=\"JW.AbstractArray\" class=\"docClass\">JW.AbstractArray</a>, then result will be treated as child component\nor child component array correspondingly. See <strong>More about render&lt;ChildId&gt; method</strong> paragraph for details.</li>\n</ul>\n\n\n<p>Such interface provides simplicity, at one hand, and flexibility in Model-View architecture following regard,\nat another hand.</p>\n\n<p><a href=\"#!/guide/ensample1\">Getting started. Part 1. Model and view</a></p>\n\n<h3>More about child component arrays</h3>\n\n<p>It is convenient to use <a href=\"#!/api/JW.AbstractCollection.Mapper\" rel=\"JW.AbstractCollection.Mapper\" class=\"docClass\">JW.AbstractCollection.Mapper</a> to convert data arrays into UI component arrays.\nThanks to it, view will be updated on data update automatically.</p>\n\n<p>That's the reason why we recommend to use jWidget <a href=\"#!/api/JW.AbstractCollection\" rel=\"JW.AbstractCollection\" class=\"docClass\">JW.AbstractCollection</a> in data model instead of native JavaScript\nArray and Object: these collections have Observable-implementations and can be synchronized with each other.</p>\n\n<p><a href=\"#!/guide/ensample5\">Getting started. Part 5. Collection synchronizers</a></p>\n\n<h3>More about render&lt;ChildId&gt; method</h3>\n\n<p>You can define method <code>render&lt;ChildId&gt;</code> for every element in HTML template that has attribute <code>jwid</code>.\n<code>&lt;ChildId&gt;</code> equals to this <code>jwid</code>, written in CamelCase with capitalized first letter. Method signature:</p>\n\n<p><code>renderChildId(el: <a href=\"http://api.jquery.com/\">jQuery</a>): Mixed</code></p>\n\n<p><code>el</code> - element with corresponding <code>jwid</code>.</p>\n\n<p>Depending on the returned result of this method, there are next capabilities:</p>\n\n<ul>\n<li>If method returns <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, then it will be added into <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a> map and will become a child component.</li>\n<li>If method returns <a href=\"#!/api/JW.AbstractArray\" rel=\"JW.AbstractArray\" class=\"docClass\">JW.AbstractArray</a>, then it will be added as child array by method <a href=\"#!/api/JW.UI.Component-method-addArray\" rel=\"JW.UI.Component-method-addArray\" class=\"docClass\">addArray</a>.</li>\n<li>If method returns <code>false</code> (===), then element will be removed from component HTML.</li>\n<li>In any other case, framework won't perform any additional action.</li>\n</ul>\n\n\n<h3>Components removal and destruction</h3>\n\n<p>You can destroy the component via <a href=\"#!/api/JW.UI.Component-method-destroy\" rel=\"JW.UI.Component-method-destroy\" class=\"docClass\">destroy</a> method. But you can not destroy child component (framework will\nthrow an exception in this case). You must remove child component from a parent first. To remove the component\nfrom a parent, you must perform the operation opposite to adding operation. So, to remove a component\nwith <code>jwid=\"comments\"</code> you must call <a href=\"#!/api/JW.AbstractMap-method-remove\" rel=\"JW.AbstractMap-method-remove\" class=\"docClass\">JW.AbstractMap.remove</a> method of <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a> object.\nYou can destroy this component immediately:</p>\n\n<pre><code>this.children.<a href=\"#!/api/JW.AbstractMap-method-remove\" rel=\"JW.AbstractMap-method-remove\" class=\"docClass\">remove</a>(\"comments\").<a href=\"#!/api/JW.Class-method-destroy\" rel=\"JW.Class-method-destroy\" class=\"docClass\">destroy</a>();\n</code></pre>\n\n<p>In this case, the element of HTML template with such <code>jwid</code> will return back to its original state.</p>\n\n<p><strong>Notice:</strong> All child components in <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a> map are destroyed automatically on parent component destruction,\nso you usually don't need to destroy them explicitly.</p>\n\n<p>Child arrays are a bit more complicated. First way to remove a child which is added to parent via array is to\nremove this child from this array. Second way: <a href=\"#!/api/JW.UI.Component-method-addArray\" rel=\"JW.UI.Component-method-addArray\" class=\"docClass\">addArray</a> method returns an instance of\n<a href=\"#!/api/JW.UI.Component.Array\" rel=\"JW.UI.Component.Array\" class=\"docClass\">JW.UI.Component.Array</a>. If you destroy it, the array will be removed from parent component:</p>\n\n<pre><code>    // override\n    <a href=\"#!/api/JW.UI.Component-method-renderComponent\" rel=\"JW.UI.Component-method-renderComponent\" class=\"docClass\">renderComponent</a>: function() {\n        this._labelMapper = this.labels.<a href=\"#!/api/JW.AbstractArray-method-createMapper\" rel=\"JW.AbstractArray-method-createMapper\" class=\"docClass\">createMapper</a>({\n            <a href=\"#!/api/JW.AbstractCollection.Mapper-cfg-createItem\" rel=\"JW.AbstractCollection.Mapper-cfg-createItem\" class=\"docClass\">createItem</a>: function(label) { return new LabelView(label); },\n            <a href=\"#!/api/JW.AbstractCollection.Mapper-cfg-destroyItem\" rel=\"JW.AbstractCollection.Mapper-cfg-destroyItem\" class=\"docClass\">destroyItem</a>: <a href=\"#!/api/JW-static-method-destroy\" rel=\"JW-static-method-destroy\" class=\"docClass\">JW.destroy</a>,\n            <a href=\"#!/api/JW.AbstractCollection.Mapper-cfg-scope\" rel=\"JW.AbstractCollection.Mapper-cfg-scope\" class=\"docClass\">scope</a>: this\n        });\n        // Add labels into element with jwid=\"labels\"\n        this._labelArray = this.<a href=\"#!/api/JW.UI.Component-method-addArray\" rel=\"JW.UI.Component-method-addArray\" class=\"docClass\">addArray</a>(this._labelMapper.<a href=\"#!/api/JW.AbstractCollection.Mapper-property-target\" rel=\"JW.AbstractCollection.Mapper-property-target\" class=\"docClass\">target</a>, \"labels\");\n    },\n\n    clearLabels: function() {\n        this._labelArray.<a href=\"#!/api/JW.Class-method-destroy\" rel=\"JW.Class-method-destroy\" class=\"docClass\">destroy</a>();\n    }\n</code></pre>\n\n<p><strong>Notice:</strong> All arrays are already destroyed before <a href=\"#!/api/JW.UI.Component-method-destroyComponent\" rel=\"JW.UI.Component-method-destroyComponent\" class=\"docClass\">destroyComponent</a> method call, i.e. all such child components\nare already removed from a parent. But the components themselves are still not destroyed. You must destroy a\ncorresponding sychronizer for this usually:</p>\n\n<pre><code>    <a href=\"#!/api/JW.UI.Component-method-destroyComponent\" rel=\"JW.UI.Component-method-destroyComponent\" class=\"docClass\">destroyComponent</a>: function() {\n        this._labelMapper.<a href=\"#!/api/JW.Class-method-destroy\" rel=\"JW.Class-method-destroy\" class=\"docClass\">destroy</a>(); // destroys all label views\n        this.<a href=\"#!/api/JW.Class-method-_super\" rel=\"JW.Class-method-_super\" class=\"docClass\">_super</a>();\n    }\n</code></pre>\n\n<p>Likely, the rules which were described in this paragraph seem too complicated for you, but their reasoning\nwill become clear in next paragraph.</p>\n\n<h3>Common practices of child component management</h3>\n\n<p><strong>Internal named child component</strong></p>\n\n<p>This example describes how to create and destroy the child component with <code>jwid=\"title-box\"</code>.</p>\n\n<pre><code>var MyComponent = <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>.<a href=\"#!/api/JW.Class-static-method-extend\" rel=\"JW.Class-static-method-extend\" class=\"docClass\">JW.Class.extend</a>({\n    renderTitleBox: function() {\n        return new TitleBox();\n    }\n\n    // title box will be destroyed automatically\n});\n\n<a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a>(MyComponent, {\n    main:\n        '&lt;div jwclass=\"my-component\"&gt;' +\n            '&lt;div jwid=\"title-box\" /&gt;' +\n        '&lt;/div&gt;'\n});\n</code></pre>\n\n<p><strong>External named child component</strong></p>\n\n<p>This example describes how to insert a child component which was created by someone else, and therefore\nshouldn't be destroyed automatically.</p>\n\n<pre><code>var MyComponent = function(titleBox) {\n    MyComponent.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.titleBox = titleBox;\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(MyComponent, <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, {\n    // <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a> titleBox;\n\n    renderTitleBox: function() {\n        return this.titleBox;\n    },\n\n    <a href=\"#!/api/JW.UI.Component-method-destroyComponent\" rel=\"JW.UI.Component-method-destroyComponent\" class=\"docClass\">destroyComponent</a>: function() {\n        this.<a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a>.<a href=\"#!/api/JW.AbstractMap-method-remove\" rel=\"JW.AbstractMap-method-remove\" class=\"docClass\">remove</a>(\"title-box\"); // prevent title box destruction\n        this.<a href=\"#!/api/JW.Class-method-_super\" rel=\"JW.Class-method-_super\" class=\"docClass\">_super</a>();\n    }\n});\n\n<a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a>(MyComponent, {\n    main:\n        '&lt;div jwclass=\"my-component\"&gt;' +\n            '&lt;div jwid=\"title-box\" /&gt;' +\n        '&lt;/div&gt;'\n});\n</code></pre>\n\n<p><strong>Internal child array</strong></p>\n\n<p>This example describes how to create and destroy child components by data array, and insert them into\nelement with <code>jwid=\"labels\"</code>. Child array will be being synchronized with data on fly.</p>\n\n<pre><code>var MyComponent = function(labels) {\n    MyComponent.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.labels = labels;\n    this._mapper = null;\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(MyComponent, <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, {\n    // <a href=\"#!/api/JW.AbstractArray\" rel=\"JW.AbstractArray\" class=\"docClass\">JW.AbstractArray</a>&lt;Label&gt; labels;\n    // <a href=\"#!/api/JW.AbstractArray.Mapper\" rel=\"JW.AbstractArray.Mapper\" class=\"docClass\">JW.AbstractArray.Mapper</a>&lt;Label, LabelView&gt; _mapper;\n\n    renderLabels: function() {\n        this._mapper = this.labels.<a href=\"#!/api/JW.AbstractArray-method-createMapper\" rel=\"JW.AbstractArray-method-createMapper\" class=\"docClass\">createMapper</a>({\n            <a href=\"#!/api/JW.AbstractCollection.Mapper-cfg-createItem\" rel=\"JW.AbstractCollection.Mapper-cfg-createItem\" class=\"docClass\">createItem</a>: function(label) { return new LabelView(label); },\n            <a href=\"#!/api/JW.AbstractCollection.Mapper-cfg-destroyItem\" rel=\"JW.AbstractCollection.Mapper-cfg-destroyItem\" class=\"docClass\">destroyItem</a>: <a href=\"#!/api/JW-static-method-destroy\" rel=\"JW-static-method-destroy\" class=\"docClass\">JW.destroy</a>,\n            <a href=\"#!/api/JW.AbstractCollection.Mapper-cfg-scope\" rel=\"JW.AbstractCollection.Mapper-cfg-scope\" class=\"docClass\">scope</a>: this\n        });\n        return this._mapper.<a href=\"#!/api/JW.AbstractCollection.Mapper-property-target\" rel=\"JW.AbstractCollection.Mapper-property-target\" class=\"docClass\">target</a>;\n    },\n\n    <a href=\"#!/api/JW.UI.Component-method-destroyComponent\" rel=\"JW.UI.Component-method-destroyComponent\" class=\"docClass\">destroyComponent</a>: function() {\n        this._mapper.<a href=\"#!/api/JW.Class-method-destroy\" rel=\"JW.Class-method-destroy\" class=\"docClass\">destroy</a>(); // destroys all label views\n        this.<a href=\"#!/api/JW.Class-method-_super\" rel=\"JW.Class-method-_super\" class=\"docClass\">_super</a>();\n    }\n});\n\n<a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a>(MyComponent, {\n    main:\n        '&lt;div jwclass=\"my-component\"&gt;' +\n            '&lt;div jwid=\"labels\" /&gt;' +\n        '&lt;/div&gt;'\n});\n</code></pre>\n\n<p><strong>External child array</strong></p>\n\n<p>This example describes how to insert child component array into\nelement with <code>jwid=\"labels\"</code>. Child array will be being synchronized with data on fly.\nComponents are created by someone else, and therefore shouldn't be destroyed on component destruction.</p>\n\n<pre><code>var MyComponent = function(labelViews) {\n    MyComponent.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.labelViews = labelViews;\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(MyComponent, <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, {\n    // <a href=\"#!/api/JW.AbstractArray\" rel=\"JW.AbstractArray\" class=\"docClass\">JW.AbstractArray</a>&lt;LabelView&gt; labelViews;\n\n    renderLabels: function() {\n        return this.labelViews;\n    }\n});\n\n<a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a>(MyComponent, {\n    main:\n        '&lt;div jwclass=\"my-component\"&gt;' +\n            '&lt;div jwid=\"labels\" /&gt;' +\n        '&lt;/div&gt;'\n});\n</code></pre>\n\n<p><strong>Internal child array without synchronizer</strong></p>\n\n<p>Sometimes you can't use <a href=\"#!/api/JW.AbstractArray.Mapper\" rel=\"JW.AbstractArray.Mapper\" class=\"docClass\">JW.AbstractArray.Mapper</a> to create child component arrays for some reason. Let's look how\nthese components should be created and destroyed.</p>\n\n<pre><code>var MyComponent = function(labels) {\n    MyComponent.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.labels = labels;\n    this._labelViews = null;\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(MyComponent, <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, {\n    // <a href=\"#!/api/JW.AbstractArray\" rel=\"JW.AbstractArray\" class=\"docClass\">JW.AbstractArray</a>&lt;Label&gt; labels;\n    // <a href=\"#!/api/JW.AbstractArray\" rel=\"JW.AbstractArray\" class=\"docClass\">JW.AbstractArray</a>&lt;LabelView&gt; _labelViews;\n\n    renderLabels: function() {\n        this._labelViews = this.labels.<a href=\"#!/api/JW.AbstractArray-method-S-map\" rel=\"JW.AbstractArray-method-S-map\" class=\"docClass\">$map</a>(function(label) {\n            return new LabelView(label);\n        }, this);\n        return this._labelViews;\n    },\n\n    <a href=\"#!/api/JW.UI.Component-method-destroyComponent\" rel=\"JW.UI.Component-method-destroyComponent\" class=\"docClass\">destroyComponent</a>: function() {\n        this._labelViews.<a href=\"#!/api/JW.AbstractArray-method-S-clear\" rel=\"JW.AbstractArray-method-S-clear\" class=\"docClass\">$clear</a>().<a href=\"#!/api/JW.AbstractArray-method-each\" rel=\"JW.AbstractArray-method-each\" class=\"docClass\">each</a>(<a href=\"#!/api/JW-static-method-destroy\" rel=\"JW-static-method-destroy\" class=\"docClass\">JW.destroy</a>); // destroy all label views\n        this.<a href=\"#!/api/JW.Class-method-_super\" rel=\"JW.Class-method-_super\" class=\"docClass\">_super</a>();\n    }\n});\n\n<a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a>(MyComponent, {\n    main:\n        '&lt;div jwclass=\"my-component\"&gt;' +\n            '&lt;div jwid=\"labels\" /&gt;' +\n        '&lt;/div&gt;'\n});\n</code></pre>\n\n<h3>Component life stages</h3>\n\n<p>Each component has several stages of life.</p>\n\n<ol>\n<li>Like in all other classes, <strong>constructor</strong> is called first. Usually all fields are defined and assigned to\ntheir initial values here, events are created etc. Only component model should be touched here, view is completely\nignored. Notice that component is not rendered after construction yet, so it doesn't have\nfields <a href=\"#!/api/JW.UI.Component-property-el\" rel=\"JW.UI.Component-property-el\" class=\"docClass\">el</a> and <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a>, <a href=\"#!/api/JW.UI.Component-method-addArray\" rel=\"JW.UI.Component-method-addArray\" class=\"docClass\">addArray</a> method won't work. The main reason of that is to give you ability to\ndo something else between component construction and rendering, for example, change some field values and call\nsome methods. Second reason: it is not recommended to call virtual methods in constructor in any object-oriented\nlanguage. You can render the component directly by calling <a href=\"#!/api/JW.UI.Component-method-render\" rel=\"JW.UI.Component-method-render\" class=\"docClass\">render</a>, <a href=\"#!/api/JW.UI.Component-method-renderTo\" rel=\"JW.UI.Component-method-renderTo\" class=\"docClass\">renderTo</a>, <a href=\"#!/api/JW.UI.Component-method-renderAs\" rel=\"JW.UI.Component-method-renderAs\" class=\"docClass\">renderAs</a>,\nor by adding this component into another component as a child. For example, component will be rendered immediately\nafter adding into <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a> map. You can invoke component rendering multiple times, but it will be rendered only\non first invokation.</li>\n<li>Method <a href=\"#!/api/JW.UI.Component-method-beforeRender\" rel=\"JW.UI.Component-method-beforeRender\" class=\"docClass\">beforeRender</a> is called during rendering, after HTML template reading and initialization of all links to\nthis template elements. It is convenient to perform some preliminary action here before child components creation.\nBut you are already able to create child components here. <code>this._super()</code> call is performed at first line\nof method.</li>\n<li>All <code>render&lt;ChildId&gt;</code> methods are called for HTML template elements, i.e. child component\ncreation is performed.</li>\n<li>Method <a href=\"#!/api/JW.UI.Component-method-renderComponent\" rel=\"JW.UI.Component-method-renderComponent\" class=\"docClass\">renderComponent</a> is called. You should assign all elements' attributes here, create child components,\nbind to events and fill component with interactivity. <code>this._super()</code> call is performed at first line of\nmethod.</li>\n<li>Method <a href=\"#!/api/JW.UI.Component-method-afterAppend\" rel=\"JW.UI.Component-method-afterAppend\" class=\"docClass\">afterAppend</a> is called after first-time component appearing in HTML DOM and UI components tree.\nComponent layouting should be performed here (calculate element sizes).\nComponent rendering is finished here. <code>this._super()</code> call is performed at first line of method.</li>\n<li>Method <a href=\"#!/api/JW.UI.Component-method-destroyComponent\" rel=\"JW.UI.Component-method-destroyComponent\" class=\"docClass\">destroyComponent</a> is called during component destruction. Everything that was performed during component\nrendering, i.e. on steps 2-5, should be reverted here. All child component arrays are already removed by framework\nbefore this method call, but the components themselves are not destroyed. You must destroy them explicitly.\nUnlike arrays, named child component will be destroyed automatically after <a href=\"#!/api/JW.UI.Component-method-destroyComponent\" rel=\"JW.UI.Component-method-destroyComponent\" class=\"docClass\">destroyComponent</a> method, so you must\nremove them from <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a> map if you want to keep them alive. <code>this._super()</code> method call is performed\nat last line of method.</li>\n</ol>\n\n\n<h3>Intergration with jWidget SDK</h3>\n\n<p>jWidget UI library is integrated with <a href=\"https://github.com/enepomnyaschih/jwsdk/wiki/ru\">jWidget SDK</a> perfectly, and\nit gives you nice code optimizations of JS-code out of the box and capability to extract HTML templates into\nseparate files. For example, you can simplify the very first example by splitting code into 2 files:</p>\n\n<p><strong>component.js</strong></p>\n\n<pre><code>// Define namespace\nvar MyApp = {};\n\n// Define component constructor\nMyApp.Component = function(message, link) {\n    MyApp.Component.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.message = message;\n    this.link = link;\n};\n\n// Inherit from <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(MyApp.Component, <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, {\n    // String message;\n    // String link;\n\n    // override\n    <a href=\"#!/api/JW.UI.Component-method-renderComponent\" rel=\"JW.UI.Component-method-renderComponent\" class=\"docClass\">renderComponent</a>: function() {\n        this.<a href=\"#!/api/JW.Class-method-_super\" rel=\"JW.Class-method-_super\" class=\"docClass\">_super</a>();\n        this.<a href=\"#!/api/JW.UI.Component-method-getElement\" rel=\"JW.UI.Component-method-getElement\" class=\"docClass\">getElement</a>(\"hello-message\").text(message);\n        this.<a href=\"#!/api/JW.UI.Component-method-getElement\" rel=\"JW.UI.Component-method-getElement\" class=\"docClass\">getElement</a>(\"link\").attr(\"href\", this.link);\n    }\n});\n</code></pre>\n\n<p><strong>component.jw.html</strong></p>\n\n<pre><code>&lt;div jwclass=\"myapp-component\"&gt;\n    &lt;div jwid=\"hello-message\" /&gt;\n    &lt;a href=\"#\" jwid=\"link\"&gt;Click me!&lt;/a&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>To make this work, you just need to register the next resources in corresponding jWidget SDK package:</p>\n\n<pre><code>{\n    \"resources\" : [\n        \"component.js\",\n        \"component.jw.html : MyApp.Component\",\n        ...\n    ]\n}\n</code></pre>\n\n<p>Sure, you can use jWidget even without jWidget SDK, but in this case you'll need to either load HTML templates\ndinamically or define them explicitly right in JavaScript code using <a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a> function.</p>\n\n<p>See more complicated example in article:</p>\n\n<p><a href=\"#!/guide/ensample6\">Getting started. Part 6. Project infrastructure</a></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-_iid' class='member first-child inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/JW.Class' rel='JW.Class' class='defined-in docClass'>JW.Class</a><br/><a href='source/class.html#JW-Class-property-_iid' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.Class-property-_iid' class='name expandable'>_iid</a> : number<span class=\"signature\"></span></div><div class='description'><div class='short'>Instance ID. ...</div><div class='long'><p>Instance ID.</p>\n\n<p>Auto-incremental object unique ID. Each <a href=\"#!/api/JW.Class\" rel=\"JW.Class\" class=\"docClass\">JW.Class</a> instance gets such identifier.\nUsed in <a href=\"#!/api/JW.AbstractSet\" rel=\"JW.AbstractSet\" class=\"docClass\">JW.AbstractSet</a> as map key for quick item access.</p>\n</div></div></div><div id='property-allChildren' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-property-allChildren' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-property-allChildren' class='name expandable'>allChildren</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Set of all child components (both named and arrays). ...</div><div class='long'><p>Set of all child components (both named and arrays). Field is available from component rendering beginning.</p>\n</div></div></div><div id='property-children' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-property-children' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-property-children' class='name expandable'>children</a> : <a href=\"#!/api/JW.ObservableMap\" rel=\"JW.ObservableMap\" class=\"docClass\">JW.ObservableMap</a><span class=\"signature\"></span></div><div class='description'><div class='short'>&lt;JW.UI.Component&gt; (mutable) Named child components. ...</div><div class='long'><p><code>&lt;<a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>&gt;</code> (mutable) Named child components. Use this map to add child components in place of\nelements with corresponding <code>jwid</code>. Field is available from component rendering beginning.</p>\n</div></div></div><div id='property-constructor' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/JW.Class' rel='JW.Class' class='defined-in docClass'>JW.Class</a><br/><a href='source/class.html#JW-Class-property-constructor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.Class-property-constructor' class='name expandable'>constructor</a> : Function<span class=\"signature\"></span></div><div class='description'><div class='short'>Constructor as class. ...</div><div class='long'><p>Constructor as class. If you have an object, you can get its class using this field.</p>\n</div></div></div><div id='property-destroyed' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-property-destroyed' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-property-destroyed' class='name expandable'>destroyed</a> : boolean<span class=\"signature\"></span></div><div class='description'><div class='short'><p>Was component destroyed?</p>\n</div><div class='long'><p>Was component destroyed?</p>\n</div></div></div><div id='property-el' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-property-el' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-property-el' class='name expandable'>el</a> : <a href=\"#!/api/jQuery\" rel=\"jQuery\" class=\"docClass\">jQuery</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Root element. ...</div><div class='long'><p>Root element. Field is available from component rendering beginning.</p>\n</div></div></div><div id='property-parent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-property-parent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-property-parent' class='name expandable'>parent</a> : <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Parent component. ...</div><div class='long'><p>Parent component. Field is available from component rendering beginning.</p>\n</div></div></div><div id='property-replacedEl' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-property-replacedEl' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-property-replacedEl' class='name expandable'>replacedEl</a> : <a href=\"#!/api/jQuery\" rel=\"jQuery\" class=\"docClass\">jQuery</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Element in place of which was this component rendered. ...</div><div class='long'><p>Element in place of which was this component rendered. Assigned automatically at the moment of component\nadding into <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a> map of parent component. Field is available from component rendering beginning.</p>\n</div></div></div><div id='property-templates' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-property-templates' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-property-templates' class='name expandable'>templates</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Map from template ID to template string. ...</div><div class='long'><p>Map from template ID to template string. Templates are defined by <a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a> method.</p>\n</div></div></div><div id='property-wasAfterAppend' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-property-wasAfterAppend' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-property-wasAfterAppend' class='name expandable'>wasAfterAppend</a> : boolean<span class=\"signature\"></span></div><div class='description'><div class='short'><p>Was <a href=\"#!/api/JW.UI.Component-method-afterAppend\" rel=\"JW.UI.Component-method-afterAppend\" class=\"docClass\">afterAppend</a> called?</p>\n</div><div class='long'><p>Was <a href=\"#!/api/JW.UI.Component-method-afterAppend\" rel=\"JW.UI.Component-method-afterAppend\" class=\"docClass\">afterAppend</a> called?</p>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/JW.UI.Component-method-constructor' class='name expandable'>JW.UI.Component</a>( <span class='pre'></span> ) : <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a><span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-_super' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/JW.Class' rel='JW.Class' class='defined-in docClass'>JW.Class</a><br/><a href='source/class.html#JW-Class-method-_super' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.Class-method-_super' class='name expandable'>_super</a>( <span class='pre'></span> ) : Mixed<span class=\"signature\"></span></div><div class='description'><div class='short'>This method is available only inside class methods that were passed into JW.extend method. ...</div><div class='long'><p>This method is available only inside class methods that were passed into <a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a> method.\nThis method is an easy way of the same superclass method calling:</p>\n\n<pre><code>...\n// Class method\nmyMethod: function(a, b, c) {\n    return this.<a href=\"#!/api/JW.Class-method-_super\" rel=\"JW.Class-method-_super\" class=\"docClass\">_super</a>(a, b) + c;\n}\n...\n</code></pre>\n\n<p>Equivalent code without <a href=\"#!/api/JW.Class-method-_super\" rel=\"JW.Class-method-_super\" class=\"docClass\">_super</a> usage:</p>\n\n<pre><code>...\n// Class method\nmyMethod: function(a, b, c) {\n    return MyClass.<a href=\"#!/api/JW.Class-static-property-superclass\" rel=\"JW.Class-static-property-superclass\" class=\"docClass\">superclass</a>.myMethod.call(this, a, b) + c;\n}\n...\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Mixed</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-addArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-method-addArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-addArray' class='name expandable'>addArray</a>( <span class='pre'>components, [el]</span> ) : <a href=\"#!/api/JW.UI.Component.Array\" rel=\"JW.UI.Component.Array\" class=\"docClass\">JW.UI.Component.Array</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Add child component array into specified element. ...</div><div class='long'><p>Add child component array into specified element.</p>\n\n<p>Based on <a href=\"#!/api/JW.AbstractArray.Inserter\" rel=\"JW.AbstractArray.Inserter\" class=\"docClass\">JW.AbstractArray.Inserter</a> synchronizer. Thanks to that, if you'll pass an instance of\n<a href=\"#!/api/JW.ObservableArray\" rel=\"JW.ObservableArray\" class=\"docClass\">JW.ObservableArray</a> as \"components\", then view will be synchronized with this array content of fly.</p>\n\n<p>It is convenient to create \"components\" array from data array using <a href=\"#!/api/JW.AbstractArray-method-createMapper\" rel=\"JW.AbstractArray-method-createMapper\" class=\"docClass\">JW.AbstractArray.createMapper</a> method,\ni.e. by <a href=\"#!/api/JW.AbstractCollection.Mapper\" rel=\"JW.AbstractCollection.Mapper\" class=\"docClass\">JW.AbstractCollection.Mapper</a> instantiation.</p>\n\n<p>Method returns an instance of <a href=\"#!/api/JW.UI.Component.Array\" rel=\"JW.UI.Component.Array\" class=\"docClass\">JW.UI.Component.Array</a>. THis object is purposed for child component array\nremoval from parent component. Use <a href=\"#!/api/JW.Class-method-destroy\" rel=\"JW.Class-method-destroy\" class=\"docClass\">destroy</a> method to do this.\nAlso, the array will be removed from parent component on parent component destruction right\nbefore <a href=\"#!/api/JW.UI.Component-method-destroyComponent\" rel=\"JW.UI.Component-method-destroyComponent\" class=\"docClass\">destroyComponent</a> method call.\nBut notice that child components inside this array won't be destroyed automatically.\nUsually it can be done by corresponding <a href=\"#!/api/JW.AbstractCollection.Mapper\" rel=\"JW.AbstractCollection.Mapper\" class=\"docClass\">JW.AbstractCollection.Mapper</a> destruction in <a href=\"#!/api/JW.UI.Component-method-destroyComponent\" rel=\"JW.UI.Component-method-destroyComponent\" class=\"docClass\">destroyComponent</a> method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>components</span> : <a href=\"#!/api/JW.AbstractArray\" rel=\"JW.AbstractArray\" class=\"docClass\">JW.AbstractArray</a><div class='sub-desc'><p>Child component array.</p>\n</div></li><li><span class='pre'>el</span> : <a href=\"#!/api/jQuery\" rel=\"jQuery\" class=\"docClass\">jQuery</a>/string (optional)<div class='sub-desc'><p>Element to add child components into, or its <code>jwid</code>.\nDefaults to root element (<a href=\"#!/api/JW.UI.Component-property-el\" rel=\"JW.UI.Component-property-el\" class=\"docClass\">el</a>) of component.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/JW.UI.Component.Array\" rel=\"JW.UI.Component.Array\" class=\"docClass\">JW.UI.Component.Array</a></span><div class='sub-desc'><p>Child component array wrapper.</p>\n</div></li></ul></div></div></div><div id='method-afterAppend' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-method-afterAppend' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-afterAppend' class='name expandable'>afterAppend</a>( <span class='pre'></span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Component life stage method. ...</div><div class='long'><p>Component life stage method. Called after first-time component appearing in HTML DOM and UI components tree.\nComponent layouting should be performed here (calculate element sizes).\nComponent rendering is finished here. <code>this._super()</code> call is performed at first line of method.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-beforeRender' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-method-beforeRender' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-beforeRender' class='name expandable'>beforeRender</a>( <span class='pre'></span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Component life stage method. ...</div><div class='long'><p>Component life stage method. Called during component rendering after HTML template parsing and initialization\nof references to all elements of the template. Called before <code>render&lt;ChildId&gt;</code> methods and\n<a href=\"#!/api/JW.UI.Component-method-renderComponent\" rel=\"JW.UI.Component-method-renderComponent\" class=\"docClass\">renderComponent</a> method. It is convenient to perform some preliminary action here before child\ncomponents creation. But you are already able to create child components here. <code>this._super()</code>\ncall is performed at first line of method.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-destroy' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/JW.Class' rel='JW.Class' class='defined-in docClass'>JW.Class</a><br/><a href='source/class.html#JW-Class-method-destroy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.Class-method-destroy' class='name expandable'>destroy</a>( <span class='pre'></span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Class destructor. ...</div><div class='long'><p>Class destructor. The logic of class instance destruction should be implemented here. You must call this method\nexplicitly from outside, because JavaScript doesn't support automatic class destructor calling. Don't forget to\ncall superclass destructor at the end of the method:</p>\n\n<pre><code>destroy: function() {\n    // Release resources\n    ...\n    // Call superclass destructor\n    this.<a href=\"#!/api/JW.Class-method-_super\" rel=\"JW.Class-method-_super\" class=\"docClass\">_super</a>();\n}\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-destroyComponent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-method-destroyComponent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-destroyComponent' class='name expandable'>destroyComponent</a>( <span class='pre'></span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Component life stage method. ...</div><div class='long'><p>Component life stage method. Called during component destruction. Everything that was performed during component\nrendering should be reverted here. All child component arrays are already removed by framework\nbefore this method call, but the components themselves are not destroyed. You must destroy them explicitly.\nUnlike arrays, named child component will be destroyed automatically after <a href=\"#!/api/JW.UI.Component-method-destroyComponent\" rel=\"JW.UI.Component-method-destroyComponent\" class=\"docClass\">destroyComponent</a> method, so you must\nremove them from <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a> map if you want to keep them alive. <code>this._super()</code> method call is performed\nat last line of method.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-getElement' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-method-getElement' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-getElement' class='name expandable'>getElement</a>( <span class='pre'>jwid</span> ) : <a href=\"#!/api/jQuery\" rel=\"jQuery\" class=\"docClass\">jQuery</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Get element by its jwid. ...</div><div class='long'><p>Get element by its <code>jwid</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>jwid</span> : string<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/jQuery\" rel=\"jQuery\" class=\"docClass\">jQuery</a></span><div class='sub-desc'><p>Element.</p>\n</div></li></ul></div></div></div><div id='method-own' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/JW.Class' rel='JW.Class' class='defined-in docClass'>JW.Class</a><br/><a href='source/class.html#JW-Class-method-own' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.Class-method-own' class='name expandable'>own</a>( <span class='pre'>obj</span> ) : <a href=\"#!/api/JW.Class\" rel=\"JW.Class\" class=\"docClass\">JW.Class</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Aggregate a specified object in a current one. ...</div><div class='long'><p>Aggregate a specified object in a current one. It means that the specified object will be destroyed automatically\non this object destruction. The aggregated objects are destroyed in a reversive order.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : <a href=\"#!/api/JW.Class\" rel=\"JW.Class\" class=\"docClass\">JW.Class</a><div class='sub-desc'><p>An aggregated object.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/JW.Class\" rel=\"JW.Class\" class=\"docClass\">JW.Class</a></span><div class='sub-desc'><p>An aggregated object (obj).</p>\n</div></li></ul></div></div></div><div id='method-remove' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-method-remove' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-remove' class='name expandable'>remove</a>( <span class='pre'></span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove component from DOM. ...</div><div class='long'><p>Remove component from DOM. Can be used for root component only (which was added via <a href=\"#!/api/JW.UI.Component-method-renderTo\" rel=\"JW.UI.Component-method-renderTo\" class=\"docClass\">renderTo</a> or <a href=\"#!/api/JW.UI.Component-method-renderAs\" rel=\"JW.UI.Component-method-renderAs\" class=\"docClass\">renderAs</a>\nmethod. All child components should be removed using <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a> or <a href=\"#!/api/JW.UI.Component.Array\" rel=\"JW.UI.Component.Array\" class=\"docClass\">JW.UI.Component.Array</a> stuff.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-removeElement' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-method-removeElement' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-removeElement' class='name expandable'>removeElement</a>( <span class='pre'>jwid</span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove element by jwid. ...</div><div class='long'><p>Remove element by <code>jwid</code>. Element will be removed from DOM and it will be impossible to get it\nby <a href=\"#!/api/JW.UI.Component-method-getElement\" rel=\"JW.UI.Component-method-getElement\" class=\"docClass\">getElement</a> method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>jwid</span> : string<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-render' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-method-render' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-render' class='name expandable'>render</a>( <span class='pre'>[replacedEl]</span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Renders component. ...</div><div class='long'><p>Renders component. Call this method to initialize references to all elements of component and create\nchild components. This method is called automatically in next cases:</p>\n\n<ul>\n<li>One of methods <a href=\"#!/api/JW.UI.Component-method-renderTo\" rel=\"JW.UI.Component-method-renderTo\" class=\"docClass\">renderTo</a>, <a href=\"#!/api/JW.UI.Component-method-renderAs\" rel=\"JW.UI.Component-method-renderAs\" class=\"docClass\">renderAs</a> is called</li>\n<li>The component is added into another component as a child</li>\n</ul>\n\n\n<p>Feel free to call component rendering multiple times: it will be rendered only once.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>replacedEl</span> : <a href=\"#!/api/jQuery\" rel=\"jQuery\" class=\"docClass\">jQuery</a> (optional)<div class='sub-desc'><p>Element on the place of which render this component (if exists).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-renderAs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-method-renderAs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-renderAs' class='name expandable'>renderAs</a>( <span class='pre'>[el]</span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Render component in place of specified element. ...</div><div class='long'><p>Render component in place of specified element. Use it to render root component only: its children must be rendered\nusing <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a> or <a href=\"#!/api/JW.UI.Component-method-addArray\" rel=\"JW.UI.Component-method-addArray\" class=\"docClass\">addArray</a> stuff.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>el</span> : <a href=\"#!/api/jQuery\" rel=\"jQuery\" class=\"docClass\">jQuery</a>/string (optional)<div class='sub-desc'><p>Element to render in place of, or its jQuery-selector.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-renderComponent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-method-renderComponent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-renderComponent' class='name expandable'>renderComponent</a>( <span class='pre'></span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Component life stage method. ...</div><div class='long'><p>Component life stage method. Called after <a href=\"#!/api/JW.UI.Component-method-beforeRender\" rel=\"JW.UI.Component-method-beforeRender\" class=\"docClass\">beforeRender</a> method and <code>render&lt;ChildId&gt;</code> methods.\nYou should assign all elements' attributes here, create child components,\nbind to events and fill component with interactivity. <code>this._super()</code> call is performed at\nfirst line of method.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-renderTo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-method-renderTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-renderTo' class='name expandable'>renderTo</a>( <span class='pre'>[el]</span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Render component into specified element. ...</div><div class='long'><p>Render component into specified element. Use it to render root component only: its children must be rendered\nusing <a href=\"#!/api/JW.UI.Component-property-children\" rel=\"JW.UI.Component-property-children\" class=\"docClass\">children</a> or <a href=\"#!/api/JW.UI.Component-method-addArray\" rel=\"JW.UI.Component-method-addArray\" class=\"docClass\">addArray</a> stuff.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>el</span> : <a href=\"#!/api/jQuery\" rel=\"jQuery\" class=\"docClass\">jQuery</a>/string (optional)<div class='sub-desc'><p>Element to render into, or its jQuery-selector.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-setElement' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='JW.UI.Component'>JW.UI.Component</span><br/><a href='source/component2.html#JW-UI-Component-method-setElement' target='_blank' class='view-source'>view source</a></div><a href='#!/api/JW.UI.Component-method-setElement' class='name expandable'>setElement</a>( <span class='pre'>el, jwid</span> ) : void<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a new element in component. ...</div><div class='long'><p>Register a new element in component.</p>\n\n<p>Method is used if HTML content of component is not fixed. For example, you can register a new element on\ncomponent inheritance if you don't want to override HTML template from scratch.\nYou can use an added element for various purposes, for example, to add child components.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>el</span> : <a href=\"#!/api/jQuery\" rel=\"jQuery\" class=\"docClass\">jQuery</a><div class='sub-desc'><p>Element.</p>\n</div></li><li><span class='pre'>jwid</span> : string<div class='sub-desc'><p><code>jwid</code> to assign.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>void</span><div class='sub-desc'>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});