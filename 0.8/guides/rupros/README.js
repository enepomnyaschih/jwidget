Ext.data.JsonP.rupros({"guide":"<h1 id='rupros-section-%D0%9F%D1%80%D0%B5%D0%B8%D0%BC%D1%83%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%B0-jwidget'>Преимущества jWidget</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/rupros-section-backbone.js'>Backbone.js</a></li>\n<li><a href='#!/guide/rupros-section-extjs'>ExtJS</a></li>\n</ol>\n</div>\n\n<p>У jWidget есть одно главное преимущество, что отличает его от всех других Model-View фреймворков - это\n<strong>синхронизаторы коллекций</strong> (см. <a href=\"#!/api/JW.AbstractCollection\" rel=\"JW.AbstractCollection\" class=\"docClass\">JW.AbstractCollection</a>).\nЭто моя личная идея как автора библиотеки, которую я не встречал ни в одном\nфреймворке и ни в одном языке программирования. На мой взгляд, это инновация. Но это не все. Давайте\nвсе же детально сравним jWidget с другими аналогичными JS-фреймворками.</p>\n\n<h2 id='rupros-section-backbone.js'>Backbone.js</h2>\n\n<p><a href=\"http://backbonejs.org\">Backbone.js</a> - Наиболее похожий на jWidget популярный Model-View фреймворк.</p>\n\n<p>Преимущества jWidget перед Backbone.js:</p>\n\n<ul>\n<li>Более богатая библиотека коллекций, более широкий набор алгоритмов и событий</li>\n<li>Синхронизаторы</li>\n<li>jWidget не предполагает полную перерисовку представления при каждом обновлении модели</li>\n<li>Работает гораздо быстрее (жертвой красоты кода)</li>\n</ul>\n\n\n<p>Backbone хорошо подходит для маленьких приложений, где не сильно важна скорость работы. Для более крупных и\nдинамичных приложений jWidget подойдет гораздо лучше.</p>\n\n<h2 id='rupros-section-extjs'>ExtJS</h2>\n\n<p><a href=\"http://www.sencha.com/products/extjs\">ExtJS</a> тоже предоставляет Model-View архитектуру,\nно она имеет совершенно иную философию. Всю логику приложения берет\nна себя контроллер, что выносит UI-события за пределы представления. Этот подход\nочень сильно завязан на DOM Query (аналог CSS-селекторов). На мой взгляд, для крупных приложений это\nтоже не годится, т.к. из большого количества селекторов получается каша, в которой тяжело что-то найти.</p>\n\n<p>Преимущества jWidget перед ExtJS:</p>\n\n<ul>\n<li>Более богатая библиотека коллекций (словарь и множество, которых нет в ExtJS)</li>\n<li>Синхронизаторы</li>\n<li>Гораздо проще разрабатывать визуальные компоненты с нуля</li>\n<li>Меньше по объему</li>\n<li>Лицензия LGPL</li>\n</ul>\n\n\n<p>Конечно, ничто не сравнится с ExtJS по количеству и качеству визуальных компонентов, поданных из коробки. Если вам подходит\nлицензия ExtJS и для реализации приложения достаточно предоставленных визуальных компонентов, то это будет\nнаилучший выбор. Для более гибкой верстки jWidget или Backbone подойдут лучше. В целом, на мой взгляд,\nподход jWidget к Model-View архитектуре гораздо удобнее и эффективнее по сравнению с ExtJS.</p>\n","title":"Преимущества jWidget"});