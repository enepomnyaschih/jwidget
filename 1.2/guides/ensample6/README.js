Ext.data.JsonP.ensample6({"guide":"<h1 id='ensample6-section-part-6.-collection-synchronizers'>Part 6. Collection synchronizers</h1>\n\n<p>Demo: <a href=\"http://enepomnyaschih.github.io/mt/1.0.0-6/\">http://enepomnyaschih.github.io/mt/1.0.0-6/</a></p>\n\n<p>Source: <a href=\"https://github.com/enepomnyaschih/mt/tree/mt-1.0.0-6\">https://github.com/enepomnyaschih/mt/tree/mt-1.0.0-6</a> (Git branch)</p>\n\n<p>Now we'll switch to the most wonderful and important part of jWidget which makes jWidget special -\ncollection synchronizers.</p>\n\n<p>In this example, we'll add a feature of new tweets posting and existing tweets removal.</p>\n\n<p>Let's start with a bit of refactoring. We have a next code snippet in mt.TweetFeed class:</p>\n\n<p><strong>public/mt/tweetfeed/tweetfeed.js</strong></p>\n\n<pre><code>    renderTweets: function() {\n        return this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(this.data.tweets.<a href=\"#!/api/JW.AbstractArray-method-S-map\" rel=\"JW.AbstractArray-method-S-map\" class=\"docClass\">$map</a>(function(tweetData) {\n            return new mt.TweetView(tweetData);\n        }, this)).<a href=\"#!/api/JW.AbstractCollection-method-ownItems\" rel=\"JW.AbstractCollection-method-ownItems\" class=\"docClass\">ownItems</a>();\n    }\n</code></pre>\n\n<p>Just to remind, this code converts data array of mt.data.Tweet instances to view array of mt.TweetView instances,\nand renders them into element with jwid=\"tweets\".</p>\n\n<p>You must understand that this code won't let us to install continuous synchronization of view array with data array:\ndata convertion is performed only once, at the moment of tweet feed rendering. Sure, you may bind listeners\nto data array modification events manually (that's what you've got to do in other frameworks), but jWidget\noffers much easier solution - use synchronizer for this.</p>\n\n<p>Moreover, jWidget philosophy claims that\n<strong>there should be no difference between simple and observable collection manipulations. Although it is enough to\ncall some algorithm to convert one simple collection to another (here: <a href=\"#!/api/JW.AbstractArray-method-S-map\" rel=\"JW.AbstractArray-method-S-map\" class=\"docClass\">$map</a>),\nit is recommended to instantiate a synchronizer instead.</strong></p>\n\n<p>So, let's replace code of mt.TweetFeed with the next:</p>\n\n<p><strong>public/mt/tweetfeed/tweetfeed.js</strong></p>\n\n<pre><code>    renderTweets: function() {\n        return this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(this.data.tweets.<a href=\"#!/api/JW.AbstractArray-method-createMapper\" rel=\"JW.AbstractArray-method-createMapper\" class=\"docClass\">createMapper</a>({\n            <a href=\"#!/api/JW.AbstractCollection.Mapper-cfg-createItem\" rel=\"JW.AbstractCollection.Mapper-cfg-createItem\" class=\"docClass\">createItem</a>: function(tweetData) {\n                return new mt.TweetView(tweetData);\n            },\n            <a href=\"#!/api/JW.AbstractCollection.Mapper-cfg-destroyItem\" rel=\"JW.AbstractCollection.Mapper-cfg-destroyItem\" class=\"docClass\">destroyItem</a>: <a href=\"#!/api/JW-static-method-destroy\" rel=\"JW-static-method-destroy\" class=\"docClass\">JW.destroy</a>,\n            <a href=\"#!/api/JW.AbstractCollection.Mapper-cfg-scope\" rel=\"JW.AbstractCollection.Mapper-cfg-scope\" class=\"docClass\">scope</a>: this\n        })).<a href=\"#!/api/JW.AbstractArray.Mapper-property-target\" rel=\"JW.AbstractArray.Mapper-property-target\" class=\"docClass\">target</a>;\n    }\n</code></pre>\n\n<p>Since our array of this.data.tweets is still simple (<a href=\"#!/api/JW.Array\" rel=\"JW.Array\" class=\"docClass\">JW.Array</a>), this code is completely equal to the original one -\nrun the application in browser and you won't see any difference. But now we are able to replace simple array\nin mt.Data with <a href=\"#!/api/JW.ObservableArray\" rel=\"JW.ObservableArray\" class=\"docClass\">JW.ObservableArray</a>, and synchronize view with model without view modification this way:</p>\n\n<p><strong>public/mt/data/data.js</strong></p>\n\n<pre><code>mt.Data = function() {\n    mt.Data.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.profile = null; // mt.data.Profile\n    this.tweets = this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(new <a href=\"#!/api/JW.ObservableArray\" rel=\"JW.ObservableArray\" class=\"docClass\">JW.ObservableArray</a>()).<a href=\"#!/api/JW.AbstractCollection-method-ownItems\" rel=\"JW.AbstractCollection-method-ownItems\" class=\"docClass\">ownItems</a>(); // <a href=\"#!/api/JW.AbstractArray\" rel=\"JW.AbstractArray\" class=\"docClass\">JW.AbstractArray</a>&lt;mt.data.Tweet&gt;\n};\n</code></pre>\n\n<p>Try to open application in browser and run the next command in console:</p>\n\n<pre><code>data.tweets.<a href=\"#!/api/JW.AbstractArray-method-add\" rel=\"JW.AbstractArray-method-add\" class=\"docClass\">add</a>(new mt.data.Tweet({\n    fullName: \"Road Runner\",\n    shortName: \"roadrunner\",\n    avatarUrl48: \"backend/avatar-48.png\",\n    contentHtml: \"This is a new tweet!\",\n    time: new Date().getTime(),\n    like: false,\n    retweet: false\n}));\n</code></pre>\n\n<p>You'll see that a new tweet will appear at the end of tweet feed:</p>\n\n<p><p><img src=\"guides/ensample6/result-1.png\" alt=\"\" width=\"944\" height=\"575\"></p></p>\n\n<p>Notice that we didn't touch view by this command: we've just added an object into data array, but view has\nupdated correctly.</p>\n\n<p>The only remaining part is to add code which will add a new object into data.tweets array on \"Compose tweet\" form\nsubmit. Bind mt.ProfileBox to jQuery.submit event:</p>\n\n<p><strong>public/mt/profilebox/profilebox.js</strong></p>\n\n<pre><code>mt.ProfileBox = function(data) {\n    this._onComposeSubmit = <a href=\"#!/api/JW-static-method-inScope\" rel=\"JW-static-method-inScope\" class=\"docClass\">JW.inScope</a>(this._onComposeSubmit, this);\n    mt.ProfileBox.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.data = data; // mt.Data\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(mt.ProfileBox, <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, {\n    // ... code\n\n    renderComposeForm: function(el) {\n        el.submit(this._onComposeSubmit);\n    },\n\n    _onComposeSubmit: function(event) {\n        event.preventDefault();\n        var text = <a href=\"#!/api/JW.String-static-method-trim\" rel=\"JW.String-static-method-trim\" class=\"docClass\">JW.String.trim</a>(this.<a href=\"#!/api/JW.UI.Component-method-getElement\" rel=\"JW.UI.Component-method-getElement\" class=\"docClass\">getElement</a>(\"compose-input\").val());\n        if (!text) {\n            return;\n        }\n        this.data.tweets.<a href=\"#!/api/JW.AbstractArray-method-add\" rel=\"JW.AbstractArray-method-add\" class=\"docClass\">add</a>(new mt.data.Tweet({\n            fullName: this.data.profile.fullName,\n            shortName: this.data.profile.shortName,\n            avatarUrl48: this.data.profile.avatarUrl48,\n            contentHtml: text,\n            time: new Date().getTime(),\n            like: false,\n            retweet: false\n        }), 0);\n        this.<a href=\"#!/api/JW.UI.Component-method-getElement\" rel=\"JW.UI.Component-method-getElement\" class=\"docClass\">getElement</a>(\"compose-input\").val(\"\")\n    }\n});\n</code></pre>\n\n<p>And run our application. After text input and \"Tweet\" button click, we'll see a new tweet in tweet feed:</p>\n\n<p><p><img src=\"guides/ensample6/result-2.png\" alt=\"\" width=\"942\" height=\"298\"></p></p>\n\n<p><p><img src=\"guides/ensample6/result-3.png\" alt=\"\" width=\"942\" height=\"375\"></p></p>\n\n<p>Our next goal is to activate Remove button in tweets to remove them from feed. Let's bind a handler to button click.\nWe'll need the access to mt.Data object to remove the tweet:</p>\n\n<p><strong>public/mt/tweetview/tweetview.js</strong></p>\n\n<pre><code>mt.TweetView = function(data, tweetData) {\n    this._onLikeClick = <a href=\"#!/api/JW-static-method-inScope\" rel=\"JW-static-method-inScope\" class=\"docClass\">JW.inScope</a>(this._onLikeClick, this);\n    this._onRetweetClick = <a href=\"#!/api/JW-static-method-inScope\" rel=\"JW-static-method-inScope\" class=\"docClass\">JW.inScope</a>(this._onRetweetClick, this);\n    this._onRemoveClick = <a href=\"#!/api/JW-static-method-inScope\" rel=\"JW-static-method-inScope\" class=\"docClass\">JW.inScope</a>(this._onRemoveClick, this);\n    mt.TweetView.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.data = data; // mt.Data\n    this.tweetData = tweetData; // mt.data.Tweet\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(mt.TweetView, <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, {\n    renderRemove: function(el) {\n        el.click(this._onRemoveClick);\n    },\n\n    // ...\n\n    _onRemoveClick: function(event) {\n        event.preventDefault();\n        this.data.tweets.<a href=\"#!/api/JW.AbstractArray-method-removeItem\" rel=\"JW.AbstractArray-method-removeItem\" class=\"docClass\">removeItem</a>(this.tweetData);\n    },\n\n    // ...\n});\n</code></pre>\n\n<p>Update mt.TweetView object construction arguments in mt.TweetFeed:</p>\n\n<p><strong>public/mt/tweetfeed/tweetfeed.js</strong></p>\n\n<pre><code>            <a href=\"#!/api/JW.AbstractCollection.Mapper-cfg-createItem\" rel=\"JW.AbstractCollection.Mapper-cfg-createItem\" class=\"docClass\">createItem</a>: function(tweetData) {\n                return new mt.TweetView(this.data, tweetData);\n            },\n</code></pre>\n\n<p>Run application and try to click Remove button in tweet:</p>\n\n<p><p><img src=\"guides/ensample6/result-4.png\" alt=\"\" width=\"950\" height=\"266\"></p></p>\n\n<p>In this example we've reviewed a typical scenario of array item converter (<a href=\"#!/api/JW.AbstractCollection.Mapper\" rel=\"JW.AbstractCollection.Mapper\" class=\"docClass\">JW.AbstractCollection.Mapper</a>) usage,\nbut don't stop at this. You should try other synchronizers by your own, and I'm sure you'll find reasonable\nuse cases for majority of them. Find them in <a href=\"#!/api/JW.AbstractCollection\" rel=\"JW.AbstractCollection\" class=\"docClass\">JW.AbstractCollection</a> class description.</p>\n\n<p>Notice that synchronizers usage is not constrained by view only. In my practice, synchronizers are used in model\nmore often than in view. For example, indexer will speed-up access to the items by key. Sorter can sort a set of\ntweets by their publication date, and you won't need to think at what position to insert a new tweet in tweet feed.\nThere is a lot of scenarios, and I recommend you to try them in practice.</p>\n\n<p>In next part, we'll improve infrastructure of our project: extract HTML templates into separate HTML files using\n<a href=\"https://github.com/enepomnyaschih/jwsdk/wiki/ru\">jWidget SDK</a> and will learn how to use CSS-preprocessor\n<a href=\"http://learnboost.github.io/stylus/\">Stylus</a> to make slicing easier and more convenient.</p>\n","title":"Part 6. Collection synchronizers"});