Ext.data.JsonP.rujwmapper({"guide":"<h1 id='rujwmapper-section-jw.mapper'>JW.Mapper</h1>\n\n<p>Это краткое описание класса на русском языке.</p>\n\n<p>Полная документация на английском: <a href=\"#!/api/JW.Mapper\" rel=\"JW.Mapper\" class=\"docClass\">JW.Mapper</a></p>\n\n<p><code>&lt;T&gt;</code> Наблюдает за изменением значений исходных <a href=\"#!/guide/rujwproperty\">свойств</a> и пересоздает значение целевого\nсвойства с использованием указанных функций. В отличие от <a href=\"#!/guide/rujwfunctor\">JW.Functor</a>, позволяет вам уничтожить\nпредыдущее созданное значение. Кроме того, Mapper сбрасывает целевое свойство в null при своем уничтожении.</p>\n\n<pre><code>var count = new <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>(1);\nvar units = new <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>(\"apples\");\nvar target = new <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>();\n// Следующая команда напечатает в консоль \"Init 1 apples\"\nvar mapper = new <a href=\"#!/api/JW.Mapper\" rel=\"JW.Mapper\" class=\"docClass\">JW.Mapper</a>([ count, units ], {\n    <a href=\"#!/api/JW.Mapper-cfg-target\" rel=\"JW.Mapper-cfg-target\" class=\"docClass\">target</a>: target,\n    <a href=\"#!/api/JW.Mapper-cfg-createValue\" rel=\"JW.Mapper-cfg-createValue\" class=\"docClass\">createValue</a>: function(value, units) {\n        var result = value + \" \" + units;\n        console.log(\"Init \" + result);\n        return result;\n    },\n    <a href=\"#!/api/JW.Mapper-cfg-destroyValue\" rel=\"JW.Mapper-cfg-destroyValue\" class=\"docClass\">destroyValue</a>: function(result, value, units) {\n        console.log(\"Done \" + result);\n    },\n    <a href=\"#!/api/JW.Mapper-cfg-scope\" rel=\"JW.Mapper-cfg-scope\" class=\"docClass\">scope</a>: this\n});\nassert(\"1 apples\", target.<a href=\"#!/api/JW.Property-method-get\" rel=\"JW.Property-method-get\" class=\"docClass\">get</a>());\n// Следующая команда напечатает \"Done 1 apples\" и \"Init 2 apples\"\ncount.<a href=\"#!/api/JW.Property-method-set\" rel=\"JW.Property-method-set\" class=\"docClass\">set</a>(2);\nassert(\"2 apples\", target.<a href=\"#!/api/JW.Property-method-get\" rel=\"JW.Property-method-get\" class=\"docClass\">get</a>());\n// Следующая команда напечатает \"Done 2 apples\"\nmapper.<a href=\"#!/api/JW.Mapper-method-destroy\" rel=\"JW.Mapper-method-destroy\" class=\"docClass\">destroy</a>();\nassert(null, target.<a href=\"#!/api/JW.Property-method-get\" rel=\"JW.Property-method-get\" class=\"docClass\">get</a>());\n</code></pre>\n\n<p>Если целевое свойство в конструктор не передано, то оно создается автоматически.\nОбратите внимание, что в таком случае Mapper агрегирует его.</p>\n\n<pre><code>var source = new <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>(1);\nvar mapper = new <a href=\"#!/api/JW.Mapper\" rel=\"JW.Mapper\" class=\"docClass\">JW.Mapper</a>([ source ], {\n    <a href=\"#!/api/JW.Mapper-cfg-createValue\" rel=\"JW.Mapper-cfg-createValue\" class=\"docClass\">createValue</a>: function(value) {\n        return value + \" apples\";\n    },\n    <a href=\"#!/api/JW.Mapper-cfg-scope\" rel=\"JW.Mapper-cfg-scope\" class=\"docClass\">scope</a>: this\n});\nvar target = mapper.<a href=\"#!/api/JW.Mapper-property-target\" rel=\"JW.Mapper-property-target\" class=\"docClass\">target</a>;\nassert(\"1 apples\", target.<a href=\"#!/api/JW.Property-method-get\" rel=\"JW.Property-method-get\" class=\"docClass\">get</a>());\n</code></pre>\n\n<p>Когда меняется значение исходного свойства, запускается следующий алгоритм:</p>\n\n<ol>\n<li>Создается новое значение</li>\n<li>Целевому свойству присваивается новое значение</li>\n<li>Уничтожается старое значение</li>\n</ol>\n\n\n<p><a href=\"#!/guide/rujwswitcher\">JW.Switcher</a> работает наоборот:</p>\n\n<ol>\n<li>Вызывается метод <a href=\"#!/api/JW.Switcher-cfg-done\" rel=\"JW.Switcher-cfg-done\" class=\"docClass\">done</a></li>\n<li>Вызывается метод <a href=\"#!/api/JW.Switcher-cfg-init\" rel=\"JW.Switcher-cfg-init\" class=\"docClass\">init</a></li>\n</ol>\n\n\n<p>Распространенный сценарий использования Mapper'а - это создание легко заменяемого дочернего компонента по данным:</p>\n\n<pre><code>var MyComponent = function(document) {\n    MyComponent.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.document = document;\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(MyComponent, <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, {\n    // <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>&lt;Document&gt; document;\n\n    renderDocument: function() {\n        return this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(new <a href=\"#!/api/JW.Mapper\" rel=\"JW.Mapper\" class=\"docClass\">JW.Mapper</a>(this.document, {\n            <a href=\"#!/api/JW.Mapper-cfg-createValue\" rel=\"JW.Mapper-cfg-createValue\" class=\"docClass\">createValue</a>: function(document) {\n                return new DocumentView(document);\n            },\n            <a href=\"#!/api/JW.Mapper-cfg-destroyValue\" rel=\"JW.Mapper-cfg-destroyValue\" class=\"docClass\">destroyValue</a>: <a href=\"#!/api/JW-static-method-destroy\" rel=\"JW-static-method-destroy\" class=\"docClass\">JW.destroy</a>,\n            <a href=\"#!/api/JW.Mapper-cfg-scope\" rel=\"JW.Mapper-cfg-scope\" class=\"docClass\">scope</a>: this\n        })).<a href=\"#!/api/JW.Mapper-property-target\" rel=\"JW.Mapper-property-target\" class=\"docClass\">target</a>;\n    }\n});\n\n<a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a>(MyComponent, {\n    main:\n        '&lt;div jwclass=\"my-component\"&gt;' +\n            '&lt;div jwid=\"document\" /&gt;' +\n        '&lt;/div&gt;'\n});\n</code></pre>\n\n<p>Также, Mapper позволяет вам выполнять цепочечные вычисления на базе свойств. Представьте, что у вас есть несколько\nпапок и несколько документов в каждой папке. Одна из папок выбрана, и в каждой папке есть один выбранный документ\nВы хотите создавать представление документа по текущей выбранной папке и текущему выбранному документу в этой\nпапке. Сделайте следующее:</p>\n\n<pre><code>var Folder = function() {\n    Folder.<a href=\"#!/api/JW.Class-method-_super\" rel=\"JW.Class-method-_super\" class=\"docClass\">_super</a>.call(this);\n    this.selectedDocument = this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(new <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>());\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(Folder, <a href=\"#!/api/JW.Class\" rel=\"JW.Class\" class=\"docClass\">JW.Class</a>);\n\nvar App = function() {\n    App.<a href=\"#!/api/JW.Class-method-_super\" rel=\"JW.Class-method-_super\" class=\"docClass\">_super</a>.call(this);\n    this.selectedFolder = this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(new <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>());\n    this.documentView = this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(new <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>());\n    this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(new <a href=\"#!/api/JW.Mapper\" rel=\"JW.Mapper\" class=\"docClass\">JW.Mapper</a>([this.selectedFolder], {\n        <a href=\"#!/api/JW.Mapper-cfg-createValue\" rel=\"JW.Mapper-cfg-createValue\" class=\"docClass\">createValue</a>: function(folder) {\n            return new <a href=\"#!/api/JW.Mapper\" rel=\"JW.Mapper\" class=\"docClass\">JW.Mapper</a>([folder.selectedDocument], {\n                <a href=\"#!/api/JW.Mapper-cfg-target\" rel=\"JW.Mapper-cfg-target\" class=\"docClass\">target</a>: this.documentView,\n                <a href=\"#!/api/JW.Mapper-cfg-createValue\" rel=\"JW.Mapper-cfg-createValue\" class=\"docClass\">createValue</a>: function(document) {\n                    return new DocumentView(folder, document);\n                },\n                <a href=\"#!/api/JW.Mapper-cfg-destroyValue\" rel=\"JW.Mapper-cfg-destroyValue\" class=\"docClass\">destroyValue</a>: <a href=\"#!/api/JW-static-method-destroy\" rel=\"JW-static-method-destroy\" class=\"docClass\">JW.destroy</a>,\n                <a href=\"#!/api/JW.Mapper-cfg-scope\" rel=\"JW.Mapper-cfg-scope\" class=\"docClass\">scope</a>: this\n            });\n        },\n        <a href=\"#!/api/JW.Mapper-cfg-destroyValue\" rel=\"JW.Mapper-cfg-destroyValue\" class=\"docClass\">destroyValue</a>: <a href=\"#!/api/JW-static-method-destroy\" rel=\"JW-static-method-destroy\" class=\"docClass\">JW.destroy</a>,\n        <a href=\"#!/api/JW.Mapper-cfg-scope\" rel=\"JW.Mapper-cfg-scope\" class=\"docClass\">scope</a>: this\n    }));\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(App, <a href=\"#!/api/JW.Class\" rel=\"JW.Class\" class=\"docClass\">JW.Class</a>);\n</code></pre>\n\n<p>По умолчанию, Mapper не вызывает функции, если хотя бы одно из исходных значений равно null. Но вы можете изменить это,\nиспользуя опцию <a href=\"#!/api/JW.Mapper-cfg-acceptNull\" rel=\"JW.Mapper-cfg-acceptNull\" class=\"docClass\">acceptNull</a>.</p>\n","title":"JW.Mapper"});