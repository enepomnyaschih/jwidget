Ext.data.JsonP.rujwevent({"guide":"<h1 id='rujwevent-section-jw.event'>JW.Event</h1>\n\n<p>Это краткое описание класса на русском языке.</p>\n\n<p>Полная документация на английском: <a href=\"#!/api/JW.Event\" rel=\"JW.Event\" class=\"docClass\">JW.Event</a></p>\n\n<p><code>&lt;P&gt;</code></p>\n\n<p>Класс события. Используется для того, чтобы оповещать какие-то объекты (клиенты) о каких-то событиях (например, об\nизменении значения какой-то переменной).</p>\n\n<p><strong>Замечание:</strong> Не забывайте уничтожать события и подписки на события.</p>\n\n<p>Полный пример класса, выбрасывающего события:</p>\n\n<pre><code>var Dispatcher = function() {\n    Dispatcher.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.items = [];\n    this.addEvent = this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(new <a href=\"#!/api/JW.Event\" rel=\"JW.Event\" class=\"docClass\">JW.Event</a>()); // &lt;Dispatcher.EventParams&gt;\n    this.removeEvent = this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(new <a href=\"#!/api/JW.Event\" rel=\"JW.Event\" class=\"docClass\">JW.Event</a>()); // &lt;Dispatcher.EventParams&gt;\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(Dispatcher, <a href=\"#!/api/JW.Class\" rel=\"JW.Class\" class=\"docClass\">JW.Class</a>, {\n    addItem: function(item, index) {\n        this.items.splice(index, 0, item);\n        this.addEvent.<a href=\"#!/api/JW.Event-method-trigger\" rel=\"JW.Event-method-trigger\" class=\"docClass\">trigger</a>({sender: this, item: item, index: index});\n    },\n\n    removeItem: function(index) {\n        var item = this.items.splice(index, 1)[0];\n        this.removeEvent.<a href=\"#!/api/JW.Event-method-trigger\" rel=\"JW.Event-method-trigger\" class=\"docClass\">trigger</a>({sender: this, item: item, index: index});\n    }\n});\n\n// interface Dispatcher.EventParams {\n//     Dispatcher sender;\n//     Object item;\n//     number index;\n// }\n</code></pre>\n\n<p>Пример использования этих событий:</p>\n\n<pre><code>var Client = function(dispatcher) {\n    Client.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(dispatcher.addEvent.<a href=\"#!/api/JW.Event-method-bind\" rel=\"JW.Event-method-bind\" class=\"docClass\">bind</a>(this._onAdd, this));\n    this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(dispatcher.removeEvent.<a href=\"#!/api/JW.Event-method-bind\" rel=\"JW.Event-method-bind\" class=\"docClass\">bind</a>(this._onRemove, this));\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(Client, <a href=\"#!/api/JW.Class\" rel=\"JW.Class\" class=\"docClass\">JW.Class</a>, {\n    _onAdd: function(params) {\n        console.log(params.item, \" item is added at \", params.index);\n    },\n\n    _onRemove: function(params) {\n        console.log(params.item, \" item is removed at \", params.index);\n    }\n});\n</code></pre>\n","title":"JW.Event"});