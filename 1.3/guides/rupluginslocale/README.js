Ext.data.JsonP.rupluginslocale({"guide":"<h1 id='rupluginslocale-section-jw.plugins.locale'>JW.Plugins.Locale</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/rupluginslocale-section-%D0%9F%D0%BE%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-%D0%B7%D0%B0%D0%B4%D0%B0%D1%87%D0%B8'>Постановка задачи</a></li>\n<li><a href='#!/guide/rupluginslocale-section-%D0%9C%D0%B5%D1%82%D0%BE%D0%B4-getstring'>Метод getString</a></li>\n<li><a href='#!/guide/rupluginslocale-section-%D0%9C%D0%B5%D1%82%D0%BE%D0%B4-getproperty'>Метод getProperty</a></li>\n<li><a href='#!/guide/rupluginslocale-section-%D0%98%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%B0-getproperty-%D0%B2-%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82%D0%B0%D1%85'>Использование метода getProperty в компонентах</a></li>\n<li><a href='#!/guide/rupluginslocale-section-%D0%9A%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82-%D0%B4%D0%BB%D1%8F-%D0%BF%D0%B5%D1%80%D0%B5%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BB%D0%BE%D0%BA%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8'>Компонент для переключения локализации</a></li>\n<li><a href='#!/guide/rupluginslocale-section-%D0%94%D0%BE%D1%87%D0%B5%D1%80%D0%BD%D1%8F%D1%8F-%D0%BB%D0%BE%D0%BA%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-%28%D0%BC%D0%B5%D1%82%D0%BE%D0%B4-getsublocale%29'>Дочерняя локализация (метод getSubLocale)</a></li>\n<li><a href='#!/guide/rupluginslocale-section-%D0%9B%D0%BE%D0%BA%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-%D0%BF%D0%BE-%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD%D1%83-%28%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B-expandtemplate-%D0%B8-gettemplateproperty%29'>Локализация по шаблону (методы expandTemplate и getTemplateProperty)</a></li>\n</ol>\n</div>\n\n<p>Это краткое описание класса на русском языке.</p>\n\n<p>Полная документация на английском: <a href=\"#!/api/JW.Plugins.Locale\" rel=\"JW.Plugins.Locale\" class=\"docClass\">JW.Plugins.Locale</a></p>\n\n<p>Класс для управления локализацией приложения.</p>\n\n<h2 id='rupluginslocale-section-%D0%9F%D0%BE%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-%D0%B7%D0%B0%D0%B4%D0%B0%D1%87%D0%B8'>Постановка задачи</h2>\n\n<p>Предположим, в вашем распоряжении есть следующий словарь локализации:</p>\n\n<pre><code>var dictionary = {\n    en: {\n        _lang: \"English\",\n        name: \"Name\",\n        submit: \"Submit\",\n        equipment: {\n            monitor: \"Monitor\",\n            keyboard: \"Keyboard\",\n            mouse: \"Mouse\"\n        },\n        monthsShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                      \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n    },\n    ru: {\n        _lang: \"Русский\",\n        name: \"Имя\",\n        submit: \"Отправить\",\n        equipment: {\n            monitor: \"Монитор\",\n            keyboard: \"Клавиатура\",\n            mouse: \"Мышь\"\n        },\n        monthsShort: [\"Янв\", \"Фев\", \"Мар\", \"Апр\", \"Мая\", \"Июн\",\n                      \"Июл\", \"Авг\", \"Сен\", \"Окт\", \"Ноя\", \"Дек\"]\n    }\n};\n</code></pre>\n\n<p>Вам необходимо реализовать компонент для динамического переключения локализации приложения без перезагрузки страницы.\nС классом <a href=\"#!/api/JW.Plugins.Locale\" rel=\"JW.Plugins.Locale\" class=\"docClass\">JW.Plugins.Locale</a> это делается очень легко. <a href=\"#!/api/JW.Plugins.Locale\" rel=\"JW.Plugins.Locale\" class=\"docClass\">JW.Plugins.Locale</a> работает на базе <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>.</p>\n\n<iframe style=\"border: 1px solid green; padding: 10px;\" width=\"400\" height=\"140\" src=\"http://enepomnyaschih.github.io/mt/1.2/locale.html\"></iframe>\n\n\n<p>Исходный код примера не минимизирован, поэтому вы можете просмотреть его, используя опцию \"Просмотр исходного кода\nфрейма\" в вашем браузере.</p>\n\n<h2 id='rupluginslocale-section-%D0%9C%D0%B5%D1%82%D0%BE%D0%B4-getstring'>Метод getString</h2>\n\n<p>С помощью метода <a href=\"#!/api/JW.Plugins.Locale-method-getString\" rel=\"JW.Plugins.Locale-method-getString\" class=\"docClass\">getString</a> вы можете получить указанную строку в текущей или указанной локализации.</p>\n\n<pre><code>// ... выше объявляем словарь dictionary\n\nfunction assert(x) {\n    if (!x) {\n        throw \"Assertion failed\";\n    }\n}\n\n$(function() {\n    var lang = new <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>(\"en\");\n    var locale = new <a href=\"#!/api/JW.Plugins.Locale\" rel=\"JW.Plugins.Locale\" class=\"docClass\">JW.Plugins.Locale</a>(dictionary, lang);\n    assert(\"Name\" === locale.<a href=\"#!/api/JW.Plugins.Locale-method-getString\" rel=\"JW.Plugins.Locale-method-getString\" class=\"docClass\">getString</a>(\"name\"));\n    assert(\"Monitor\" === locale.<a href=\"#!/api/JW.Plugins.Locale-method-getString\" rel=\"JW.Plugins.Locale-method-getString\" class=\"docClass\">getString</a>(\"equipment.monitor\"));\n    assert(\"Feb\" === locale.<a href=\"#!/api/JW.Plugins.Locale-method-getString\" rel=\"JW.Plugins.Locale-method-getString\" class=\"docClass\">getString</a>([\"monthsShort\", 1]));\n\n    lang.<a href=\"#!/api/JW.Property-method-set\" rel=\"JW.Property-method-set\" class=\"docClass\">set</a>(\"ru\");\n    assert(\"Имя\" === locale.<a href=\"#!/api/JW.Plugins.Locale-method-getString\" rel=\"JW.Plugins.Locale-method-getString\" class=\"docClass\">getString</a>(\"name\"));\n    assert(\"Монитор\" === locale.<a href=\"#!/api/JW.Plugins.Locale-method-getString\" rel=\"JW.Plugins.Locale-method-getString\" class=\"docClass\">getString</a>(\"equipment.monitor\"));\n    assert(\"Фев\" === locale.<a href=\"#!/api/JW.Plugins.Locale-method-getString\" rel=\"JW.Plugins.Locale-method-getString\" class=\"docClass\">getString</a>([\"monthsShort\", 1]));\n\n    assert(\"English\" === locale.<a href=\"#!/api/JW.Plugins.Locale-method-getString\" rel=\"JW.Plugins.Locale-method-getString\" class=\"docClass\">getString</a>(\"en\", \"_lang\"));\n    assert(\"Русский\" === locale.<a href=\"#!/api/JW.Plugins.Locale-method-getString\" rel=\"JW.Plugins.Locale-method-getString\" class=\"docClass\">getString</a>(\"ru\", \"_lang\"));\n});\n</code></pre>\n\n<h2 id='rupluginslocale-section-%D0%9C%D0%B5%D1%82%D0%BE%D0%B4-getproperty'>Метод getProperty</h2>\n\n<p>Если локализацию приложения необходимо переключать динамически, то одного метода <a href=\"#!/api/JW.Plugins.Locale-method-getString\" rel=\"JW.Plugins.Locale-method-getString\" class=\"docClass\">getString</a> не достаточно.\nВоспользуемся методом <a href=\"#!/api/JW.Plugins.Locale-method-getProperty\" rel=\"JW.Plugins.Locale-method-getProperty\" class=\"docClass\">getProperty</a>, который формирует новый экземпляр <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>, содержащий указанную строку в\nтекущей локализации и обновляющий ее при изменении текущей локализации.</p>\n\n<pre><code>$(function() {\n    var lang = new <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>(\"en\");\n    var locale = new <a href=\"#!/api/JW.Plugins.Locale\" rel=\"JW.Plugins.Locale\" class=\"docClass\">JW.Plugins.Locale</a>(dictionary, lang);\n\n    var submitProperty = locale.<a href=\"#!/api/JW.Plugins.Locale-method-getProperty\" rel=\"JW.Plugins.Locale-method-getProperty\" class=\"docClass\">getProperty</a>(\"submit\");\n    assert(\"Submit\" === submitProperty.<a href=\"#!/api/JW.Property-method-get\" rel=\"JW.Property-method-get\" class=\"docClass\">get</a>());\n\n    lang.<a href=\"#!/api/JW.Property-method-set\" rel=\"JW.Property-method-set\" class=\"docClass\">set</a>(\"ru\");\n    assert(\"Отправить\" === submitProperty.<a href=\"#!/api/JW.Property-method-get\" rel=\"JW.Property-method-get\" class=\"docClass\">get</a>());\n\n    submitProperty.<a href=\"#!/api/JW.Property-method-destroy\" rel=\"JW.Property-method-destroy\" class=\"docClass\">destroy</a>(); // если свойство больше не нужно, его необходимо уничтожить\n});\n</code></pre>\n\n<h2 id='rupluginslocale-section-%D0%98%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%B0-getproperty-%D0%B2-%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82%D0%B0%D1%85'>Использование метода getProperty в компонентах</h2>\n\n<p>Предположим, вам нужно вывести строку \"name\" в качестве метки внутри некоторой формы и \"submit\" в качестве текста для\nкнопки отправления формы. Воспользуемся хелперами <a href=\"#!/api/JW.UI.TextUpdater\" rel=\"JW.UI.TextUpdater\" class=\"docClass\">JW.UI.TextUpdater</a> и <a href=\"#!/api/JW.UI.ValueUpdater\" rel=\"JW.UI.ValueUpdater\" class=\"docClass\">JW.UI.ValueUpdater</a>.</p>\n\n<pre><code>var Form = function(locale) {\n    Form.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.locale = locale; // <a href=\"#!/api/JW.Plugins.Locale\" rel=\"JW.Plugins.Locale\" class=\"docClass\">JW.Plugins.Locale</a>\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(Form, <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, {\n    renderNameLabel: function(el) {\n        var text = this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(this.locale.<a href=\"#!/api/JW.Plugins.Locale-method-getProperty\" rel=\"JW.Plugins.Locale-method-getProperty\" class=\"docClass\">getProperty</a>(\"name\"));\n        this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(new <a href=\"#!/api/JW.UI.TextUpdater\" rel=\"JW.UI.TextUpdater\" class=\"docClass\">JW.UI.TextUpdater</a>(el, text));\n    },\n\n    renderSubmit: function(el) {\n        var text = this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(this.locale.<a href=\"#!/api/JW.Plugins.Locale-method-getProperty\" rel=\"JW.Plugins.Locale-method-getProperty\" class=\"docClass\">getProperty</a>(\"submit\"));\n        this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(new <a href=\"#!/api/JW.UI.ValueUpdater\" rel=\"JW.UI.ValueUpdater\" class=\"docClass\">JW.UI.ValueUpdater</a>(el, text));\n    }\n});\n\n<a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a>(Form, {\n    main:\n        '&lt;form&gt;' +\n            '&lt;label&gt;&lt;span jwid=\"name-label\"&gt;&lt;/span&gt;&lt;input type=\"text\"&gt;&lt;/label&gt;' +\n            '&lt;input jwid=\"submit\" type=\"submit\"&gt;' +\n        '&lt;/form&gt;'\n});\n</code></pre>\n\n<p>Протестируем нашу форму.</p>\n\n<pre><code>$(function() {\n    var lang = new <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>(\"en\");\n    var locale = new <a href=\"#!/api/JW.Plugins.Locale\" rel=\"JW.Plugins.Locale\" class=\"docClass\">JW.Plugins.Locale</a>(dictionary, lang);\n\n    var form = new Form(locale).<a href=\"#!/api/JW.UI.Component-method-renderTo\" rel=\"JW.UI.Component-method-renderTo\" class=\"docClass\">renderTo</a>(\"body\");\n\n    // Спустя 2 секунды меняем локализацию на русскую\n    setTimeout(function() { lang.<a href=\"#!/api/JW.Property-method-set\" rel=\"JW.Property-method-set\" class=\"docClass\">set</a>(\"ru\"); }, 2000);\n});\n</code></pre>\n\n<h2 id='rupluginslocale-section-%D0%9A%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82-%D0%B4%D0%BB%D1%8F-%D0%BF%D0%B5%D1%80%D0%B5%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BB%D0%BE%D0%BA%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8'>Компонент для переключения локализации</h2>\n\n<p>Теперь нам нужен нормальный компонент для переключения локализации. Воспользуемся радиокнопками и\nхелперами <a href=\"#!/api/JW.UI.RadioUpdater\" rel=\"JW.UI.RadioUpdater\" class=\"docClass\">JW.UI.RadioUpdater</a> и <a href=\"#!/api/JW.UI.RadioListener\" rel=\"JW.UI.RadioListener\" class=\"docClass\">JW.UI.RadioListener</a>.</p>\n\n<pre><code>var LocaleSwitch = function(locale) {\n    LocaleSwitch.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.locale = locale; // <a href=\"#!/api/JW.Plugins.Locale\" rel=\"JW.Plugins.Locale\" class=\"docClass\">JW.Plugins.Locale</a>\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(LocaleSwitch, <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, {\n    renderRoot: function() {\n        return <a href=\"#!/api/JW.Array-method-S-map\" rel=\"JW.Array-method-S-map\" class=\"docClass\">JW.Array.$map</a>(this.locale.getLanguages(), function(lang) {\n            return this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(new LocaleSwitchItem(this.locale, lang));\n        }, this);\n    },\n\n    afterRender: function() {\n        this.<a href=\"#!/api/JW.Class-method-_super\" rel=\"JW.Class-method-_super\" class=\"docClass\">_super</a>();\n        this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(new <a href=\"#!/api/JW.UI.RadioUpdater\" rel=\"JW.UI.RadioUpdater\" class=\"docClass\">JW.UI.RadioUpdater</a>(this.<a href=\"#!/api/JW.UI.Component-property-el\" rel=\"JW.UI.Component-property-el\" class=\"docClass\">el</a>, \"lang\", this.locale.<a href=\"#!/api/JW.Plugins.Locale-property-lang\" rel=\"JW.Plugins.Locale-property-lang\" class=\"docClass\">lang</a>));\n        this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(new <a href=\"#!/api/JW.UI.RadioListener\" rel=\"JW.UI.RadioListener\" class=\"docClass\">JW.UI.RadioListener</a>(this.<a href=\"#!/api/JW.UI.Component-property-el\" rel=\"JW.UI.Component-property-el\" class=\"docClass\">el</a>, \"lang\", this.locale.<a href=\"#!/api/JW.Plugins.Locale-property-lang\" rel=\"JW.Plugins.Locale-property-lang\" class=\"docClass\">lang</a>));\n    }\n});\n\n<a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a>(LocaleSwitch, {\n    main: '&lt;form&gt;&lt;/form&gt;'\n});\n\n//--------\n\nvar LocaleSwitchItem = function(locale, lang) {\n    LocaleSwitchItem.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.locale = locale; // <a href=\"#!/api/JW.Plugins.Locale\" rel=\"JW.Plugins.Locale\" class=\"docClass\">JW.Plugins.Locale</a>\n    this.lang = lang; // string\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(LocaleSwitchItem, <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, {\n    renderInput: function(el) {\n        el.attr(\"value\", this.lang);\n    },\n\n    renderLabel: function(el) {\n        el.text(this.locale.<a href=\"#!/api/JW.Plugins.Locale-method-getString\" rel=\"JW.Plugins.Locale-method-getString\" class=\"docClass\">getString</a>(this.lang, \"_lang\"));\n    }\n});\n\n<a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a>(LocaleSwitchItem, {\n    main:\n        '&lt;div&gt;&lt;label&gt;' +\n            '&lt;input type=\"radio\" name=\"lang\" jwid=\"input\"&gt;&lt;span jwid=\"label\"&gt;&lt;/span&gt;' +\n        '&lt;/label&gt;&lt;/div&gt;'\n});\n</code></pre>\n\n<p>Попробуем протестировать его.</p>\n\n<pre><code>$(function() {\n    var lang = new <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>(\"en\");\n    var locale = new <a href=\"#!/api/JW.Plugins.Locale\" rel=\"JW.Plugins.Locale\" class=\"docClass\">JW.Plugins.Locale</a>(dictionary, lang);\n    var switcher = new LocaleSwitch(locale).<a href=\"#!/api/JW.UI.Component-method-renderTo\" rel=\"JW.UI.Component-method-renderTo\" class=\"docClass\">renderTo</a>(\"body\");\n});\n</code></pre>\n\n<h2 id='rupluginslocale-section-%D0%94%D0%BE%D1%87%D0%B5%D1%80%D0%BD%D1%8F%D1%8F-%D0%BB%D0%BE%D0%BA%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-%28%D0%BC%D0%B5%D1%82%D0%BE%D0%B4-getsublocale%29'>Дочерняя локализация (метод getSubLocale)</h2>\n\n<p>Посмотрим, как еще можно упростить работу с локализацией. Иногда некоторому компоненту нужна лишь некоторая часть\nлокализации (например, строки в \"equipment\"), и, чтобы не писать каждый раз длинные выражения, заведем дочерний\nобъект локализации.</p>\n\n<pre><code>var EquipmentSelector = function(locale) {\n    EquipmentSelector.<a href=\"#!/api/JW.Class-static-property-_super\" rel=\"JW.Class-static-property-_super\" class=\"docClass\">_super</a>.call(this);\n    this.locale = locale; // <a href=\"#!/api/JW.Plugins.Locale\" rel=\"JW.Plugins.Locale\" class=\"docClass\">JW.Plugins.Locale</a>, дочерний объект локализации\n};\n\n<a href=\"#!/api/JW-static-method-extend\" rel=\"JW-static-method-extend\" class=\"docClass\">JW.extend</a>(EquipmentSelector, <a href=\"#!/api/JW.UI.Component\" rel=\"JW.UI.Component\" class=\"docClass\">JW.UI.Component</a>, {\n    renderMonitor: function(el) {\n        var text = this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(this.locale.<a href=\"#!/api/JW.Plugins.Locale-method-getProperty\" rel=\"JW.Plugins.Locale-method-getProperty\" class=\"docClass\">getProperty</a>(\"monitor\"));\n        this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(new <a href=\"#!/api/JW.UI.TextUpdater\" rel=\"JW.UI.TextUpdater\" class=\"docClass\">JW.UI.TextUpdater</a>(el, text));\n    },\n\n    renderKeyboard: function(el) {\n        var text = this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(this.locale.<a href=\"#!/api/JW.Plugins.Locale-method-getProperty\" rel=\"JW.Plugins.Locale-method-getProperty\" class=\"docClass\">getProperty</a>(\"keyboard\"));\n        this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(new <a href=\"#!/api/JW.UI.TextUpdater\" rel=\"JW.UI.TextUpdater\" class=\"docClass\">JW.UI.TextUpdater</a>(el, text));\n    },\n\n    renderMouse: function(el) {\n        var text = this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(this.locale.<a href=\"#!/api/JW.Plugins.Locale-method-getProperty\" rel=\"JW.Plugins.Locale-method-getProperty\" class=\"docClass\">getProperty</a>(\"mouse\"));\n        this.<a href=\"#!/api/JW.Class-method-own\" rel=\"JW.Class-method-own\" class=\"docClass\">own</a>(new <a href=\"#!/api/JW.UI.TextUpdater\" rel=\"JW.UI.TextUpdater\" class=\"docClass\">JW.UI.TextUpdater</a>(el, text));\n    }\n});\n\n<a href=\"#!/api/JW.UI-static-method-template\" rel=\"JW.UI-static-method-template\" class=\"docClass\">JW.UI.template</a>(EquipmentSelector, {\n    main:\n        '&lt;form&gt;' +\n            '&lt;button jwid=\"monitor\"&gt;&lt;/button&gt;' +\n            '&lt;button jwid=\"keyboard\"&gt;&lt;/button&gt;' +\n            '&lt;button jwid=\"mouse\"&gt;&lt;/button&gt;' +\n        '&lt;/form&gt;'\n});\n</code></pre>\n\n<p>Воспользуемся методом <a href=\"#!/api/JW.Plugins.Locale-method-getSubLocale\" rel=\"JW.Plugins.Locale-method-getSubLocale\" class=\"docClass\">getSubLocale</a>, чтобы сформировать искомый дочерний объект локализации.</p>\n\n<pre><code>$(function() {\n    var lang = new <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>(\"en\");\n    var locale = new <a href=\"#!/api/JW.Plugins.Locale\" rel=\"JW.Plugins.Locale\" class=\"docClass\">JW.Plugins.Locale</a>(dictionary, lang);\n    var equipmentLocale = locale.<a href=\"#!/api/JW.Plugins.Locale-method-getSubLocale\" rel=\"JW.Plugins.Locale-method-getSubLocale\" class=\"docClass\">getSubLocale</a>(\"equipment\");\n    var equipmentSelector = new EquipmentSelector(equipmentLocale).<a href=\"#!/api/JW.UI.Component-method-renderTo\" rel=\"JW.UI.Component-method-renderTo\" class=\"docClass\">renderTo</a>(\"body\");\n});\n</code></pre>\n\n<p>Как видите, внутри компонента EquipmentSelector мы теперь можем кратко записывать ключ локализации:</p>\n\n<ul>\n<li>\"monitor\", а не \"equipment.monitor\"</li>\n<li>\"keyboard\", а не \"equipment.keyboard\"</li>\n<li>\"mouse\", а не \"equipment.mouse\"</li>\n</ul>\n\n\n<h2 id='rupluginslocale-section-%D0%9B%D0%BE%D0%BA%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-%D0%BF%D0%BE-%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD%D1%83-%28%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B-expandtemplate-%D0%B8-gettemplateproperty%29'>Локализация по шаблону (методы expandTemplate и getTemplateProperty)</h2>\n\n<p>Даты форматировать непросто. Во-первых, строка даты зависит от маски (например, \"mmm'yy\"). Во-вторых - от текущей локализации\n(\"Jan\" или \"Янв\"). Для форматирования дат воспользуемся методом форматирования строки по шаблону.</p>\n\n<pre><code>$(function() {\n    var lang = new <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>(\"en\");\n    var locale = new <a href=\"#!/api/JW.Plugins.Locale\" rel=\"JW.Plugins.Locale\" class=\"docClass\">JW.Plugins.Locale</a>(dictionary, lang);\n    assert(\"Jan'10\" === locale.<a href=\"#!/api/JW.Plugins.Locale-method-expandTemplate\" rel=\"JW.Plugins.Locale-method-expandTemplate\" class=\"docClass\">expandTemplate</a>(\"${monthsShort.0}'10\");\n});\n</code></pre>\n\n<p>Метод <a href=\"#!/api/JW.Plugins.Locale-static-method-formatDate\" rel=\"JW.Plugins.Locale-static-method-formatDate\" class=\"docClass\">JW.Plugins.Locale.formatDate</a> позволяет сформировать шаблон для форматирования даты.</p>\n\n<pre><code>$(function() {\n    var lang = new <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>(\"en\");\n    var locale = new <a href=\"#!/api/JW.Plugins.Locale\" rel=\"JW.Plugins.Locale\" class=\"docClass\">JW.Plugins.Locale</a>(dictionary, lang);\n    var date = new Date(2010, 0, 1);\n    var format = <a href=\"#!/api/JW.Plugins.Locale-static-method-formatDate\" rel=\"JW.Plugins.Locale-static-method-formatDate\" class=\"docClass\">JW.Plugins.Locale.formatDate</a>(date, \"mmm'yy\");\n    assert(\"Jan'10\" === locale.<a href=\"#!/api/JW.Plugins.Locale-method-expandTemplate\" rel=\"JW.Plugins.Locale-method-expandTemplate\" class=\"docClass\">expandTemplate</a>(format);\n});\n</code></pre>\n\n<p>Метод <a href=\"#!/api/JW.Plugins.Locale-method-getTemplateProperty\" rel=\"JW.Plugins.Locale-method-getTemplateProperty\" class=\"docClass\">getTemplateProperty</a> позволяет наладить динамическое изменение строки даты при изменении текущей локализации.</p>\n\n<pre><code>$(function() {\n    var lang = new <a href=\"#!/api/JW.Property\" rel=\"JW.Property\" class=\"docClass\">JW.Property</a>(\"en\");\n    var locale = new <a href=\"#!/api/JW.Plugins.Locale\" rel=\"JW.Plugins.Locale\" class=\"docClass\">JW.Plugins.Locale</a>(dictionary, lang);\n\n    var date = new Date(2010, 0, 1);\n    var format = <a href=\"#!/api/JW.Plugins.Locale-static-method-formatDate\" rel=\"JW.Plugins.Locale-static-method-formatDate\" class=\"docClass\">JW.Plugins.Locale.formatDate</a>(date, \"mmm'yy\");\n    var dateProperty = locale.<a href=\"#!/api/JW.Plugins.Locale-method-getTemplateProperty\" rel=\"JW.Plugins.Locale-method-getTemplateProperty\" class=\"docClass\">getTemplateProperty</a>(format);\n    assert(\"Jan'10\" === dateProperty.<a href=\"#!/api/JW.Property-method-get\" rel=\"JW.Property-method-get\" class=\"docClass\">get</a>());\n\n    lang.<a href=\"#!/api/JW.Property-method-set\" rel=\"JW.Property-method-set\" class=\"docClass\">set</a>(\"ru\");\n    assert(\"Янв'10\" === dateProperty.<a href=\"#!/api/JW.Property-method-get\" rel=\"JW.Property-method-get\" class=\"docClass\">get</a>());\n\n    dateProperty.<a href=\"#!/api/JW.Property-method-destroy\" rel=\"JW.Property-method-destroy\" class=\"docClass\">destroy</a>();\n});\n</code></pre>\n\n<p>Теперь по аналогии с предыдущими примерами можно легко привязать текст внутри любого DOM-элемента к dateProperty.</p>\n","title":"JW.Plugins.Locale"});