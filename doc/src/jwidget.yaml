description: |
  <p>Core jWidget utilities.</p>

symbols:
  Binding:
    type: 'enum'
    description: |
      <p>jWidget binding modes. All options have shorthands, i.e. <code>Binding.UPDATE</code> can be imported
      separately as <code>{UPDATE}</code>.</p>
      <dl class="row">
        <dt class="col-lg-2 col-sm-3">UPDATE = 1</dt>
        <dd class="col-lg-10 col-sm-9">
          <p>Bind element attribute to property.</p>
          <pre>
          // Bind element value to property
          %bindVal(el, property, %UPDATE);</pre>
          <p>Always used as default binding. Hence, the next code is almost equivalent:</p>
          <pre>
          %bindVal(el, property);</pre>
          <p>Please prefer the second approach, because the first one takes %IProperty as an argument whereas
          %Bindable is enough for the second one.</p>
        </dd>
        <dt class="col-lg-2 col-sm-3">WATCH = 2</dt>
        <dd class="col-lg-10 col-sm-9">
          <p>Bind property to element attribute.</p>
          <pre>
          // Bind property to element value
          %bindVal(el, property, %WATCH);</pre>
          <p>Always supplied with a no-argument method, which creates the property automatically.</p>
          <pre>
          // Watch element value
          const property = %bindVal(el);</pre>
        </dd>
        <dt class="col-lg-2 col-sm-3">TWOWAY = 3</dt>
        <dd class="col-lg-10 col-sm-9">
          <p>Bind element attribute and property to each other.</p>
          <p>%UPDATE-binding is applied first, %WATCH is applied last.</p>
          <pre>
          // Assign element value to property and setup two-way binding
          %bindVal(el, property, %TWOWAY);</pre>
        </dd>
      </dl>
    references:
      UPDATE: {}
      WATCH: {}
      TWOWAY: {}

  cmp:
    signature: |
      (x: any, y: any): number
    params:
      x: First value to compare.
      y: Second value to compare.
    returns: One of {-1, 0, 1} as comparison result.
    description: |
      <p>Universal and sophisticated comparer for array sorting. The same as %smartCmp, but without third argument.
      It comes in handy when a function takes a callback accepting 3 or more arguments - in this case, arguments of
      %smartCmp won't match the callback definition:</p>
      <pre>
      const array = new %BindableArray(["q", "w", "e"]);
      array.%sortComparing(%cmp); // ok
      array.%sortComparing(%smartCmp); // compilation error: callback arguments don't match
      </pre>
    references:
      sortComparing:
        file: jwidget/IBindableArray
        member: sortComparing

  smartCmp:
    signature: |
      (x: any, y: any, config?: %CmpConfig): number
    params:
      x: First value to compare.
      y: Second value to compare.
      config: Optional configuration.
    returns: One of {-1, 0, 1} as comparison result.
    description: |
      <p>Universal and sophisticated comparer for array sorting. Broadly speaking, it:</p>
      <ul>
        <li>Returns 1, if <code>%x > %y</code></li>
        <li>Returns -1, if <code>%x < %y</code></li>
        <li>Returns 0, if <code>%x == %y</code></li>
      </ul>
      <p>In reality, it supports the next features:</p>
      <ul>
        <li>Comparing of booleans, numbers, strings, subarrays, null, undefined.</li>
        <li>Determined linear order, even for mixed arrays.</li>
        <li>Optionally, case insensitive comparing for strings.</li>
        <li>Optionally, comparison of digit sequences in strings as numbers.</li>
      </ul>
      <p>Values of different types are compared as follows: undefined &lt; null &lt; array &lt; boolean &lt;
        number &lt; string.</p>
      <h5>Example</h5>
      <p>Sort by color descending first, and by status ascending last. Both parameters are optional.</p>
      <pre>
      rows.sort((x, y) => {
          return %smartCmp(x.color == null, y.color == null) ||
                -%smartCmp(x.color, y.color) ||
                 %smartCmp(x.status == null, y.status == null) ||
                 %smartCmp(x.status, y.status);
      });
      </pre>

  CmpConfig:
    simple: true
    kind: interface
    description: |
      Optional configuration of %smartCmp function.
    properties:
      caseInsensitive:
        type: boolean
        optional: true
        modifiers: readonly
        description: |
          <p>Ignore case when comparing strings.</p>
          <h5>Example</h5>
          <pre>
          expect(smartCmp("aB", "Ab")).toBe(1);
          expect(smartCmp("aB", "Ab", {%caseInsensitive: true})).toBe(0);
          </pre>

      compareNumbersInStrings:
        type: boolean
        optional: true
        modifiers: readonly
        description: |
          <p>Compare digit sequences as numbers when comparing strings.</p>
          <h5>Example</h5>
          <pre>
          expect(%smartCmp("ab2", "ab10")).toBe(1);
          expect(%smartCmp("ab2", "ab10", {%compareNumbersInStrings: true})).toBe(-1);
          </pre>

  destroy:
    signature: |
      (obj: any): void
    params:
      obj: Object to destroy.
    returns: undefined.
    description: |
      <p>Calls %destroy method of %obj if available. Can be used in configuration of any mapper.</p>
      <pre>
      const views = %startMappingArray(models, model => new View(model), {%destroy});
      </pre>
