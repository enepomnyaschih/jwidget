symbols:
  default:
    signature: |
      (el: %CheckedWatcherElement, prop: "checked"): %DestroyableBindable<boolean>
      (el: %PropUpdaterElement, prop: string, property: %Bindable<boolean>, binding?: %UPDATE): %Destroyable
      (el: %CheckedWatcherElement, prop: "checked", property: %IProperty<boolean>, binding: %WATCH): %Destroyable
      (el: %PropUpdaterElement & %CheckedWatcherElement, prop: "checked", property: %IProperty<boolean>, binding: %TWOWAY): %Destroyable
    params:
      el: DOM element.
      prop: Name of DOM element property.
      property: Property value to read and/or write.
      binding: Binding direction.
    returns: Binding object or bound property. You must %destroy it to stop the synchronization.
    description: |
      <p>Watches boolean property modification and updates the specified property of the DOM element and/or vice
      versa.</p>
      <p>One signature returns a boolean property containing current checkbox state and starts watching for its
      modification. Only "checked" prop is supported in this case.</p>
      <pre>
      // Watch checkbox state
      const property = %bindProp(el, "checked");
      </pre>
      <p>Second signature watches boolean property modification and updates the specified property of the DOM
      element.</p>
      <pre>
      // Bind element state to property
      %bindProp(el, "disabled", property);
      </pre>
      %example:bindProp1
      <p>Third signature allows you to setup a reverse or two-way binding.</p>
      <pre>
      %bindProp(el, "disabled", property, %TWOWAY);
      </pre>
      %example:bindProp2
      <p>The function returns a binding object. If you need to stop the synchronization, %destroy it. This is not neccessary
      if you work with a private property and DOM element as in the example above. However, if you work with an
      external model or DOM element (e.g. they get passed to the constructor of the component), you must take care of
      the binding destruction, because life time of these objects can be longer than the life time of your
      component. The easiest way to do it is to %own the binding:</p>
      <pre>
      this.%own(%bindProp(el, "disabled", property));
      </pre>

  CheckedWatcherElement:
    kind: interface
    simple: true
    description: |
      <p>Subset of %JQuery element methods necessary for some of %bindProp binding variation implementations.</p>
    methods:
      prop:
        signature: |
          (prop: "checked"): boolean
        description: |
          <p>See %JQuery.%prop.</p>
        references:
          prop:
            href: https://api.jquery.com/prop/

      on:
        signature: |
          (event: "change", callback: () => void)
        description: |
          <p>See %JQuery.%on.</p>
        references:
          on:
            href: https://api.jquery.com/on/

      off:
        signature: |
          (event: "change", callback: () => void)
        description: |
          <p>See %JQuery.%off.</p>
        references:
          off:
            href: https://api.jquery.com/off/

  PropUpdaterElement:
    kind: interface
    simple: true
    description: |
      <p>Subset of %JQuery element methods necessary for some of %bindProp binding variation implementations.</p>
    methods:
      prop:
        signature: |
          (prop: string, value: boolean)
        description: |
          <p>See %JQuery.%prop.</p>
        references:
          prop:
            href: https://api.jquery.com/prop/

      change:
        signature: |
          ()
        description: |
          <p>See %JQuery.%change.</p>
        references:
          change:
            href: https://api.jquery.com/change/
