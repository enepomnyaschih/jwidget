symbols:
  default:
    signature: |
      (el: %CheckedWatcherElement, prop: "checked"): %DestroyableBindable<boolean>
      (el: %PropUpdaterElement, prop: string, property: %Bindable<boolean>, binding?: %UPDATE): %Destroyable
      (el: %CheckedWatcherElement, prop: "checked", property: %IProperty<boolean>, binding: %WATCH): %Destroyable
      (el: %PropUpdaterElement & %CheckedWatcherElement, prop: "checked", property: %IProperty<boolean>, binding: %TWOWAY): %Destroyable
    params:
      el: DOM element.
      prop: '%JQuery property name.'
      property: '%Property.'
      binding: Binding direction.
    returns: Binding object or bound property. You must %destroy it to stop the synchronization.
    description: |
      <p>Binds a %JQuery property of a DOM element to a boolean %Property and/or back.</p>
      <p>The first signature returns a new boolean %Property bound to checkbox state of a DOM element.
      Only "checked" %JQuery property is supported in this case.</p>
      <pre>
      // Watch checkbox state
      const property = %bindProp(el, "checked");
      </pre>
      <p>The second signature binds a %JQuery property of a DOM element to a boolean %Property.</p>
      <pre>
      // Bind element state to property
      %bindProp(el, "disabled", property);
      </pre>
      %example:bindProp1
      <p>The third signature binds a boolean %Property to a %JQuery property of a DOM element.
      Only "checked" %JQuery property is supported in this case.</p>
      <pre>
      %bindProp(el, "checked", property, %WATCH);
      </pre>
      <p>The fourth signature sets up a two-way binding. Initially, the boolean property value prevails.
      Only "checked" %JQuery property is supported in this case.</p>
      <pre>
      %bindProp(el, "checked", property, %TWOWAY);
      </pre>
      %example:bindProp2
      <p>The function returns a binding object. If you need to stop the synchronization, %destroy it. This is not necessary
      if you work with a private property and a private DOM element as in the example above. However, if you work with an
      external model or an external DOM element (e.g. they get passed to the constructor of the component), you must take care of
      the binding destruction, because life time of these objects can be longer than the life time of your
      component. The easiest way to do it is to %own the binding:</p>
      <pre>
      this.%own(%bindProp(el, "disabled", property));
      </pre>

  CheckedWatcherElement:
    kind: interface
    simple: true
    description: |
      <p>Subset of %JQuery element methods necessary for some of %bindProp binding variation implementations.</p>
    methods:
      prop:
        signature: |
          (prop: "checked"): boolean
        description: |
          <p>See %JQuery.%prop.</p>
        references:
          prop:
            href: https://api.jquery.com/prop/

      on:
        signature: |
          (event: "change", callback: () => void)
        description: |
          <p>See %JQuery.%on.</p>
        references:
          on:
            href: https://api.jquery.com/on/

      off:
        signature: |
          (event: "change", callback: () => void)
        description: |
          <p>See %JQuery.%off.</p>
        references:
          off:
            href: https://api.jquery.com/off/

  PropUpdaterElement:
    kind: interface
    simple: true
    description: |
      <p>Subset of %JQuery element methods necessary for some of %bindProp binding variation implementations.</p>
    methods:
      prop:
        signature: |
          (prop: string, value: boolean)
        description: |
          <p>See %JQuery.%prop.</p>
        references:
          prop:
            href: https://api.jquery.com/prop/

      change:
        signature: |
          ()
        description: |
          <p>See %JQuery.%change.</p>
        references:
          change:
            href: https://api.jquery.com/change/
