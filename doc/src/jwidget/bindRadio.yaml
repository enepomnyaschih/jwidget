symbols:
  default:
    signature: |
      (el: %RadioWatcherField, name: string): %DestroyableBindable<string>
      (el: %RadioUpdaterField, name: string, property: %Bindable<string>, binding?: %UPDATE): %Destroyable
      (el: %RadioWatcherField, name: string, property: %IProperty<string>, binding?: %WATCH): %Destroyable
      (el: %RadioField, name: string, property: %IProperty<string>, binding?: %TWOWAY): %Destroyable
    params:
      el: DOM element.
      name: Value of "name" attribute in radio button elements.
      property: Radio button value to read and/or write.
      binding: Binding direction.
    returns: Binding object or bound property. You must %destroy it to stop the synchronization.
    description: |
      <p>Watches string property modification and updates the radio group selection and/or vice versa.</p>
      <p>One signature returns a string property containing current radio group selection and starts watching for its
      modification.</p>
      <p>Notice that the function binds an event listener to a container element and uses bubbling mechanism to detect
      the selection modification. That's why you must avoid bubbling interruption in child elements of the container.
      All radios must have the same "name" attribute value. If neighter radio is selected, property is set to null.</p>
      <pre>
      // Watch radio button selection
      const color = %bindRadio(el, "color");
      </pre>
      %example:bindClass2
      <p>Second signature watches string property modification and updates the radio group selection.</p>
      <pre>
      // Bind radio group selection to property
      %bindRadio(el, "letter", value);
      </pre>
      %example:bindRadio1
      <p>Third signature allows you to setup a reverse or two-way binding.</p>
      <pre>
      %bindRadio(el, "first", value, %TWOWAY);
      </pre>
      %example:bindRadio2
      <p>The function returns a binding object. If you need to stop the synchronization, %destroy it. This is not neccessary
      if you work with a private property and DOM element as in the example above. However, if you work with an
      external model or DOM element (e.g. they get passed to the constructor of the component), you must take care of
      the binding destruction, because life time of these objects can be longer than the life time of your
      component. The easiest way to do it is to %own the binding:</p>
      <pre>
      this.%own(%bindRadio(el, "letter", value));
      </pre>

  RadioUpdaterField:
    kind: interface
    simple: true
    description: |
      <p>Subset of %JQuery element methods necessary for some of %bindRadio binding variation implementations.</p>
    methods:
      find:
        signature: |
          (selector: string): %RadioUpdaterButton
        description: |
          <p>See %JQuery.%find.</p>
        references:
          find:
            href: https://api.jquery.com/find/

  RadioUpdaterButton:
    kind: interface
    simple: true
    description: |
      <p>Subset of %JQuery element methods necessary for some of %bindRadio binding variation implementations.</p>
    properties:
      length:
        type: number
        modifiers: readonly
        description: |
          <p>See %JQuery.%length.</p>

    methods:
      is:
        signature: |
          (selector: ":checked"): boolean
        description: |
          <p>See %JQuery.%is.</p>
        references:
          is:
            href: https://api.jquery.com/is/

      prop:
        signature: |
          (prop: "checked", value: boolean)
        description: |
          <p>See %JQuery.%prop.</p>
        references:
          prop:
            href: https://api.jquery.com/prop/

      change:
        signature: |
          ()
        description: |
          <p>See %JQuery.%change.</p>
        references:
          change:
            href: https://api.jquery.com/change/

  RadioWatcherField:
    kind: interface
    simple: true
    description: |
      <p>Subset of %JQuery element methods necessary for some of %bindRadio binding variation implementations.</p>
    methods:
      find:
        signature: |
          (selector: string): RadioWatcherButton
        description: |
          <p>See %JQuery.%find.</p>
        references:
          find:
            href: https://api.jquery.com/find/

      on:
        signature: |
          (event: "change", selector: string, callback: () => void)
        description: |
          <p>See %JQuery.%on.</p>
        references:
          on:
            href: https://api.jquery.com/on/

      off:
        signature: |
          (event: "change", selector: string, callback: () => void)
        description: |
          <p>See %JQuery.%off.</p>
        references:
          off:
            href: https://api.jquery.com/off/

  RadioWatcherButton:
    kind: interface
    simple: true
    description: |
      <p>Subset of %JQuery element methods necessary for some of %bindRadio binding variation implementations.</p>
    properties:
      length:
        type: number
        modifiers: readonly
        description: |
          <p>See %JQuery.%length.</p>

    methods:
      attr:
        signature: |
          (attr: "value"): string
        description: |
          <p>See %JQuery.%attr.</p>
        references:
          attr:
            href: https://api.jquery.com/attr/

  RadioField:
    kind: interface
    simple: true
    extends:
      - file: jwidget/bindRadio
        symbol: RadioUpdaterField
      - file: jwidget/bindRadio
        symbol: RadioWatcherField
    description: |
      <p>Subset of %JQuery element methods necessary for some of %bindRadio binding variation implementations.
      Union of %RadioUpdaterField and %RadioWatcherField.</p>
    methods:
      find:
        signature: |
          (selector: string): %RadioUpdaterButton & %RadioWatcherButton
        description: |
          <p>See %JQuery.%find.</p>
        references:
          find:
            href: https://api.jquery.com/find/
