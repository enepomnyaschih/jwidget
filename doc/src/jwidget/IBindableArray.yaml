symbols:
  default:
    kind: interface
    typevars:
      T: Value type.
    extends:
      - file: jwidget/DestroyableReadonlyBindableArray
        typevars: [T]
      - file: jwidget/IClass
    description: |
      <p>Extension of %DestroyableReadonlyBindableArray with modification methods.</p>

    methods:
      ownValues:
        signature: |
          (): this
        description: |
          <p>Makes this array an owner of its values, which means that its items are alive as long as they are present in
          this array. An item is destroyed when it leaves the array, and all items are destroyed on the array destruction.
          All item values in such array must be unique.</p>

      add:
        signature: |
          (value: %T, index?: number)
        params:
          value: Value to insert.
          index: Index of an item to insert new one before. By default, appends the item to the end of the array.
        description: |
          <p>Inserts an item to the array and dispatches %onSplice message.</p>

      addAll:
        signature: |
          (values: readonly %T[], index?: number)
        params:
          values: Values to insert.
          index: Index of an item to insert new ones before. By default, appends the items to the end of the array.
        description: |
          <p>Inserts an item range to the array and dispatches %onSplice message.</p>

      set:
        signature: |
          (index: number, newValue: %T): %T
        params:
          index: Index of an item to replace.
          newValue: Value to set.
        returns: The old value of the item.
        description: |
          <p>Replaces an item at specified position and dispatches %onReplace message.</p>

      remove:
        signature: |
          (index: number): %T
        params:
          index: Index of an item to remove.
        returns: Value of the removed item.
        description: |
          <p>Removes an item at specified index and dispatches %onSplice message.</p>

      removeAll:
        signature: |
          (index: number, count: number): %T[]
        params:
          index: Index of the first item to remove.
          count: Count of items to remove.
        returns: Values of the removed items. Never returns null or undefined.
        description: |
          <p>Removes item range from the array and dispatches %onSplice message.</p>

      removeValues:
        signature: |
          (values: %Iterable<%T>)
        params:
          values: Values to remove.
        description: |
          <p>Removes all occurrences of the values in the array and dispatches %onSplice message.</p>

      move:
        signature: |
          (fromIndex: number, toIndex: number): %T
        params:
          fromIndex: Index of an item to move.
          toIndex: Index to move the item to.
        returns: Value of the moved item.
        description: |
          <p>Moves an item inside the array and dispatches %onMove message.</p>

      clear:
        signature: |
          (): %T[]
        returns: Old array contents.
        description: |
          <p>Removes all array items and dispatches %onClear message.</p>

      splice:
        signature: |
          (segmentsToRemove: %Iterable<%IBindableArray.%IndexCount>, segmentsToAdd: %Iterable<%IBindableArray.%IndexItems<%T>>): %IBindableArray.%SpliceResult<%T>
        params:
          segmentsToRemove: Array of segments to remove sorted by index asc. Segments are removed in reverse order.
          segmentsToAdd: Array of segments to insert sorted by index asc. Segments are inserted in direct order.
        returns: Splice result. Never returns null or undefined.
        description: |
          <p>Removes and inserts item ranges granularly and dispatches %onSplice message.</p>
        references:
          IndexCount:
            file: jwidget/IBindableArray
            symbol: IBindableArray.IndexCount

          IndexItems:
            file: jwidget/IBindableArray
            symbol: IBindableArray.IndexItems

      reorder:
        signature: |
          (indexMapping: readonly number[])
        params:
          indexMapping: |
            Index mapping array. Item with index <b>i</b> will be moved to index <b>indexMapping[i]</b>.
            Must contain all indexes from 0 to (length - 1).
        description: |
          <p>Reorders array items and dispatches %onReorder message.</p>

      trySet:
        signature: |
          (index: number, newValue: %T): %T
        params:
          index: Index of an item to replace.
          newValue: Value to set.
        returns: The old value of the item. If the call doesn't modify the array, returns undefined.
        description: |
          <p>Replaces an item at the specified index and dispatches %onReplace message.</p>

      tryRemoveAll:
        signature: |
          (index: number, count: number): %T[]
        params:
          index: Index of the first item to remove.
          count: Count of items to remove.
        returns: The removed items. If the call doesn't modify the array, returns undefined.
        description: |
          <p>Removes an item range from the array and dispatches %onSplice message.</p>

      tryMove:
        signature: |
          (fromIndex: number, toIndex: number): %T
        params:
          fromIndex: Index of an item to move.
          toIndex: Index to move the item to.
        returns: Value of the moved item. If the call doesn't modify the array, returns undefined.
        description: |
          <p>Moves an item inside the array and dispatches %onMove message.</p>

      trySplice:
        signature: |
          (segmentsToRemove: %Iterable<%IBindableArray.%IndexCount>, segmentsToAdd: %Iterable<%IBindableArray.%IndexItems<%T>>): %IBindableArray.%SpliceResult<%T>
        params:
          segmentsToRemove: Array of segments to remove sorted by index asc. Segments are removed in reverse order.
          segmentsToAdd: Array of segments to insert sorted by index asc. Segments are inserted in direct order.
        returns: Splice result. If collection is not modified, returns undefined.
        description: |
          <p>Removes and inserts item ranges granularly and dispatches %onSplice message.</p>
        references:
          IndexCount:
            file: jwidget/IBindableArray
            symbol: IBindableArray.IndexCount

          IndexItems:
            file: jwidget/IBindableArray
            symbol: IBindableArray.IndexItems

      tryReorder:
        signature: |
          (indexMapping: readonly number[]): %T[]
        params:
          indexMapping: |
            Index mapping array. Item with index <b>i</b> will be moved to index <b>indexMapping[i]</b>.
            Must contain all indexes from 0 to (length - 1).
        returns: Old array contents. If collection is not modified, returns undefined.
        description: |
          <p>Reorders array items and dispatches %onReorder message.</p>

      performSplice:
        signature: |
          (newContents: readonly %T[])
        params:
          newContents: New array contents.
        description: |
          <p>Adjusts array contents to %newContents using %detectSplice and %splice methods.
          All current values in the array must be unique.
          Otherwise, consider using %performFilter method, because it doesn't require value uniqueness.</p>

      performFilter:
        signature: |
          (newContents: readonly %T[])
        params:
          newContents: New array contents.
        description: |
          <p>Adjusts array contents to %newContents using %detectFilter and %splice methods.
          Doesn't consider item insertion - try %performSplice if that's necessary.
          In advantage to %performSplice, doesn't require item uniqueness.</p>

      performReorder:
        signature: |
          (newContents: readonly %T[])
        params:
          newContents: New array contents.
        description: |
          <p>Adjusts array contents to %newContents using %detectReorder and %reorder methods.
          Values of %newContents must match current values of the array.
          All values in the array must be unique.</p>

      sort:
        signature: |
          (callback?: (value: %T, index: number) => any, order?: number)
        params:
          callback: |
            Indexer function. Must return a comparable value, compatible with %cmp. Returns value itself by default.
          order: Sorting order. Positive number for ascending sorting, negative for descending sorting.
        description: |
          <p>Sorts the array by result of %callback function call for each item. Modifies the array itself and dispatches
          %onReorder message.</p>

      sortComparing:
        signature: |
          (compare?: (t1:% T, t2: %T, i1: number, i2: number) => number, order?: number)
        params:
          compare: |
            Comparer function. Should return positive value if t1 > t2;
            negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.
          order: Sorting order. Positive number for ascending sorting, negative for descending sorting.
        description: |
          <p>Sorts the array by comparer. Modifies the array itself and dispatches %onReorder message.</p>

      reverse:
        signature: |
          ()
        description: |
          <p>Reverses item order in the array. Modifies the array itself and dispatches %onReorder message.</p>

  IBindableArray.MoveMessage:
    kind: interface
    simple: true
    typevars:
      T: Item type.
    description: |
      <p>%ReadonlyBindableArray.%onMove message.</p>
    properties:
      fromIndex:
        modifiers: readonly
        type: number
        description: Index the item is moved from.

      toIndex:
        modifiers: readonly
        type: number
        description: Index the item is moved to.

      value:
        modifiers: readonly
        type: '%T'
        description: Value of the moved item.

  IBindableArray.ReplaceMessage:
    kind: interface
    simple: true
    typevars:
      T: Item type.
    description: |
      <p>%ReadonlyBindableArray.%onReplace message.</p>
    properties:
      index:
        modifiers: readonly
        type: number
        description: Index of the replaced item.

      oldValue:
        modifiers: readonly
        type: '%T'
        description: Old value of the item.

      newValue:
        modifiers: readonly
        type: '%T'
        description: New value of the item.

  IBindableArray.ReorderMessage:
    kind: interface
    simple: true
    typevars:
      T: Item type.
    description: |
      <p>%ReadonlyBindableArray.%onReorder message.</p>
    properties:
      oldContents:
        modifiers: readonly
        type: 'readonly %T[]'
        description: Old contents of the array.

      indexMapping:
        modifiers: readonly
        type: 'readonly number[]'
        description: Indexes of items in the reordered array.

  IBindableArray.SpliceParams:
    kind: interface
    simple: true
    typevars:
      T: Item type.
    description: |
      <p>%IBindableArray.%splice method arguments. Result of %detectSplice method.</p>
    properties:
      segmentsToRemove:
        modifiers: readonly
        type: 'readonly %IBindableArray.%IndexCount[]'
        description: Segments to remove.

      segmentsToAdd:
        modifiers: readonly
        type: 'readonly %IBindableArray.%IndexItems<T>[]'
        description: Segments to add.

  IBindableArray.SpliceResult:
    kind: interface
    simple: true
    typevars:
      T: Item type.
    description: |
      <p>%IBindableArray.%splice method result.</p>
    properties:
      oldContents:
        modifiers: readonly
        type: 'readonly %T[]'
        description: Old contents of the array.

      removedSegments:
        modifiers: readonly
        type: 'readonly %IBindableArray.%IndexItems<%T>[]'
        description: Removed segments.

      addedSegments:
        modifiers: readonly
        type: 'readonly %IBindableArray.%IndexItems<%T>[]'
        description: Added segments.

      removedItems:
        modifiers: readonly
        type: 'readonly %T[]'
        description: Plain array of all removed items.

      addedItems:
        modifiers: readonly
        type: 'readonly %T[]'
        description: Plain array of all added items.

      removeParams:
        modifiers: readonly
        type: 'readonly %IBindableArray.%IndexCount[]'
        description: Removed segments converted to index and count pairs.

      empty:
        modifiers: readonly
        type: boolean
        description: Flag indicating if the splice call kept the array as it was.

  IBindableArray.IndexCount:
    kind: type
    simple: true
    description: |
      <pre>
      type IndexCount = readonly [number, number]
      </pre>
      <p>Type describing a pair of index and item count. Used in %IBindableArray.%splice method arguments to specify
      segments to remove.</p>

  IBindableArray.IndexItems:
    kind: type
    simple: true
    typevars:
      T: Item type.
    description: |
      <pre>
      type IndexItems<T> = readonly [number, readonly T[]]
      </pre>
      <p>Type describing a pair of index and item array. Used in %IBindableArray.%splice method arguments to specify
      segments to add, and in %IBindableArray.%SpliceResult interface to specify removed and added segments.</p>

references:
  splice:
    symbol: default
    member: splice

  detectSplice:
    symbol: default
    member: detectSplice

  onSplice:
    symbol: default
    member: onSplice

  onMove:
    symbol: default
    member: onMove

  onReplace:
    symbol: default
    member: onReplace

  onReorder:
    symbol: default
    member: onReorder

  onClear:
    symbol: default
    member: onClear

  SpliceResult:
    symbol: IBindableArray.SpliceResult

  IndexCount:
    symbol: IBindableArray.IndexCount

  IndexItems:
    symbol: IBindableArray.IndexItems
