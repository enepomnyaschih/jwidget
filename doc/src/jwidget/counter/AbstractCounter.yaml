description: |
  <p><b>Counter</b> is one of collection synchronizers. <b>Counter</b> builds a new %Property
  containing number of collection items the callback returns %truthy value for.</p>
  <pre>
  const source = new %List([1, 2, 3]);
  const counter = new %ListCounter(source, x => x % 2 === 1);
  const target = counter.%target;

  expect(target.%get()).toBe(2); // two odd numbers: 1, 3

  // Target property is automatically synchronized with the original collection
  source.%addAll([4, 7, 1, 6]);
  expect(target.%get()).toBe(4); // four odd numbers: 1, 3, 7, 1

  // Destroy the counter to stop synchronization
  counter.%destroy();
  </pre>

  <h3>Counter modules</h3>

  <p><b>Counter</b> has one common abstract class with one implementation per collection type. Every implementation is
  supplied with a shorthand function that returns target property directly. There is also a module that merges all
  implementations together and allows you to count matching items in a collection of any (i.e. unknown) type.</p>
  <p>Module dependencies and exports are represented at the following diagram:</p>
  <table class="table table-sm text-center">
    <tbody>
      <tr>
        <td colspan="3">
          <h5>jwidget/counter/AbstractCounter</h5>
          <p>%AbstractCounter</p>
          <p class="text-secondary">All other modules depend on it</p>
        </td>
      </tr>
      <tr>
        <td>
          <h5>jwidget/counter/list</h5>
          <p>%ListCounter, %countList</p>
        </td>
        <td>
          <h5>jwidget/counter/map</h5>
          <p>%MapCounter, %countMap</p>
        </td>
        <td>
          <h5>jwidget/counter/set</h5>
          <p>%SetCounter, %countSet</p>
        </td>
      </tr>
      <tr>
        <td colspan="3">
          <h5>jwidget/counter/collection</h5>
          <p>%createCounter, %countCollection</p>
          <p class="text-danger">Depends on all other modules</p>
        </td>
      </tr>
    </tbody>
  </table>
  <p>Knowledge of this diagram may help you to optimize WebPack bundling. Avoid using modules you don't need to.</p>

  <h3>Features and examples</h3>

  <p>You can pass target property in config option:</p>
  <pre>
  const source = new %List([1, 2, 3]);
  const target = new %Property(0);
  const counter = new %ListCounter(source, x => x % 2 === 1, {%targetOfConfig});
  </pre>
  <p>If you want to write the output into a new property, use shorthand functions %countList, %countMap, %countSet and
  %countCollection instead:</p>
  <pre>
  const source = new %List([1, 2, 3]);
  const target = %countList(source, x => x % 2 === 1);

  // Destroy the target property to stop synchronization
  target.%destroy();
  </pre>
  <p>You may use %filterers instead of counters, but counter works much faster and doesn't reserve memory for a
  target collection.</p>
  <pre>
  const source = new %List([1, 2, 3]);
  const filterer = new %ListFilterer(source, x => x % 2 === 1);
  const count = filterer.%targetOfFilterer.%length;
  </pre>

  <h3>Synchronizer rules</h3>

  <p>The synchronizer requires exclusive access to the target property, i.e.:</p>
  <ul>
    <li>Matching items of source collection get counted immediately on synchronizer initialization.</li>
    <li>Counter resets target property to 0 on synchronizer destruction.</li>
    <li>You can pass target property in %targetOfConfig config option. In this case, you are responsible for its
    destruction.</li>
    <li>If %targetOfConfig is not passed, it gets created automatically. In this
    case, %targetOfConfig gets destroyed automatically on synchronizer destruction.</li>
  </ul>

symbols:
  default:
    kind: abstract class
    typevars:
      T: Collection item type.
    extends:
      - file: jwidget/Class
    description: |
      <p>Abstract collection item counter. Builds a new %Property containing number of collection items the callback
      returns %truthy value for, and starts continuous synchronization.</p>

    properties:
      target:
        modifiers: readonly
        type: '%Bindable<number>'
        description: Target property.

    methods:
      reconfigure:
        signature: |
          (config: %AbstractCounter.%Reconfig<%T>)
        params:
          config: Options to modify.
        description: |
          <p>Changes counter configuration and recounts matching items.</p>

      recount:
        signature: |
          ()
        description: |
          <p>Recounts matching items. Call this method when collection item properties change the way that
          they must be refiltered.</p>

    references:
      Config:
        file: jwidget/counter/AbstractCounter
        symbol: AbstractCounter.Config

      Reconfig:
        file: jwidget/counter/AbstractCounter
        symbol: AbstractCounter.Reconfig

  AbstractCounter.Config:
    kind: interface
    simple: true
    typevars:
      T: Collection item type.
    description: |
      <p>%AbstractCounter configuration.</p>
    properties:
      scope:
        modifiers: readonly
        optional: true
        type: any
        description: |
          <p>Call scope of counter's <b>test</b> callback. Defaults to the synchronizer itself.</p>

      target:
        modifiers: readonly
        optional: true
        type: '%IProperty<number>'
        description: |
          <p>Target property. By default, created automatically.</p>

  AbstractCounter.Reconfig:
    kind: interface
    simple: true
    typevars:
      T: Collection item type.
    description: |
      <p>%AbstractCounter.%reconfigure method configuration.</p>
    properties:
      test:
        modifiers: readonly
        optional: true
        type: '(item: %T) => any'
        description: |
          <p>Filtering criteria.</p>

      scope:
        modifiers: readonly
        optional: true
        type: any
        description: |
          <p>Call scope of counter's <b>test</b> callback.</p>

references:
  target:
    symbol: default
    member: target

  get:
    file: jwidget/Bindable
    member: get

  addAll:
    file: jwidget/IList
    member: addAll

  targetOfConfig:
    symbol: AbstractCounter.Config
    member: target
    label: target

  targetOfFilterer:
    file: jwidget/filterer/list
    member: target
    label: target

  length:
    file: jwidget/ReadonlyCollection
    member: length

  reconfigure:
    symbol: default
    member: reconfigure
