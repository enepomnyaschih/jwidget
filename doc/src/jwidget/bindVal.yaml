symbols:
  default:
    signature: |
      <T extends string | number | string[]>(el: %ValueWatcherElement, simple?: boolean): %DestroyableBindable<T>
      <T extends string | number | string[]>(el: %ValueUpdaterElement<T>, property: %Bindable<T>, binding?: %UPDATE): %Destroyable
      <T extends string | number | string[]>(el: %ValueWatcherElement, property: %IProperty<T>, binding: %WATCH, simple?: boolean): %Destroyable
      <T extends string | number | string[]>(el: %ValueUpdaterElement<T> & %ValueWatcherElement, property: %IProperty<T>, binding: %TWOWAY, simple?: boolean): %Destroyable
    params:
      el: DOM element.
      property: Property.
      binding: Binding direction.
      simple: Disable live watch.
    returns: Binding object or bound property. You must %destroy it to stop the synchronization.
    description: |
      <p>Binds value of a DOM element to a %Property and/or back.</p>
      <p>The first signature returns a new %Property bound to value of a DOM element.</p>
      <pre>
      // Watch input element value
      const value = %bindVal<string>(el);
      </pre>
      <p>The second signature binds value of a DOM element to a %Property.</p>
      <pre>
      // Bind element value to property
      %bindVal(el, value);
      </pre>
      %example:bindVal1
      <p>The third signature binds a %Property to value of a DOM element.</p>
      <pre>
      %bindVal(el, value, %WATCH);
      </pre>
      <p>The fourth signature sets up a two-way binding.</p>
      <pre>
      %bindVal(el, value, %TWOWAY);
      </pre>
      %example:bindVal2
      <p>By default, the function watches DOM element value via "change" DOM event and also a timer with 100 ms
      interval to track the changes live. You can disable the timer by setting %simple parameter to true.</p>
      <p>The function returns a binding object. If you need to stop the synchronization, %destroy it. This is not necessary
      if you work with a private property and a private DOM element as in the example above. However, if you work with an
      external model or an external DOM element (e.g. they get passed to the constructor of the component), you must take care of
      the binding destruction, because life time of these objects can be longer than the life time of your
      component. The easiest way to do it is to %own the binding:</p>
      <pre>
      this.%own(%bindVal(el, value));
      </pre>

  ValueUpdaterElement:
    kind: interface
    simple: true
    typevars:
      T: 'Value type. One of <code>string</code>, <code>number</code>, <code>string[]</code>.'
    description: |
      <p>Subset of %JQuery element methods necessary for some of %bindVal binding variation implementations.</p>
    methods:
      val:
        signature: |
          (): string | number | string[]
          (value: T)
        description: |
          <p>See %JQuery.%val.</p>
        references:
          val:
            href: https://api.jquery.com/val/

      change:
        signature: |
          ()
        description: |
          <p>See %JQuery.%change.</p>
        references:
          change:
            href: https://api.jquery.com/change/

  ValueWatcherElement:
    kind: interface
    simple: true
    extends:
      - file: jwidget/DomUtils
        symbol: InputElement
    description: |
      <p>Subset of %JQuery element methods necessary for some of %bindVal binding variation implementations.</p>
    methods:
      val:
        signature: |
          (): string | number | string[]
        description: |
          <p>See %JQuery.%val.</p>
        references:
          val:
            href: https://api.jquery.com/val/

      on:
        signature: |
          (event: "change", callback: () => void)
        description: |
          <p>See %JQuery.%on.</p>
        references:
          on:
            href: https://api.jquery.com/on/

      off:
        signature: |
          (event: "change", callback: () => void)
        description: |
          <p>See %JQuery.%off.</p>
        references:
          off:
            href: https://api.jquery.com/off/
