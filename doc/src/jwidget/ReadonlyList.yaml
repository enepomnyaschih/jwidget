symbols:
  default:
    kind: interface
    typevars:
      T: Item type.
    extends:
      - file: jwidget/ReadonlyCollection
    description: |
      <p>Ordered collection of items. Each item of the list has an index. Index of first item is 0,
      index of each next one is higher by 1.</p>
    properties:
      last:
        modifiers: readonly
        type: '%T'
        description: The last item of the list.
      lastIndex:
        modifiers: readonly
        type: number
        description: The index of the last item of the list. If the list is empty, returns undefined.
      items:
        modifiers: readonly
        type: '%T[]'
        description: |
          <p>Item array - internal collection representation.</p>
          <p><b>Caution: doesn't make a copy - please don't modify.</b></p>
      spliceEvent:
        modifiers: readonly
        type: '%Listenable<%IList.%SpliceEventParams<%T>>'
        description: Items are removed from the list and items are added to the list.
      replaceEvent:
        modifiers: readonly
        type: '%Listenable<%IList.%ReplaceEventParams<%T>>'
        description: An item is replaced in the list.
      moveEvent:
        modifiers: readonly
        type: '%Listenable<%IList.%MoveEventParams<%T>>'
        description: An item is moved in the list.
      clearEvent:
        modifiers: readonly
        type: '%Listenable<%IList.%ItemsEventParams<%T>>'
        description: The list is cleared.
      reorderEvent:
        modifiers: readonly
        type: '%Listenable<%IList.%ReorderEventParams<%T>>'
        description: Items are reordered in the list.
      changeEvent:
        modifiers: readonly
        type: '%Listenable<%IList.%EventParams<T>>'
        description: The list is changed. Triggered right after any another event.

    methods:
      clone:
        signature: |
          (): %IList<%T>
        returns: Returns a shallow copy of this collection.

      get:
        signature: |
          (index: number): %T
        params:
          index: Index in the list.
        returns: Item at the index. If an item with such index doesn't exist, returns undefined.

      every:
        signature: |
          (callback: (item: %T, index: number) => any, scope?: any): boolean
        params:
          callback: Criteria callback.
          scope: '%callback call scope. Defaults to the collection.'
        returns: All items match the criteria.
        description: |
          <p>Matches all items against criteria. Returns true if %callback returns %truthy value for all collection
          items. Algorithms iterates through the items consequently, and stops it after the first item not matching
          the criteria.<p>

      backEvery:
        signature: |
          (callback: (item: %T, index: number) => any, scope?: any): boolean
        params:
          callback: Criteria callback.
          scope: '%callback call scope. Defaults to collection itself.'
        returns: Every item matches the criteria.
        description: |
          <p>Checks all items against the criteria in backward order.
          Returns true if %callback returns %truthy value for all collection items.
          Algorithm iterates through the items consequently, and stops it after the first item not matching the criteria.</p>

      some:
        signature: |
          (callback: (item: %T, index: number) => any, scope?: any): boolean
        params:
          callback: Criteria callback.
          scope: '%callback call scope. Defaults to the collection.'
        returns: Some item matches the criteria.
        description: |
          <p>Matches each item against criteria. Returns true if %callback returns %truthy value for at least one item
          in the collection. Algorithms iterates through the items sequentially, and stops it after the first item matching
          the criteria.<p>

      forEach:
        signature: |
          (callback: (item: %T, index: number) => any, scope?: any)
        params:
          callback: Callback function.
          scope: '%callback call scope. Defaults to the collection.'
        description: |
          <p>Iterates through the collection items. Calls the specified function for all items.<p>

      indexOf:
        signature: |
          (item: T): number
        params:
          item: Item.
        returns: Item index. If item doesn't exist, returns -1.
        description: |
          <p>Returns item index in this list.</p>

      find:
        signature: |
          (callback: (item: %T, index: number) => any, scope?: any): %T
        params:
          callback: Criteria callback.
          scope: '%callback call scope. Defaults to the collection.'
        returns: First item matching the criteria.
        description: |
          <p>Finds an item matching the criteria. Returns the first item %callback returns %truthy value for.
          Algorithms iterates through the items sequentially, and stops it after the first item matching the criteria.</p>

      findIndex:
        signature: |
          (callback: (item: %T, index: number) => any, scope?: any): %T
        params:
          callback: Criteria callback.
          scope: '%callback call scope. Defaults to the collection.'
        returns: Index of the first item matching the criteria.
        description: |
          <p>Finds an item matching the criteria. Returns the index of the first item %callback returns %truthy value for.
          Algorithms iterates through the items sequentially, and stops it after the first item matching the criteria.</p>

      binarySearch:
        signature: |
          (value: %T, compare?: (t1: %T, t2: %T) => number, scope?: any, order: number = 1): number
        params:
          value: Value to insert/remove.
          compare: |
            Comparer function. Should return positive value if t1 > t2; negative value if t1 < t2; 0 if t1 == t2.
            Defaults to %cmp.
          scope: Comparer call scope. Defaults to collection itself.
          order: Sorting order. Positive number for ascending sorting, negative for descending sorting.
        returns: Item index.
        description: |
          <p>Determines index of the first item which is more (or less if %order < 0) than the specified value by
          %compare function, using binary search. List must be sorted by compare function. Can be used for item
          insertion easily. If you want to use this method for item removal, you must look at the previous item and
          compare it to the value first.</p>

      toSorted:
        signature: |
          (callback?: (item: %T, index: number) => any, scope?: any, order: number = 1): %IList<%T>
        params:
          callback: Indexer function. Must return a comparable value, compatible with %cmp. Returns the item itself by default.
          scope: '%callback call scope. Defaults to the collection.'
          order: Sorting order. Positive number for ascending sorting (default), negative number for descending sorting.
        returns: Sorted list.
        description: |
          <p>Converts the collection to a sorted list. Builds a list consisting of the collection items sorted by
          the result of %callback call for each item.</p>

      toSortedComparing:
        signature: |
          (compare?: (t1: %T, t2: %T, k1: number, k2: number) => number, scope?: any, order: number = 1): %IList<%T>
        params:
          compare: Comparer function. Should return positive value if t1 > t2; negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.
          scope: '%compare call scope. Defaults to the collection.'
          order: Sorting order. Positive number for ascending sorting (default), negative number for descending sorting.
        returns: Sorted list.
        description: |
          <p>Converts the collection to a sorted list. Builds a list consisting of the collection items sorted by
          the comparer.</p>

      getSortingIndices:
        signature: |
          (callback?: (item: %T, index: number) => any, scope?: any, order: number = 1): %IList<number>
        params:
          callback: Indexer function. Must return a comparable value, compatible with %cmp. Returns the item itself by default.
          scope: '%callback call scope. Defaults to the collection.'
          order: Sorting order. Positive number for ascending sorting (default), negative number for descending sorting.
        returns: Indices of items to build a sorted list.
        description: |
          <p>Builds a list of item indices sorted by the result of %callback call for each item.</p>

      getSortingIndicesComparing:
        signature: |
          (compare?: (t1: %T, t2: %T, k1: number, k2: number) => number, scope?: any, order: number = 1): %IList<number>
        params:
          compare: Comparer function. Should return positive value if t1 > t2; negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.
          scope: '%compare call scope. Defaults to the collection.'
          order: Sorting order. Positive number for ascending sorting (default), negative number for descending sorting.
        returns: Indices of items to build a sorted list.
        description: |
          <p>Builds a list of item indices sorted by comparer.</p>

      toReversed:
        signature: |
          (): %IList<%T>
        returns: Reversed list.
        description: |
          <p>Builds a new list containing items of this list in reversed order. Does not modify this list.</p>

      index:
        signature: |
          (callback: (item: %T, index: number) => any, scope?: any): %IMap<%T>
        params:
          callback: Indexer function.
          scope: '%callback call scope. Defaults to the collection.'
        returns: Collection index.
        description: |
          <p>Indexes collection. Builds a new map by rule: key is the result of %callback function call, value is the
          corresponding item.</p>

      filter:
        signature: |
          (callback: (item: %T, index: number) => any, scope?: any): %IList<%T>
        params:
          callback: Criteria callback.
          scope: '%callback call scope. Defaults to the collection.'
        returns: Filtered collection.
        description: |
          <p>Filters the collection by criteria. Builds a new collection of the same type, consisting of items %callback
          return %truthy value for.</p>

      count:
        signature: |
          (callback: (item: %T, index: number) => any, scope?: any): number
        params:
          callback: Criteria callback.
          scope: '%callback call scope. Defaults to the collection.'
        returns: Number of matching items.
        description: |
          <p>Counts the items matching criteria. Returns the number of items the callback returns truthy value for.</p>

      map:
        signature: |
          <U>(callback: (item: %T, index: number) => U, scope?: any, getKey?: (item: U) => any): %IList<U>
        params:
          callback: Mapping function.
          scope: '%callback call scope. Defaults to the collection.'
          getKey: |
            Function which returns unique key of an item in the resulting collection.
            Defaults to %getKeyProperty property of the collection.
        returns: Mapped collection.
        description: |
          <p>Maps collection items. Builds a new collection of the same type, containing results of %callback call for
          each collection item.</p>

      reduce:
        signature: |
          <U>(reducer: %Reducer<%T, U>): U
          <U>(callback: (accumulator: U, item: %T, index: number) => U, initial: U): U
        params:
          reducer: 'Standard %Reducer.'
          callback: Function to execute on each item in the collection.
          initial: Value to use as the first argument to the first call of the callback.
        returns: Final accumulator value.
        description: |
          <p>Applies a function against an accumulator and each item in the collection to reduce it to a single value.</p>

      max:
        signature: |
          (callback?: (item: %T, index: number) => any, scope?: any, order: number = 1): %T
        params:
          callback: 'Returns a comparable value, compatible with %cmp. Returns the item itself by default.'
          scope: '%callback call scope. Defaults to the collection.'
          order: Pass negative order to find the lowest value.
        returns: Maximum collection item.
        description: |
          <p>Returns the collection item the %callback returns the highest (or lowest if %order < 0) value for.</p>

      maxIndex:
        signature: |
          (callback?: (item: %T, index: number) => any, scope?: any, order: number = 1): number
        params:
          callback: 'Returns a comparable value, compatible with %cmp. Returns the item itself by default.'
          scope: '%callback call scope. Defaults to the collection.'
          order: Pass negative order to find the lowest value.
        returns: Index of item with highest (or lowest) value in list.
        description: |
          <p>Returns index of the list item the %callback returns the highest (or lowest if %order < 0) value for.</p>

      maxComparing:
        signature: |
          (compare?: (t1: %T, t2: %T, i1: number, i2: number) => any, scope?: any, order: number = 1): %T
        params:
          compare: 'Returns a positive value if t1 > t2; negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.'
          scope: '%compare call scope. Defaults to the collection.'
          order: Pass negative order to find the lowest value.
        returns: Maximum collection item.
        description: |
          <p>Returns the highest (or lowest if %order < 0) collection item in terms of the specified comparer function.</p>

      maxIndexComparing:
        signature: |
          (compare?: (t1: %T, t2: %T, i1: number, i2: number) => any, scope?: any, order: number = 1): number
        params:
          compare: 'Returns a positive value if t1 > t2; negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.'
          scope: '%compare call scope. Defaults to the collection.'
          order: Pass negative order to find the lowest value.
        returns: Index of highest (or lowest) list item.
        description: |
          <p>Returns index of the highest (or lowest if %order < 0) list item in terms of the specified comparer function.</p>

      min:
        signature: |
          (callback?: (item: %T, index: number) => any, scope?: any, order: number = 1): %T
        params:
          callback: 'Returns a comparable value, compatible with %cmp. Returns the item itself by default.'
          scope: '%callback call scope. Defaults to the collection.'
          order: Pass negative order to find the highest value.
        returns: Minimum collection item.
        description: |
          <p>Returns the collection item the %callback returns the lowest (or highest if %order < 0) value for.</p>

      minIndex:
        signature: |
          (callback?: (item: %T, index: number) => any, scope?: any, order: number = 1): number
        params:
          callback: 'Returns a comparable value, compatible with %cmp. Returns the item itself by default.'
          scope: '%callback call scope. Defaults to the collection.'
          order: Pass negative order to find the highest value.
        returns: Index of item with lowest (or highest) value in list.
        description: |
          <p>Returns index of the list item the %callback returns the lowest (or highest if %order < 0) value for.</p>

      minComparing:
        signature: |
          (compare?: (t1: %T, t2: %T, i1: number, i2: number) => any, scope?: any, order: number = 1): %T
        params:
          compare: 'Returns a positive value if t1 > t2; negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.'
          scope: '%compare call scope. Defaults to the collection.'
          order: Pass negative order to find the highest value.
        returns: Minimum collection item.
        description: |
          <p>Returns the lowest (or highest if %order < 0) collection item in terms of the specified comparer function.</p>

      minIndexComparing:
        signature: |
          (compare?: (t1: %T, t2: %T, i1: number, i2: number) => any, scope?: any, order: number = 1): number
        params:
          compare: 'Returns a positive value if t1 > t2; negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.'
          scope: '%compare call scope. Defaults to the collection.'
          order: Pass negative order to find the highest value.
        returns: Index of lowest (or highest) list item.
        description: |
          <p>Returns index of the lowest (or highest if %order < 0) list item in terms of the specified comparer function.</p>

      equal:
        signature: |
          (arr: %T[]): boolean
        params:
          arr: Array.
        returns: This list is equal to the array.
        description: |
          <p>Checks this list for equality (===) to an array, item by item.</p>

      detectSplice:
        signature: |
          (newItems: %T[], getKey?: (item: %T) => any, scope?: any): %IList.%SpliceParams<%T>
        params:
          newItems: New list contents.
          getKey: |
            Function which returns unique key of an item in this collection.
            Defaults to %getKeyProperty property of the collection.
          scope: '%getKey call scope. Defaults to collection itself.'
        returns: '%splice method arguments. If no method call required, returns undefined.'
        description: |
          <p>Detects %splice method arguments to adjust list contents to %newItems.
          Determines item ranges to be removed and inserted.
          All items must have unique %getKey function result.
          If items don't have unique key, probably %detectFilter method may help,
          because it doesn't require item uniquiness.</p>

      detectFilter:
        signature: |
          (newItems: %T[]): %IList.%IndexCount[]
        params:
          newItems: New list contents.
        returns: '<b>removeParamsList</b> argument of %splice method. If no method call required, returns undefined.'
        description: |
          <p>Detects <b>removeParamsList</b> argument of %splice method to adjust list contents to %newItems.
          Determines item ranges to be removed.
          Doesn't assume item insertion - try %detectSplice if that's the case.
          In advantage to %detectSplice, doesn't require item uniquiness.</p>

      detectReorder:
        signature: |
          (newItems: %T[], getKey?: (item: %T) => any, scope?: any): number[]
        params:
          newItems: New list contents.
          getKey: |
            Function which returns unique key of an item in this collection.
            Defaults to %getKeyProperty property of the collection.
          scope: '%getKey call scope. Defaults to collection itself.'
        returns: '<b>indexArray</b> argument of %reorder method. If no method call required, returns undefined.'
        description: |
          <p>Detects %reorder method arguments to adjust list contents to %newItems.
          Determines where to move all items.
          If %newItems contents differ from collection contents, it may have unexpected consequences.</p>

      detectSort:
        signature: |
          (callback?: (item: T, index: number) => any, scope?: any, order: number = 1): number[]
        params:
          callback: |
            Indexer function. Must return a comparable value, compatible with %cmp. Returns item itself by default.
          scope: '%callback call scope. Defaults to collection itself.'
          order: Sorting order. Positive number for ascending sorting, negative for descending sorting.
        returns: '<b>indexArray</b> argument of %reorder method. If no method call required, returns undefined.'
        description: |
          <p>Detects %reorder method arguments to sort list contents by result of %callback call for each item.</p>

      detectSortComparing:
        signature: |
          (compare?: (t1: T, t2: T, i1: number, i2: number) => number, scope?: any, order: number = 1): number[]
        params:
          compare: |
            Comparer function. Should return positive value if t1 > t2;
            negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.
          scope: '%compare call scope. Defaults to collection itself.'
          order: Sorting order. Positive number for ascending sorting, negative for descending sorting.
        returns: '<b>indexArray</b> argument of %reorder method. If no method call required, returns undefined.'
        description: |
          <p>Detects %reorder method arguments to sort list contents by comparer.</p>

    references:
      getKeyProperty:
        symbol: default
        member: getKey
        label: getKey

      splice:
        file: jwidget/IList
        member: splice

      reorder:
        file: jwidget/IList
        member: reorder

      SpliceParams:
        file: jwidget/IList
        symbol: IList.SpliceParams
        label: SpliceParams

      SpliceResult:
        file: jwidget/IList
        symbol: IList.SpliceResult
        label: SpliceResult

      EventParams:
        file: jwidget/IList
        symbol: IList.EventParams
        label: EventParams

      SpliceEventParams:
        file: jwidget/IList
        symbol: IList.SpliceEventParams
        label: SpliceEventParams

      ReorderEventParams:
        file: jwidget/IList
        symbol: IList.ReorderEventParams
        label: ReorderEventParams

      MoveEventParams:
        file: jwidget/IList
        symbol: IList.MoveEventParams
        label: MoveEventParams

      ItemsEventParams:
        file: jwidget/IList
        symbol: IList.ItemsEventParams
        label: ItemsEventParams

      ReplaceEventParams:
        file: jwidget/IList
        symbol: IList.ReplaceEventParams
        label: ReplaceEventParams
