description: |
  <p><b>Filterer</b> is one of collection synchronizers. <b>Filterer</b> builds a new collection of the same type,
  consisting of items the callback function returns %truthy value for. Preserves item order in a list.</p>
  <pre>
  const source = new %List([1, 2, 3]);
  const filterer = new %ListFilterer(source, x => x % 2 === 1);
  const target = filterer.%target;
  expect(target).toEqual([1, 3]);

  // Target collection is automatically synchronized with the original collection
  source.%addAll([4, 7, 1, 6]);
  expect(target).toEqual([1, 3, 7, 1]);

  source.%move(2, 6); // move "3" item to the end
  expect(target).toEqual([1, 7, 1, 3]);

  // Destroy the filterer to stop synchronization
  filterer.%destroy();
  </pre>

  <h3>Filterer modules</h3>

  <p><b>Filterer</b> has one common abstract class with one implementation per collection type. Every implementation is
  supplied with a shorthand function that returns target collection directly. There is also a module that merges all
  implementations together and allows you to filter a collection of any (i.e. unknown) type.</p>
  <p>Module dependencies and exports are represented at the following diagram:</p>
  <table class="table table-sm text-center">
    <tbody>
      <tr>
        <td colspan="3">
          <h5>jwidget/filterer/AbstractFilterer</h5>
          <p>%AbstractFilterer</p>
          <p class="text-secondary">All other modules depend on it</p>
        </td>
      </tr>
      <tr>
        <td>
          <h5>jwidget/filterer/list</h5>
          <p>%ListFilterer, %filterList</p>
        </td>
        <td>
          <h5>jwidget/filterer/map</h5>
          <p>%MapFilterer, %filterMap</p>
        </td>
        <td>
          <h5>jwidget/filterer/set</h5>
          <p>%SetFilterer, %filterSet</p>
        </td>
      </tr>
      <tr>
        <td colspan="3">
          <h5>jwidget/filterer/collection</h5>
          <p>%createFilterer, %filterCollection</p>
          <p class="text-danger">Depends on all other modules</p>
        </td>
      </tr>
    </tbody>
  </table>
  <p>Knowledge of this diagram may help you to optimize WebPack bundling. Avoid using modules you don't need to.</p>

  <h3>Features and examples</h3>

  <p>You can pass target collection in config option:</p>
  <pre>
  const source = new %List([1, 2, 3]);
  const target = new %List<number>();
  const filterer = new %ListFilterer(source, x => x % 2 === 1, {%targetOfConfig});
  </pre>
  <p>If you want to filter the values into a new collection, use shorthand functions %filterList, %filterMap, %filterSet and
  %filterCollection instead:</p>
  <pre>
  const source = new %List([1, 2, 3]);
  const target = %filterList(source, x => x % 2 === 1);

  // Destroy the target collection to stop synchronization
  target.%destroy();
  </pre>

  <h3>Synchronizer rules</h3>

  <ul>
    <li>Filtered items of source collection get added to %target immediately on synchronizer initialization.</li>
    <li>Filtered items get removed from %target collection on synchronizer destruction.</li>
    <li>You can pass target map in <b>target</b> config option. In this case, you are responsible for its
    destruction (though items get removed automatically on synchronizer destruction anyway).</li>
    <li>If <b>target</b> is not passed, it gets created automatically. In this
    case, %target gets destroyed automatically on synchronizer destruction.</li>
  </ul>

  <h3>Additional rules for different collection types</h3>

  <p>%List - the synchronizer requires exclusive access to the target collection, i.e.:</p>
  <ul>
    <li>Target collection must be empty before initialization.</li>
    <li>You can't modify target collection manually and/or create other synchronizers with the same target collection.</li>
  </ul>
  <p>%Map - the synchronizer doesn't expect key conflicts, i.e.:</p>
  <ul>
    <li>Target collection can be synchronized with multiple source collections, as long as keys of all items are different.</li>
    <li>You can add items to target collection manually, as long as their keys differ from other collection keys.</li>
  </ul>
  <p>%Set - the synchronizer doesn't expect item conflicts, i.e.:</p>
  <ul>
    <li>Target collection can be synchronized with multiple source collections, as long as all items are different.</li>
    <li>You can add items to target collection manually, as long as they differ from other collection items.</li>
  </ul>

symbols:
  default:
    kind: abstract class
    typevars:
      T: Collection item type.
    extends:
      - file: jwidget/Class
    description: |
      <p>Abstract collection filterer. Builds a new collection of the same type, consisting of items the callback function
      returns truthy value for, and starts continuous synchronization. Preserves item order in a list.</p>

    properties:
      target:
        modifiers: readonly
        type: '%ReadonlyCollection<%T>'
        description: Target collection.

  AbstractFilterer.Config:
    kind: interface
    simple: true
    properties:
      scope:
        modifiers: readonly
        optional: true
        type: any
        description: |
          <p>Call scope of filterer's <b>test</b> callback. Defaults to the synchronizer itself.</p>

references:
  target:
    symbol: default
    member: target

  addAll:
    file: jwidget/IList
    member: addAll

  move:
    file: jwidget/IList
    member: move

  targetOfConfig:
    label: target
