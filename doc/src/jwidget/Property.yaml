symbols:
  default:
    kind: class
    typevars:
      V: Value type.
    extends:
      - file: jwidget/Class
      - file: jwidget/IProperty
    description: |
      <p>Container for a value. Provides basic data binding functionality.</p>
      <p>jWidget provides the following model bindings for %Property out of the box:</p>
      <ul>
        <li>%Copier</li>
        <li>%Mapper</li>
        <li>%Switcher</li>
      </ul>
      <p>jWidget also provides the following Model & View bindings for %Property:</p>
      <ul>
        <li>%bindAttr</li>
        <li>%bindClass</li>
        <li>%bindCss</li>
        <li>%bindDisplay</li>
        <li>%bindHtml</li>
        <li>%bindProp (one-way or two-way)</li>
        <li>%bindRadio (one-way or two-way)</li>
        <li>%bindText</li>
        <li>%bindVal (one-way or two-way)</li>
      </ul>

    topics:
      example1:
        header: Example 1. Property demonstration
        text: |
          <p>The next example demonstrates basic property functionality:</p>
          <pre>
          const prop = new %Property('foo');
          console.log(prop.%get());  // output: foo

          prop.%onChange.%listenMethod(({value}) => console.log(value));
          prop.%set('bar');          // output: bar
          prop.%set('bar');          // no change - no output
          prop.%set('10');           // output: 10
          prop.%set(10);             // output: 10 (different type)

          const doubl = prop.%map(value => value * 2);
          console.log(doubl.%get()); // output: 20
          prop.%set(6);              // output: 6
          console.log(doubl.%get()); // output: 12
          </pre>

      example2:
        header: Example 2. Model & View two-way binding
        text: |
          <p>Example of model class that exposes properties for two-way binding:</p>
          <pre>
          class User extends %Class {
              readonly name = new %Property('');
              readonly age  = new %Property(0);
          }
          </pre>
          <p>And following is an example of view class that uses these bindings:</p>
          <pre>
          @%template(
              '<div>' +
                  '<input type="text" jwid="name">' +
                  '<input type="text" jwid="age">' +
              '</div>'
          )
          class UserView extends %Component {
              constructor(private user: User) {
                  super();
              }

              protected renderName(el: %JQuery) {
                  // simple two-way binding
                  this.%own(%bindVal(el, this.user.name, %TWOWAY));
              }

              protected renderAge(el: %JQuery) {
                  // to display a number in text input, we must map it back and forth

                  // map age to string property
                  const ageString = this.%own(this.user.age.%map(String));

                  // bind it back
                  new %Mapper([ageString], Number, {%target: this.user.age});

                  // bind input element value to age string
                  %bindVal(el, ageString, %TWOWAY);
              }
          }
          </pre>

      example3:
        header: Example 3. One-way binding
        text: |
          <p>If you want to forbid property modification by the clients, use %Bindable getters:</p>
          <pre>
          class Counter extends %Class {
              private _seconds = new %Property(0);

              constructor() {
                  super();
                  this.%own(new %Interval(() => this._seconds.%set(this._seconds.%get() + 1), 1000));
              }

              get seconds(): %Bindable<number> {
                  return this._seconds;
              }
          }
          </pre>
          <p>Now the client can only use one-way binding:</p>
          <pre>
          class CounterView extends %Component {
              constructor(private counter: Counter) {
                  super();
              }

              protected renderRoot(el: %JQuery) {
                  this.%own(%bindText(el, this.counter.seconds));
              }
          }
          </pre>

    constructor:
      signature: |
        (value: %V, silent: boolean = false)
      params:
        value: Initial value.
        silent: |
          If true, uses %dummyDispatcher implementation for %onChange. Use it if you know for sure that the
          property never gets modified or there are no listeners interested in its modification. Since every jWidget
          application relies on many properties, this may help you improve application performance.
      description: |
        Constructs a property and sets initial value.

    references:
      set:
        symbol: default
        member: set
      target:
        file: jwidget/Mapper
        symbol: Mapper.FullConfig
        member: target
