symbols:
  default:
    showInheritanceLevels: 0
    extends:
      - file: jwidget/IClass
    description: |
      <p>Introduces object aggregation support. If you call <code>a.%own(b)</code>, then <code>b</code> is destroyed
      automatically on <code>a</code> destruction. You can aggregate any object implementing %Destroyable. Aggregated objects
      are destroyed in reverse order.</p>
      <p>The convention is to call the respective superclass method of destruction at the end of the overriding
      method. That's why %Class provides two destruction methods for you to override if you want to add an extra
      destruction logic:</p>
      <dl class="row">
        <dt class="col-lg-2 col-sm-3">%destroy</dt>
        <dd class="col-lg-10 col-sm-9">Here, the aggregated objects are still available. When you call
          <code>super.%destroy()</code>, the aggregated objects get destroyed and %destroyObject method gets
          called.</dd>
        <dt class="col-lg-2 col-sm-3">%destroyObject</dt>
        <dd class="col-lg-10 col-sm-9">Here, the aggregated objects are already destroyed. In the majority of cases,
          it is recommended to override this method instead of %destroy.</dd>
      </dl>
      <pre>
      class Book extends %Class {
          cover = this.%own(new Cover());

          %destroyObject() {
              console.log("Destroying book");
              super.%destroyObject();
          }
      }

      class Cover implements %Destroyable {
          %destroy() {
              console.log("Destroying cover");
          }
      }

      const book = new Book();
      book.%destroy();
      </pre>
      <p>Output:</p>
      <samp>Destroying cover
      Destroying book</samp>

    constructor:
      signature: |
        ()
      description: |
        <p>Constructs %Class instance. Usually contructor is called in subclass, but you can also create pure %Class
        instances as dummy objects or aggregators for other objects. For example, by destroying the object returned
        from the next method you cancel both animation and request.</p>
        <pre>
        startOperation() {
            return new %Class().
                %owning(new Animation()).
                %owning(new Request());
        }
        </pre>

    methods:
      destroy:
        signature: '(): void'
        description: |
          <p>Class destructor invocation method. Destroys all aggregated objects and calls %destroyObject method.
          You must call this method explicitly from outside, because JavaScript doesn't support automatic class
          destructor calling.</p>
          <pre>
          const object = new MyClass();

          // ...

          // When the object is not needed anymore, destroy it.
          object.%destroy();
          </pre>
          <p>Alternatively (and optimally), you should use %own method to aggregate this object inside another one.</p>

      destroyObject:
        modifiers: [protected]
        signature: '(): void'
        description: |
          <p>Class destructor implementation. Called in %destroy method after destruction of all aggregated objects.
          The logic of class instance destruction should usually be implemented here. If you override this method,
          remember to call <code>super.%destroyObject()</code> at the end of the method:</p>
          <pre>
          %destroyObject() {
              // Release resources
              ...

              // Call superclass destructor
              super.%destroyObject();
          }
          </pre>
