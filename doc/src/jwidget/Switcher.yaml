symbols:
  default:
    kind: class
    typevars:
      T: Property value type.
    extends:
      - file: jwidget/Class
    description: |
      <p>Listens source %Property modification and calls the specified functions.</p>
      <p>%init function is called on switcher initialization and property change. New value of the property is
      passed as argument.</p>
      <p>%done function is called on property change and switcher destruction. Old value of the property is passed
      as argument.</p>
      <pre>
      const property = new %Property(1);
      const switcher = new %Switcher(property, {
          %init: value => console.log("Init " + value),
          %done: value => console.log("Done " + value)
      });                 // output: Init 1
      property.%setOfProperty(2);    // output: Done 1, Init 2
      property.%setOfProperty(null); // output: Done 2
      property.%setOfProperty(3);    // output: Init 3
      switcher.%destroy(); // output: Done 3
      </pre>
      <p>By default, switcher doesn't call the callbacks if the source value is null or undefined. You can change
      this behaviour using %acceptNil option.</p>
      <p>The next example demonstrates how you can control "selected" field of your model synchronized to global
      "selectedFile" property:</p>
      <pre>
      const selectedFile = new %Property<File>();
      new %Switcher(selectedFile, {
          %init: file => file.selected.%setOfProperty(true),
          %done: file => file.selected.%setOfProperty(false)
      });
      </pre>

    constructor:
      signature: '(source: %Bindable<%T>, config?: %Switcher.%Config<%T>)'
      params:
        source: Source property.
        config: Configuration.
      description: |
        <p>Constructs %Switcher instance. Calls %init callback if applicable initially. Starts synchronization.</p>

    properties:
      source:
        type: '%Bindable<T>'
        modifiers: readonly
        description: <p>Source property.</p>

  Switcher.Config:
    kind: interface
    simple: true
    description: |
      <p>Configuration of %Switcher.</p>
    properties:
      init:
        type: '%Switcher.%Callback'
        description: |
          <p>Value initialization callback.</p>
          <p>Signature: <code>(sourceValue: T): any</code></p>

      done:
        type: '%Switcher.%Callback'
        description: |
          <p>Value releasing callback.</p>
          <p>Signature: <code>(sourceValue: T): any</code></p>

      scope:
        type: any
        description: <p>%init and %done call scope. Defaults to switcher itself.</p>

      acceptNil:
        type: boolean
        description: <p>Set to true if you want the callbacks to be called even if source value is null or undefined.</p>

references:
  Config:
    symbol: Switcher.Config

  init:
    symbol: Switcher.Config
    member: init

  done:
    symbol: Switcher.Config
    member: done

  acceptNil:
    symbol: Switcher.Config
    member: acceptNil

  Callback: {}
