symbols:
  default:
    typevars:
      T: Value type.
    extends:
      - file: jwidget/Class
    description: |
      <p>%ArrayFilterer builds a new array consisting of items the callback function returns a truthy value for in the
      same order.</p>
      <pre>
      const source = new %BindableArray([1, 2, 3]);
      const filterer = new %ArrayFilterer(source, x => x % 2 === 1);
      const target = filterer.%target;
      expect(target.native).eql([1, 3]);

      // Target collection is automatically synchronized with the original collection.
      source.%addAll([4, 7, 1, 6]);
      expect(target.native).eql([1, 3, 7, 1]);

      source.%move(2, 6); // move "3" item to the end
      expect(target.native).eql([1, 7, 1, 3]);

      // Destroy the filterer to stop synchronization.
      filterer.%destroy();
      </pre>

      <h3>Features and examples</h3>

      <p>You can pass target array in a config option:</p>
      <pre>
      const source = new %BindableArray([1, 2, 3]);
      const target = new %BindableArray<number>();
      const filterer = new %ArrayFilterer(source, x => x % 2 === 1, {%targetOfConfig});
      </pre>
      <p>If you want to filter the values into a new array, use shorthand function %startFilteringArray instead:</p>
      <pre>
      const source = new %BindableArray([1, 2, 3]);
      const target = %startFilteringArray(source, x => x % 2 === 1);

      // Destroy the target array to stop synchronization.
      target.%destroy();
      </pre>

      <h3>Synchronizer rules</h3>

      <ul>
        <li>Filtered items of the source collection get added to %target immediately on the synchronizer initialization.</li>
        <li>The %target collection is cleared on the synchronizer destruction.</li>
        <li>Target array gets synchronized with source array continuously until the synchronizer is destroyed.</li>
        <li>The synchronizer requires exclusive access to the target array, i.e. you can't change its contents manually
        and you can't create other synchronizers with the same target array.</li>
      </ul>

    constructor:
      signature: |
        (source: %ReadonlyBindableArray<%T>, test: (value: %T) => boolean, config?: %ArrayFilterer.%Config<%T>)
      params:
        source: Source array.
        test: Filtering criteria.
        config: Filterer configuration.

    properties:
      source:
        modifiers: readonly
        type: '%ReadonlyBindableArray<%T>'
        description: Source array.

      target:
        modifiers: readonly
        type: '%ReadonlyBindableArray<%T>'
        description: Target array.

    methods:
      reconfigure:
        signature: |
          (config: %ArrayFilterer.%Reconfig<%T>)
        params:
          config: Options to modify.
        description: |
          <p>Changes filterer configuration and refilters the target array.</p>

      refilterAt:
        signature: |
          (sourceIndex: number)
        params:
          sourceIndex: Index of source collection item to refilter.
        description: |
          <p>Refilters an item at specified position in the source array.
          Call this method when the item properties change in such a way that it must be refiltered.</p>

      refilter:
        signature: |
          ()
        description: |
          <p>Refilters the target array. Call this method when properties of arbitrary array items change in such a way
          that they must be refiltered.</p>

  ArrayFilterer.Config:
    kind: interface
    simple: true
    typevars:
      T: Value type.
    description: |
      <p>%ArrayFilterer configuration.</p>
    properties:
      target:
        modifiers: readonly
        optional: true
        type: '%IBindableArray<%T>'
        description: Target array.

  ArrayFilterer.Reconfig:
    kind: interface
    simple: true
    typevars:
      T: Value type.
    description: |
      <p>%ArrayFilterer.%reconfigure method configuration. All options are optional. If skipped, an option stays the
      same.</p>
    properties:
      test:
        modifiers: readonly
        optional: true
        type: '(value: %T) => boolean'
        description: New filtering criteria.

  startFilteringArray:
    signature: |
      <T>(source: %ReadonlyBindableArray<T>, test: (value: T) => boolean): %DestroyableReadonlyBindableArray<T>
    params:
      source: Source array.
      test: Filtering criteria.
    returns: Target array.
    description: 'Filters an array and starts synchronization. See %ArrayFilterer for details.'

references:
  reconfigure:
    symbol: default
    member: reconfigure
