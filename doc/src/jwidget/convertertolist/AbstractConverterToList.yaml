description: |
  <p><b>Converter to list</b> is one of collection synchronizers. <b>Converter to list</b> builds a new %List
  containing the items of source collection. Initially, items get added to the list in natural order. This order may differ
  in different browsers. After initialization, all newly added items get appended to the end of the list.</p>
  <pre>
  const source = new %Set([1, 2, 3]);
  const converter = new %SetConverterToList(source);
  const target = converter.%target;

  expect(target.%contains(1)).toBe(true);
  expect(target.%contains(4)).toBe(false);

  // Target collection is automatically synchronized with the original collection
  source.%add(4);
  expect(target.%get(3)).toBe(4);

  // Destroy the converter to stop synchronization
  converter.%destroy();
  </pre>
  <p>If you want to build a list with a special item order, use %sortersComparing instead.</p>

  <h3>Converter to list - modules</h3>

  <p><b>Converter to list</b> has one common abstract class with one implementation per collection type. Every implementation is
  supplied with a shorthand function that returns target collection directly. There is also a module that merges all
  implementations together and allows you to convert a collection of any (i.e. unknown) type.</p>
  <p>Module dependencies and exports are represented at the following diagram:</p>
  <table class="table table-sm text-center">
    <tbody>
      <tr>
        <td colspan="3">
          <h5>jwidget/convertertolist/AbstractConverterToList</h5>
          <p>%AbstractConverterToList</p>
          <p class="text-secondary">All other modules depend on it</p>
        </td>
      </tr>
      <tr>
        <td>
          <h5>jwidget/convertertolist/list</h5>
          <p>%ListConverterToList, %listToList</p>
        </td>
        <td>
          <h5>jwidget/convertertolist/map</h5>
          <p>%MapConverterToList, %mapToList</p>
        </td>
        <td>
          <h5>jwidget/convertertolist/set</h5>
          <p>%SetConverterToList, %setToList</p>
        </td>
      </tr>
      <tr>
        <td colspan="3">
          <h5>jwidget/convertertolist/collection</h5>
          <p>%createConverterToList, %collectionToList</p>
          <p class="text-danger">Depends on all other modules</p>
        </td>
      </tr>
    </tbody>
  </table>
  <p>Knowledge of this diagram may help you to optimize WebPack bundling. Avoid using modules you don't need to.</p>

  <h3>Features and examples</h3>

  <p>You can pass target list in config option:</p>
  <pre>
  const source = new %Set([1, 2, 3]);
  const target = new %List<number>();
  const converter = new %SetConverterToList(source, {%targetOfConfig});
  </pre>
  <p>If you want to create a new list, use shorthand functions %listToList, %mapToList, %setToList and
  %collectionToList instead:</p>
  <pre>
  const source = new %Set([1, 2, 3]);
  const target = %setToList(source);

  // Destroy the target collection to stop synchronization
  target.%destroy();
  </pre>

  <h3>Synchronizer rules</h3>

  <ul>
    <li>All items of source collection get added to %target immediately on synchronizer initialization.</li>
    <li>The items get removed from %target on synchronizer destruction.</li>
    <li>You can pass target set in <b>target</b> config option. In this case, you are responsible for its
    destruction (though items get removed automatically on synchronizer destruction anyway).</li>
    <li>If <b>target</b> is not passed, it gets created automatically. In this
    case, %target gets destroyed automatically on synchronizer destruction.</li>
    <li>All items must be different.</li>
    <li>You can edit target collection manually as long as you avoid item conflicts.</li>
  </ul>

symbols:
  default:
    kind: abstract class
    typevars:
      T: Collection item type.
    extends:
      - file: jwidget/Class
    description: |
      <p>Abstract collection converter to list.</p>

    properties:
      target:
        modifiers: readonly
        type: '%ReadonlyList<%T>'
        description: Target list.

  AbstractConverterToList.Config:
    kind: interface
    simple: true
    typevars:
      T: Collection item type.
    properties:
      target:
        modifiers: readonly
        optional: true
        type: '%IList<%T>'
        description: |
          <p>Target list. By default, created automatically.</p>

references:
  target:
    symbol: default
    member: target

  get:
    file: jwidget/ReadonlyList
    member: get

  contains:
    file: jwidget/ReadonlyCollection
    member: contains

  add:
    file: jwidget/ISet
    member: add

  targetOfConfig:
    symbol: AbstractConverterToList.Config
    member: target
    label: target
