description: |
  <p><b>Reverser</b> is one of collection synchronizers. <b>Reverser</b> builds a list containing all items of the source
  list in reversed order.</p>
  <pre>
  const source = new %List([1, 2, 3]);
  const reverser = new %ListReverser(source);
  const target = reverser.%target;
  expect(target.%items).toEqual([3, 2, 1]);

  source.%add(4);
  expect(target.%items).toEqual([4, 3, 2, 1]);

  source.%remove(2);
  expect(target.%items).toEqual([4, 2, 1]);

  // Destroy the reverser to stop synchronization
  reverser.%destroy();
  </pre>

  <h3>Features and examples</h3>

  <p>You can pass target list in a config option:</p>
  <pre>
  const source = new %List([1, 2, 3]);
  const target = new %List<number>();
  const reverser = new %ListReverser(source, {%targetOfConfig});
  </pre>

  <p>If you want to create a new list, use shorthand function %reverseList instead:</p>
  <pre>
  const source = new %List([1, 2, 3]);
  const target = %reverseList(source);

  // Destroy the target collection to stop synchronization
  target.%destroy();
  </pre>

  <h3>Synchronizer rules</h3>

  <ul>
    <li>Target list must be empty before initialization.</li>
    <li>The synchronizer requires exclusive access to the target list. You can't modify it manually or create other
    synchronizers with the same target list.</li>
    <li>All items of source list are added to %target immediately on synchronizer initialization.</li>
    <li>All items are removed from %target on synchronizer destruction.</li>
    <li>You can pass target list in %targetOfConfig config option. In this case, you are responsible for its destruction
    (though items will be removed automatically on synchronizer destruction anyway).</li>
    <li>If %targetOfConfig is not passed, it gets created automatically. In this
    case, it will be destroyed automatically on synchronizer destruction.</li>
  </ul>

symbols:
  default:
    defaultName: ListReverser
    typevars:
      T: List item type.
    extends:
      - file: jwidget/Class
    description: |
      <p>List reverser. See %reversers for details.</p>

    constructor:
      signature: |
        (source: %ReadonlyList<%T>, config?: %ListReverser.%Config<%T>)
      params:
        source: Source list.
        config: Reverser configuration.

    properties:
      source:
        modifiers: readonly
        type: '%ReadonlyList<%T>'
        description: |
          <p>Source list.</p>

      target:
        modifiers: readonly
        type: '%ReadonlyList<%T>'
        description: |
          <p>Target list.</p>

  ListReverser.Config:
    kind: interface
    simple: true
    typevars:
      T: List item type.

    properties:
      target:
        modifiers: readonly
        optional: true
        type: '%IList<%T>'
        description: |
          <p>Target list. By default, created automatically.</p>

  reverseList:
    signature: |
      <T>(source: %ReadonlyList<T>): %DestroyableReadonlyList<T>
    params:
      source: Source list.
    returns: Reversed list.
    description: |
      <p>Reverses lists and starts synchronization. See %reversers for details.</p>

references:
  Config:
    symbol: ListReverser.Config

  items:
    file: jwidget/ReadonlyList
    member: items

  add:
    file: jwidget/IList
    member: add

  remove:
    file: jwidget/IList
    member: remove

  target:
    symbol: default
    member: target

  targetOfConfig:
    symbol: ListReverser.Config
    member: target
    label: target
