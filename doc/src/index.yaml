title: jWidget 2

description: |
  <div class="container">
    <div class="jumbotron">
      <h1 class="display-4">jWidget 2</h1>
      <p class="lead">Object-oriented TypeScript Model-View framework.</p>
      <hr class="my-4">
      <p>Being straight competitor to the other frontend frameworks, jWidget is good for developers who respect
      the principles of object-oriented programming and appreciate good application performance.</p>
    </div>
    <p>jWidget 2 is available as <a href="https://www.npmjs.com/package/jwidget">npm package</a>.</p>
    <pre>
    npm i jwidget jquery
    </pre>
    <p>jWidget features:</p>
    <ul>
      <li>Base class %Class for object aggregation.</li>
      <li>%Dispatcher class for message listening and dispatching.</li>
      <li>%Property class for value binding.</li>
      <li>%collections, algorithms, synchronizers.</li>
      <li>%Component for UI component creation and inheritance with HTML templates and DOM bindings.</li>
      <li>and many other...</li>
    </ul>
    <p>jWidget is a pure object-oriented solution which doesn't rely on mystic custom HTML templates and unclear
    update cycles. Each object simply listens messages and handles them synchronously in a very straightforward way.
    Look at the next example:</p>
    <pre>
    import $ from "jquery";
    import {%TWOWAY} from "jwidget";
    import %bindText from "jwidget/bindText";
    import %bindVal from "jwidget/bindVal";
    import %Component from "jwidget/Component";
    import %Property from "jwidget/Property";
    import %template from "jwidget/template";

    @%template(`<div class="greeter">
                 <p>Your name: <input jwid="name-field" type="text"></p>
                 <div jwid="greeting"></div>
               </div>`)
    class Greeter extends %Component {

        private name = new %Property("guest");

        protected renderNameField(el: JQuery) {
            // Bind element value to property
            %bindVal(el, this.name, %TWOWAY);
        }

        protected renderGreeting(el: JQuery) {
            // Build greeting message
            const text = this.name.%mapOfBindable(name => `Hello, ${name}!`);

            // Bind element text to message
            %bindText(el, text);
        }
    }

    $(() => {
        new Greeter().%renderTo("body");
    });
    </pre>
    %example:greeter
    <p>Sure, in Angular and React this code would be much shorter, but in jWidget you see clearly how it works. This
    gives you confidence in your ability to implement as complicated and big MV application as you would like to. You
    are free to use all well-known OOD patterns and follow OOD
    <a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)" target="_blank">SOLID principles</a>. Read the
    %TutorialIndex for more examples.</p>
    <p>The difference between jWidget and other Model-View frameworks is the approach of working with properties and
    collections. In other frameworks, data binding is performed implicitly via HTML templates. In jWidget, data binding
    is performed explicitly using %Property and its bindings. Instead of special tags-repeaters in HTML templates, you work with
    collections explicitly using %collections and their synchronizers.</p>
    <p>This approach is more effective: data binding is not constrained by connection between model and view. All the same
    practices are used to bind model objects to each other and to bind view components to each other.</p>
    <p>Current versions of the framework, its source code, tests, documentation, examples and tutorials are distributed
    under terms of <a href="https://opensource.org/licenses/MIT" target="_blank">MIT license</a>. Versions 2.0, 2.1 and
    all versions prior to 1.4.8 are distributed under terms of
    <a href="https://www.gnu.org/licenses/lgpl-3.0.en.html" target="_blank">LGPLv3 license</a>.</p>
    <p>Find source code and bug tracker at <a href="https://github.com/enepomnyaschih/jwidget" target="_blank">GitHub</a>.</p>
    <p><a href="https://github.com/enepomnyaschih/jwidget-template" target="_blank">Preconfigured jWidget project template</a>
    is available for an easy start.</p>
    <p>Legacy jWidget 1 documentation <a href="http://enepomnyaschih.github.io/jwidget/1.4/#!/guide/home">is still available here</a>.</p>
  </div>
