symbols:
  default:
    signature: |
      (el: JQuery, cls: string, property: %Bindable<any>): %Destroyable
      (el: JQuery, cls: %Bindable<string>): %Destroyable
    params:
      el: DOM element.
      cls: Class name.
      property: Property indicating if the class should be activated.
    returns: Binding object. You must %destroy it to stop the synchronization.
    description: |
      <p>Watches boolean or string property modification and updates class attribute in the DOM element.</p>
      <p>One signature allows you to turn on/off the specified class. Any %truthy value is treated as true.</p>
      <pre>
      // Bind "checked" CSS class to checked property value
      %bindClass(el, "checked", checked);
      </pre>
      %example:bindClass1
      <p>Another signature allows you to variate the CSS class name in an element.</p>
      <pre>
      // Bind Bind CSS class name to color property value
      %bindClass(el, color);
      </pre>
      %example:bindClass2
      <p>Both signatures make no impact to the other (unrelated) CSS classes that are already present in the element.</p>
      <p>The function returns a binding object. If you need to stop the synchronization, %destroy it. This is not neccessary
      if you work with a private property and DOM element as in the example above. However, if you work with an
      external model or DOM element (e.g. they get passed to the constructor of the component), you must take care of
      the binding destruction, because life time of these objects can be longer than the life time of your
      component. The easiest way to do it is to %own the binding:</p>
      <pre>
      this.%own(%bindClass(el, color));
      </pre>
