description: |
  <p><b>Observer</b> is one of collection synchronizers. <b>Observer</b> listens all collection events and reduces them
  to 2 granular functions: item is added and item is removed. In optimization purposes, you can define a third function:
  collection is cleared (in case if there is more effective clearing algorithm than iterative items removal).</p>
  <p>This synchronizer can be used to notify the items if they are added to collection:</p>
  <pre>
  interface Item {
      inSet: boolean;
  }

  const item1: Item = {inSet: false};
  const item2: Item = {inSet: false};

  conse set = new %Set([item1]);

  const observer = new %SetObserver(set, {
      %addOfConfig    : item => item.inSet = true,
      %removeOfConfig : item => item.isSet = false
  });

  expect(item1.inSet).toBe(true);
  expect(item2.inSet).toBe(false);

  set.%add(item2);
  expect(item2.inSet).toBe(true);

  set.%remove(item1);
  expect(item1.inSet).toBe(false);

  // Destroy the observer to stop synchronization
  observer.%destroy();
  expect(item2.inSet).toBe(false);
  </pre>

  <h3>Observer - modules</h3>

  <p><b>Observer</b> has one common abstract class with one implementation per collection type. There is also a module
  that merges all implementations together and allows you to observe a collection of any (i.e. unknown) type.</p>
  <p>Module dependencies and exports are represented at the following diagram:</p>
  <table class="table table-sm text-center">
    <tbody>
      <tr>
        <td colspan="3">
          <h5>jwidget/observer/AbstractObserver</h5>
          <p>%AbstractObserver</p>
          <p class="text-secondary">All other modules depend on it</p>
        </td>
      </tr>
      <tr>
        <td>
          <h5>jwidget/observer/list</h5>
          <p>%ListObserver</p>
        </td>
        <td>
          <h5>jwidget/observer/map</h5>
          <p>%MapObserver</p>
        </td>
        <td>
          <h5>jwidget/observer/set</h5>
          <p>%SetObserver</p>
        </td>
      </tr>
      <tr>
        <td colspan="3">
          <h5>jwidget/observer/collection</h5>
          <p>%createObserver</p>
          <p class="text-danger">Depends on all other modules</p>
        </td>
      </tr>
    </tbody>
  </table>
  <p>Knowledge of this diagram may help you to optimize WebPack bundling. Avoid using modules you don't need to.</p>

  <h3>Synchronizer rules</h3>

  <ul>
    <li>Function %addOfConfig is called for all items of source collection on synchronizer initialization.</li>
    <li>Function %clearOfConfig (if present) or %removeOfConfig is called for all items of source collection on
    synchronizer destruction.</li>
    <li>Functions %addOfConfig, %removeOfConfig and %clearOfConfig are called on item adding/removal.</li>
    <li>Functions %addOfConfig, %removeOfConfig and %clearOfConfig are not called on source collection
    reordering/reindexing.</li>
  </ul>

symbols:
  default:
    kind: abstract class
    typevars:
      T: Collection item type.
    extends:
      - file: jwidget/Class
    description: |
      <p>Abstract collection observer.</p>

  AbstractObserver.Config:
    kind: interface
    simple: true
    typevars:
      T: Collection item type.
    properties:
      add:
        modifiers: readonly
        optional: true
        type: '(item: %T) => void'
        description: |
          <p>Callback to call when an item is added to the collection.</p>

      remove:
        modifiers: readonly
        optional: true
        type: '(item: %T) => void'
        description: |
          <p>Callback to call when an item is removed from the collection.</p>

      clear:
        modifiers: readonly
        optional: true
        type: '(items: %T[]) => void'
        description: |
          <p>Callback to call when the collection is cleared. By default, calls %remove for all collection items.</p>

      scope:
        modifiers: readonly
        optional: true
        type: any
        description: |
          <p>Call scope of %add, %remove and %clear callbacks. Defaults to the synchronizer itself.</p>

references:
  add:
    file: jwidget/ISet
    member: add

  remove:
    file: jwidget/ISet
    member: remove

  addOfConfig:
    symbol: AbstractObserver.Config
    member: add
    label: add

  removeOfConfig:
    symbol: AbstractObserver.Config
    member: remove
    label: remove

  clearOfConfig:
    symbol: AbstractObserver.Config
    member: clear
    label: clear
