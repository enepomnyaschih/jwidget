description: |
  <p><b>Converter to set</b> is one of collection synchronizers.</p>
  <pre>
  const source = new %List([1, 2, 3]);
  const converter = new %ListConverterToSet(source);
  const target = converter.%target;

  expect(target.%contains(1)).toBe(true);
  expect(target.%contains(4)).toBe(false);

  // Target collection is automatically synchronized with the original collection
  source.%add(4);
  expect(target.%contains(4)).toBe(true);

  // Destroy the converter to stop synchronization
  converter.%destroy();
  </pre>

  <h3>Converter to set - modules</h3>

  <p><b>Converter to set</b> has one common abstract class with one implementation per collection type. Every implementation is
  supplied with a shorthand function that returns target collection directly. There is also a module that merges all
  implementations together and allows you to map a collection of any (i.e. unknown) type.</p>
  <p>Module dependencies and exports are represented at the following diagram:</p>
  <table class="table table-sm text-center">
    <tbody>
      <tr>
        <td colspan="3">
          <h5>jwidget/convertertoset/AbstractConverterToSet</h5>
          <p>%AbstractConverterToSet</p>
          <p class="text-secondary">All other modules depend on it</p>
        </td>
      </tr>
      <tr>
        <td>
          <h5>jwidget/convertertoset/list</h5>
          <p>%ListConverterToSet, %listToSet</p>
        </td>
        <td>
          <h5>jwidget/convertertoset/map</h5>
          <p>%MapConverterToSet, %mapToSet</p>
        </td>
        <td>
          <h5>jwidget/convertertoset/set</h5>
          <p>%SetConverterToSet, %setToSet</p>
        </td>
      </tr>
      <tr>
        <td colspan="3">
          <h5>jwidget/convertertoset/collection</h5>
          <p>%createConverterToSet, %collectionToSet</p>
          <p class="text-danger">Depends on all other modules</p>
        </td>
      </tr>
    </tbody>
  </table>
  <p>Knowledge of this diagram may help you to optimize WebPack bundling. Avoid using modules you don't need to.</p>

  <h3>Features and examples</h3>

  <p>You can pass target set in config option:</p>
  <pre>
  const source = new %List([1, 2, 3]);
  const target = new %Set<number>();
  const convertertoset = new %ListConverterToSet(source, {%targetOfConfig});
  </pre>
  <p>If you want to index the items into a new set, use shorthand functions %listToSet, %mapToSet, %setToSet and
  %collectionToSet instead:</p>
  <pre>
  const source = new %List([1, 2, 3]);
  const target = %listToSet(source);

  // Destroy the target collection to stop synchronization
  target.%destroy();
  </pre>

  <h3>Synchronizer rules</h3>

  <ul>
    <li>All items of source collection get added to %target immediately on synchronizer initialization.</li>
    <li>Indexed items get removed from %target on synchronizer destruction.</li>
    <li>You can pass target set in <b>target</b> config option. In this case, you are responsible for its
    destruction (though items get removed automatically on synchronizer destruction anyway).</li>
    <li>If <b>target</b> is not passed, it gets created automatically. In this
    case, %target gets destroyed automatically on synchronizer destruction.</li>
    <li>All items must be different.</li>
    <li>You can edit target collection manually as long as you avoid item conflicts.</li>
  </ul>

symbols:
  default:
    kind: abstract class
    typevars:
      T: Collection item type.
    extends:
      - file: jwidget/Class
    description: |
      <p>Abstract collection converter to set.</p>

    properties:
      target:
        modifiers: readonly
        type: '%ReadonlySet<%T>'
        description: Target collection.

  AbstractConverterToSet.Config:
    kind: interface
    simple: true
    typevars:
      T: Collection item type.
    properties:
      target:
        modifiers: readonly
        optional: true
        type: '%ISet<%T>'
        description: |
          <p>Target set. By default, created automatically.</p>

references:
  target:
    symbol: default
    member: target

  contains:
    file: jwidget/ReadonlySet
    member: contains

  add:
    file: jwidget/IList
    member: add

  targetOfConfig:
    symbol: AbstractConverterToSet.Config
    member: target
    label: target
