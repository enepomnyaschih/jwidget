symbols:
  default:
    kind: interface
    typevars:
      T: Item type.
    extends:
      - file: jwidget/ReadonlyCollection
        typevars: [T]
    description: |
      <p>Unordered key-value collection. Each item has its own string key.</p>

    properties:
      items:
        modifiers: readonly
        type: '%Dictionary<%T>'
        description: |
          <p>Item dictionary - internal collection representation.</p>
          <p><b>Caution: doesn't make a copy - please don't modify.</b></p>

      firstKey:
        modifiers: readonly
        type: string
        description: Returns key of %first item. If collection is empty, returns undefined.

      spliceEvent:
        modifiers: readonly
        type: '%Listenable<%IMap.%SpliceEventParams<%T>>'
        description: Items are removed from the map and items are updated in the map.

      reindexEvent:
        modifiers: readonly
        type: '%Listenable<%IMap.%ReindexEventParams<%T>>'
        description: Keys of items are changed in the map.

      clearEvent:
        modifiers: readonly
        type: '%Listenable<%IMap.%ItemsEventParams<%T>>'
        description: The map is cleared.

      changeEvent:
        modifiers: readonly
        type: '%Listenable<%IMap.%EventParams<%T>>'
        description: The map is changed. Triggered right after any another event.

    methods:
      clone:
        signature: |
          (): %IMap<%T>
        returns: Returns a shallow copy of this collection.

      get:
        signature: |
          (key: string): %T
        params:
          key: Item key.
        returns: Item with the specified key. If item with such key doesn't exist, returns undefined.

      getKeys:
        signature: |
          (): %IList<string>
        returns: Array of all map keys.

      containsKey:
        signature: |
          (key: string): boolean
        params:
          key: Item key.
        returns: Item with the specified key exists in the map.

      every:
        signature: |
          (callback: (item: %T, key: string) => any, scope?: any): boolean
        params:
          callback: Criteria callback.
          scope: '%callback call scope. Defaults to the collection.'
        returns: All items match the criteria.
        description: |
          <p>Matches all items against criteria. Returns true if %callback returns %truthy value for all collection
          items. Algorithm iterates through the items consequently, and stops it after the first item not matching
          the criteria.<p>

      some:
        signature: |
          (callback: (item: %T, key: string) => any, scope?: any): boolean
        params:
          callback: Criteria callback.
          scope: '%callback call scope. Defaults to the collection.'
        returns: Some item matches the criteria.
        description: |
          <p>Matches each item against criteria. Returns true if %callback returns %truthy value for at least one item
          in the collection. Algorithms iterates through the items sequentially, and stops it after the first item matching
          the criteria.<p>

      forEach:
        signature: |
          (callback: (item: %T, key: string) => any, scope?: any)
        params:
          callback: Callback function.
          scope: '%callback call scope. Defaults to the collection.'
        description: |
          <p>Iterates through the collection items. Calls the specified function for all items.<p>

      keyOf:
        signature: |
          (item: %T): string
        params:
          item: Item.
        returns: Item key. If item doesn't exist, returns undefined.
        description: |
          <p>Returns key of the specified item in the map.</p>

      find:
        signature: |
          (callback: (item: %T, key: string) => any, scope?: any): %T
        params:
          callback: Criteria callback.
          scope: '%callback call scope. Defaults to the collection.'
        returns: First item matching the criteria.
        description: |
          <p>Finds an item matching the criteria. Returns the first item %callback returns %truthy value for.
          Algorithms iterates through the items sequentially, and stops it after the first item matching the criteria.</p>

      findKey:
        signature: |
          (callback: (item: %T, key: string) => any, scope?: any): %T
        params:
          callback: Criteria callback.
          scope: '%callback call scope. Defaults to the collection.'
        returns: Found item key or undefined.
        description: |
          <p>Finds an item matching the criteria. Returns the key of some item %callback returns %truthy value for.
          Algorithms iterates through the items sequentially, and stops it after the first item matching the criteria.</p>

      toSorted:
        signature: |
          (callback?: (item: %T, key: string) => any, scope?: any, order?: number): %IList<%T>
        params:
          callback: Indexer function. Must return a comparable value, compatible with %cmp. Returns the item itself by default.
          scope: '%callback call scope. Defaults to the collection.'
          order: Sorting order. Positive number for ascending sorting (default), negative number for descending sorting.
        returns: Sorted list.
        description: |
          <p>Converts the collection to a sorted list. Builds a list consisting of the collection items sorted by
          the result of %callback call for each item.</p>

      toSortedComparing:
        signature: |
          (compare?: (t1: %T, t2: %T, k1: string, k2: string) => number, scope?: any, order?: number): %IList<%T>
        params:
          compare: Comparer function. Should return positive value if t1 > t2; negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.
          scope: '%compare call scope. Defaults to the collection.'
          order: Sorting order. Positive number for ascending sorting (default), negative number for descending sorting.
        returns: Sorted list.
        description: |
          <p>Converts the collection to a sorted list. Builds a list consisting of the collection items sorted by
          the comparer.</p>

      getSortingKeys:
        signature: |
          (callback?: (item: %T, key: string) => any, scope?: any, order?: number): %IList<string>
        params:
          callback: Indexer function. Must return a comparable value, compatible with %cmp. Returns the item itself by default.
          scope: '%callback call scope. Defaults to the collection.'
          order: Sorting order. Positive number for ascending sorting (default), negative number for descending sorting.
        returns: Keys of items to build a sorted list.
        description: |
          <p>Builds a list of item keys sorted by the result of %callback call for each item.</p>

      getSortingKeysComparing:
        signature: |
          (compare?: (t1: %T, t2: %T, k1: string, k2: string) => number, scope?: any, order?: number): %IList<string>
        params:
          compare: Comparer function. Should return positive value if t1 > t2; negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.
          scope: '%compare call scope. Defaults to the collection.'
          order: Sorting order. Positive number for ascending sorting (default), negative number for descending sorting.
        returns: Keys of items to build a sorted list.
        description: |
          <p>Builds a list of item keys sorted by comparer.</p>

      index:
        signature: |
          (callback: (item: %T, key: string) => any, scope?: any): %IMap<%T>
        params:
          callback: Indexer function.
          scope: '%callback call scope. Defaults to the collection.'
        returns: Collection index.
        description: |
          <p>Indexes collection. Builds a new map by rule: key is the result of %callback function call, value is the
          corresponding item.</p>

      filter:
        signature: |
          (callback: (item: %T, key: string) => any, scope?: any): %ICollection<%T>
        params:
          callback: Criteria callback.
          scope: '%callback call scope. Defaults to the collection.'
        returns: Filtered collection.
        description: |
          <p>Filters the collection by criteria. Builds a new collection of the same type, consisting of items %callback
          returns %truthy value for.</p>

      count:
        signature: |
          (callback: (item: %T, key: string) => any, scope?: any): number
        params:
          callback: Criteria callback.
          scope: '%callback call scope. Defaults to the collection.'
        returns: Number of matching items.
        description: |
          <p>Counts the items matching criteria. Returns the number of items the callback returns truthy value for.</p>

      map:
        signature: |
          <U>(callback: (item: %T, key: string) => U, scope?: any, getKey?: (item: U) => any): %IMap<U>
        params:
          callback: Mapping function.
          scope: '%callback call scope. Defaults to the collection.'
          getKey: |
            Function which returns unique key of an item in the resulting collection.
            Defaults to %getKeyProperty property of the collection.
        returns: Mapped collection.
        description: |
          <p>Maps collection items. Builds a new collection of the same type, containing results of %callback call for
          each collection item.</p>

      reduce:
        signature: |
          <U>(reducer: %Reducer<%T, U>): U
          <U>(callback: (accumulator: U, item: %T, key: string) => U, initial: U): U
        params:
          reducer: 'Standard %Reducer.'
          callback: Function to execute on each item in the collection.
          initial: Value to use as the first argument to the first call of the callback.
        returns: Final accumulator value.
        description: |
          <p>Applies a function against an accumulator and each item in the collection to reduce it to a single value.</p>

      max:
        signature: |
          (callback?: (item: %T, key: string) => any, scope?: any, order?: number): %T
        params:
          callback: 'Returns a comparable value, compatible with %cmp. Returns the item itself by default.'
          scope: '%callback call scope. Defaults to the collection.'
          order: Pass negative order to find the lowest value.
        returns: Maximum collection item.
        description: |
          <p>Returns the collection item the %callback returns the highest (or lowest if %order < 0) value for.</p>

      maxKey:
        signature: |
          (callback?: (item: %T, key: string) => any, scope?: any, order?: number): number
        params:
          callback: 'Returns a comparable value, compatible with %cmp. Returns the item itself by default.'
          scope: '%callback call scope. Defaults to the collection.'
          order: Pass negative order to find the lowest value.
        returns: Key of item with highest (or lowest) value in map.
        description: |
          <p>Returns index of the map item the %callback returns the highest (or lowest if %order < 0) value for.</p>

      maxComparing:
        signature: |
          (compare?: (t1: %T, t2: %T, k1: string, k2: string) => any, scope?: any, order?: number): %T
        params:
          compare: 'Returns a positive value if t1 > t2; negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.'
          scope: '%compare call scope. Defaults to the collection.'
          order: Pass negative order to find the lowest value.
        returns: Maximum collection item.
        description: |
          <p>Returns the highest (or lowest if %order < 0) collection item in terms of the specified comparer function.</p>

      maxKeyComparing:
        signature: |
          (compare?: (t1: %T, t2: %T, k1: string, k2: string) => any, scope?: any, order?: number): number
        params:
          compare: 'Returns a positive value if t1 > t2; negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.'
          scope: '%compare call scope. Defaults to the collection.'
          order: Pass negative order to find the lowest value.
        returns: Key of highest (or lowest) map item.
        description: |
          <p>Returns index of the highest (or lowest if %order < 0) map item in terms of the specified comparer function.</p>

      min:
        signature: |
          (callback?: (item: %T, key: string) => any, scope?: any, order?: number): %T
        params:
          callback: 'Returns a comparable value, compatible with %cmp. Returns the item itself by default.'
          scope: '%callback call scope. Defaults to the collection.'
          order: Pass negative order to find the highest value.
        returns: Minimum collection item.
        description: |
          <p>Returns the collection item the %callback returns the lowest (or highest if %order < 0) value for.</p>

      minKey:
        signature: |
          (callback?: (item: %T, key: string) => any, scope?: any, order?: number): number
        params:
          callback: 'Returns a comparable value, compatible with %cmp. Returns the item itself by default.'
          scope: '%callback call scope. Defaults to the collection.'
          order: Pass negative order to find the highest value.
        returns: Key of item with lowest (or highest) value in map.
        description: |
          <p>Returns key of the map item the %callback returns the lowest (or highest if %order < 0) value for.</p>

      minComparing:
        signature: |
          (compare?: (t1: %T, t2: %T, k1: string, k2: string) => any, scope?: any, order?: number): %T
        params:
          compare: 'Returns a positive value if t1 > t2; negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.'
          scope: '%compare call scope. Defaults to the collection.'
          order: Pass negative order to find the highest value.
        returns: Minimum collection item.
        description: |
          <p>Returns the lowest (or highest if %order < 0) collection item in terms of the specified comparer function.</p>

      minKeyComparing:
        signature: |
          (compare?: (t1: %T, t2: %T, k1: string, k2: string) => any, scope?: any, order?: number): number
        params:
          compare: 'Returns a positive value if t1 > t2; negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.'
          scope: '%compare call scope. Defaults to the collection.'
          order: Pass negative order to find the highest value.
        returns: Key of lowest (or highest) map item.
        description: |
          <p>Returns key of the lowest (or highest if %order < 0) map item in terms of the specified comparer function.</p>

      equal:
        signature: |
          (dict: %Dictionary<%T>): boolean
        params:
          dict: Dictionary.
        returns: This map is equal to the dictionary.
        description: |
          <p>Checks this map for equality (===) to a dictionary, item by item.</p>

      toDictionary:
        signature: |
          (): %Dictionary<%T>
        returns: Copy of map contents.

      detectSplice:
        signature: |
          (newItems: %Dictionary<%T>): %IMap.%SpliceParams<%T>
        params:
          newItems: New map contents.
        returns: '%splice method arguments. If no method call required, returns undefined.'
        description: |
          <p>Detects %splice method arguments to adjust the map contents to %newItems.
          Determines item bunches to be removed and inserted/replaced, along with their keys.</p>

      detectReindex:
        signature: |
          (newItems: %Dictionary<%T>, getKey?: (item: %T) => any, scope?: any): %Dictionary<string>
        params:
          newItems: New map contents.
          getKey: |
            Function which returns unique key of an item in this collection.
            Defaults to %getKeyProperty property of the collection.
          scope: '%getKey call scope. Defaults to collection itself.'
        returns: '<b>keyMap</b> argument of %reindex method. If no method call required, returns undefined.'
        description: |
          <p>Detects %reindex method arguments to adjust the map contents to %newItems.
          Determines new keys to be assigned to all items.
          If %newItems contents differ from the map contents, it may lead to unknown consequences.</p>

    references:
      getKeyProperty:
        symbol: default
        member: getKey
        label: getKey

      splice:
        file: jwidget/IMap
        member: splice

      reindex:
        file: jwidget/IMap
        member: reindex

      SpliceResult:
        file: jwidget/IMap
        symbol: IMap.SpliceResult
        label: SpliceResult

      SpliceParams:
        file: jwidget/IMap
        symbol: IMap.SpliceParams
        label: SpliceParams

      EventParams:
        file: jwidget/IMap
        symbol: IMap.EventParams
        label: EventParams

      SpliceEventParams:
        file: jwidget/IMap
        symbol: IMap.SpliceEventParams
        label: SpliceEventParams

      ReindexEventParams:
        file: jwidget/IMap
        symbol: IMap.ReindexEventParams
        label: ReindexEventParams

      ItemsEventParams:
        file: jwidget/IMap
        symbol: IMap.ItemsEventParams
        label: ItemsEventParams
