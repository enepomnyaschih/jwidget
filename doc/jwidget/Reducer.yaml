symbols:
  default:
    kind: interface
    simple: true
    typevars:
      T: Array item type.
      U: Accumulator type.
    description: |
      <p>Interface describing an operation that can be applied at once to all elements of a collection.</p>
      <pre>
      %ArrayUtils.%reduce([3, 5, 3, -1], %sum); // 10
      </pre>
      <p>Here, %sum is a %Reducer&lt;any, number&gt;.</p>
    properties:
      initial:
        modifiers: readonly
        type: '%U | (() => %U)'
        description: |
          <p>Initial accumulator value or a function that creates a new initial accumulator value.</p>
    methods:
      callback:
        signature: |
          (accumulator: %U, item: %T): %U
        params:
          accumulator: Current accumulator value.
          item: Next item of the collection.
        returns: New accumulator value.
        description:
          <p>Reducing function. Creates a new accumulator value based on current accumulator value and the next item
          of a collection.</p>

  standard: Standard reducers

  sum:
    type: '%Reducer<any, number>'
    description: |
      <p>Computes sum of all collection items as numbers.</p>
      <pre>
      %ArrayUtils.%reduce([3, 5, 3, -1], %sum); // 10
      </pre>

  production:
    type: '%Reducer<any, number>'
    description: |
      <p>Computes production of all collection items as numbers.</p>
      <pre>
      %ArrayUtils.%reduce([3, 5, 3, -1], %production); // -45
      </pre>

  numericAnd:
    type: '%Reducer<any, number>'
    description: |
      <p>Computes numeric (bitwise) conjunction (AND) of all collection items as numbers.</p>
      <pre>
      %ArrayUtils.%reduce([0x72, 0x56, 0x37], %numericAnd); // 0x12 == 18
      </pre>

  numericOr:
    type: '%Reducer<any, number>'
    description: |
      <p>Computes numeric (bitwise) disjunction (OR) of all collection items as numbers.</p>
      <pre>
      %ArrayUtils.%reduce([0x12, 0x56, 0x30], %numericOr); // 0x76 == 118
      </pre>

  numericXor:
    type: '%Reducer<any, number>'
    description: |
      <p>Computes numeric (bitwise) excluding disjunction (XOR) of all collection items as numbers.</p>
      <pre>
      %ArrayUtils.%reduce([0x12, 0x56, 0x30], %numericXor); // 0x74 == 116
      </pre>

  max:
    type: '%Reducer<any, number>'
    description: |
      <p>Computes maximum item in a collection of numbers.</p>
      <pre>
      %ArrayUtils.%reduce([5, 7, 3, -4], %max); // 7
      </pre>

  min:
    type: '%Reducer<any, number>'
    description: |
      <p>Computes minimum item in a collection of numbers.</p>
      <pre>
      %ArrayUtils.%reduce([5, 7, 3, -4], %max); // -4
      </pre>

  concat:
    type: '%Reducer<any, string>'
    description: |
      <p>Computes concatenation of all collection items as strings.</p>
      <pre>
      %ArrayUtils.%reduce(["Hello", ", ", "World", "!"], %concat); // "Hello, World!"
      </pre>

  and:
    type: '%Reducer<any, boolean>'
    description: |
      <p>Computes logical conjunction (AND) of all collection items as booleans.</p>
      <pre>
      %ArrayUtils.%reduce([true, false, true], %and); // false
      </pre>

  or:
    type: '%Reducer<any, boolean>'
    description: |
      <p>Computes logical disjunction (OR) of all collection items as booleans.</p>
      <pre>
      %ArrayUtils.%reduce([true, false, true], %or); // true
      </pre>

  xor:
    type: '%Reducer<any, boolean>'
    description: |
      <p>Computes logical excluding disjunction (XOR) of all collection items as booleans.</p>
      <pre>
      %ArrayUtils.%reduce([true, false, true], %xor); // false
      </pre>

references:
  initial:
    symbol: default
    member: initial
  callback:
    symbol: default
    member: callback
  reduce:
    file: jwidget/ArrayUtils
    symbol: reduce
