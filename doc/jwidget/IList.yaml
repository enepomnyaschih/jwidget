symbols:
  default:
    kind: interface
    typevars:
      T: Item type.
    extends:
      - file: jwidget/DestroyableReadonlyList
        typevars: [T]
      - file: jwidget/ICollection
        typevars: [T]
    description: |
      <p>Extension of %DestroyableReadonlyList with modification methods.</p>

    methods:
      add:
        signature: |
          (item: %T, index?: number)
        params:
          item: Item to insert.
          index: Index of an item to insert new one before. By default, appends the item to the end of collection.
        description: |
          <p>Inserts an item to the list.</p>

      addAll:
        signature: |
          (items: %T[], index?: number)
        params:
          items: Items to insert.
          index: Index of an item to insert new ones before. By default, appends the items to the end of collection.
        description: |
          <p>Inserts item range to the list.</p>

      set:
        signature: |
          (index: number, item: %T): %T
        params:
          index: Index of an item to replace. If list doesn't contain such index, it may lead to unknown consequences.
          item: Item to put into the list.
        returns: The replaced item.
        description: |
          <p>Replaces item at specified position.</p>

      remove:
        signature: |
          (index: number): %T
        params:
          index: Index of an item to remove.
        returns: The removed item.
        description: |
          <p>Removes item at specified index. If list doesn't contain such index, it may lead to unknown consequences.</p>

      removeAll:
        signature: |
          (index: number, count: number): %T[]
        params:
          index: Index of the first item to remove.
          count: Count of items to remove.
        returns: The removed items. Never returns null or undefined.
        description: |
          <p>Removes item range from the list.</p>

      move:
        signature: |
          (fromIndex: number, toIndex: number): %T
        params:
          fromIndex: Item index to move.
          toIndex: Index to move to.
        returns: The moved item. Never returns null or undefined.
        description: |
          <p>Moves an item inside the list.</p>

      clear:
        signature: |
          (): %T[]
        returns: Old collection contents.
        description: |
          <p>Clears the collection and triggers %clearEvent.</p>

      splice:
        signature: |
          (removeParamsList: %IList.%IndexCount[], addParamsList: %IList.%IndexItems<%T>[]): %IList.%SpliceResult<%T>
        params:
          removeParamsList: Array of segments to remove sorted by index asc. Segments are removed in backward order.
          addParamsList: Array of segments to insert sorted by index asc. Segments are inserted in forward order.
        returns: Splice result. Never returns null or undefined.
        description: |
          <p>Removes and inserts item ranges. Universal optimized granular operation of removal/insertion.</p>

      reorder:
        signature: |
          (indexArray: number[])
        params:
          indexArray: |
            Index array. Item with index <b>i</b> will be moved to index <b>indexArray[i]</b>.
            Must contain all indexes from 0 to (length - 1).
        description: |
          <p>Reorders list items.</p>

      trySet:
        signature: |
          (index: number, item: %T): %Some<%T>
        params:
          index: Index of an item to replace. If list doesn't contain such index, it may lead to unknown consequences.
          item: Item to put into the list.
        returns: Wrapper over the replaced item. If collection is not modified, returns undefined.
        description: |
          <p>Replaces item at specified position.</p>

      tryRemoveAll:
        signature: |
          (index: number, count: number): %T[]
        params:
          index: Index of the first item to remove.
          count: Count of items to remove.
        returns: The removed items. If collection is not modified, returns undefined.
        description: |
          <p>Removes item range from the list.</p>

      tryMove:
        signature: |
          (fromIndex: number, toIndex: number): %T
        params:
          fromIndex: Item index to move.
          toIndex: Index to move to.
        returns: The moved item. If collection is not modified, returns undefined.
        description: |
          <p>Moves an item inside the list.</p>

      trySplice:
        signature: |
          (removeParamsList: %IList.%IndexCount[], addParamsList: %IList.%IndexItems<%T>[]): %IList.%SpliceResult<%T>
        params:
          removeParamsList: Array of segments to remove sorted by index asc. Segments are removed in backward order.
          addParamsList: Array of segments to insert sorted by index asc. Segments are inserted in forward order.
        returns: Splice result. If collection is not modified, returns undefined.
        description: |
          <p>Removes and inserts item ranges. Universal optimized granular operation of removal/insertion.</p>

      tryReorder:
        signature: |
          (indexArray: number[])
        params:
          indexArray: |
            Index array. Item with index <b>i</b> will be moved to index <b>indexArray[i]</b>.
            Must contain all indexes from 0 to (length - 1).
        returns: Old list contents. If collection is not modified, returns undefined.
        description: |
          <p>Reorders list items.</p>

      performSplice:
        signature: |
          (newItems: %T[], getKey?: (item: %T) => any, scope?: any)
        params:
          newItems: New list contents.
          getKey: |
            Function which returns unique key of an item in this collection.
            Defaults to %getKeyProperty property of the collection.
          scope: '%getKey call scope. Defaults to collection itself.'
        description: |
          <p>Adjusts list contents to %newItems using %detectSplice and %splice methods.
          All items must have unique %getKey function result.
          If items don't have unique key, probably %performFilter method may help,
          because it doesn't require item uniquiness.</p>

      performFilter:
        signature: |
          (newItems: %T[])
        params:
          newItems: New list contents.
        description: |
          <p>Adjusts list contents to %newItems using %detectFilter and %splice methods. Only removes items.
          Doesn't assume items insertion - try %detectSplice if that's the case.
          In advantage to %detectSplice, doesn't require item uniquiness.</p>

      performReorder:
        signature: |
          (newItems: %T[], getKey?: (item: %T) => any, scope?: any)
        params:
          newItems: New list contents.
          getKey: |
            Function which returns unique key of an item in this collection.
            Defaults to %getKeyProperty property of the collection.
          scope: '%getKey call scope. Defaults to collection itself.'
        description: |
          <p>Adjusts list contents to %newItems using %detectReorder and %reorder methods.</p>

      sort:
        signature: |
          (callback?: (item: %T, index: number) => any, scope?: any, order?: number)
        params:
          callback: |
            Indexer function. Must return a comparable value, compatible with %cmp. Returns item itself by default.
          scope: '%callback call scope. Defaults to collection itself.'
          order: Sorting order. Positive number for ascending sorting, negative for descending sorting.
        description: |
          <p>Sorts the list by result of %callback function call for each item.</p>

      sortComparing:
        signature: |
          (compare?: (t1: %T, t2: %T, i1: number, i2: number) => number, scope?: any, order?: number)
        params:
          compare: |
            Comparer function. Should return positive value if t1 > t2;
            negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.
          scope: '%compare call scope. Defaults to collection itself.'
          order: Sorting order. Positive number for ascending sorting, negative for descending sorting.
        description: |
          <p>Sorts the list by comparer.</p>

      reverse:
        signature: |
          ()
        description: |
          <p>Reverses item order in the list. Modifies the list itself.</p>

      pop:
        signature: |
          (): %T
        returns: The removed item or undefined.
        description: |
          <p>Removes last item from the list. Does nothing if the list is empty.</p>

    references:
      EventParams:
        file: jwidget/IList
        symbol: IMap.EventParams
        label: EventParams

  IList.EventParams:
    kind: interface
    simple: true
    typevars:
      T: Item type.
    extends:
      - file: jwidget/ICollection
        symbol: ICollection.EventParams
        typevars: [T]
    description: |
      <p>%IList event parameters.</p>
    properties:
      sender:
        modifiers: readonly
        type: '%IList<%T>'
        description: Event sender.

  IList.SpliceEventParams:
    kind: interface
    simple: true
    typevars:
      T: Item type.
    extends:
      - file: jwidget/IList
        symbol: IList.EventParams
        typevars: [T]
    description: |
      <p>Parameters of %spliceEvent.</p>
    properties:
      spliceResult:
        modifiers: readonly
        type: '%IList.%SpliceResult<%T>'
        description: 'Parameters of %spliceEvent.'

  IList.MoveEventParams:
    kind: interface
    simple: true
    typevars:
      T: Item type.
    extends:
      - file: jwidget/IList
        symbol: IList.EventParams
        typevars: [T]
    description: |
      <p>Parameters of %moveEvent.</p>
    properties:
      fromIndex:
        modifiers: readonly
        type: number
        description: Where item is moved from.

      toIndex:
        modifiers: readonly
        type: number
        description: Where item is moved to.

      item:
        modifiers: readonly
        type: '%T'
        description: The moved item.

  IList.ReplaceEventParams:
    kind: interface
    simple: true
    typevars:
      T: Item type.
    extends:
      - file: jwidget/IList
        symbol: IList.EventParams
        typevars: [T]
    description: |
      <p>Parameters of %replaceEvent.</p>
    properties:
      index:
        modifiers: readonly
        type: number
        description: Index of the replaced item.

      oldItem:
        modifiers: readonly
        type: '%T'
        description: Old item.

      newItem:
        modifiers: readonly
        type: '%T'
        description: New item.

  IList.ItemsEventParams:
    kind: interface
    simple: true
    typevars:
      T: Item type.
    extends:
      - file: jwidget/IList
        symbol: IList.EventParams
        typevars: [T]
    description: |
      <p>Parameters of %clearEvent.</p>
    properties:
      items:
        modifiers: readonly
        type: '%T[]'
        description: Old list contents.

  IList.ReorderEventParams:
    kind: interface
    simple: true
    typevars:
      T: Item type.
    extends:
      - file: jwidget/IList
        symbol: IList.ItemsEventParams
        typevars: [T]
    description: |
      <p>Parameters of %reorderEvent.</p>
    properties:
      indexArray:
        modifiers: readonly
        type: 'number[]'
        description: Indexes of items in reordered list.

  IList.SpliceParams:
    kind: interface
    simple: true
    typevars:
      T: Item type.
    description: |
      <p>%splice method arguments. Result of %detectSplice method.</p>
    properties:
      removeParamsList:
        modifiers: readonly
        type: '%IList.%IndexCount[]'
        description: Segments to remove.

      addParamsList:
        modifiers: readonly
        type: '%IList.%IndexItems<%T>[]'
        description: Segments to add.

  IList.SpliceResult:
    kind: interface
    simple: true
    typevars:
      T: Item type.
    description: |
      <p>%IList.%splice method result.</p>
    properties:
      oldItems:
        modifiers: readonly
        type: '%T[]'
        description: Old list contents.
      removedItemsList:
        modifiers: readonly
        type: '%IList.%IndexItems<%T>[]'
        description: Removed item segments.
      addedItemsList:
        modifiers: readonly
        type: '%IList.%IndexItems<%T>[]'
        description: Added item segments.
      removedItems:
        modifiers: readonly
        type: '%T[]'
        description: Plain array of all removed items.
      addedItems:
        modifiers: readonly
        type: '%T[]'
        description: Plain array of all added items.
      removeParamsList:
        modifiers: readonly
        type: '%IList.%IndexCount[]'
        description: Removed item segments converted to index and count pairs.
      empty:
        modifiers: readonly
        type: boolean
        description: The splice call didn't change the list.

  IList.IndexCount:
    kind: interface
    simple: true
    description: |
      <p>Index and count pair. Used in %IList.%splice method arguments to specify item segments to remove.</p>
    properties:
      index:
        modifiers: readonly
        type: number
        description: Index.
      count:
        modifiers: readonly
        type: number
        description: Count.
    methods:
      clone:
        signature: |
          (): %IList.%IndexCount
        returns: Clone.

  IList.IndexItems:
    kind: interface
    simple: true
    typevars:
      T: Item type.
    description: |
      <p>Index and items pair. Used in %IList.%splice method arguments to specify item segments to insert, and in
      %SpliceResult class to specify removed and added item segments.</p>
    properties:
      index:
        modifiers: readonly
        type: number
        description: Index.
      items:
        modifiers: readonly
        type: '%T[]'
        description: Items.
    methods:
      toIndexCount:
        signature: |
          (): %IList.%IndexCount
        returns: Index and count pair.
        description: Converts to index and count pair.
      clone:
        signature: |
          (): %IList.%IndexItems<%T>
        returns: Clone.

references:
  splice:
    symbol: default
    member: splice

  detectSplice:
    symbol: default
    member: detectSplice

  spliceEvent:
    symbol: default
    member: spliceEvent

  moveEvent:
    symbol: default
    member: moveEvent

  replaceEvent:
    symbol: default
    member: replaceEvent

  reorderEvent:
    symbol: default
    member: reorderEvent

  clearEvent:
    symbol: default
    member: clearEvent

  SpliceResult:
    symbol: IList.SpliceResult
