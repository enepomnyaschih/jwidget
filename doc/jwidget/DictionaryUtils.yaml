description: |
  <p>Utilities for %Dictionary which is basically native JavaScript object. Some utilities duplicate the functions of
  %underscore and %lodash, but still may come in handy if you want to keep dependency list short.</p>

symbols:
  getters: Getter functions

  getFirst:
    signature: |
      <T>(dict: %Dictionary<T>): T
    params:
      dict: Dictionary.
    returns: Some item. If dictionary is empty, returns undefined.

  getFirstKey:
    signature: |
      <T>(dict: %Dictionary<T>): string
    params:
      dict: Dictionary.
    returns: Key of some item. If dictionary is empty, returns undefined.

  getLength:
    signature: |
      <T>(dict: %Dictionary<T>): number
    params:
      dict: Dictionary.
    returns: Count of items in dictionary.

  isEmpty:
    signature: |
      <T>(dict: %Dictionary<T>): boolean
    params:
      dict: Dictionary.
    returns: Dictionary is empty, i.e. has no keys/items.

  searchers: Item search functions

  contains:
    signature: |
      <T>(dict: %Dictionary<T>, item: T): boolean
    params:
      dict: Dictionary.
      item: Item to find.
    returns: Item exists in dictionary.

  keyOf:
    signature: |
      <T>(dict: %Dictionary<T>, item: T): string
    params:
      dict: Dictionary.
      item: Item to find.
    returns: Key of item. If the item doesn't exist, returns undefined.

  find:
    signature: |
      <T>(dict: %Dictionary<T>, callback: (item: T, key: string) => any, scope?: any): T
    params:
      dict: Dictionary.
      callback: Criteria callback.
      scope: '%callback call scope. Defaults to %dict.'
    returns: The found item or undefined.
    description: |
      <p>Finds item matching criteria. Returns the first item the %callback returns %truthy value for. Algorithm
      iterates through the items consequently, and stops it after the first item matching the criteria.</p>

  findKey:
    signature: |
      <T>(dict: %Dictionary<T>, callback: (item: T, key: string) => any, scope?: any): string
    params:
      dict: Dictionary.
      callback: Criteria callback.
      scope: '%callback call scope. Defaults to %dict.'
    returns: Key of the found item or undefined.
    description: |
      <p>Finds item matching criteria. Returns the key of the first item the callback returns %truthy value for.
      Algorithm iterates through the items consequently, and stops it after the first item matching the criteria.</p>

  max:
    signature: |
      <T>(dict: %Dictionary<T>, callback?: (item: T, key: string) => any, scope?: any, order?: number): T
    params:
      dict: Dictionary.
      callback: Returns a comparable value, compatible with %cmp. Returns the item itself by default.
      scope: '%callback call scope. Defaults to %dict.'
      order: Pass negative order to find the lowest value.
    returns: Maximum dictionary item.
    description: |
      <p>Returns the dictionary item the %callback returns the highest (or lowest if %order < 0) value for.</p>

  maxKey:
    signature: |
      <T>(dict: %Dictionary<T>, callback?: (item: T, key: string) => any, scope?: any, order?: number): string
    params:
      dict: Dictionary.
      callback: Returns a comparable value, compatible with %cmp. Returns the item itself by default.
      scope: '%callback call scope. Defaults to %dict.'
      order: Pass negative order to find the lowest value.
    returns: Key of the maximum dictionary item.
    description: |
      <p>Returns key of the dictionary item the %callback returns the highest (or lowest if %order < 0) value for.</p>

  maxComparing:
    signature: |
      <T>(dict: %Dictionary<T>, compare?: (t1: T, t2: T, k1: string, k2: string) => any, scope?: any, order?: number): T
    params:
      dict: Dictionary.
      compare: Return a positive value if t1 > t2; negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.
      scope: '%compare call scope. Defaults to %dict.'
      order: Pass negative order to find the lowest value.
    returns: Maximum dictionary item.
    description: |
      <p>Returns the highest (or lowest if %order < 0) dictionary item in terms of the specified comparer function.</p>

  maxKeyComparing:
    signature: |
      <T>(dict: %Dictionary<T>, compare?: (t1: T, t2: T, k1: string, k2: string) => any, scope?: any, order?: number): string
    params:
      dict: Dictionary.
      compare: Return a positive value if t1 > t2; negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.
      scope: '%compare call scope. Defaults to %dict.'
      order: Pass negative order to find the lowest value.
    returns: Key of the maximum dictionary item.
    description: |
      <p>Returns key of the highest (or lowest if %order < 0) dictionary item in terms of the specified comparer function.</p>

  min:
    signature: |
      <T>(dict: %Dictionary<T>, callback?: (item: T, key: string) => any, scope?: any, order?: number): T
    params:
      dict: Dictionary.
      callback: Returns a comparable value, compatible with %cmp. Returns the item itself by default.
      scope: '%callback call scope. Defaults to %dict.'
      order: Pass negative order to find the highest value.
    returns: Minimum dictionary item.
    description: |
      <p>Returns the dictionary item the %callback returns the lowest (or highest if %order < 0) value for.</p>

  minKey:
    signature: |
      <T>(dict: %Dictionary<T>, callback?: (item: T, key: string) => any, scope?: any, order?: number): string
    params:
      dict: Dictionary.
      callback: Returns a comparable value, compatible with %cmp. Returns the item itself by default.
      scope: '%callback call scope. Defaults to %dict.'
      order: Pass negative order to find the highest value.
    returns: Key of the minimum dictionary item.
    description: |
      <p>Returns key of the dictionary item the %callback returns the lowest (or highest if %order < 0) value for.</p>

  minComparing:
    signature: |
      <T>(dict: %Dictionary<T>, compare?: (t1: T, t2: T, k1: string, k2: string) => any, scope?: any, order?: number): T
    params:
      dict: Dictionary.
      compare: Return a positive value if t1 > t2; negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.
      scope: '%compare call scope. Defaults to %dict.'
      order: Pass negative order to find the highest value.
    returns: Minimum dictionary item.
    description: |
      <p>Returns the lowest (or highest if %order < 0) dictionary item in terms of the specified comparer function.</p>

  minKeyComparing:
    signature: |
      <T>(dict: %Dictionary<T>, compare?: (t1: T, t2: T, k1: string, k2: string) => any, scope?: any, order?: number): string
    params:
      dict: Dictionary.
      compare: Return a positive value if t1 > t2; negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.
      scope: '%compare call scope. Defaults to %dict.'
      order: Pass negative order to find the highest value.
    returns: Key of the minimum dictionary item.
    description: |
      <p>Returns key of the lowest (or highest if %order < 0) dictionary item in terms of the specified comparer function.</p>

  setters: Dictionary modification functions

  put:
    signature: |
      <T>(dict: %Dictionary<T>, key: string, item: T): T
    params:
      dict: Dictionary.
      key: Key.
      item: Item.
    returns: The replaced item or undefined.
    description: |
      <p>Replaces the item by the key. If the dictionary doesn't contain the key, a new item gets added.</p>

  putAll:
    signature: |
      <T>(dict: %Dictionary<T>, items: %Dictionary<T>)
    params:
      dict: Dictionary.
      items: Items with corresponding keys.
    description: |
      <p>Adds or replaces a bunch of items in the dictionary.</p>

  putAllVerbose:
    signature: |
      <T>(dict: %Dictionary<T>, items: %Dictionary<T>): %IMap.%SpliceResult<T>
    params:
      dict: Dictionary.
      items: Items with corresponding keys.
    returns: Result of internal %splice method call. Nevers returns null or undefined.
    description: |
      <p>Low-performance alternative to %putAll with verbose result set.</p>

  remove:
    signature: |
      <T>(dict: %Dictionary<T>, key: string): T
    params:
      dict: Dictionary.
      key: Key of item to remove.
    returns: The removed dictionary item.
    description: |
      <p>Removes an item with the specified key if it exists in the dictionary.</p>

  removeAll:
    signature: |
      <T>(dict: %Dictionary<T>, keys: string[])
    params:
      dict: Dictionary.
      keys: Keys of items to remove.
    description: |
      <p>Removes a bunch of items from dictionary.</p>

  removeAllVerbose:
    signature: |
      <T>(dict: %Dictionary<T>, keys: string[]): %Dictionary<T>
    params:
      dict: Dictionary.
      keys: Keys of items to remove.
    returns: The removed items. Never returns null or undefined.
    description: |
      <p>Low-performance alternative to %removeAll with verbose result set.</p>

  removeItem:
    signature: |
      <T>(dict: %Dictionary<T>, item: T): string
    params:
      dict: Dictionary.
      item: Item to remove.
    returns: Item key in the dictionary.
    description: |
      <p>Removes an item from the dictionary.</p>

  removeItems:
    signature: |
      <T>(dict: %Dictionary<T>, items: T[], getKey?: (item: T) => any)
    params:
      dict: Dictionary.
      items: Items to remove.
      getKey: |
        Function which returns unique key of an item in this dictionary. By default, efficiently identifies
        primitive values and %Identifiable objects.
    description: |
      <p>Removes all occurrences of items in the dictionary.</p>

  setKey:
    signature: |
      <T>(dict: %Dictionary<T>, oldKey: string, newKey: string): T
    params:
      dict: Dictionary.
      oldKey: Old item key.
      newKey: New item key.
    returns: The moved item.
    description: |
      <p>Changes item key in dictionary. If dictionary doesn't contain %oldKey or contains %newKey, it may lead to
      unpredictable results.</p>

  clear:
    signature: |
      <T>(dict: %Dictionary<T>): %Dictionary<T>
    params:
      dict: Dictionary.
    returns: Old dictionary contents. Never returns null or undefined.
    description: |
      <p>Clears the dictionary.</p>

  splice:
    signature: |
      <T>(dict: %Dictionary<T>, removedKeys: string[], updatedItems: %Dictionary<T>): %IMap.%SpliceResult<T>
    params:
      dict: Dictionary.
      removedKeys: Keys of items to remove.
      updatedItems: Items to add/replace.
    returns: Splice result. Never returns null or undefined.
    description: |
      <p>Removes and adds bunches of items in the dictionary. Universal optimized granular operation of
      removal/insertion.<p>

  reindex:
    signature: |
      <T>(dict: Dictionary<T>, keyMap: Dictionary<string>): Dictionary<string>
    params:
      dict: Dictionary.
      keyMap: Key mapping.
    returns: Map of changed keys. Never returns null or undefined.
    description: |
      <p>Changes item keys in dictionary. Item with key x will gain key %keyMap[x]. It is enough to pass only changed
      keys, but unchanged keys or unexisting keys are acceptable as well.</p>

  other: Other functions

  clone:
    signature: |
      <T>(dict: %Dictionary<T>): %Dictionary<T>
    params:
      dict: Dictionary.
    returns: Shallow copy of the dictionary.

  every:
    signature: |
      <T>(dict: %Dictionary<T>, callback: (item: T, key: string) => any, scope?: any): boolean
    params:
      dict: Dictionary.
      callback: Criteria callback.
      scope: '%callback call scope. Defaults to %dict.'
    returns: Every item matches the criteria.
    description: |
      <p>Matches all items against criteria. Returns true if %callback returns %truthy value for all dictionary items.
      Algorithm iterates through items consequently, and stops it after the first item not matching the criteria.</p>

  some:
    signature: |
      <T>(dict: %Dictionary<T>, callback: (item: T, key: string) => any, scope?: any): boolean
    params:
      dict: Dictionary.
      callback: Criteria callback.
      scope: '%callback call scope. Defaults to %dict.'
    returns: Some item matches the criteria.
    description: |
      <p>Matches each item against criteria. Returns true if %callback returns %truthy value for some dictionary item.
      Algorithm iterates through items consequently, and stops it after the first item matching the criteria.</p>

  forEach:
    signature: |
      <T>(dict: %Dictionary<T>, callback: (item: T, key: string) => any, scope?: any)
    params:
      dict: Dictionary.
      callback: Callback function.
      scope: '%callback call scope. Defaults to %dict.'
    description: |
      <p>Iterates through dictionary items. Calls specified function for all items.</p>

  filter:
    signature: |
      <T>(dict: %Dictionary<T>, callback: (item: T, key: string) => any, scope?: any): %Dictionary<T>
    params:
      dict: Dictionary.
      callback: Criteria callback.
      scope: '%callback call scope. Defaults to %dict.'
    returns: Filtered dictionary.
    description: |
      <p>Filters the dictionary by criteria. Builds a new dictionary, consisting of the items the %callback returns
      %truthy value for.</p>

  count:
    signature: |
      <T>(dict: %Dictionary<T>, callback: (item: T, key: string) => any, scope?: any): number
    params:
      dict: Dictionary.
      callback: Criteria callback.
      scope: '%callback call scope. Defaults to %dict.'
    returns: Count of matching items.
    description: |
      <p>Counts the items matching criteria. Returns the number of the items the %callback returns %truthy value for.</p>

  map:
    signature: |
      <T, U>(dict: %Dictionary<T>, callback: (item: T, key: string) => U, scope?: any): %Dictionary<U>
    params:
      dict: Dictionary.
      callback: Mapping function.
      scope: '%callback call scope. Defaults to %dict.'
    returns: The mapped dictionary.
    description: |
      <p>Maps dictionary items. Builds a new dictionary, containing results of the %callback call for each dictionary
      item.</p>

  getSortingKeys:
    signature: |
      <T>(dict: %Dictionary<T>, callback?: (item: T, key: string) => any, scope?: any, order?: number): string[]
    params:
      dict: Dictionary.
      callback: Indexer function. Must return a comparable value, compatible with %cmp. Returns the item itself by default.
      scope: '%callback call scope. Defaults to %dict.'
      order: Sorting order. Positive number for ascending sorting, negative for descending sorting.
    returns: Keys of sorted items.
    description: |
      <p>Builds an array of item keys sorted by the result of %callback call for each item.</p>

  getSortingKeysComparing:
    signature: |
      <T>(dict: %Dictionary<T>, compare?: (t1: T, t2: T, k1: string, k2: string) => any, scope?: any, order?: number): string[]
    params:
      dict: Dictionary.
      compare: Comparer function. Must return positive value if t1 > t2; negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.
      scope: '%compare call scope. Defaults to %dict.'
      order: Sorting order. Positive number for ascending sorting, negative for descending sorting.
    returns: Keys of sorted items.
    description: |
      <p>Builds an array of item keys sorted by the comparer.</p>

  toSorted:
    signature: |
      <T>(dict: %Dictionary<T>, callback?: (item: T, key: string) => any, scope?: any, order?: number): T[]
    params:
      dict: Dictionary.
      callback: Indexer function. Must return a comparable value, compatible with %cmp. Returns the item itself by default.
      scope: '%callback call scope. Defaults to %dict.'
      order: Sorting order. Positive number for ascending sorting, negative for descending sorting.
    returns: Sorted array.
    description: |
      <p>Builds an array of dictionary items sorted by the result of %callback call for each item.</p>

  toSortedComparing:
    signature: |
      <T>(dict: %Dictionary<T>, compare?: (t1: T, t2: T, k1: string, k2: string) => any, scope?: any, order?: number): T[]
    params:
      dict: Dictionary.
      compare: Comparer function. Must return positive value if t1 > t2; negative value if t1 < t2; 0 if t1 == t2. Defaults to %cmp.
      scope: '%compare call scope. Defaults to %dict.'
      order: Sorting order. Positive number for ascending sorting, negative for descending sorting.
    returns: Sorted array.
    description: |
      <p>Builds an array of dictionary items sorted by the comparer.</p>

  toArray:
    signature: |
      <T>(dict: %Dictionary<T>): T[]
    params:
      dict: Dictionary.
    returns: Array of all dictionary items.

  index:
    signature: |
      <T>(dict: %Dictionary<T>, callback: (item: T, key: string) => any, scope?: any): %Dictionary<T>
    params:
      dict: Dictionary.
      callback: Indexer function.
      scope: '%callback call scope. Defaults to %dict.'
    returns: Index of dictionary items.
    description: |
      <p>Indexes dictionary items. Builds a new dictionary by rule: key is the result of %callback function call, value
      is the corresponding item.</p>

  reduce:
    signature: |
      <T, U>(dict: %Dictionary<T>, reducer: %Reducer<T, U>): U
      <T, U>(dict: %Dictionary<T>, callback: (accumulator: U, item: T, key: string) => U, initial: U): U
    params:
      dict: Dictionary.
      reducer: Standard %Reducer.
      callback: Function to execute on each item in the dictionary.
      initial: Value to use as the first argument to the first call of the callback.
    returns: Final accumulator value.
    description: |
      <p>Applies a function against an accumulator and each item in the dictionary to reduce it to a single value.</p>

  equal:
    signature: |
      <T>(x: %Dictionary<T>, y: %Dictionary<T>): boolean
    params:
      x: First dictionary.
      y: Second dictionary.
    returns: Dictionaries are equal.
    description: |
      <p>Checks two dictionaries for equality, item by item (===). Not a deep comparison.</p>

  internal: Low-level functions (primarily for internal usage)

  tryPut:
    signature: |
      <T>(dict: %Dictionary<T>, key: string, item: T): %Some<T>
    params:
      dict: Dictionary.
      key: Key.
      item: Item.
    returns: The replaced item. If dictionary is not modified, returns undefined.
    description: |
      <p>The same as %put, but returns undefined if the dictionary stays unmodified. Else returns %Some of the removed item.</p>

  tryPutAll:
    signature: |
      <T>(dict: %Dictionary<T>, items: %Dictionary<T>): %IMap.%SpliceResult<T>
    params:
      dict: Dictionary.
      items: Items with corresponding keys.
    returns: Result of internal %splice method call. If dictionary is not modified, returns undefined.
    description: |
      <p>The same as %putAllVerbose, but returns undefined if the dictionary stays unmodified.</p>

  tryRemove:
    signature: |
      <T>(dict: %Dictionary<T>, key: string): T
    params:
      dict: Dictionary.
    returns: Old dictionary item. If dictionary is not modified, returns undefined.
    description: |
      <p>The same as %remove, but returns undefined if the dictionary stays unmodified.</p>

  tryRemoveAll:
    signature: |
      <T>(dict: %Dictionary<T>, keys: string[]): %Dictionary<T>
    params:
      dict: Dictionary.
      keys: Keys of items to remove.
    returns: The removed items. If dictionary is not modified, returns undefined.
    description: |
      <p>The same as %removeAllVerbose, but returns undefined if the dictionary stays unmodified.</p>

  trySetKey:
    signature: |
      <T>(dict: %Dictionary<T>, oldKey: string, newKey: string): T
    params:
      dict: Dictionary.
      oldKey: Old item key.
      newKey: New item key.
    returns: The moved item. If dictionary is not modified, returns undefined.
    description: |
      <p>The same as %setKey, but returns undefined if the dictionary stays unmodified.</p>

  tryClear:
    signature: |
      <T>(dict: %Dictionary<T>): %Dictionary<T>
    params:
      dict: Dictionary.
    returns: Old dictionary contents. If not modified, returns undefined.
    description: |
      <p>The same as %clear, but returns undefined if the dictionary stays unmodified.</p>

  trySplice:
    signature: |
      <T>(dict: %Dictionary<T>, removedKeys: string[], updatedItems: %Dictionary<T>): %IMap.%SpliceResult<T>
    params:
      dict: Dictionary.
      removedKeys: Keys of items to remove.
      updatedItems: Items to add/replace.
    returns: Splice result. If dictionary is not modified, returns undefined.
    description: |
      <p>The same as %splice, but returns undefined if the dictionary stays unmodified.</p>

  tryReindex:
    signature: |
      <T>(dict: %Dictionary<T>, keyMap: %Dictionary<string>): %Dictionary<string>
    params:
      dict: Dictionary.
      keyMap: Key mapping.
    returns: Map of changed keys. If dictionary is not modified, returns undefined.
    description: |
      <p>The same as %reindex, but returns undefined if the dictionary stays unmodified.</p>

  detectSplice:
    signature: |
      <T>(oldItems: %Dictionary<T>, newItems: %Dictionary<T>): %IMap.%SpliceParams<T>
    params:
      oldItems: Old dictionary contents.
      newItems: New dictionary contents.
    returns: '%splice method arguments. If no method call required, returns undefined.'
    description: |
      <p>Detects %splice method arguments to adjust dictionary contents to %newItems. Determines item bunches to be
      removed and inserted/replaced, and their keys.</p>

  detectReindex:
    signature: |
      <T>(oldItems: %Dictionary<T>, newItems: %Dictionary<T>, getKey?: (item: T) => any): %Dictionary<string>
    params:
      oldItems: Old dictionary contents.
      newItems: New dictionary contents.
      getKey: |
        Function which returns unique key of an item in this dictionary. By default, efficiently identifies
        primitive values and %Identifiable objects.
    returns: '<b>keyMap</b> argument of %reindex method. If no method call required, returns undefined.'
    description: |
      <p>Detects %reindex method arguments to adjust dictionary contents to %newItems. Determines keys to be assigned
      to all items. If %newItems contents differ from current dictionary contents, it may lead to unpredictable results.</p>

  getRemovedKeys:
    signature: |
      <T>(removedItems: %Dictionary<T>, addedItems: %Dictionary<T>): string[]
    params:
      removedItems: Removed items.
      addedItems: Added items.
    returns: Effectively removed keys.
    description: |
      <p>Based on the removed and added items during dictionary %splice, returns keys which were effectively removed,
      not replaced by the other items.</p>

  getInverted:
    signature: |
      (dict: %Dictionary<string>): %Dictionary<string>
    params:
      dict: Dictionary.
    returns: The inverted dictionary.
    description: |
      <p>Creates a new dictionary by rule: <code>result[dict[key]] === key</code>.</p>

references:
  SpliceResult:
    file: jwidget/IMap
    symbol: IMap.SpliceResult
