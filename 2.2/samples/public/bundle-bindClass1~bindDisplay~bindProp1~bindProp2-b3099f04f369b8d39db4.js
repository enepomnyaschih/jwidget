(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["bindClass1~bindDisplay~bindProp1~bindProp2"],{

/***/ "../../main/dist/bindProp.js":
/*!********************************************!*\
  !*** C:/jwidget/git/main/dist/bindProp.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));
const index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");
const Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));
class PropBinding extends Class_1.default {
    constructor(el, prop, property, binding = index_1.UPDATE) {
        super();
        if (binding & index_1.UPDATE) {
            this.own(new PropUpdater(el, prop, property));
        }
        if (prop === "checked" && (binding & index_1.WATCH)) {
            this.own(new CheckedListener(el, { target: property }));
        }
    }
}
class PropUpdater extends Class_1.default {
    constructor(el, prop, property) {
        super();
        this.el = el;
        this.prop = prop;
        this.property = property;
        this._update();
        this.own(property.changeEvent.listen(this._update, this));
    }
    _update() {
        this.el.prop(this.prop, this.property.get());
        if (this.prop === "checked") {
            this.el.change();
        }
    }
}
class CheckedListener extends Class_1.default {
    constructor(el, config = {}) {
        super();
        this.el = el;
        this.update = () => this._update();
        this._target = config.target || this.own(new Property_1.default());
        this._update();
        this.el.bind("change", this.update);
    }
    get target() {
        return this._target;
    }
    destroyObject() {
        this.el.unbind("change", this.update);
        super.destroy();
    }
    _update() {
        this._target.set(this.el.prop("checked"));
    }
}
function bindProp(el, prop, property, binding) {
    if (property != null) {
        return new PropBinding(el, prop, property, binding);
    }
    if (prop === "checked") {
        const target = new Property_1.default();
        return target.owning(new CheckedListener(el, { target: target }));
    }
    throw new Error("Invalid argument");
}
exports.default = bindProp;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./common/initExample.ts":
/*!*******************************!*\
  !*** ./common/initExample.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "../../node_modules/jquery/dist/jquery.js"));

__webpack_require__(/*! core-js/stable */ "../../node_modules/core-js/stable/index.js");

__webpack_require__(/*! regenerator-runtime/runtime */ "../../node_modules/regenerator-runtime/runtime.js");

function initExample(name, links) {
  var el = jquery_1.default('<div style="float: right; width: 600px"><b>Source:</b> </div>');
  var first = true;
  links.forEach(function (link) {
    if (first) {
      first = false;
    } else {
      el.append(', ');
    }

    el.append(jquery_1.default('<a target="_blank"></a>').text(link).attr("href", "src/".concat(name, "/").concat(link, ".txt")));
  });
  jquery_1.default("body").prepend('<div><b>Example</b></div><div><a href="javascript:location.reload()">Refresh</a></div><hr style="clear: both">').prepend(el);
}

exports.default = initExample;

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,