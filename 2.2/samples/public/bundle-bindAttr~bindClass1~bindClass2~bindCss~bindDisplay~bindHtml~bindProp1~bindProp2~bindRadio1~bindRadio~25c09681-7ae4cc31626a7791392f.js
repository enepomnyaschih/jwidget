(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["bindAttr~bindClass1~bindClass2~bindCss~bindDisplay~bindHtml~bindProp1~bindProp2~bindRadio1~bindRadio~25c09681"],{

/***/ "../../main/dist/AbstractInserter.js":
/*!****************************************************!*\
  !*** C:/jwidget/git/main/dist/AbstractInserter.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));

var DomUtils = __importStar(__webpack_require__(/*! ./DomUtils */ "../../main/dist/DomUtils.js"));

var list_1 = __importDefault(__webpack_require__(/*! ./inserter/list */ "../../main/dist/inserter/list.js"));

var AbstractInserter = /*#__PURE__*/function (_Class_1$default) {
  _inherits(AbstractInserter, _Class_1$default);

  var _super = _createSuper(AbstractInserter);

  /**
   * @param source Child element list.
   * @param el Parent element to insert children into.
   */
  function AbstractInserter(source, el) {
    var _this;

    _classCallCheck(this, AbstractInserter);

    _this = _super.call(this);
    _this.el = el;

    _this.own(new list_1.default(source, {
      add: _this._addItem,
      remove: _this._removeItem,
      scope: _assertThisInitialized(_this)
    }));

    return _this;
  }

  _createClass(AbstractInserter, [{
    key: "_addItem",
    value: function _addItem(item, index) {
      var parent = this.el;
      var anchor = parent.childNodes[index];

      var child = this._getElement(item);

      if (anchor != null) {
        parent.insertBefore(child, anchor);
      } else {
        parent.appendChild(child);
      }
    }
  }, {
    key: "_removeItem",
    value: function _removeItem(item, _index) {
      DomUtils.remove(this._getElement(item));
    }
  }]);

  return AbstractInserter;
}(Class_1.default);

exports.default = AbstractInserter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9BYnN0cmFjdEluc2VydGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBLElBQUEsT0FBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsU0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxRQUFBLEdBQUEsWUFBQSxDQUFBLE9BQUEsQ0FBQSxZQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLE1BQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLGlCQUFBLENBQUEsQ0FBQTs7SUFHOEIsZ0I7Ozs7O0FBQzdCOzs7O0FBSUEsNEJBQVksTUFBWixFQUE4QyxFQUE5QyxFQUE2RDtBQUFBOztBQUFBOztBQUM1RDtBQUQ2QyxVQUFBLEVBQUEsR0FBQSxFQUFBOztBQUU3QyxVQUFLLEdBQUwsQ0FBUyxJQUFJLE1BQUEsQ0FBQSxPQUFKLENBQWlCLE1BQWpCLEVBQXlCO0FBQ2pDLE1BQUEsR0FBRyxFQUFFLE1BQUssUUFEdUI7QUFFakMsTUFBQSxNQUFNLEVBQUUsTUFBSyxXQUZvQjtBQUdqQyxNQUFBLEtBQUs7QUFINEIsS0FBekIsQ0FBVDs7QUFGNEQ7QUFPNUQ7Ozs7NkJBSWtCLEksRUFBUyxLLEVBQWE7QUFDeEMsVUFBTSxNQUFNLEdBQUcsS0FBSyxFQUFwQjtBQUNBLFVBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxVQUFQLENBQWtCLEtBQWxCLENBQWY7O0FBQ0EsVUFBTSxLQUFLLEdBQUcsS0FBSyxXQUFMLENBQWlCLElBQWpCLENBQWQ7O0FBQ0EsVUFBSSxNQUFNLElBQUksSUFBZCxFQUFvQjtBQUNuQixRQUFBLE1BQU0sQ0FBQyxZQUFQLENBQW9CLEtBQXBCLEVBQTJCLE1BQTNCO0FBQ0EsT0FGRCxNQUVPO0FBQ04sUUFBQSxNQUFNLENBQUMsV0FBUCxDQUFtQixLQUFuQjtBQUNBO0FBQ0Q7OztnQ0FFcUIsSSxFQUFTLE0sRUFBYztBQUM1QyxNQUFBLFFBQVEsQ0FBQyxNQUFULENBQWdCLEtBQUssV0FBTCxDQUFpQixJQUFqQixDQUFoQjtBQUNBOzs7O0VBN0J3RCxPQUFBLENBQUEsTzs7QUFBMUQsT0FBQSxDQUFBLE9BQUEsR0FBQSxnQkFBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjAgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBDbGFzcyBmcm9tICcuL0NsYXNzJztcbmltcG9ydCAqIGFzIERvbVV0aWxzIGZyb20gJy4vRG9tVXRpbHMnO1xuaW1wb3J0IExpc3RJbnNlcnRlciBmcm9tICcuL2luc2VydGVyL2xpc3QnO1xuaW1wb3J0IFJlYWRvbmx5TGlzdCBmcm9tICcuL1JlYWRvbmx5TGlzdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0SW5zZXJ0ZXI8VD4gZXh0ZW5kcyBDbGFzcyB7XG5cdC8qKlxuXHQgKiBAcGFyYW0gc291cmNlIENoaWxkIGVsZW1lbnQgbGlzdC5cblx0ICogQHBhcmFtIGVsIFBhcmVudCBlbGVtZW50IHRvIGluc2VydCBjaGlsZHJlbiBpbnRvLlxuXHQgKi9cblx0Y29uc3RydWN0b3Ioc291cmNlOiBSZWFkb25seUxpc3Q8VD4sIHJlYWRvbmx5IGVsOiBIVE1MRWxlbWVudCkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5vd24obmV3IExpc3RJbnNlcnRlcihzb3VyY2UsIHtcblx0XHRcdGFkZDogdGhpcy5fYWRkSXRlbSxcblx0XHRcdHJlbW92ZTogdGhpcy5fcmVtb3ZlSXRlbSxcblx0XHRcdHNjb3BlOiB0aGlzXG5cdFx0fSkpO1xuXHR9XG5cblx0cHJvdGVjdGVkIGFic3RyYWN0IF9nZXRFbGVtZW50KGl0ZW06IFQpOiBIVE1MRWxlbWVudDtcblxuXHRwcm90ZWN0ZWQgX2FkZEl0ZW0oaXRlbTogVCwgaW5kZXg6IG51bWJlcikge1xuXHRcdGNvbnN0IHBhcmVudCA9IHRoaXMuZWw7XG5cdFx0Y29uc3QgYW5jaG9yID0gcGFyZW50LmNoaWxkTm9kZXNbaW5kZXhdO1xuXHRcdGNvbnN0IGNoaWxkID0gdGhpcy5fZ2V0RWxlbWVudChpdGVtKTtcblx0XHRpZiAoYW5jaG9yICE9IG51bGwpIHtcblx0XHRcdHBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIGFuY2hvcik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZCk7XG5cdFx0fVxuXHR9XG5cblx0cHJvdGVjdGVkIF9yZW1vdmVJdGVtKGl0ZW06IFQsIF9pbmRleDogbnVtYmVyKSB7XG5cdFx0RG9tVXRpbHMucmVtb3ZlKHRoaXMuX2dldEVsZW1lbnQoaXRlbSkpO1xuXHR9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/AbstractTemplate.js":
/*!****************************************************!*\
  !*** C:/jwidget/git/main/dist/AbstractTemplate.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var DomUtils = __importStar(__webpack_require__(/*! ./DomUtils */ "../../main/dist/DomUtils.js"));

var StringUtils = __importStar(__webpack_require__(/*! ./StringUtils */ "../../main/dist/StringUtils.js"));
/**
 * Abstract HTML template.
 */


var AbstractTemplate = /*#__PURE__*/function () {
  function AbstractTemplate() {
    _classCallCheck(this, AbstractTemplate);

    this.prefixes = null;
    this.parentIdMap = null; // The parent IDs of [key] item.

    this.childIdMap = null; // The child IDs of [key] item.

    this.ids = null; // IDs in dependency order.
  }

  _createClass(AbstractTemplate, [{
    key: "_compileAttributes",
    value: function _compileAttributes(root) {
      this.prefixes = StringUtils.parseClass(root.getAttribute("jwclass"));
      root.removeAttribute("jwclass");

      for (var i = 0, l = this.prefixes.length; i < l; ++i) {
        DomUtils.addClass(root, this.prefixes[i]);
      }

      this.parentIdMap = {};
      this.childIdMap = {}; // add elements to groups and fill in dependencies

      this._walkAll(root); // resolving dependencies to a plain list of IDs


      this.ids = [];

      this._backtrace("root"); // check for trash


      var remainingIds = Object.keys(this.parentIdMap);

      if (remainingIds.length !== 0) {
        // some ID's may not have been backtraced if they are assigned to the root element,
        // so we must backtrace them to make sure that everything is processed
        remainingIds.forEach(this._backtrace, this);
        remainingIds = Object.keys(this.parentIdMap);

        if (remainingIds.length !== 0) {
          console.warn("jWidget template '" + this.prefixes.join(" ") + "' has cyclic dependencies among the next jwid's: " + remainingIds.join(", ") + ". Can't detect the desired rendering order. Rendering elements in arbitrary order...");
          this.ids.push.apply(this.ids, remainingIds);
        }
      }

      this.prefixes = null;
      this.parentIdMap = null;
      this.childIdMap = null;
    }
  }, {
    key: "_walkAll",
    value: function _walkAll(root) {
      var _this = this;

      this._walk(root, [], [], function (el, path) {
        var attr = el.getAttribute("jwid");

        if (!attr) {
          return null;
        }

        var ids = StringUtils.parseClass(attr);
        el.removeAttribute("jwid");
        var l = ids.length;

        if (l === 0) {
          return null;
        }

        for (var i = 0; i < l; ++i) {
          var id = ids[i];

          for (var j = 0, n = _this.prefixes.length; j < n; ++j) {
            DomUtils.addClass(el, _this.prefixes[j] + "-" + id);
          }

          _this._addElement(id, el, path);
        }

        return ids;
      }, this);

      this._addElement("root", root, []);
    }
  }, {
    key: "_walk",
    value: function _walk(el, path, parentIds, callback, scope) {
      if (el.nodeType !== 1) {
        // ELEMENT
        return;
      }

      var childIds = callback.call(scope, el, path);

      if (path.length === 0) {
        childIds = childIds || [];
        childIds.push("root");
      }

      if (childIds !== null) {
        for (var _i = 0, _l = childIds.length; _i < _l; ++_i) {
          var childId = childIds[_i];
          this.parentIdMap[childId] = this.parentIdMap[childId] || {};

          for (var j = 0, m = parentIds.length; j < m; ++j) {
            var parentId = parentIds[j];
            this.childIdMap[parentId] = this.childIdMap[parentId] || {};
            this.parentIdMap[childId][parentId] = true;
            this.childIdMap[parentId][childId] = true;
          }
        }

        parentIds = childIds;
      }

      var index = path.length;
      path.push(0);
      var childNodes = el.childNodes;

      for (var i = 0, l = childNodes.length; i < l; ++i) {
        path[index] = i;

        this._walk(childNodes[i], path, parentIds, callback, scope);
      }

      path.pop();
    }
  }, {
    key: "_backtrace",
    value: function _backtrace(id) {
      // if this element has already been processed, skip it
      var parentIds = this.parentIdMap[id];

      if (parentIds === undefined) {
        return;
      } // if this element still has parents, skip it


      for (var parentId in parentIds) {
        if (this.parentIdMap.hasOwnProperty(parentId)) {
          return;
        }
      } // remove the element from graph


      delete this.parentIdMap[id];
      this.ids.push(id); // traverse into children

      var childIds = this.childIdMap[id];

      for (var childId in childIds) {
        this._backtrace(childId);
      }
    }
  }, {
    key: "requiresAfterAppend",
    get: function get() {
      return false;
    }
  }]);

  return AbstractTemplate;
}();

exports.default = AbstractTemplate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/ArrayUtils.js":
/*!**********************************************!*\
  !*** C:/jwidget/git/main/dist/ArrayUtils.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.detectSortComparing = exports.detectSort = exports.detectReorder = exports.detectFilter = exports.detectSplice = exports.tryReorder = exports.trySplice = exports.tryClear = exports.tryMove = exports.tryRemoveAll = exports.trySet = exports.tryAddAll = exports.merge = exports.invert = exports.isIdentity = exports.backEvery = exports.equal = exports.sortComparing = exports.sort = exports.reorder = exports.splice = exports.clear = exports.move = exports.removeItems = exports.removeItem = exports.removeAll = exports.remove = exports.set = exports.addAll = exports.add = exports.reduce = exports.index = exports.toReversed = exports.toSortedComparing = exports.toSorted = exports.getSortingIndicesComparing = exports.getSortingIndices = exports.count = exports.minIndexComparing = exports.minComparing = exports.minIndex = exports.min = exports.maxIndexComparing = exports.maxComparing = exports.maxIndex = exports.max = exports.binarySearch = exports.findIndex = exports.find = exports.contains = exports.isEmpty = exports.getLast = void 0;

var index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");

var IndexCount_1 = __importDefault(__webpack_require__(/*! ./IndexCount */ "../../main/dist/IndexCount.js"));

var IndexItems_1 = __importDefault(__webpack_require__(/*! ./IndexItems */ "../../main/dist/IndexItems.js"));

var internal_1 = __webpack_require__(/*! ./internal */ "../../main/dist/internal.js");

var ListSpliceResult_1 = __importDefault(__webpack_require__(/*! ./ListSpliceResult */ "../../main/dist/ListSpliceResult.js"));
/**
 * Returns the last array item.
 *
 * @param arr Array.
 * @returns Last array item or undefined. If array is empty, returns undefined.
 */


function getLast(arr) {
  return arr[arr.length - 1];
}

exports.getLast = getLast;
/**
 * Checks if array is empty.
 *
 * @param arr Array.
 * @returns Array has zero length.
 */

function isEmpty(arr) {
  return arr.length === 0;
}

exports.isEmpty = isEmpty;
/**
 * Checks if the item exists in array, i.e. if `arr.indexOf(item)` doesn't return -1.
 *
 * @param arr Array.
 * @param item Item to find.
 * @returns Item exists in array.
 */

function contains(arr, item) {
  return arr.indexOf(item) !== -1;
}

exports.contains = contains;
/**
 * Finds an item matching criteria.
 *
 * Returns the first item for which callback returns truthy value.
 *
 * Algorithms iterates items consequently, and stops after the first item matching the criteria.
 *
 * @param arr Array.
 * @param callback Criteria callback.
 * @param scope `callback` call scope. Defaults to array itself.
 * @returns The found item or undefined.
 */

function find(arr, callback, scope) {
  return arr[findIndex(arr, callback, scope)];
}

exports.find = find;
/**
 * Finds an item matching criteria.
 *
 * Returns index of the first item for which callback returns truthy value.
 *
 * Algorithms iterates items consequently, and stops after the first item matching the criteria.
 *
 * @param arr Array.
 * @param callback Criteria callback.
 * @param scope `callback` call scope. Defaults to array itself.
 * @returns Index of the found item or undefined.
 */

function findIndex(arr, callback, scope) {
  scope = scope || arr;
  var result;
  arr.every(function (item, index) {
    if (callback.call(scope, item, index)) {
      result = index;
      return false;
    }

    return true;
  });
  return result;
}

exports.findIndex = findIndex;
/**
 * Determines index of the first item which is more (or less if `order` < 0) than the specified value by `compare` function,
 * using binary search. Array must be sorted by `compare` function.
 * Can be used for item insertion easily.
 * If you want to use this method for item removal, you must look at previous item and compare it to `value` first.
 *
 * @param arr Sorted array.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2.
 * Defaults to `cmp`.
 * @param scope `comparer` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number if array is sorted ascending, negative if descending.
 * @returns Item index.
 */

function binarySearch(arr, value, compare, scope, order) {
  compare = compare || index_1.cmp;
  scope = scope || arr;
  order = order || 1;
  var length = arr.length;
  var len2 = length >> 1;
  var step = 1;

  while (step <= len2) {
    step <<= 1;
  }

  var index = 0;

  while (step) {
    if (index + step <= length && order * compare.call(scope, value, arr[index + step - 1]) >= 0) {
      index += step;
    }

    step >>= 1;
  }

  return index;
}

exports.binarySearch = binarySearch;
/**
 * Returns the array item which callback returns the highest (or lowest) value for.
 *
 * @param arr Array.
 * @param callback Returns a comparable value, compatible with `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to array itself.
 * @param order Pass positive order to find the highest value, and negative to find the lowest one.
 * @returns Array item.
 */

function max(arr, callback, scope) {
  var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  return arr[maxIndex(arr, callback, scope, order)];
}

exports.max = max;
/**
 * Returns index of the array item which callback returns the highest (or lowest) value for.
 *
 * @param arr Array.
 * @param callback Returns a comparable value, compatible with `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to array itself.
 * @param order Pass positive order to find the highest value, and negative to find the lowest one.
 * @returns Item index.
 */

function maxIndex(arr, callback, scope) {
  var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

  if (arr.length === 0) {
    return -1;
  }

  callback = callback || internal_1.identity;
  scope = scope || arr;
  var result = 0;
  var max = callback.call(scope, arr[0]);

  for (var i = 1, l = arr.length; i < l; ++i) {
    var item = callback.call(scope, arr[i], i);
    var diff = index_1.cmp(item, max);

    if (order > 0 && diff > 0 || order < 0 && diff < 0) {
      result = i;
      max = item;
    }
  }

  return result;
}

exports.maxIndex = maxIndex;
/**
 * Returns the highest (or lowest) array item in terms of the specified comparer function.
 *
 * @param arr Array.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `compare` call scope. Defaults to array itself.
 * @param order Pass positive order to find the highest value, and negative to find the lowest one.
 * @returns Array item.
 */

function maxComparing(arr, compare, scope) {
  var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  return arr[maxIndexComparing(arr, compare, scope, order)];
}

exports.maxComparing = maxComparing;
/**
 * Returns index of the highest (or lowest) array item in terms of the specified comparer function.
 *
 * @param arr Array.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `compare` call scope. Defaults to array itself.
 * @param order Pass positive order to find the highest value, and negative to find the lowest one.
 * @returns Item index.
 */

function maxIndexComparing(arr, compare, scope) {
  var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

  if (arr.length === 0) {
    return -1;
  }

  compare = compare || index_1.cmp;
  scope = scope || arr;
  var result = 0;

  for (var i = 1, l = arr.length; i < l; ++i) {
    if (order * compare.call(scope, arr[result], arr[i], result, i) < 0) {
      result = i;
    }
  }

  return result;
}

exports.maxIndexComparing = maxIndexComparing;
/**
 * Returns the array item which callback returns the lowest (or highest) value for.
 *
 * @param arr Array.
 * @param callback Returns a comparable value, compatible with `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to array itself.
 * @param order Pass positive order to find the lowest value, and negative to find the highest one.
 * @returns Array item.
 */

function min(arr, callback, scope) {
  var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  return max(arr, callback, scope, -order);
}

exports.min = min;
/**
 * Returns index of the array item which callback returns the lowest (or highest) value for.
 *
 * @param arr Array.
 * @param callback Returns a comparable value, compatible with `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to array itself.
 * @param order Pass positive order to find the lowest value, and negative to find the highest one.
 * @returns Item index.
 */

function minIndex(arr, callback, scope) {
  var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  return maxIndex(arr, callback, scope, -order);
}

exports.minIndex = minIndex;
/**
 * Returns the lowest (or highest) array item in terms of the specified comparer function.
 *
 * @param arr Array.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `compare` call scope. Defaults to array itself.
 * @param order Pass positive order to find the lowest value, and negative to find the highest one.
 * @returns Array item.
 */

function minComparing(arr, compare, scope) {
  var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  return maxComparing(arr, compare, scope, -order);
}

exports.minComparing = minComparing;
/**
 * Returns index of the lowest (or highest) array item in terms of the specified comparer function.
 *
 * @param arr Array.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `compare` call scope. Defaults to array itself.
 * @param order Pass positive order to find the lowest value, and negative to find the highest one.
 * @returns Item index.
 */

function minIndexComparing(arr, compare, scope) {
  var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  return maxIndexComparing(arr, compare, scope, -order);
}

exports.minIndexComparing = minIndexComparing;
/**
 * Counts the items matching criteria.
 *
 * Returns count of items which `callback` returns truthy value for.
 *
 * @param arr Array.
 * @param callback Criteria callback.
 * @param scope `callback` call scope. Defaults to array itself.
 * @returns Number of items.
 */

function count(arr, callback, scope) {
  scope = scope || arr;
  var result = 0;
  arr.every(function (item, index) {
    if (callback.call(scope, item, index)) {
      ++result;
    }

    return true;
  });
  return result;
}

exports.count = count;
/**
 * Returns indices of sorted items.
 *
 * Builds array of item indices, sorted by the result of callback call for each item.
 *
 * @param arr Array.
 * @param callback Indexer function. Must return a comparable value, compatible with
 * `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 * @returns Array of indices.
 */

function getSortingIndices(arr, callback, scope, order) {
  callback = callback || internal_1.identity;
  scope = scope || arr;
  order = order || 1;
  var pairs = [];
  arr.every(function (item, key) {
    pairs.push([key, callback.call(scope, item, key)]);
    return true;
  });
  pairs.sort(function (x, y) {
    return order * index_1.cmp(x[1], y[1]);
  });
  return pairs.map(function (pair) {
    return pair[0];
  });
}

exports.getSortingIndices = getSortingIndices;
/**
 * Returns indices of sorted items.
 *
 * Builds array of item indices, sorted by comparer.
 *
 * @param arr Array.
 * @param compare Comparer function. Must return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `comparer` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 * @returns Array of indices.
 */

function getSortingIndicesComparing(arr, compare, scope, order) {
  compare = compare || index_1.cmp;
  scope = scope || arr;
  order = order || 1;
  var pairs = [];
  arr.every(function (item, key) {
    pairs.push([key, item]);
    return true;
  });
  pairs.sort(function (x, y) {
    return order * compare.call(scope, x[1], y[1], x[0], y[0]);
  });
  return pairs.map(function (pair) {
    return pair[0];
  });
}

exports.getSortingIndicesComparing = getSortingIndicesComparing;
/**
 * Builds and returns a new array consisting of original array items sorted by the result of
 * callback call for each item.
 *
 * @param arr Array.
 * @param callback Indexer function. Must return a comparable value, compatible with
 * `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 * @returns Sorted array.
 */

function toSorted(arr, callback, scope, order) {
  return getSortingIndices(arr, callback, scope, order).map(function (index) {
    return arr[index];
  });
}

exports.toSorted = toSorted;
/**
 * Builds and returns a new array consisting of original array items sorted by comparer.
 *
 * @param arr Array.
 * @param compare Comparer function. Must return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `comparer` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 * @returns Sorted array.
 */

function toSortedComparing(arr, compare, scope, order) {
  return getSortingIndicesComparing(arr, compare, scope, order).map(function (index) {
    return arr[index];
  });
}

exports.toSortedComparing = toSortedComparing;
/**
 * Builds a new array containing items of this array in reversed order.
 * Current array is not modified.
 *
 * @param arrays Array.
 * @returns Reversed array.
 */

function toReversed(arr) {
  var result = arr.concat();
  result.reverse();
  return result;
}

exports.toReversed = toReversed;
/**
 * Indexes collection.
 *
 * Builds and returns a new map by rule: key is the result of the indexer function call,
 * value is the corresponding item.
 *
 * @param arr Array.
 * @param callback Indexer function.
 * @param scope `callback` call scope. Defaults to array itself.
 * @returns Array index.
 */

function index(arr, callback, scope) {
  scope = scope || arr;
  var result = {};
  arr.every(function (item, index) {
    var key = callback.call(scope, item, index);

    if (key != null) {
      result[key] = item;
    }

    return true;
  });
  return result;
}

exports.index = index;

function reduce(arr, reducer, initial) {
  var _ref = typeof reducer !== "function" ? internal_1.initReduceState(reducer) : {
    value: initial,
    callback: reducer
  },
      value = _ref.value,
      callback = _ref.callback;

  return arr.reduce(callback, value);
}

exports.reduce = reduce;
/**
 * Inserts an item to array.
 *
 * @param arr Array.
 * @param item Item to insert.
 * @param index Index of an item to insert the new one before.
 * By default, appends the item to the end of array.
 */

function add(arr, item, index) {
  arr.splice(index_1.def(index, arr.length), 0, item);
}

exports.add = add;
/**
 * Inserts item range to array.
 *
 * @param arr Array.
 * @param items Items to insert.
 * @param index Index of an item to insert the new ones before.
 * By default, appends the items to the end of array.
 */

function addAll(arr, items, index) {
  tryAddAll(arr, items, index);
}

exports.addAll = addAll;
/**
 * Replaces item at specified index.
 * If array doesn't contain such index, it will demolish the application.
 *
 * @param arr Array.
 * @param index Index of an item to replace.
 * @param item Item to replace with.
 * @returns The replaced item.
 */

function set(arr, index, item) {
  var result = trySet(arr, index, item);
  return result !== undefined ? result.value : arr[index];
}

exports.set = set;
/**
 * Removes item at specified position.
 * If array doesn't contain such index, it will demolish the application.
 *
 * @param arr Array.
 * @param index Index of an item to remove.
 * @returns The removed item.
 */

function remove(arr, index) {
  return arr.splice(index, 1)[0];
}

exports.remove = remove;
/**
 * Removes item range from array.
 *
 * @param arr Array.
 * @param index Index of the first item to remove.
 * @param count Count of items to remove.
 * @returns The removed items.
 */

function removeAll(arr, index, count) {
  var result = tryRemoveAll(arr, index, count);
  return result || [];
}

exports.removeAll = removeAll;
/**
 * Removes the first occurrence of an item in array.
 *
 * @param arr Array.
 * @param item Item to remove.
 * @returns Index of the removed item or -1.
 */

function removeItem(arr, item) {
  var index = arr.indexOf(item);

  if (index !== -1) {
    remove(arr, index);
  }

  return index;
}

exports.removeItem = removeItem;
/**
 * Removes all occurrences of items in array.
 *
 * @param arr Array.
 * @param items Items to remove.
 * @param getKey Function which returns unique key of an item in this array.
 * By default, identifies primitive values and `Identifiable` objects.
 */

function removeItems(arr, items, getKey) {
  var itemSet = internal_1.VidSet.fromArray(items, getKey);
  var newItems = arr.filter(function (item) {
    return !itemSet.contains(item);
  });
  clear(arr);
  addAll(arr, newItems);
}

exports.removeItems = removeItems;
/**
 * Moves an item inside array.
 *
 * @param arr Array.
 * @param fromIndex Item index to move.
 * @param toIndex Index to move to.
 * @returns The moved item.
 */

function move(arr, fromIndex, toIndex) {
  tryMove(arr, fromIndex, toIndex);
  return arr[toIndex];
}

exports.move = move;
/**
 * Clears array.
 *
 * @param arr Array.
 * @returns Old array contents. Never returns null or undefined.
 */

function clear(arr) {
  var result = tryClear(arr);
  return result !== undefined ? result : [];
}

exports.clear = clear;
/**
 * Removes and inserts item ranges.
 *
 * @param arr Array.
 * @param removeParamsList Array of segments to remove sorted by index asc. Segments are removed in backward order.
 * @param addParamsList Array of segments to insert sorted by index asc. Segments are inserted in forward order.
 * @returns Splice result. Never returns null or undefined.
 */

function splice(arr, removeParamsList, addParamsList) {
  var result = trySplice(arr, removeParamsList, addParamsList);
  return result !== undefined ? result : new ListSpliceResult_1.default(arr.concat(), [], []);
}

exports.splice = splice;
/**
 * Reorders array items.
 *
 * @param arr Array.
 * @param indexArray Index array. Item with index `i` is moved to index `indexArray[i]`.
 * Must contain all indexes from 0 to (length - 1).
 */

function reorder(arr, indexArray) {
  tryReorder(arr, indexArray);
}

exports.reorder = reorder;
/**
 * Sorts array by the result of `callback` function call for each item.
 *
 * @param arr Array.
 * @param callback Indexer function. Must return a comparable value, compatible with
 * `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 */

function sort(arr, callback, scope, order) {
  var indexArray = detectSort(arr, callback, scope, order);

  if (indexArray !== undefined) {
    tryReorder(arr, indexArray);
  }
}

exports.sort = sort;
/**
 * Sorts array by comparer.
 *
 * @param arr Array.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `comparer` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 */

function sortComparing(arr, compare, scope, order) {
  var indexArray = detectSortComparing(arr, compare, scope, order);

  if (indexArray !== undefined) {
    tryReorder(arr, indexArray);
  }
}

exports.sortComparing = sortComparing;
/**
 * Checks two arrays for equality, item by item (===).
 *
 * @param x First array.
 * @param y Second array.
 * @returns Arrays are equal.
 */

function equal(x, y) {
  if (x === y) {
    return true;
  }

  if (x.length !== y.length) {
    return false;
  }

  for (var i = 0, l = x.length; i < l; ++i) {
    if (x[i] !== y[i]) {
      return false;
    }
  }

  return true;
}

exports.equal = equal;
/**
 * Checks all items against criteria in backward order.
 *
 * Returns true if criteria returns truthy value for all collection items.
 *
 * Algorithms iterates items consequently, and stops after the first item not matching the criteria.
 *
 * @param arr Array.
 * @param callback Criteria callback.
 * @param scope `callback` call scope. Defaults to array itself.
 * @returns True if every item matches the criteria.
 */

function backEvery(arr, callback, scope) {
  scope = scope || arr;

  for (var i = arr.length - 1; i >= 0; --i) {
    if (!callback.call(scope, arr[i], i)) {
      return false;
    }
  }

  return true;
}

exports.backEvery = backEvery;
/**
 * Checks if every item in array is equal to its index: `array[i] === i`.
 *
 * @param arr Array.
 * @returns Every item is equal to its index.
 */

function isIdentity(arr) {
  for (var i = 0, l = arr.length; i < l; ++i) {
    if (arr[i] !== i) {
      return false;
    }
  }

  return true;
}

exports.isIdentity = isIdentity;
/**
 * Builds a new array by the rule: `result[array[i]] === i`.
 *
 * @param arr Array.
 * @returns The inverted array.
 */

function invert(arr) {
  var l = arr.length;
  var result = new Array(l);

  for (var i = 0; i < l; ++i) {
    result[arr[i]] = i;
  }

  return result;
}

exports.invert = invert;
/**
 * Builds a new array consisting of subarray items in the same order.
 *
 * @param arrays Array of subarrays.
 * @returns The merged array.
 */

function merge(arrays) {
  var result = [];

  for (var i = 0, l = arrays.length; i < l; ++i) {
    result.push.apply(result, arrays[i]);
  }

  return result;
}

exports.merge = merge;
/**
 * The same as `addAll`, but returns undefined if the array stays unmodified. Else returns true.
 *
 * @param arr Array.
 * @param items Items to insert.
 * @param index Index of an item to insert the new ones before.
 * By default, appends the items to the end of array.
 * @returns True if array was modified, else undefined.
 */

function tryAddAll(arr, items, index) {
  if (items.length === 0) {
    return undefined;
  }

  if (index === undefined) {
    var l = arr.length;
    arr.length += items.length;

    for (var i = 0; i < items.length; ++i) {
      arr[i + l] = items[i];
    }
  } else {
    var tail = arr.splice(index, arr.length - index);
    tryAddAll(arr, items);
    tryAddAll(arr, tail);
  }

  return true;
}

exports.tryAddAll = tryAddAll;
/**
 * Replaces item at specified index.
 * If array doesn't contain such index, it will demolish the application.
 *
 * @param arr Array.
 * @param index Index of an item to replace.
 * @param item Item to replace with.
 * @returns The replaced item. If array is not modified, returns undefined.
 */

function trySet(arr, index, item) {
  var oldItem = arr[index];

  if (item !== oldItem) {
    arr[index] = item;
    return {
      value: oldItem
    };
  }

  return undefined;
}

exports.trySet = trySet;
/**
 * Removes item range from array.
 *
 * @param arr Array.
 * @param index Index of first item to remove.
 * @param count Count of items to remove.
 * @returns The removed items. If array is not modified, returns undefined.
 */

function tryRemoveAll(arr, index, count) {
  if (count !== 0) {
    return arr.splice(index, count);
  }

  return undefined;
}

exports.tryRemoveAll = tryRemoveAll;
/**
 * Moves an item inside array.
 *
 * @param arr Array.
 * @param fromIndex Item index to move.
 * @param toIndex Index to move to.
 * @returns The moved item. If array is not modified, returns undefined.
 */

function tryMove(arr, fromIndex, toIndex) {
  if (fromIndex === toIndex) {
    return undefined;
  }

  var item = arr[fromIndex];
  arr.splice(fromIndex, 1);
  arr.splice(toIndex, 0, item);
  return item;
}

exports.tryMove = tryMove;
/**
 * Clears array.
 *
 * @param arr Array.
 * @returns Old array contents. If not modified - undefined.
 */

function tryClear(arr) {
  if (arr.length !== 0) {
    return arr.splice(0, arr.length);
  }

  return undefined;
}

exports.tryClear = tryClear;
/**
 * Removes and inserts item ranges.
 *
 * @param arr Array.
 * @param removeParamsList Array of segments to remove sorted by index asc. Segments are removed in backward order.
 * @param addParamsList Array of segments to insert sorted by index asc. Segments are inserted in forward order.
 * @returns Splice result. If collection is not modified, returns undefined.
 */

function trySplice(arr, removeParamsList, addParamsList) {
  var optimizedRemoveParamsList = [];
  var rlast = null;
  var rparams;

  for (var i = 0, l = removeParamsList.length; i < l; ++i) {
    rparams = removeParamsList[i];

    if (rlast && rparams.index === rlast.index + rlast.count) {
      rlast.count += rparams.count;
    } else {
      rlast = rparams.clone();
      optimizedRemoveParamsList.push(rlast);
    }
  }

  var optimizedAddParamsList = [];
  var alast = null;
  var aparams;

  for (var i = 0, l = addParamsList.length; i < l; ++i) {
    aparams = addParamsList[i];

    if (alast && aparams.index === alast.index + alast.items.length) {
      tryAddAll(alast.items, aparams.items);
    } else {
      alast = aparams.clone();
      optimizedAddParamsList.push(alast);
    }
  }

  var oldItems = arr.concat();
  var removedItemsList = [];

  for (var i = optimizedRemoveParamsList.length - 1; i >= 0; --i) {
    rparams = optimizedRemoveParamsList[i];
    var index = rparams.index;
    var items = tryRemoveAll(arr, index, rparams.count);

    if (items === undefined) {
      continue;
    }

    removedItemsList.push(new IndexItems_1.default(index, items));
  }

  var addedItemsList = [];

  for (var i = 0, l = optimizedAddParamsList.length; i < l; ++i) {
    aparams = optimizedAddParamsList[i];

    if (tryAddAll(arr, aparams.items, aparams.index) === undefined) {
      continue;
    }

    addedItemsList.push(aparams);
  }

  if (removedItemsList.length !== 0 || addedItemsList.length !== 0) {
    removedItemsList.reverse();
    return new ListSpliceResult_1.default(oldItems, removedItemsList, addedItemsList);
  }

  return undefined;
}

exports.trySplice = trySplice;
/**
 * Reorders array items.
 *
 * @param arr Array.
 * @param indexArray Index array. Item with index `i` will be moved to index `indexArray[i]`.
 * Must contain all indexes from 0 to (length - 1).
 * @returns Old array contents. If collection is not modified, returns undefined.
 */

function tryReorder(arr, indexArray) {
  var length = arr.length;

  if (isIdentity(indexArray)) {
    return undefined;
  }

  var oldItems = arr.concat();

  for (var i = 0; i < length; ++i) {
    arr[indexArray[i]] = oldItems[i];
  }

  return oldItems;
}

exports.tryReorder = tryReorder;
/**
 * Detects `splice` method arguments to adjust array contents to `newItems`.
 * Determines item ranges neccessary to be removed and inserted.
 * All items must have unique `getKey` function result.
 * If items don't have unique key, probably `detectFilter` method may help,
 * because it doesn't require item uniquiness.
 *
 * @param oldItems Old array contents.
 * @param newItems New array contents.
 * @param getKey Function which returns unique key of an item in this array.
 * By default, identifies primitive values and `Identifiable` objects.
 * @returns `splice` method arguments. If no method call required, returns undefined.
 */

function detectSplice(oldItems, newItems, getKey) {
  var removeParamsList = [];
  var addParamsList = [];
  var oldIndexMap = new internal_1.VidMap(getKey);

  for (var i = 0, l = oldItems.length; i < l; ++i) {
    oldIndexMap.put(oldItems[i], i);
  }

  var nextOldIndex = 0;
  var offset = 0;
  var newItemBuffer = [];

  function buffer(item) {
    newItemBuffer.push(item);
  }

  function flush() {
    if (newItemBuffer.length === 0) {
      return;
    }

    addParamsList.push(new IndexItems_1.default(offset + nextOldIndex, newItemBuffer));
    offset += newItemBuffer.length;
    newItemBuffer = [];
  }

  function testRemove(oldIndex) {
    if (oldIndex > nextOldIndex) {
      var _count = oldIndex - nextOldIndex;

      removeParamsList.push(new IndexCount_1.default(nextOldIndex, _count));
      offset -= _count;
    }
  }

  for (var newIndex = 0, _l = newItems.length; newIndex < _l; ++newIndex) {
    var item = newItems[newIndex];
    var oldIndex = oldIndexMap.get(item);

    if (oldIndex === undefined || oldIndex < nextOldIndex) {
      buffer(item);
    } else {
      flush();
      testRemove(oldIndex);
      nextOldIndex = oldIndex + 1;
    }
  }

  flush();
  testRemove(oldItems.length);

  if (removeParamsList.length !== 0 || addParamsList.length !== 0) {
    return {
      removeParamsList: removeParamsList,
      addParamsList: addParamsList
    };
  }

  return undefined;
}

exports.detectSplice = detectSplice;
/**
 * Detects `removeParamsList` argument of `splice` method to adjust array contents to `newItems`.
 * Determines item ranges neccessary to be removed.
 * Doesn't assume item insertion - try `detectSplice` if that's the case.
 * In advantage to `detectSplice`, doesn't require item uniquiness.
 *
 * @param oldItems Old array contents.
 * @param newItems New array contents.
 * @returns `removeParamsList` argument of `splice` method.
 * If no method call required, returns undefined.
 */

function detectFilter(oldItems, newItems) {
  var removeParamsList = [];
  var oldIndex = 0;
  var oldLength = oldItems.length;
  var newLength = newItems.length;

  for (var newIndex = 0; newIndex <= newLength; ++newIndex) {
    var newItem = newItems[newIndex];
    var _count2 = 0;

    while (oldIndex + _count2 < oldLength && oldItems[oldIndex + _count2] !== newItem) {
      ++_count2;
    }

    if (_count2 !== 0) {
      removeParamsList.push(new IndexCount_1.default(oldIndex, _count2));
    }

    oldIndex += _count2 + 1;
  }

  if (removeParamsList.length !== 0) {
    return removeParamsList;
  }

  return undefined;
}

exports.detectFilter = detectFilter;
/**
 * Detects `reorder` method arguments to adjust array contents to `newItems`.
 * Determines indices to move the items to.
 * If `newItems` contents differ from `oldItems` contents,
 * you should pray Gods that application still works well.
 *
 * @param oldItems Old array contents.
 * @param newItems New array contents.
 * @param getKey Function which returns unique key of an item in this array.
 * By default, identifies primitive values and `Identifiable` objects.
 * @returns `indexArray` argument of `reorder` method.
 * If no method call required, returns undefined.
 */

function detectReorder(oldItems, newItems, getKey) {
  var indexArray = [];
  var newIndexMap = new internal_1.VidMap(getKey);

  for (var i = 0, l = newItems.length; i < l; ++i) {
    newIndexMap.put(newItems[i], i);
  }

  for (var i = 0, l = oldItems.length; i < l; ++i) {
    indexArray.push(newIndexMap.get(oldItems[i]));
  }

  if (!isIdentity(indexArray)) {
    return indexArray;
  }

  return undefined;
}

exports.detectReorder = detectReorder;
/**
 * Detects `reorder` method arguments to sort array contents by the result of `callback` call for each item.
 *
 * @param arr Array.
 * @param callback Indexer function. Must return a comparable value, compatible with
 * `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 * @returns `indexArray` argument of `reorder` method.
 * If no method call required, returns undefined.
 */

function detectSort(arr, callback, scope, order) {
  var keys = getSortingIndices(arr, callback, scope, order);

  if (!isIdentity(keys)) {
    return invert(keys);
  }

  return undefined;
}

exports.detectSort = detectSort;
/**
 * Detects `reorder` method arguments to sort array contents by comparer.
 *
 * @param arr Array.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `comparer` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 * @returns `indexArray` argument of `reorder` method.
 * If no method call required, returns undefined.
 */

function detectSortComparing(arr, compare, scope, order) {
  var keys = getSortingIndicesComparing(arr, compare, scope, order);

  if (!isIdentity(keys)) {
    return invert(keys);
  }

  return undefined;
}

exports.detectSortComparing = detectSortComparing;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/Class.js":
/*!*****************************************!*\
  !*** C:/jwidget/git/main/dist/Class.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");
/**
 * Introduces object aggregation support.
 * If you call `a.own(b)`, then **b** is destroyed automatically on **a** destruction.
 * You can aggregate any object implementing `Destroyable`.
 *
 * See online documentation for details.
 */


var Class = /*#__PURE__*/function () {
  function Class() {
    _classCallCheck(this, Class);

    this._ownagePool = null;
    /**
     * Instance ID.
     *
     * Auto-incrementing object unique ID. Each `IClass` instance has such an identifier.
     * Used, say, in Set as map key for quick item access.
     */

    this.iid = index_1.newIid();
  }
  /**
   * Aggregates the object. It means that the specified object is automatically destroyed
   * on this object destruction. The aggregated objects are destroyed in reverse order.
   * Returns the aggregated object, which makes it easy to use in field definition.
   *
   * @param obj Object to aggregate.
   */


  _createClass(Class, [{
    key: "own",
    value: function own(obj) {
      this._ownagePool = this._ownagePool || [];

      this._ownagePool.push(obj);

      return obj;
    }
    /**
     * Aggregates the object. It means that the specified object is automatically destroyed
     * on this object destruction. The aggregated objects are destroyed in reverse order.
     * Returns this object, which makes it easy to use in object instantiation.
     *
     * @param obj Object to aggregate.
     */

  }, {
    key: "owning",
    value: function owning(obj) {
      this.own(obj);
      return this;
    }
    /**
     * Class destructor invocation method. Destroys all aggregated objects and calls `destroyObject` method.
     * You must call this method explicitly from outside, because JavaScript doesn't support automatic class destructor
     * calling.
     */

  }, {
    key: "destroy",
    value: function destroy() {
      // TODO: assert(this._ownagePool != null);
      var pool = this._ownagePool;

      if (pool != null) {
        this._ownagePool = null;

        for (var i = pool.length - 1; i >= 0; --i) {
          pool[i].destroy();
        }
      }

      this.destroyObject();
    }
    /**
     * Class destructor implementation. Called inside `destroy` method *after aggregated objects destruction*.
     * The logic of class instance destruction should be implemented here. If you override this method,
     * remember to call `super.destroyObject()` at the end of the method.
     */

  }, {
    key: "destroyObject",
    value: function destroyObject() {}
  }]);

  return Class;
}();

exports.default = Class;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9DbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwQkEsSUFBQSxPQUFBLEdBQUEsT0FBQSxDQUFBLFNBQUEsQ0FBQTtBQUVBOzs7Ozs7Ozs7SUFPTSxLO0FBQU4sbUJBQUE7QUFBQTs7QUFDUyxTQUFBLFdBQUEsR0FBNkIsSUFBN0I7QUFFUjs7Ozs7OztBQU1TLFNBQUEsR0FBQSxHQUFNLE9BQUEsQ0FBQSxNQUFBLEVBQU47QUFrRFQ7QUFoREE7Ozs7Ozs7Ozs7O3dCQU8yQixHLEVBQU07QUFDaEMsV0FBSyxXQUFMLEdBQW1CLEtBQUssV0FBTCxJQUFvQixFQUF2Qzs7QUFDQSxXQUFLLFdBQUwsQ0FBaUIsSUFBakIsQ0FBc0IsR0FBdEI7O0FBQ0EsYUFBTyxHQUFQO0FBQ0E7QUFFRDs7Ozs7Ozs7OzsyQkFPTyxHLEVBQWdCO0FBQ3RCLFdBQUssR0FBTCxDQUFTLEdBQVQ7QUFDQSxhQUFPLElBQVA7QUFDQTtBQUVEOzs7Ozs7Ozs4QkFLTztBQUNOO0FBQ0EsVUFBTSxJQUFJLEdBQUcsS0FBSyxXQUFsQjs7QUFDQSxVQUFJLElBQUksSUFBSSxJQUFaLEVBQWtCO0FBQ2pCLGFBQUssV0FBTCxHQUFtQixJQUFuQjs7QUFDQSxhQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFMLEdBQWMsQ0FBM0IsRUFBOEIsQ0FBQyxJQUFJLENBQW5DLEVBQXNDLEVBQUUsQ0FBeEMsRUFBMkM7QUFDMUMsVUFBQSxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVEsT0FBUjtBQUNBO0FBQ0Q7O0FBQ0QsV0FBSyxhQUFMO0FBQ0E7QUFFRDs7Ozs7Ozs7b0NBS3VCLENBQUs7Ozs7OztBQUc3QixPQUFBLENBQUEsT0FBQSxHQUFlLEtBQWYiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgRGVzdHJveWFibGUgZnJvbSAnLi9EZXN0cm95YWJsZSc7XG5pbXBvcnQgSUNsYXNzIGZyb20gJy4vSUNsYXNzJztcbmltcG9ydCB7bmV3SWlkfSBmcm9tICcuL2luZGV4JztcblxuLyoqXG4gKiBJbnRyb2R1Y2VzIG9iamVjdCBhZ2dyZWdhdGlvbiBzdXBwb3J0LlxuICogSWYgeW91IGNhbGwgYGEub3duKGIpYCwgdGhlbiAqKmIqKiBpcyBkZXN0cm95ZWQgYXV0b21hdGljYWxseSBvbiAqKmEqKiBkZXN0cnVjdGlvbi5cbiAqIFlvdSBjYW4gYWdncmVnYXRlIGFueSBvYmplY3QgaW1wbGVtZW50aW5nIGBEZXN0cm95YWJsZWAuXG4gKlxuICogU2VlIG9ubGluZSBkb2N1bWVudGF0aW9uIGZvciBkZXRhaWxzLlxuICovXG5jbGFzcyBDbGFzcyBpbXBsZW1lbnRzIElDbGFzcyB7XG5cdHByaXZhdGUgX293bmFnZVBvb2w6IERlc3Ryb3lhYmxlW10gPSBudWxsO1xuXG5cdC8qKlxuXHQgKiBJbnN0YW5jZSBJRC5cblx0ICpcblx0ICogQXV0by1pbmNyZW1lbnRpbmcgb2JqZWN0IHVuaXF1ZSBJRC4gRWFjaCBgSUNsYXNzYCBpbnN0YW5jZSBoYXMgc3VjaCBhbiBpZGVudGlmaWVyLlxuXHQgKiBVc2VkLCBzYXksIGluIFNldCBhcyBtYXAga2V5IGZvciBxdWljayBpdGVtIGFjY2Vzcy5cblx0ICovXG5cdHJlYWRvbmx5IGlpZCA9IG5ld0lpZCgpO1xuXG5cdC8qKlxuXHQgKiBBZ2dyZWdhdGVzIHRoZSBvYmplY3QuIEl0IG1lYW5zIHRoYXQgdGhlIHNwZWNpZmllZCBvYmplY3QgaXMgYXV0b21hdGljYWxseSBkZXN0cm95ZWRcblx0ICogb24gdGhpcyBvYmplY3QgZGVzdHJ1Y3Rpb24uIFRoZSBhZ2dyZWdhdGVkIG9iamVjdHMgYXJlIGRlc3Ryb3llZCBpbiByZXZlcnNlIG9yZGVyLlxuXHQgKiBSZXR1cm5zIHRoZSBhZ2dyZWdhdGVkIG9iamVjdCwgd2hpY2ggbWFrZXMgaXQgZWFzeSB0byB1c2UgaW4gZmllbGQgZGVmaW5pdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIG9iaiBPYmplY3QgdG8gYWdncmVnYXRlLlxuXHQgKi9cblx0b3duPFQgZXh0ZW5kcyBEZXN0cm95YWJsZT4ob2JqOiBUKTogVCB7XG5cdFx0dGhpcy5fb3duYWdlUG9vbCA9IHRoaXMuX293bmFnZVBvb2wgfHwgW107XG5cdFx0dGhpcy5fb3duYWdlUG9vbC5wdXNoKG9iaik7XG5cdFx0cmV0dXJuIG9iajtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZ2dyZWdhdGVzIHRoZSBvYmplY3QuIEl0IG1lYW5zIHRoYXQgdGhlIHNwZWNpZmllZCBvYmplY3QgaXMgYXV0b21hdGljYWxseSBkZXN0cm95ZWRcblx0ICogb24gdGhpcyBvYmplY3QgZGVzdHJ1Y3Rpb24uIFRoZSBhZ2dyZWdhdGVkIG9iamVjdHMgYXJlIGRlc3Ryb3llZCBpbiByZXZlcnNlIG9yZGVyLlxuXHQgKiBSZXR1cm5zIHRoaXMgb2JqZWN0LCB3aGljaCBtYWtlcyBpdCBlYXN5IHRvIHVzZSBpbiBvYmplY3QgaW5zdGFudGlhdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIG9iaiBPYmplY3QgdG8gYWdncmVnYXRlLlxuXHQgKi9cblx0b3duaW5nKG9iajogRGVzdHJveWFibGUpOiB0aGlzIHtcblx0XHR0aGlzLm93bihvYmopO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIENsYXNzIGRlc3RydWN0b3IgaW52b2NhdGlvbiBtZXRob2QuIERlc3Ryb3lzIGFsbCBhZ2dyZWdhdGVkIG9iamVjdHMgYW5kIGNhbGxzIGBkZXN0cm95T2JqZWN0YCBtZXRob2QuXG5cdCAqIFlvdSBtdXN0IGNhbGwgdGhpcyBtZXRob2QgZXhwbGljaXRseSBmcm9tIG91dHNpZGUsIGJlY2F1c2UgSmF2YVNjcmlwdCBkb2Vzbid0IHN1cHBvcnQgYXV0b21hdGljIGNsYXNzIGRlc3RydWN0b3Jcblx0ICogY2FsbGluZy5cblx0ICovXG5cdGRlc3Ryb3koKSB7XG5cdFx0Ly8gVE9ETzogYXNzZXJ0KHRoaXMuX293bmFnZVBvb2wgIT0gbnVsbCk7XG5cdFx0Y29uc3QgcG9vbCA9IHRoaXMuX293bmFnZVBvb2w7XG5cdFx0aWYgKHBvb2wgIT0gbnVsbCkge1xuXHRcdFx0dGhpcy5fb3duYWdlUG9vbCA9IG51bGw7XG5cdFx0XHRmb3IgKGxldCBpID0gcG9vbC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuXHRcdFx0XHRwb29sW2ldLmRlc3Ryb3koKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy5kZXN0cm95T2JqZWN0KCk7XG5cdH1cblxuXHQvKipcblx0ICogQ2xhc3MgZGVzdHJ1Y3RvciBpbXBsZW1lbnRhdGlvbi4gQ2FsbGVkIGluc2lkZSBgZGVzdHJveWAgbWV0aG9kICphZnRlciBhZ2dyZWdhdGVkIG9iamVjdHMgZGVzdHJ1Y3Rpb24qLlxuXHQgKiBUaGUgbG9naWMgb2YgY2xhc3MgaW5zdGFuY2UgZGVzdHJ1Y3Rpb24gc2hvdWxkIGJlIGltcGxlbWVudGVkIGhlcmUuIElmIHlvdSBvdmVycmlkZSB0aGlzIG1ldGhvZCxcblx0ICogcmVtZW1iZXIgdG8gY2FsbCBgc3VwZXIuZGVzdHJveU9iamVjdCgpYCBhdCB0aGUgZW5kIG9mIHRoZSBtZXRob2QuXG5cdCAqL1xuXHRwcm90ZWN0ZWQgZGVzdHJveU9iamVjdCgpIHt9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==

/***/ }),

/***/ "../../main/dist/Component.js":
/*!*********************************************!*\
  !*** C:/jwidget/git/main/dist/Component.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "../../node_modules/jquery/dist/jquery.js"));

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));

var ComponentBindable_1 = __importDefault(__webpack_require__(/*! ./component/ComponentBindable */ "../../main/dist/component/ComponentBindable.js"));

var ComponentChildren_1 = __importDefault(__webpack_require__(/*! ./component/ComponentChildren */ "../../main/dist/component/ComponentChildren.js"));

var ComponentCollection_1 = __importDefault(__webpack_require__(/*! ./component/ComponentCollection */ "../../main/dist/component/ComponentCollection.js"));

var ComponentList_1 = __importDefault(__webpack_require__(/*! ./component/ComponentList */ "../../main/dist/component/ComponentList.js"));

var DictionaryUtils = __importStar(__webpack_require__(/*! ./DictionaryUtils */ "../../main/dist/DictionaryUtils.js"));

var DomTemplate_1 = __importDefault(__webpack_require__(/*! ./DomTemplate */ "../../main/dist/DomTemplate.js"));

var DomUtils = __importStar(__webpack_require__(/*! ./DomUtils */ "../../main/dist/DomUtils.js"));

var HtmlTemplate_1 = __importDefault(__webpack_require__(/*! ./HtmlTemplate */ "../../main/dist/HtmlTemplate.js"));

var index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");

var List_1 = __importDefault(__webpack_require__(/*! ./List */ "../../main/dist/List.js"));

var Map_1 = __importDefault(__webpack_require__(/*! ./Map */ "../../main/dist/Map.js"));

var Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));

var Set_1 = __importDefault(__webpack_require__(/*! ./Set */ "../../main/dist/Set.js"));

var StringUtils = __importStar(__webpack_require__(/*! ./StringUtils */ "../../main/dist/StringUtils.js"));
/**
 * Base class of UI component.
 *
 * Features:
 *
 * - Rendering by HTML template.
 * - Direct access to component elements.
 * - jQuery interface for element manipulations.
 * - Convenient API for data binding and child component management.
 */


var Component = /*#__PURE__*/function (_Class_1$default) {
  _inherits(Component, _Class_1$default);

  var _super = _createSuper(Component);

  /**
   * Plain objects of this class can be constructed. They can be used as dummy components or simple containers.
   */
  function Component() {
    var _this;

    _classCallCheck(this, Component);

    _this = _super.call(this);
    _this._parent = null;
    _this._el = null;
    _this._children = null;
    _this._wasAfterAppend = false;
    _this.__elements = null;
    _this.__bindables = null;
    _this.__arrays = null;
    _this.__collections = null;

    if (!Component.prototype._template) {
      Component.prototype._template = new HtmlTemplate_1.default('<div></div>');
    }

    return _this;
  }
  /**
   * Parent component. The property is available from component rendering beginning.
   */


  _createClass(Component, [{
    key: "destroy",

    /**
     * @inheritDoc
     */
    value: function destroy() {
      if (this._parent) {
        throw new Error("JW.UI.Component.destroy must be used for root and detached components only");
      }

      if (this._wasAfterAppend) {
        this.releaseDom();
      }

      if (this._el) {
        DomUtils.remove(this._el[0]);
        DictionaryUtils.forEach(this.__collections, index_1.destroy);
        this.__collections = null;
        DictionaryUtils.forEach(this.__arrays, index_1.destroy);
        this.__arrays = null;
        DictionaryUtils.forEach(this.__bindables, index_1.destroy);
        this.__bindables = null;

        this._children.unrender();

        this.unrender();

        this._children.destroy();

        this._children = null;

        this._el.remove();
      }

      this.__elements = null;
      this._el = null;
      this.afterDestroy();

      _get(_getPrototypeOf(Component.prototype), "destroy", this).call(this);
    }
    /**
     * Component life stage method. Called during component rendering after HTML template parsing and initialization
     * of references to all elements of the template. Called before `render<ChildId>` methods and
     * `afterRender` method. It is convenient to perform some preliminary action here before child
     * components creation. But you are already able to create child components here.
     * Call `super.beforeRender()` at the first line of the method.
     */

  }, {
    key: "beforeRender",
    value: function beforeRender() {}
    /**
     * Component life stage method. Called after `beforeRender` method and `render<ChildId>` methods.
     * You should assign all elements' attributes here, create child components,
     * bind to events and fill component with interactivity.
     * Call `super.afterRender()` at the first line of the method.
     */

  }, {
    key: "afterRender",
    value: function afterRender() {}
    /**
     * Component life stage method. Called after first-time component appearing in HTML DOM and UI components tree.
     * Component layouting should be performed here (element size computing).
     * Component rendering is finished here.
     * Call `super.afterAppend()` at the first line of the method.
     */

  }, {
    key: "afterAppend",
    value: function afterAppend() {}
    /**
     * Component life stage method. Called during component destruction before `unrender` method call.
     * Everything that was performed in `afterAppend` method should be reverted here.
     * Call `super.releaseDom()` at the last line of the method.
     */

  }, {
    key: "releaseDom",
    value: function releaseDom() {}
    /**
     * Component life stage method. Called during component destruction before `afterDestroy` method call.
     * Everything that was performed during component
     * rendering should be reverted here. All child components are already removed by framework
     * before this method call, but the components themselves are not destroyed. You must destroy them explicitly.
     * Call `super.unrender()` at the last line of the method.
     */

  }, {
    key: "unrender",
    value: function unrender() {}
    /**
     * Component life stage method. Called during component destruction after `unrender` method call.
     * Everything that was performed during component construction should be reverted here.
     * Call `super.afterDestroy()` at the last line of the method.
     */

  }, {
    key: "afterDestroy",
    value: function afterDestroy() {}
    /**
     * Virtual method to render the component document fragment.
     * By default, renders by template.
     */

  }, {
    key: "createElement",
    value: function createElement() {
      return this._template.createElement();
    }
    /**
     * Selects component rendering strategy. This method is needed only in very rare cases.
     * By default, component is rendered outside of DOM based on `main` HTML
     * template specified by `template` annotation. You can change this by `using` method call.
     */

  }, {
    key: "using",
    value: function using(value) {
      this._template = typeof value === "string" ? new HtmlTemplate_1.default(value) : value instanceof HtmlTemplate_1.default ? value : new DomTemplate_1.default(value);
      return this;
    }
    /**
     * Renders the component. Call this method to initialize references to all elements of component and create
     * child components.
     */

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      if (this._el) {
        return this;
      }

      var output = this.createElement();
      this._el = jquery_1.default(output.root);
      this.__elements = DictionaryUtils.map(output.groups, function (x) {
        return jquery_1.default(x);
      });
      this._children = new ComponentChildren_1.default(this);
      this.__bindables = {};
      this.__arrays = {};
      this.__collections = {};
      this.beforeRender();
      var elements = index_1.apply({}, this.__elements);

      for (var jwId in elements) {
        var element = elements[jwId];
        var aliveElements = Array.prototype.filter.call(element, function (el) {
          return DomUtils.inEl(el, _this2._el[0]);
        });

        if (aliveElements.length === 0) {
          delete this.__elements[jwId];
          continue;
        }

        if (aliveElements.length !== element.length) {
          element = jquery_1.default(aliveElements);
          this.__elements[jwId] = element;
        }

        var jwIdCamel = StringUtils.camel(jwId);
        var renderMethodName = "render" + StringUtils.capitalize(jwIdCamel);

        if (typeof this[renderMethodName] === "function") {
          var result = this[renderMethodName](element);

          if (jwId === "root") {
            if (result instanceof List_1.default) {
              this.addList(result, jwId);
            } else if (result instanceof Map_1.default || result instanceof Set_1.default) {
              this.addCollection(result, jwId);
            }
          } else {
            if (result instanceof Component) {
              this._children.put(jwId, result);
            } else if (result instanceof Property_1.default) {
              this.addBindable(result, jwId);
            } else if (result instanceof List_1.default) {
              this.addList(result, jwId);
            } else if (result instanceof Map_1.default || result instanceof Set_1.default) {
              this.addCollection(result, jwId);
            } else if (result === false) {
              this.removeElement(jwId);
            }
          }
        }
      }

      this.afterRender();

      if (this._template.requiresAfterAppend) {
        this._afterAppend();
      }

      return this;
    }
    /**
     * Renders component into an element. Use it to render root component only: its children must be rendered
     * using `children`, `addList`, `addCollection`, `addBindable` members.
     *
     * @param el Element to render component into.
     */

  }, {
    key: "renderTo",
    value: function renderTo(el) {
      this.render();
      jquery_1.default(el)[0].appendChild(this._el[0]);

      this._afterAppend();

      return this;
    }
    /**
     * Render component in place of an element. Use it to render root component only: its children must be rendered
     * using `children`, `addList`, `addCollection`, `addBindable` members.
     *
     * @param el Element to render component in place of.
     */

  }, {
    key: "renderAs",
    value: function renderAs(el) {
      this.render();
      DomUtils.replace(jquery_1.default(el)[0], this._el[0], true);

      this._afterAppend();

      return this;
    }
    /**
     * Remove the component from DOM. Can be used for root component only (which was added via `renderTo` or `renderAs`
     * method). All child components should be removed using `children` map or owning object deletion.
     */

  }, {
    key: "remove",
    value: function remove() {
      if (this._parent) {
        throw new Error("JW.UI.Component.remove must be used for root components only");
      }

      DomUtils.remove(this._el[0]);
      return this;
    }
    /**
     * Get element by its `jwid`.
     * @param id `jwid` of the element.
     */

  }, {
    key: "getElement",
    value: function getElement(id) {
      return this.__elements[id];
    }
    /**
     * Remove element by `jwid`. Element gets removed from DOM and destroyed. It is then impossible to get it by `getElement` method.
     * @param id `jwid` of the element.
     */

  }, {
    key: "removeElement",
    value: function removeElement(id) {
      var el = this.__elements[id];

      if (!el) {
        return this;
      }

      el.remove();
      delete this.__elements[id];
      return this;
    }
    /**
     * Adds child component and synchronizes the component with the bindable.
     *
     * @param component Child component bindable.
     * @param id `jwid` of element to replace.
     */

  }, {
    key: "addBindable",
    value: function addBindable(component, id) {
      return new ComponentBindable_1.default(this, component, id);
    }
    /**
     * Adds list of child components and synchronizes the component with it. As opposed to `addCollection` method,
     * keeps component order. However, it works slower and accepts list only.
     *
     * @param source Child component list.
     * @param el `jwid` of element to add child components into. Defaults to root element (`el`) of component.
     */

  }, {
    key: "addList",
    value: function addList(source, el) {
      return new ComponentList_1.default(this, source, this._getContainerElement(el));
    }
    /**
     * Add child component collection into an element. As opposed to `addArray` method, ignores
     * component order. However, it works faster and accepts any kind of collection, not array only.
     *
     * @param source Child component collection.
     * @param el `jwid` of element to add child components into. Defaults to root element (`el`) of component.
     */

  }, {
    key: "addCollection",
    value: function addCollection(source, el) {
      return new ComponentCollection_1.default(this, source, this._getContainerElement(el));
    }
    /**
     * @hidden
     */

  }, {
    key: "_afterAppend",
    value: function _afterAppend() {
      if (this._wasAfterAppend || !this._el) {
        return;
      }

      if (this._parent && !this._parent._wasAfterAppend) {
        return;
      }

      if (!this._parent && !DomUtils.inDom(this._el[0])) {
        return;
      }

      this._wasAfterAppend = true;
      this.afterAppend();

      this._children.forEach(DomUtils._afterAppend);

      DictionaryUtils.forEach(this.__arrays, DomUtils._afterAppend);
      DictionaryUtils.forEach(this.__collections, DomUtils._afterAppend);
    }
    /**
     * @hidden
     */

  }, {
    key: "_initChild",
    value: function _initChild(component) {
      component.render();
      component._parent = this;
    }
    /**
     * @hidden
     */

  }, {
    key: "_doneChild",
    value: function _doneChild(component) {
      component._parent = null;
    }
    /**
     * @hidden
     */

  }, {
    key: "_getContainerElement",
    value: function _getContainerElement(el) {
      return el === undefined ? this._el : typeof el === "string" ? this.__elements[el] : jquery_1.default(el);
    }
  }, {
    key: "parent",
    get: function get() {
      return this._parent;
    }
    /**
     * Root element. Field is available from component rendering beginning.
     */

  }, {
    key: "el",
    get: function get() {
      return this._el;
    }
    /**
     * Mutable named child components. Use this map to add child components in place of
     * elements with corresponding `jwid`. Field is available from component rendering beginning.
     */

  }, {
    key: "children",
    get: function get() {
      return this._children;
    }
    /**
     * Component template.
     */

  }, {
    key: "template",
    get: function get() {
      return this._template;
    }
    /**
     * @hidden
     */

  }, {
    key: "_elements",
    get: function get() {
      return this.__elements;
    }
    /**
     * @hidden
     */

  }, {
    key: "_bindables",
    get: function get() {
      return this.__bindables;
    }
    /**
     * @hidden
     */

  }, {
    key: "_arrays",
    get: function get() {
      return this.__arrays;
    }
    /**
     * @hidden
     */

  }, {
    key: "_collections",
    get: function get() {
      return this.__collections;
    }
  }]);

  return Component;
}(Class_1.default);

exports.default = Component;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/Destructor.js":
/*!**********************************************!*\
  !*** C:/jwidget/git/main/dist/Destructor.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Destroyable object that calls the specified callback on destruction.
 */

var Destructor = /*#__PURE__*/function () {
  /**
   * Creates a destructor instance.
   * @param callback Callback to call on destruction.
   * @param scope `callback` call scope.
   */
  function Destructor(callback, scope) {
    _classCallCheck(this, Destructor);

    this.callback = callback;
    this.scope = scope;
  }

  _createClass(Destructor, [{
    key: "destroy",
    value: function destroy() {
      if (this.callback) {
        this.callback.call(this.scope || this);
      }
    }
  }]);

  return Destructor;
}();

exports.default = Destructor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9EZXN0cnVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMEJBOzs7O0lBR3FCLFU7QUFDcEI7Ozs7O0FBS0Esc0JBQW9CLFFBQXBCLEVBQWlELEtBQWpELEVBQTREO0FBQUE7O0FBQXhDLFNBQUEsUUFBQSxHQUFBLFFBQUE7QUFBNkIsU0FBQSxLQUFBLEdBQUEsS0FBQTtBQUFlOzs7OzhCQUV6RDtBQUNOLFVBQUksS0FBSyxRQUFULEVBQW1CO0FBQ2xCLGFBQUssUUFBTCxDQUFjLElBQWQsQ0FBbUIsS0FBSyxLQUFMLElBQWMsSUFBakM7QUFDQTtBQUNEOzs7Ozs7QUFaRixPQUFBLENBQUEsT0FBQSxHQUFBLFVBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgRGVzdHJveWFibGUgZnJvbSAnLi9EZXN0cm95YWJsZSc7XG5cbi8qKlxuICogRGVzdHJveWFibGUgb2JqZWN0IHRoYXQgY2FsbHMgdGhlIHNwZWNpZmllZCBjYWxsYmFjayBvbiBkZXN0cnVjdGlvbi5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVzdHJ1Y3RvciBpbXBsZW1lbnRzIERlc3Ryb3lhYmxlIHtcblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBkZXN0cnVjdG9yIGluc3RhbmNlLlxuXHQgKiBAcGFyYW0gY2FsbGJhY2sgQ2FsbGJhY2sgdG8gY2FsbCBvbiBkZXN0cnVjdGlvbi5cblx0ICogQHBhcmFtIHNjb3BlIGBjYWxsYmFja2AgY2FsbCBzY29wZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgY2FsbGJhY2s6ICgpID0+IGFueSwgcHJpdmF0ZSBzY29wZT86IGFueSkge31cblxuXHRkZXN0cm95KCkge1xuXHRcdGlmICh0aGlzLmNhbGxiYWNrKSB7XG5cdFx0XHR0aGlzLmNhbGxiYWNrLmNhbGwodGhpcy5zY29wZSB8fCB0aGlzKTtcblx0XHR9XG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "../../main/dist/DictionaryUtils.js":
/*!***************************************************!*\
  !*** C:/jwidget/git/main/dist/DictionaryUtils.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getInverted = exports.getRemovedKeys = exports.detectReindex = exports.detectSplice = exports.tryReindex = exports.trySplice = exports.tryClear = exports.trySetKey = exports.tryRemoveAll = exports.tryRemove = exports.tryPutAll = exports.tryPut = exports.equal = exports.reduce = exports.index = exports.toArray = exports.toSortedComparing = exports.toSorted = exports.getSortingKeysComparing = exports.getSortingKeys = exports.map = exports.count = exports.filter = exports.forEach = exports.some = exports.every = exports.clone = exports.reindex = exports.splice = exports.clear = exports.setKey = exports.removeItems = exports.removeItem = exports.removeAllVerbose = exports.removeAll = exports.remove = exports.putAllVerbose = exports.putAll = exports.put = exports.minKeyComparing = exports.minComparing = exports.minKey = exports.min = exports.maxKeyComparing = exports.maxComparing = exports.maxKey = exports.max = exports.findKey = exports.find = exports.keyOf = exports.contains = exports.isEmpty = exports.getLength = exports.getFirstKey = exports.getFirst = void 0;

var index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");

var internal_1 = __webpack_require__(/*! ./internal */ "../../main/dist/internal.js");
/**
 * Returns some item in dictionary.
 *
 * @param dict Dictionary.
 * @returns Some item. If dictionary is empty, returns undefined.
 */


function getFirst(dict) {
  return dict[getFirstKey(dict)];
}

exports.getFirst = getFirst;
/**
 * Returns key of some item in dictionary.
 *
 * @param dict Dictionary.
 * @returns Key of some item. If dictionary is empty, returns undefined.
 */

function getFirstKey(dict) {
  for (var key in dict) {
    return key;
  }

  return undefined;
}

exports.getFirstKey = getFirstKey;
/**
 * Returns count of items in dictionary.
 *
 * @param dict Dictionary.
 * @returns Count of items in dictionary.
 */

function getLength(dict) {
  var length = 0;

  for (var _key in dict) {
    ++length;
  }

  return length;
}

exports.getLength = getLength;
/**
 * Checks if dictionary is empty.
 *
 * @param dict Dictionary.
 * @returns Dictionary has no keys/items.
 */

function isEmpty(dict) {
  for (var _key in dict) {
    return false;
  }

  return true;
}

exports.isEmpty = isEmpty;
/**
 * Checks if the item exists in dictionary.
 *
 * @param dict Dictionary.
 * @param item Item to find.
 * @returns Item exists in dictionary.
 */

function contains(dict, item) {
  return !every(dict, function (v) {
    return item !== v;
  });
}

exports.contains = contains;
/**
 * Returns key of item in dictionary.
 *
 * @param dict Dictionary.
 * @param item Item to find.
 * @returns Key of item. If item doesn't exist, returns undefined.
 */

function keyOf(dict, item) {
  return findKey(dict, function (v) {
    return item === v;
  });
}

exports.keyOf = keyOf;
/**
 * Finds item matching criteria.
 *
 * Returns the first item for which callback returns truthy value.
 *
 * Algorithms iterates items consequently, and stops after first item matching the criteria.
 *
 * @param dict Dictionary.
 * @param callback Criteria callback.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 * @returns Found item or undefined.
 */

function find(dict, callback, scope) {
  var result = undefined;
  every(dict, function (item, key) {
    if (callback.call(scope, item, key)) {
      result = item;
      return false;
    }

    return true;
  });
  return result;
}

exports.find = find;
/**
 * Finds item matching criteria.
 *
 * Returns key of first item for which callback returns truthy value.
 *
 * Algorithms iterates items consequently, and stops after the first item matching the criteria.
 *
 * @param dict Dictionary.
 * @param callback Criteria callback.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 * @returns Found item key or undefined.
 */

function findKey(dict, callback, scope) {
  var result = undefined;
  every(dict, function (item, key) {
    if (callback.call(scope, item, key)) {
      result = key;
      return false;
    }

    return true;
  });
  return result;
}

exports.findKey = findKey;
/**
 * Returns the dictionary item which callback returns the highest (or lowest) value for.
 *
 * @param dict Dictionary.
 * @param callback Returns a comparable value, compatible with `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 * @param order Pass positive order to find the highest value, and negative to find the lowest one.
 * @returns Maximum dictionary item.
 */

function max(dict, callback, scope) {
  var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  return dict[maxKey(dict, callback, scope, order)];
}

exports.max = max;
/**
 * Returns key of the dictionary item which callback returns the highest (or lowest) value for.
 *
 * @param dict Dictionary.
 * @param callback Returns a comparable value, compatible with `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 * @param order Pass positive order to find the highest value, and negative to find the lowest one.
 * @returns Item key.
 */

function maxKey(dict, callback, scope) {
  var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  callback = callback || internal_1.identity;
  scope = scope || dict;
  var result;
  var max;

  for (var key in dict) {
    var item = callback.call(scope, dict[key], key);

    if (result === undefined || order > 0 && max < item || order < 0 && max > item) {
      result = key;
      max = item;
    }
  }

  return result;
}

exports.maxKey = maxKey;
/**
 * Returns the highest (or lowest) dictionary item in terms of the specified comparer function.
 *
 * @param dict Dictionary.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `compare` call scope. Defaults to dictionary itself.
 * @param order Pass positive order to find the highest value, and negative to find the lowest one.
 * @returns Dictionary item.
 */

function maxComparing(dict, compare, scope) {
  var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  return dict[maxKeyComparing(dict, compare, scope, order)];
}

exports.maxComparing = maxComparing;
/**
 * Returns key of the highest (or lowest) dictionary item in terms of the specified comparer function.
 *
 * @param dict Dictionary.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `compare` call scope. Defaults to dictionary itself.
 * @param order Pass positive order to find the highest value, and negative to find the lowest one.
 * @returns Item key.
 */

function maxKeyComparing(dict, compare, scope) {
  var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  compare = compare || internal_1.cmpPrimitives;
  scope = scope || dict;
  var result = undefined;

  for (var key in dict) {
    if (result === undefined || order * compare.call(scope, dict[result], dict[key], result, key) < 0) {
      result = key;
    }
  }

  return result;
}

exports.maxKeyComparing = maxKeyComparing;
/**
 * Returns the dictionary item which callback returns the lowest (or highest) value for.
 *
 * @param dict Dictionary.
 * @param callback Returns a comparable value, compatible with `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 * @param order Pass positive order to find the lowest value, and negative to find the highest one.
 * @returns Dictionary item.
 */

function min(dict, callback, scope) {
  var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  return max(dict, callback, scope, -order);
}

exports.min = min;
/**
 * Returns index of the dictionary item which callback returns the lowest (or highest) value for.
 *
 * @param dict Dictionary.
 * @param callback Returns a comparable value, compatible with `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 * @param order Pass positive order to find the lowest value, and negative to find the highest one.
 * @returns Item key.
 */

function minKey(dict, callback, scope) {
  var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  return maxKey(dict, callback, scope, -order);
}

exports.minKey = minKey;
/**
 * Returns the lowest (or highest) dictionary item in terms of the specified comparer function.
 *
 * @param dict Dictionary.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `compare` call scope. Defaults to dictionary itself.
 * @param order Pass positive order to find the lowest value, and negative to find the highest one.
 * @returns Dictionary item.
 */

function minComparing(dict, compare, scope) {
  var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  return maxComparing(dict, compare, scope, -order);
}

exports.minComparing = minComparing;
/**
 * Returns index of the lowest (or highest) dictionary item in terms of the specified comparer function.
 *
 * @param dict Dictionary.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `compare` call scope. Defaults to dictionary itself.
 * @param order Pass positive order to find the lowest value, and negative to find the highest one.
 * @returns Item key.
 */

function minKeyComparing(dict, compare, scope) {
  var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  return maxKeyComparing(dict, compare, scope, -order);
}

exports.minKeyComparing = minKeyComparing;
/**
 * Replaces item with specified key. If dictionary doesn't contain such key, new item is added.
 *
 * @param dict Dictionary.
 * @param key Key.
 * @param item Item.
 * @returns The replaced item.
 */

function put(dict, key, item) {
  var result = tryPut(dict, key, item);
  return result !== undefined ? result.value : dict[key];
}

exports.put = put;
/**
 * Adds or replaces a bunch of items.
 *
 * @param dict Dictionary.
 * @param items Items with corresponding keys.
 */

function putAll(dict, items) {
  for (var key in items) {
    dict[key] = items[key];
  }
}

exports.putAll = putAll;
/**
 * Low-performance alternative to `putAll` with verbose result set.
 *
 * @param dict Dictionary.
 * @param items Items with corresponding keys.
 * @returns Result of internal `splice` method call. Nevers returns null or undefined.
 */

function putAllVerbose(dict, items) {
  var spliceResult = tryPutAll(dict, items);
  return spliceResult !== undefined ? spliceResult : {
    removedItems: {},
    addedItems: {}
  };
}

exports.putAllVerbose = putAllVerbose;
/**
 * Removes item with specified key if it exists in dictionary.
 *
 * @param dict Dictionary.
 * @param key Key of item to remove.
 * @returns The removed dictionary item.
 */

function remove(dict, key) {
  return tryRemove(dict, key);
}

exports.remove = remove;
/**
 * Removes a bunch of items from dictionary.
 *
 * @param dict Dictionary.
 * @param keys Keys of items to remove.
 */

function removeAll(dict, keys) {
  for (var i = 0, l = keys.length; i < l; ++i) {
    delete dict[keys[i]];
  }
}

exports.removeAll = removeAll;
/**
 * Low-performance alternative to `removeAll` with verbose result set.
 *
 * @param dict Dictionary.
 * @param keys Keys of items to remove.
 * @returns The removed items. Never returns null or undefined.
 */

function removeAllVerbose(dict, keys) {
  var items = tryRemoveAll(dict, keys);
  return items !== undefined ? items : {};
}

exports.removeAllVerbose = removeAllVerbose;
/**
 * Removes an item from the dictionary.
 *
 * @param dict Dictionary.
 * @param item Item to remove.
 * @returns Item key in the dictionary.
 */

function removeItem(dict, item) {
  var key = keyOf(dict, item);

  if (key !== undefined) {
    tryRemove(dict, key);
  }

  return key;
}

exports.removeItem = removeItem;
/**
 * Removes all occurrences of items in dictionary.
 *
 * @param dict Dictionary.
 * @param items Items to remove.
 * @param getKey Function which returns unique key of an item in this dictionary.
 * By default, identifies primitive values and `Identifiable` objects.
 */

function removeItems(dict, items, getKey) {
  var itemSet = internal_1.VidSet.fromArray(items, getKey);
  var newItems = filter(dict, function (item) {
    return !itemSet.contains(item);
  });
  tryClear(dict);
  tryPutAll(dict, newItems);
}

exports.removeItems = removeItems;
/**
 * Changes item key in dictionary. If dictionary doesn't contain `oldKey` or contains `newKey`, it causes an error.
 *
 * @param dict Dictionary.
 * @param oldKey Old item key.
 * @param newKey New item key.
 * @returns The moved item.
 */

function setKey(dict, oldKey, newKey) {
  var item = trySetKey(dict, oldKey, newKey);
  return item !== undefined ? item : dict[newKey];
}

exports.setKey = setKey;
/**
 * Clears dictionary.
 *
 * @param dict Dictionary.
 * @returns Old dictionary contents. Never returns null or undefined.
 */

function clear(dict) {
  var result = tryClear(dict);
  return result !== undefined ? result : {};
}

exports.clear = clear;
/**
 * Removes and adds bunches of items in dictionary. Universal optimized granular operation of removal/insertion.
 *
 * @param dict Dictionary.
 * @param removedKeys Keys of items to remove.
 * @param updatedItems Items to add/replace.
 * @returns Splice result. Never returns null or undefined.
 */

function splice(dict, removedKeys, updatedItems) {
  var spliceResult = trySplice(dict, removedKeys, updatedItems);
  return spliceResult !== undefined ? spliceResult : {
    removedItems: {},
    addedItems: {}
  };
}

exports.splice = splice;
/**
 * Changes item keys in dictionary.
 *
 * @param dict Dictionary.
 * @param keyMap Key mapping. Item with key `x` will gain key `keyMap[x]`.
 * It is enough to pass only changed keys, but unchanged keys or unexisting keys are acceptable as well.
 * @returns Map of changed keys. Never returns null or undefined.
 */

function reindex(dict, keyMap) {
  var result = tryReindex(dict, keyMap);
  return result !== undefined ? result : {};
}

exports.reindex = reindex;
/**
 * Returns a shallow copy of the dictionary.
 *
 * @param dict Dictionary.
 * @returns Shallow copy of dictionary.
 */

function clone(dict) {
  var result = {};

  for (var key in dict) {
    result[key] = dict[key];
  }

  return result;
}

exports.clone = clone;
/**
 * Matches all items against criteria.
 *
 * Returns true if callback returns truthy value for all dictionary items.
 *
 * Algorithms iterates items consequently, and stops after the first item not matching the criteria.
 *
 * @param dict Dictionary.
 * @param callback Criteria callback.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 */

function every(dict, callback, scope) {
  scope = scope || dict;

  for (var key in dict) {
    if (!callback.call(scope, dict[key], key)) {
      return false;
    }
  }

  return true;
}

exports.every = every;
/**
 * Matches each item against criteria.
 *
 * Returns true if callback returns truthy value for some dictionary item.
 *
 * Algorithms iterates items consequently, and stops after the first item matching the criteria.
 *
 * @param dict Dictionary.
 * @param callback Criteria callback.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 */

function some(dict, callback, scope) {
  return !every(dict, function (item, key) {
    return !callback.call(scope, item, key);
  });
}

exports.some = some;
/**
 * Iterates dictionary items. Calls specified function for all items.
 *
 * @param dict Dictionary.
 * @param callback Callback function.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 */

function forEach(dict, callback, scope) {
  every(dict, function (item, key) {
    callback.call(scope, item, key);
    return true;
  });
}

exports.forEach = forEach;
/**
 * Filters dictionary by criteria.
 *
 * Builds new dictionary, consisting of items for which callback returns thuthy value.
 *
 * @param dict Dictionary.
 * @param callback Criteria callback.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 * @returns Filtered dictionary.
 */

function filter(dict, callback, scope) {
  var result = {};
  every(dict, function (item, key) {
    if (callback.call(scope, item, key)) {
      result[key] = item;
    }

    return true;
  });
  return result;
}

exports.filter = filter;
/**
 * Counts the items matching criteria.
 *
 * Returns the number of items for which callback returns thuthy value.
 *
 * @param dict Dictionary.
 * @param callback Criteria callback.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 * @returns Number of items.
 */

function count(dict, callback, scope) {
  var result = 0;
  every(dict, function (item, key) {
    if (callback.call(scope, item, key)) {
      ++result;
    }

    return true;
  });
  return result;
}

exports.count = count;
/**
 * Maps dictionary items.
 *
 * Builds new dictionary, containing results of callback call for each dictionary item.
 *
 * @param dict Dictionary.
 * @param callback Mapping function.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 * @returns Mapped dictionary.
 */

function map(dict, callback, scope) {
  var result = {};
  every(dict, function (item, key) {
    result[key] = callback.call(scope, item, key);
    return true;
  });
  return result;
}

exports.map = map;
/**
 * Returns keys of sorted items.
 *
 * Builds array of item keys, sorted by the result of callback call for each item.
 *
 * @param dict Dictionary.
 * @param callback Indexer function. Must return a comparable value, compatible with
 * `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 * @returns Array of indices.
 */

function getSortingKeys(dict, callback, scope, order) {
  callback = callback || function (x) {
    return x;
  };

  order = order || 1;
  var pairs = [];
  every(dict, function (item, key) {
    pairs.push([key, callback.call(scope, item, key)]);
    return true;
  });
  pairs.sort(function (x, y) {
    return order * index_1.cmp(x[1], y[1]);
  });
  return pairs.map(function (pair) {
    return pair[0];
  });
}

exports.getSortingKeys = getSortingKeys;
/**
 * Returns keys of sorted items.
 *
 * Builds array of item keys, sorted by comparer.
 *
 * @param dict Dictionary.
 * @param compare Comparer function. Must return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `comparer` call scope. Defaults to dictionary itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 * @returns Array of keys.
 */

function getSortingKeysComparing(dict, compare, scope, order) {
  compare = compare || index_1.cmp;
  order = order || 1;
  var pairs = [];
  every(dict, function (item, key) {
    pairs.push([key, item]);
    return true;
  }, scope);
  pairs.sort(function (x, y) {
    return order * compare.call(scope, x[1], y[1], x[0], y[0]);
  });
  return pairs.map(function (pair) {
    return pair[0];
  });
}

exports.getSortingKeysComparing = getSortingKeysComparing;
/**
 * Builds and returns a new array consisting of dictionary items sorted by the result of
 * callback call for each item.
 *
 * @param dict Dictionary.
 * @param callback Indexer function. Must return a comparable value, compatible with
 * `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 * @returns Sorted array.
 */

function toSorted(dict, callback, scope, order) {
  return getSortingKeys(dict, callback, scope, order).map(function (key) {
    return dict[key];
  });
}

exports.toSorted = toSorted;
/**
 * Builds and returns a new array consisting of dictionary items sorted by comparer.
 *
 * @param dict Dictionary.
 * @param compare Comparer function. Must return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `comparer` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 * @returns Sorted array.
 */

function toSortedComparing(dict, compare, scope, order) {
  return getSortingKeysComparing(dict, compare, scope, order).map(function (key) {
    return dict[key];
  });
}

exports.toSortedComparing = toSortedComparing;
/**
 * Converts dictionary to array.
 *
 * Builds new array consisting of dictionary items in arbitrary order.
 *
 * @param dict Dictionary.
 * @returns Dictionary items.
 */

function toArray(dict) {
  var result = [];
  every(dict, function (item) {
    result.push(item);
    return true;
  });
  return result;
}

exports.toArray = toArray;
/**
 * Indexes dictionary items.
 *
 * Builds new dictionary by rule: key is the result of indexer function call, value is the corresponding item.
 *
 * @param dict Dictionary.
 * @param callback Indexer function.
 * @param scope `callback` call scope. Defaults to array itself.
 * @returns Dictionary index.
 */

function index(dict, callback, scope) {
  var result = {};
  every(dict, function (item, oldKey) {
    var key = callback.call(scope, item, oldKey);

    if (key != null) {
      result[key] = item;
    }

    return true;
  }, scope);
  return result;
}

exports.index = index;

function reduce(dict, reducer, initial) {
  var _ref = typeof reducer !== "function" ? internal_1.initReduceState(reducer) : {
    value: initial,
    callback: reducer
  },
      value = _ref.value,
      callback = _ref.callback;

  for (var key in dict) {
    value = callback(value, dict[key], key);
  }

  return value;
}

exports.reduce = reduce;
/**
 * Checks two dictionaries for equality, item by item (===).
 *
 * @param x First dictionary.
 * @param y Second dictionary.
 * @returns Dictionaries are equal.
 */

function equal(x, y) {
  if (x === y) {
    return true;
  }

  var length = getLength(y);

  for (var key in x) {
    if (--length < 0 || x[key] !== y[key]) {
      return false;
    }
  }

  return length === 0;
}

exports.equal = equal;
/**
 * Replaces item with specified key. If dictionary doesn't contain such key, new item is added.
 *
 * @param dict Dictionary.
 * @param key Key.
 * @param item Item.
 * @returns The replaced item. If dictionary is not modified, returns undefined.
 */

function tryPut(dict, key, item) {
  var oldItem = dict[key];

  if (oldItem === item) {
    return undefined;
  }

  dict[key] = item;
  return {
    value: oldItem
  };
}

exports.tryPut = tryPut;
/**
 * Adds or replaces a bunch of items.
 *
 * @param dict Dictionary.
 * @param items Items with corresponding keys.
 * @returns Result of internal `splice` method call. If dictionary is not modified, returns undefined.
 */

function tryPutAll(dict, items) {
  var removedItems = {};
  var addedItems = {};

  for (var key in items) {
    var item = items[key];
    var oldItem = tryPut(dict, key, item);

    if (oldItem === undefined) {
      continue;
    }

    var removedItem = oldItem.value;

    if (removedItem !== undefined) {
      removedItems[key] = removedItem;
    }

    addedItems[key] = item;
  }

  if (!isEmpty(removedItems) || !isEmpty(addedItems)) {
    return {
      removedItems: removedItems,
      addedItems: addedItems
    };
  }

  return undefined;
}

exports.tryPutAll = tryPutAll;
/**
 * Removes item with specified key if it exists in dictionary.
 *
 * @param dict Dictionary.
 * @param key Key of item to remove.
 * @returns Old dictionary item. If dictionary is not modified, returns undefined.
 */

function tryRemove(dict, key) {
  var item = dict[key];

  if (item !== undefined) {
    delete dict[key];
  }

  return item;
}

exports.tryRemove = tryRemove;
/**
 * Removes a bunch of items from dictionary.
 *
 * @param dict Dictionary.
 * @param keys Keys of items to remove.
 * @returns The removed items. If dictionary is not modified, returns undefined.
 */

function tryRemoveAll(dict, keys) {
  var items = {};

  for (var i = 0, l = keys.length; i < l; ++i) {
    var key = keys[i];
    var item = tryRemove(dict, key);

    if (item !== undefined) {
      items[key] = item;
    }
  }

  if (!isEmpty(items)) {
    return items;
  }

  return undefined;
}

exports.tryRemoveAll = tryRemoveAll;
/**
 * Changes item key in dictionary. If dictionary doesn't contain `oldKey` or contains `newKey`, it causes an error.
 *
 * @param dict Dictionary.
 * @param oldKey Old item key.
 * @param newKey New item key.
 * @returns The moved item. If dictionary is not modified, returns undefined.
 */

function trySetKey(dict, oldKey, newKey) {
  if (oldKey === newKey) {
    return undefined;
  }

  var item = dict[oldKey];
  delete dict[oldKey];
  dict[newKey] = item;
  return item;
}

exports.trySetKey = trySetKey;
/**
 * Clears dictionary.
 *
 * @param dict Dictionary.
 * @returns Old dictionary contents. If not modified, returns undefined.
 */

function tryClear(dict) {
  if (isEmpty(dict)) {
    return undefined;
  }

  var items = index_1.apply({}, dict);

  for (var key in items) {
    delete dict[key];
  }

  return items;
}

exports.tryClear = tryClear;
/**
 * Removes and adds bunches of items in dictionary. Universal optimized granular operation of removal/insertion.
 *
 * @param dict Dictionary.
 * @param removedKeys Keys of items to remove.
 * @param updatedItems Items to add/replace.
 * @returns Splice result. If dictionary is not modified, returns undefined.
 */

function trySplice(dict, removedKeys, updatedItems) {
  removedKeys = removedKeys.filter(function (key) {
    return !updatedItems.hasOwnProperty(key);
  });
  var removedItems = tryRemoveAll(dict, removedKeys);
  var spliceResult = tryPutAll(dict, updatedItems);

  if (spliceResult !== undefined) {
    index_1.apply(spliceResult.removedItems, removedItems);
    return spliceResult;
  }

  if (removedItems !== undefined) {
    return {
      removedItems: removedItems,
      addedItems: {}
    };
  }

  return undefined;
}

exports.trySplice = trySplice;
/**
 * Changes item keys in dictionary.
 *
 * @param dict Dictionary.
 * @param keyMap Key mapping. Item with key `x` will gain key `keyMap[x]`.
 * It is neccessary to pass only changed keys, but unchanged keys or unexisting keys are acceptable as well.
 * @returns Map of changed keys. If dictionary is not modified, returns undefined.
 */

function tryReindex(dict, keyMap) {
  var sanitizedKeyMap = {};

  for (var oldKey in keyMap) {
    var newKey = keyMap[oldKey];

    if (newKey === undefined || newKey === oldKey || dict[oldKey] === undefined) {
      continue;
    }

    sanitizedKeyMap[oldKey] = newKey;
  }

  var backKeyMap = getInverted(sanitizedKeyMap);
  var removedKeys = [];
  var updatedItems = {};

  for (var _oldKey in sanitizedKeyMap) {
    var _newKey = sanitizedKeyMap[_oldKey]; // JW.assertUndefined(updatedItems[newKey]);

    sanitizedKeyMap[_oldKey] = _newKey;
    updatedItems[_newKey] = dict[_oldKey];

    if (backKeyMap[_oldKey] === undefined) {
      removedKeys.push(_oldKey);
    }
  }

  if (isEmpty(sanitizedKeyMap)) {
    return undefined;
  }

  for (var i = 0, l = removedKeys.length; i < l; ++i) {
    delete dict[removedKeys[i]];
  }

  index_1.apply(dict, updatedItems);
  return sanitizedKeyMap;
}

exports.tryReindex = tryReindex;
/**
 * Detects `splice` method arguments to adjust dictionary contents to `newItems`.
 * Determines which item bunches should be removed and which ones should be inserted/replaced, and their keys.
 *
 * @param oldItems Old dictionary contents.
 * @param newItems New dictionary contents.
 * @returns `splice` method arguments. If no method call required, returns undefined.
 */

function detectSplice(oldItems, newItems) {
  var removedKeys = [];
  var updatedItems = {};

  for (var key in oldItems) {
    if (!newItems.hasOwnProperty(key)) {
      removedKeys.push(key);
    }
  }

  for (var _key2 in newItems) {
    var item = newItems[_key2];

    if (item !== oldItems[_key2]) {
      updatedItems[_key2] = item;
    }
  }

  if (removedKeys.length !== 0 || !isEmpty(updatedItems)) {
    return {
      removedKeys: removedKeys,
      updatedItems: updatedItems
    };
  }

  return undefined;
}

exports.detectSplice = detectSplice;
/**
 * Detects `reindex` method arguments to adjust dictionary contents to `newItems`.
 * Determines which keys should be assigned to all items.
 * If `newItems` contents differ from current dictionary contents, the dictionary will be broken.
 *
 * @param oldItems Old dictionary contents.
 * @param newItems New dictionary contents.
 * @param getKey Function which returns unique key of an item in this dictionary.
 * By default, identifies primitive values and `Identifiable` objects.
 * @returns `keyMap` argument of `reindex` method. If no method call required, returns undefined.
 */

function detectReindex(oldItems, newItems, getKey) {
  var newItemKeys = new internal_1.VidMap(getKey);

  for (var key in newItems) {
    newItemKeys.put(newItems[key], key);
  }

  var keyMap = {};

  for (var oldKey in oldItems) {
    var newKey = newItemKeys.get(oldItems[oldKey]);

    if (oldKey !== newKey) {
      keyMap[oldKey] = newKey;
    }
  }

  if (!isEmpty(keyMap)) {
    return keyMap;
  }

  return undefined;
}

exports.detectReindex = detectReindex;
/**
 * Based on the removed and added items during dictionary splice, returns keys which
 * were effectively removed, not replaced by other items.
 *
 * @param removedItems Removed items.
 * @param addedItems Added items.
 * @returns Effectively removed keys.
 */

function getRemovedKeys(removedItems, addedItems) {
  var removedKeys = [];

  for (var key in removedItems) {
    if (!addedItems.hasOwnProperty(key)) {
      removedKeys.push(key);
    }
  }

  return removedKeys;
}

exports.getRemovedKeys = getRemovedKeys;
/**
 * Creates a new dictionary by rule: `result[dict[key]] === key`.
 *
 * @param dict Dictionary.
 * @returns The inverted dictionary.
 */

function getInverted(dict) {
  // JW.assertMap(dict, JW.assertString);
  var result = {};

  for (var key in dict) {
    // JW.assertUndefined(result[dict[key]]);
    result[dict[key]] = key;
  }

  return result;
}

exports.getInverted = getInverted;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/DomTemplate.js":
/*!***********************************************!*\
  !*** C:/jwidget/git/main/dist/DomTemplate.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "../../node_modules/jquery/dist/jquery.js"));

var AbstractTemplate_1 = __importDefault(__webpack_require__(/*! ./AbstractTemplate */ "../../main/dist/AbstractTemplate.js"));
/**
 * @hidden
 */


var DomTemplate = /*#__PURE__*/function (_AbstractTemplate_1$d) {
  _inherits(DomTemplate, _AbstractTemplate_1$d);

  var _super = _createSuper(DomTemplate);

  /**
   * Creates a template instance.
   * @param el Element to process.
   */
  function DomTemplate(el) {
    var _this;

    _classCallCheck(this, DomTemplate);

    _this = _super.call(this);
    _this.output = null;
    _this.el = jquery_1.default(el)[0];
    return _this;
  }

  _createClass(DomTemplate, [{
    key: "createElement",
    value: function createElement() {
      if (this.output !== null) {
        return this.output;
      }

      this.groups = {};

      this._compileAttributes(this.el);

      var orderedGroups = {};

      for (var i = 0, l = this.ids.length; i < l; ++i) {
        var id = this.ids[i];
        orderedGroups[id] = this.groups[id];
      }

      this.output = {
        root: this.el,
        groups: orderedGroups
      };
      return this.output;
    }
  }, {
    key: "_addElement",
    value: function _addElement(id, el, path) {
      path = path;
      this.groups[id] = this.groups[id] || [];
      this.groups[id].push(el);
    }
  }, {
    key: "requiresAfterAppend",
    get: function get() {
      return true;
    }
  }]);

  return DomTemplate;
}(AbstractTemplate_1.default);

exports.default = DomTemplate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Eb21UZW1wbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBLElBQUEsUUFBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsUUFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxrQkFBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsb0JBQUEsQ0FBQSxDQUFBO0FBSUE7Ozs7O0lBR3FCLFc7Ozs7O0FBS3BCOzs7O0FBSUEsdUJBQVksRUFBWixFQUFvQztBQUFBOztBQUFBOztBQUNuQztBQVJPLFVBQUEsTUFBQSxHQUF5QixJQUF6QjtBQVNQLFVBQUssRUFBTCxHQUFlLFFBQUEsQ0FBQSxPQUFBLENBQU8sRUFBUCxFQUFXLENBQVgsQ0FBZjtBQUZtQztBQUduQzs7OztvQ0FNWTtBQUNaLFVBQUksS0FBSyxNQUFMLEtBQWdCLElBQXBCLEVBQTBCO0FBQ3pCLGVBQU8sS0FBSyxNQUFaO0FBQ0E7O0FBQ0QsV0FBSyxNQUFMLEdBQWMsRUFBZDs7QUFDQSxXQUFLLGtCQUFMLENBQXdCLEtBQUssRUFBN0I7O0FBQ0EsVUFBSSxhQUFhLEdBQThCLEVBQS9DOztBQUNBLFdBQUssSUFBSSxDQUFDLEdBQUcsQ0FBUixFQUFXLENBQUMsR0FBRyxLQUFLLEdBQUwsQ0FBUyxNQUE3QixFQUFxQyxDQUFDLEdBQUcsQ0FBekMsRUFBNEMsRUFBRSxDQUE5QyxFQUFpRDtBQUNoRCxZQUFJLEVBQUUsR0FBRyxLQUFLLEdBQUwsQ0FBUyxDQUFULENBQVQ7QUFDQSxRQUFBLGFBQWEsQ0FBQyxFQUFELENBQWIsR0FBb0IsS0FBSyxNQUFMLENBQVksRUFBWixDQUFwQjtBQUNBOztBQUNELFdBQUssTUFBTCxHQUFjO0FBQUMsUUFBQSxJQUFJLEVBQUUsS0FBSyxFQUFaO0FBQWdCLFFBQUEsTUFBTSxFQUFFO0FBQXhCLE9BQWQ7QUFDQSxhQUFPLEtBQUssTUFBWjtBQUNBOzs7Z0NBRXFCLEUsRUFBWSxFLEVBQWlCLEksRUFBYztBQUNoRSxNQUFBLElBQUksR0FBRyxJQUFQO0FBQ0EsV0FBSyxNQUFMLENBQVksRUFBWixJQUFrQixLQUFLLE1BQUwsQ0FBWSxFQUFaLEtBQW1CLEVBQXJDO0FBQ0EsV0FBSyxNQUFMLENBQVksRUFBWixFQUFnQixJQUFoQixDQUFxQixFQUFyQjtBQUNBOzs7d0JBdkJzQjtBQUN0QixhQUFPLElBQVA7QUFDQTs7OztFQWhCdUMsa0JBQUEsQ0FBQSxPOztBQUF6QyxPQUFBLENBQUEsT0FBQSxHQUFBLFdBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgalF1ZXJ5IGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgQWJzdHJhY3RUZW1wbGF0ZSBmcm9tICcuL0Fic3RyYWN0VGVtcGxhdGUnO1xuaW1wb3J0IERpY3Rpb25hcnkgZnJvbSAnLi9EaWN0aW9uYXJ5JztcbmltcG9ydCBUZW1wbGF0ZU91dHB1dCBmcm9tICcuL1RlbXBsYXRlT3V0cHV0JztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERvbVRlbXBsYXRlIGV4dGVuZHMgQWJzdHJhY3RUZW1wbGF0ZSB7XG5cdHByaXZhdGUgZWw6IEhUTUxFbGVtZW50O1xuXHRwcml2YXRlIG91dHB1dDogVGVtcGxhdGVPdXRwdXQgPSBudWxsO1xuXHRwcml2YXRlIGdyb3VwczogRGljdGlvbmFyeTxIVE1MRWxlbWVudFtdPjtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHRlbXBsYXRlIGluc3RhbmNlLlxuXHQgKiBAcGFyYW0gZWwgRWxlbWVudCB0byBwcm9jZXNzLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoZWw6IEhUTUxFbGVtZW50IHwgSlF1ZXJ5KSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLmVsID0gPGFueT5qUXVlcnkoZWwpWzBdO1xuXHR9XG5cblx0Z2V0IHJlcXVpcmVzQWZ0ZXJBcHBlbmQoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRjcmVhdGVFbGVtZW50KCk6IFRlbXBsYXRlT3V0cHV0IHtcblx0XHRpZiAodGhpcy5vdXRwdXQgIT09IG51bGwpIHtcblx0XHRcdHJldHVybiB0aGlzLm91dHB1dDtcblx0XHR9XG5cdFx0dGhpcy5ncm91cHMgPSB7fTtcblx0XHR0aGlzLl9jb21waWxlQXR0cmlidXRlcyh0aGlzLmVsKTtcblx0XHR2YXIgb3JkZXJlZEdyb3VwczogRGljdGlvbmFyeTxIVE1MRWxlbWVudFtdPiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5pZHMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG5cdFx0XHR2YXIgaWQgPSB0aGlzLmlkc1tpXTtcblx0XHRcdG9yZGVyZWRHcm91cHNbaWRdID0gdGhpcy5ncm91cHNbaWRdO1xuXHRcdH1cblx0XHR0aGlzLm91dHB1dCA9IHtyb290OiB0aGlzLmVsLCBncm91cHM6IG9yZGVyZWRHcm91cHN9O1xuXHRcdHJldHVybiB0aGlzLm91dHB1dDtcblx0fVxuXG5cdHByb3RlY3RlZCBfYWRkRWxlbWVudChpZDogc3RyaW5nLCBlbDogSFRNTEVsZW1lbnQsIHBhdGg6IG51bWJlcltdKSB7XG5cdFx0cGF0aCA9IHBhdGg7XG5cdFx0dGhpcy5ncm91cHNbaWRdID0gdGhpcy5ncm91cHNbaWRdIHx8IFtdO1xuXHRcdHRoaXMuZ3JvdXBzW2lkXS5wdXNoKGVsKTtcblx0fVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==

/***/ }),

/***/ "../../main/dist/DomUtils.js":
/*!********************************************!*\
  !*** C:/jwidget/git/main/dist/DomUtils.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._afterAppend = exports.replace = exports.remove = exports.insert = exports.parseHtml = exports.addClass = exports.hasClass = exports.inEl = exports.inDom = exports.isTextInput = exports.isElement = void 0;

var jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "../../node_modules/jquery/dist/jquery.js"));
/**
 * Some code is taken from jQuery. We are not happy with standard jQuery.parseHtml, because it is slow.
 * We implement an own parseHtml which omits a good bunch of useless manupulations.
 */


var wrapMap = {
  option: [1, "<select multiple='multiple'>", "</select>"],
  thead: [1, "<table>", "</table>"],
  col: [2, "<table><colgroup>", "</colgroup></table>"],
  tr: [2, "<table><tbody>", "</tbody></table>"],
  td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
  _default: [0, "", ""]
};
var rtagName = /^<([\w:]+)/;
var _fragment = null;
/**
 * Checks if value is a jQuery element.
 */

function isElement(value) {
  return value instanceof jquery_1.default.fn.init;
}

exports.isElement = isElement;
var lifeInputTags = ["text", "password", "email", "number", "search", "tel", "url"];

function isTextInput(el) {
  var $el = jquery_1.default(el);
  var tagName = $el[0].tagName.toLowerCase();

  if (tagName === "input") {
    var type = $el.attr("type");
    return !type || lifeInputTags.indexOf(type.toLowerCase()) !== -1;
  }

  return tagName === "textarea";
}

exports.isTextInput = isTextInput;
/**
 * Checks if current HTML document body contains the specified element.
 *
 * @param el HTML element.
 * @returns Element is in DOM.
 */

function inDom(el) {
  while (el) {
    if (el.tagName.toLowerCase() === "body") {
      return true;
    }

    el = el.parentNode;
  }

  return false;
}

exports.inDom = inDom;
/**
 * Checks deeply if one HTML element is a descendant of another element.
 *
 * @param descendantEl Descendant HTML element to check.
 * @param ancestorEl Ancestor HTML element to check.
 * @returns Element is a descendant of another element.
 */

function inEl(descendantEl, ancestorEl) {
  while (descendantEl) {
    if (descendantEl === ancestorEl) {
      return true;
    }

    descendantEl = descendantEl.parentElement;
  }

  return false;
}

exports.inEl = inEl;
/**
 * Checks if element contains the specified CSS class name.
 *
 * @param el HTML element.
 * @param cls Single CSS class name.
 * @return Element contains this CSS class name.
 */

function hasClass(el, cls) {
  return (" " + el.className + " ").indexOf(cls) !== -1;
}

exports.hasClass = hasClass;
/**
 * Adds the specified CSS class name to element unless it already contains it.
 *
 * @param el HTML element.
 * @param cls Single CSS class name.
 */

function addClass(el, cls) {
  if (!el.className) {
    el.className = cls;
  } else if (!hasClass(el, cls)) {
    el.className += " " + cls;
  }
}

exports.addClass = addClass;
/**
 * Parses HTML and builds a new DOM element.
 *
 * @param html HTML code to parse.
 * @returns New HTML element.
 */

function parseHtml(html) {
  if (_fragment) {
    _fragment.textContent = "";
  } else {
    _fragment = document.createDocumentFragment();
  }

  var el = document.createElement("div");

  _fragment.appendChild(el);

  var tagName = rtagName.exec(html)[1];
  var wrap = wrapMap[tagName] || wrapMap['_default'];
  el.innerHTML = wrap[1] + html + wrap[2];

  for (var i = 0; i < wrap[0]; ++i) {
    el = el.firstChild;
  }

  return el.firstChild;
}

exports.parseHtml = parseHtml;
/**
 * Inserts element as a child at specified position.
 *
 * @param parent Element to insert into.
 * @param child Element to insert.
 * @param index Position to insert at.
 */

function insert(parent, child, index) {
  if (index == null || index >= parent.childNodes.length) {
    parent.appendChild(child);
  } else {
    parent.insertBefore(child, parent.childNodes.item(index));
  }
}

exports.insert = insert;
/**
 * Removes element from DOM.
 *
 * @param el Element to remove.
 */

function remove(el) {
  if (el.parentNode) {
    el.parentNode.removeChild(el);
  }
}

exports.remove = remove;
/**
 * Replaces one HTML element with another.
 *
 * @param removeEl Element to replace.
 * @param insertEl Element to replace `removeEl` with.
 * @param attrs If true, retains element `id` and `class`
 */

function replace(removeEl, insertEl, attrs) {
  var parentEl = removeEl.parentNode;

  if (!parentEl) {
    return;
  }

  var id = attrs ? removeEl.getAttribute("id") : null,
      cls = attrs ? removeEl.getAttribute("class") : null;
  parentEl.replaceChild(insertEl, removeEl);

  if (id) {
    insertEl.setAttribute("id", id);
  }

  if (cls) {
    addClass(insertEl, cls);
  }
}

exports.replace = replace;

function _afterAppend(child) {
  child._afterAppend();
}

exports._afterAppend = _afterAppend;

(function (wrapMap) {
  wrapMap['optgroup'] = wrapMap['option'];
  wrapMap['tbody'] = wrapMap['tfoot'] = wrapMap['colgroup'] = wrapMap['caption'] = wrapMap['thead'];
  wrapMap['th'] = wrapMap['td'];
})(wrapMap);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/Event.js":
/*!*****************************************!*\
  !*** C:/jwidget/git/main/dist/Event.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var dummyEvent_1 = __importDefault(__webpack_require__(/*! ./dummyEvent */ "../../main/dist/dummyEvent.js"));

var EventAttachment_1 = __importDefault(__webpack_require__(/*! ./EventAttachment */ "../../main/dist/EventAttachment.js"));
/**
 * Real implementation of `Listenable` interface.
 * Used to notify some objects (clients) about certain events (for example, field value change).
 */


var Event = /*#__PURE__*/function () {
  function Event() {
    _classCallCheck(this, Event);

    this._attachments = null;
  }
  /**
   * Checks if this event is dummy. This knowledge may help you do certain code optimizations.
   */


  _createClass(Event, [{
    key: "purge",

    /**
     * Unbinds all event handlers.
     */
    value: function purge() {
      this._attachments = null;
    }
    /**
     * Starts listening to the event.
     *
     * Whenever the event is triggered with `trigger` method, specified handler function
     * is called in specified scope.
     *
     * You can stop listening the event by destroying the returned EventAttachment instance.
     *
     * @param handler Event handler function.
     * @param scope `handler` call scope.
     */

  }, {
    key: "listen",
    value: function listen(handler, scope) {
      if (this._attachments === null) {
        this._attachments = {};
      }

      var attachment = new EventAttachment_1.default(this, handler, scope);
      this._attachments[attachment.iid] = attachment;
      return attachment;
    }
    /**
     * Triggers event, i.e. calls all bound handlers.
     *
     * @param params Event params.
     */

  }, {
    key: "trigger",
    value: function trigger(params) {
      if (this._attachments === null) {
        return;
      }

      for (var iid in this._attachments) {
        var attachment = this._attachments[iid];
        attachment.handler.call(attachment.scope || attachment, params);
      }
    }
    /**
     * @hidden
     */

  }, {
    key: "_unbind",
    value: function _unbind(attachment) {
      if (this._attachments !== null) {
        delete this._attachments[attachment.iid];
      }
    }
    /**
     * If `dummy` argument is false, returns a new instance of `Event`. Else returns `dummyEvent`.
     * @param dummy Determines if dummy event should be used.
     */

  }, {
    key: "dummy",
    get: function get() {
      return false;
    }
  }], [{
    key: "make",
    value: function make(dummy) {
      return dummy ? dummyEvent_1.default : new Event();
    }
  }]);

  return Event;
}();

exports.default = Event;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9FdmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwQkEsSUFBQSxZQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxjQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLGlCQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxtQkFBQSxDQUFBLENBQUE7QUFHQTs7Ozs7O0lBSXFCLEs7QUFBckIsbUJBQUE7QUFBQTs7QUFDUyxTQUFBLFlBQUEsR0FBK0MsSUFBL0M7QUFtRVI7QUFqRUE7Ozs7Ozs7O0FBT0E7Ozs0QkFHSztBQUNKLFdBQUssWUFBTCxHQUFvQixJQUFwQjtBQUNBO0FBRUQ7Ozs7Ozs7Ozs7Ozs7OzJCQVdPLE8sRUFBNkIsSyxFQUFXO0FBQzlDLFVBQUksS0FBSyxZQUFMLEtBQXNCLElBQTFCLEVBQWdDO0FBQy9CLGFBQUssWUFBTCxHQUFvQixFQUFwQjtBQUNBOztBQUNELFVBQU0sVUFBVSxHQUFHLElBQUksaUJBQUEsQ0FBQSxPQUFKLENBQXVCLElBQXZCLEVBQTZCLE9BQTdCLEVBQXNDLEtBQXRDLENBQW5CO0FBQ0EsV0FBSyxZQUFMLENBQWtCLFVBQVUsQ0FBQyxHQUE3QixJQUFvQyxVQUFwQztBQUNBLGFBQU8sVUFBUDtBQUNBO0FBRUQ7Ozs7Ozs7OzRCQUtRLE0sRUFBVTtBQUNqQixVQUFJLEtBQUssWUFBTCxLQUFzQixJQUExQixFQUFnQztBQUMvQjtBQUNBOztBQUNELFdBQUssSUFBSSxHQUFULElBQWdCLEtBQUssWUFBckIsRUFBbUM7QUFDbEMsWUFBSSxVQUFVLEdBQUcsS0FBSyxZQUFMLENBQWtCLEdBQWxCLENBQWpCO0FBQ0EsUUFBQSxVQUFVLENBQUMsT0FBWCxDQUFtQixJQUFuQixDQUF3QixVQUFVLENBQUMsS0FBWCxJQUFvQixVQUE1QyxFQUF3RCxNQUF4RDtBQUNBO0FBQ0Q7QUFFRDs7Ozs7OzRCQUdRLFUsRUFBOEI7QUFDckMsVUFBSSxLQUFLLFlBQUwsS0FBc0IsSUFBMUIsRUFBZ0M7QUFDL0IsZUFBTyxLQUFLLFlBQUwsQ0FBa0IsVUFBVSxDQUFDLEdBQTdCLENBQVA7QUFDQTtBQUNEO0FBRUQ7Ozs7Ozs7d0JBdkRTO0FBQ1IsYUFBTyxLQUFQO0FBQ0E7Ozt5QkF5RGMsSyxFQUFjO0FBQzVCLGFBQU8sS0FBSyxHQUFHLFlBQUEsQ0FBQSxPQUFILEdBQWdCLElBQUksS0FBSixFQUE1QjtBQUNBOzs7Ozs7QUFuRUYsT0FBQSxDQUFBLE9BQUEsR0FBQSxLQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IERlc3Ryb3lhYmxlIGZyb20gXCIuL0Rlc3Ryb3lhYmxlXCI7XG5pbXBvcnQgRGljdGlvbmFyeSBmcm9tIFwiLi9EaWN0aW9uYXJ5XCI7XG5pbXBvcnQgZHVtbXlFdmVudCBmcm9tIFwiLi9kdW1teUV2ZW50XCI7XG5pbXBvcnQgRXZlbnRBdHRhY2htZW50IGZyb20gXCIuL0V2ZW50QXR0YWNobWVudFwiO1xuaW1wb3J0IElFdmVudCBmcm9tIFwiLi9JRXZlbnRcIjtcblxuLyoqXG4gKiBSZWFsIGltcGxlbWVudGF0aW9uIG9mIGBMaXN0ZW5hYmxlYCBpbnRlcmZhY2UuXG4gKiBVc2VkIHRvIG5vdGlmeSBzb21lIG9iamVjdHMgKGNsaWVudHMpIGFib3V0IGNlcnRhaW4gZXZlbnRzIChmb3IgZXhhbXBsZSwgZmllbGQgdmFsdWUgY2hhbmdlKS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnQ8UD4gaW1wbGVtZW50cyBJRXZlbnQ8UD4ge1xuXHRwcml2YXRlIF9hdHRhY2htZW50czogRGljdGlvbmFyeTxFdmVudEF0dGFjaG1lbnQ8UD4+ID0gbnVsbDtcblxuXHQvKipcblx0ICogQ2hlY2tzIGlmIHRoaXMgZXZlbnQgaXMgZHVtbXkuIFRoaXMga25vd2xlZGdlIG1heSBoZWxwIHlvdSBkbyBjZXJ0YWluIGNvZGUgb3B0aW1pemF0aW9ucy5cblx0ICovXG5cdGdldCBkdW1teSgpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0ICogVW5iaW5kcyBhbGwgZXZlbnQgaGFuZGxlcnMuXG5cdCAqL1xuXHRwdXJnZSgpIHtcblx0XHR0aGlzLl9hdHRhY2htZW50cyA9IG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogU3RhcnRzIGxpc3RlbmluZyB0byB0aGUgZXZlbnQuXG5cdCAqXG5cdCAqIFdoZW5ldmVyIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQgd2l0aCBgdHJpZ2dlcmAgbWV0aG9kLCBzcGVjaWZpZWQgaGFuZGxlciBmdW5jdGlvblxuXHQgKiBpcyBjYWxsZWQgaW4gc3BlY2lmaWVkIHNjb3BlLlxuXHQgKlxuXHQgKiBZb3UgY2FuIHN0b3AgbGlzdGVuaW5nIHRoZSBldmVudCBieSBkZXN0cm95aW5nIHRoZSByZXR1cm5lZCBFdmVudEF0dGFjaG1lbnQgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSBoYW5kbGVyIEV2ZW50IGhhbmRsZXIgZnVuY3Rpb24uXG5cdCAqIEBwYXJhbSBzY29wZSBgaGFuZGxlcmAgY2FsbCBzY29wZS5cblx0ICovXG5cdGxpc3RlbihoYW5kbGVyOiAocGFyYW1zOiBQKSA9PiBhbnksIHNjb3BlPzogYW55KTogRGVzdHJveWFibGUge1xuXHRcdGlmICh0aGlzLl9hdHRhY2htZW50cyA9PT0gbnVsbCkge1xuXHRcdFx0dGhpcy5fYXR0YWNobWVudHMgPSB7fTtcblx0XHR9XG5cdFx0Y29uc3QgYXR0YWNobWVudCA9IG5ldyBFdmVudEF0dGFjaG1lbnQ8UD4odGhpcywgaGFuZGxlciwgc2NvcGUpO1xuXHRcdHRoaXMuX2F0dGFjaG1lbnRzW2F0dGFjaG1lbnQuaWlkXSA9IGF0dGFjaG1lbnQ7XG5cdFx0cmV0dXJuIGF0dGFjaG1lbnQ7XG5cdH1cblxuXHQvKipcblx0ICogVHJpZ2dlcnMgZXZlbnQsIGkuZS4gY2FsbHMgYWxsIGJvdW5kIGhhbmRsZXJzLlxuXHQgKlxuXHQgKiBAcGFyYW0gcGFyYW1zIEV2ZW50IHBhcmFtcy5cblx0ICovXG5cdHRyaWdnZXIocGFyYW1zPzogUCkge1xuXHRcdGlmICh0aGlzLl9hdHRhY2htZW50cyA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRmb3IgKHZhciBpaWQgaW4gdGhpcy5fYXR0YWNobWVudHMpIHtcblx0XHRcdHZhciBhdHRhY2htZW50ID0gdGhpcy5fYXR0YWNobWVudHNbaWlkXTtcblx0XHRcdGF0dGFjaG1lbnQuaGFuZGxlci5jYWxsKGF0dGFjaG1lbnQuc2NvcGUgfHwgYXR0YWNobWVudCwgcGFyYW1zKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQGhpZGRlblxuXHQgKi9cblx0X3VuYmluZChhdHRhY2htZW50OiBFdmVudEF0dGFjaG1lbnQ8UD4pIHtcblx0XHRpZiAodGhpcy5fYXR0YWNobWVudHMgIT09IG51bGwpIHtcblx0XHRcdGRlbGV0ZSB0aGlzLl9hdHRhY2htZW50c1thdHRhY2htZW50LmlpZF07XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIElmIGBkdW1teWAgYXJndW1lbnQgaXMgZmFsc2UsIHJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgYEV2ZW50YC4gRWxzZSByZXR1cm5zIGBkdW1teUV2ZW50YC5cblx0ICogQHBhcmFtIGR1bW15IERldGVybWluZXMgaWYgZHVtbXkgZXZlbnQgc2hvdWxkIGJlIHVzZWQuXG5cdCAqL1xuXHRzdGF0aWMgbWFrZTxQPihkdW1teTogYm9vbGVhbik6IElFdmVudDxQPiB7XG5cdFx0cmV0dXJuIGR1bW15ID8gZHVtbXlFdmVudCA6IG5ldyBFdmVudDxQPigpO1xuXHR9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/EventAttachment.js":
/*!***************************************************!*\
  !*** C:/jwidget/git/main/dist/EventAttachment.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");
/**
 * @hidden
 */


var EventAttachment = /*#__PURE__*/function () {
  function EventAttachment(_event, handler, scope) {
    _classCallCheck(this, EventAttachment);

    this._event = _event;
    this.handler = handler;
    this.scope = scope;
    this.iid = index_1.newIid();
  }

  _createClass(EventAttachment, [{
    key: "destroy",
    value: function destroy() {
      this._event._unbind(this);
    }
  }]);

  return EventAttachment;
}();

exports.default = EventAttachment;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9FdmVudEF0dGFjaG1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkJBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxTQUFBLENBQUE7QUFFQTs7Ozs7SUFHcUIsZTtBQUdwQiwyQkFBb0IsTUFBcEIsRUFBK0MsT0FBL0MsRUFBcUYsS0FBckYsRUFBK0Y7QUFBQTs7QUFBM0UsU0FBQSxNQUFBLEdBQUEsTUFBQTtBQUEyQixTQUFBLE9BQUEsR0FBQSxPQUFBO0FBQXNDLFNBQUEsS0FBQSxHQUFBLEtBQUE7QUFGNUUsU0FBQSxHQUFBLEdBQU0sT0FBQSxDQUFBLE1BQUEsRUFBTjtBQUdSOzs7OzhCQUVNO0FBQ04sV0FBSyxNQUFMLENBQVksT0FBWixDQUFvQixJQUFwQjtBQUNBOzs7Ozs7QUFSRixPQUFBLENBQUEsT0FBQSxHQUFBLGVBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgRGVzdHJveWFibGUgZnJvbSAnLi9EZXN0cm95YWJsZSc7XG5pbXBvcnQgRXZlbnQgZnJvbSAnLi9FdmVudCc7XG5pbXBvcnQgSWRlbnRpZmlhYmxlIGZyb20gJy4vSWRlbnRpZmlhYmxlJztcbmltcG9ydCB7bmV3SWlkfSBmcm9tICcuL2luZGV4JztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50QXR0YWNobWVudDxQPiBpbXBsZW1lbnRzIERlc3Ryb3lhYmxlLCBJZGVudGlmaWFibGUge1xuXHRyZWFkb25seSBpaWQgPSBuZXdJaWQoKTtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIF9ldmVudDogRXZlbnQ8UD4sIHJlYWRvbmx5IGhhbmRsZXI6IChwYXJhbXM6IFApID0+IGFueSwgcmVhZG9ubHkgc2NvcGU6IGFueSkge1xuXHR9XG5cblx0ZGVzdHJveSgpIHtcblx0XHR0aGlzLl9ldmVudC5fdW5iaW5kKHRoaXMpO1xuXHR9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/HtmlTemplate.js":
/*!************************************************!*\
  !*** C:/jwidget/git/main/dist/HtmlTemplate.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var AbstractTemplate_1 = __importDefault(__webpack_require__(/*! ./AbstractTemplate */ "../../main/dist/AbstractTemplate.js"));

var DomUtils = __importStar(__webpack_require__(/*! ./DomUtils */ "../../main/dist/DomUtils.js"));
/**
 * HTML template. This class compiles the input template only once, and uses element cloning further on to
 * optimize rendering performance.
 */


var HtmlTemplate = /*#__PURE__*/function (_AbstractTemplate_1$d) {
  _inherits(HtmlTemplate, _AbstractTemplate_1$d);

  var _super = _createSuper(HtmlTemplate);

  /**
   * @param html Input HTML.
   */
  function HtmlTemplate(html) {
    var _this;

    _classCallCheck(this, HtmlTemplate);

    _this = _super.call(this);
    _this.html = html;
    _this.mirror = null;
    return _this;
  }
  /**
   * @inheritdoc
   */


  _createClass(HtmlTemplate, [{
    key: "createElement",
    value: function createElement() {
      this._compile();

      var root = this.mirror.cloneNode(true);
      var groups = {};

      for (var index = 0, count = this.ids.length; index < count; ++index) {
        var id = this.ids[index];
        var paths = this.groups[id];
        var groupSize = paths.length;
        var group = new Array(groupSize);

        for (var i = 0; i < groupSize; ++i) {
          var path = paths[i];
          var el = root;

          for (var j = 0, n = path.length; j < n; ++j) {
            el = el.childNodes[path[j]];
          }

          group[i] = el;
        }

        groups[id] = group;
      }

      return {
        root: root,
        groups: groups
      };
    }
  }, {
    key: "_addElement",
    value: function _addElement(id, el, path) {
      el = el;
      this.groups[id] = this.groups[id] || [];
      this.groups[id].push(path.concat());
    }
  }, {
    key: "_compile",
    value: function _compile() {
      if (this.mirror !== null) {
        return;
      }

      this.mirror = DomUtils.parseHtml(this.html);
      this.groups = {};

      this._compileAttributes(this.mirror);
    }
  }]);

  return HtmlTemplate;
}(AbstractTemplate_1.default);

exports.default = HtmlTemplate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9IdG1sVGVtcGxhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkEsSUFBQSxrQkFBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsb0JBQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsUUFBQSxHQUFBLFlBQUEsQ0FBQSxPQUFBLENBQUEsWUFBQSxDQUFBLENBQUE7QUFHQTs7Ozs7O0lBSXFCLFk7Ozs7O0FBSXBCOzs7QUFHQSx3QkFBcUIsSUFBckIsRUFBaUM7QUFBQTs7QUFBQTs7QUFDaEM7QUFEb0IsVUFBQSxJQUFBLEdBQUEsSUFBQTtBQU5iLFVBQUEsTUFBQSxHQUFzQixJQUF0QjtBQU15QjtBQUVoQztBQUVEOzs7Ozs7O29DQUdhO0FBQ1osV0FBSyxRQUFMOztBQUNBLFVBQUksSUFBSSxHQUFpQixLQUFLLE1BQUwsQ0FBWSxTQUFaLENBQXNCLElBQXRCLENBQXpCO0FBQ0EsVUFBSSxNQUFNLEdBQThCLEVBQXhDOztBQUNBLFdBQUssSUFBSSxLQUFLLEdBQUcsQ0FBWixFQUFlLEtBQUssR0FBRyxLQUFLLEdBQUwsQ0FBUyxNQUFyQyxFQUE2QyxLQUFLLEdBQUcsS0FBckQsRUFBNEQsRUFBRSxLQUE5RCxFQUFxRTtBQUNwRSxZQUFJLEVBQUUsR0FBRyxLQUFLLEdBQUwsQ0FBUyxLQUFULENBQVQ7QUFDQSxZQUFJLEtBQUssR0FBRyxLQUFLLE1BQUwsQ0FBWSxFQUFaLENBQVo7QUFDQSxZQUFJLFNBQVMsR0FBRyxLQUFLLENBQUMsTUFBdEI7QUFDQSxZQUFJLEtBQUssR0FBRyxJQUFJLEtBQUosQ0FBVSxTQUFWLENBQVo7O0FBQ0EsYUFBSyxJQUFJLENBQUMsR0FBRyxDQUFiLEVBQWdCLENBQUMsR0FBRyxTQUFwQixFQUErQixFQUFFLENBQWpDLEVBQW9DO0FBQ25DLGNBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFELENBQWhCO0FBQ0EsY0FBSSxFQUFFLEdBQUcsSUFBVDs7QUFDQSxlQUFLLElBQUksQ0FBQyxHQUFHLENBQVIsRUFBVyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQXpCLEVBQWlDLENBQUMsR0FBRyxDQUFyQyxFQUF3QyxFQUFFLENBQTFDLEVBQTZDO0FBQzVDLFlBQUEsRUFBRSxHQUFpQixFQUFFLENBQUMsVUFBSCxDQUFjLElBQUksQ0FBQyxDQUFELENBQWxCLENBQW5CO0FBQ0E7O0FBQ0QsVUFBQSxLQUFLLENBQUMsQ0FBRCxDQUFMLEdBQVcsRUFBWDtBQUNBOztBQUNELFFBQUEsTUFBTSxDQUFDLEVBQUQsQ0FBTixHQUFhLEtBQWI7QUFDQTs7QUFDRCxhQUFPO0FBQUUsUUFBQSxJQUFJLEVBQUUsSUFBUjtBQUFjLFFBQUEsTUFBTSxFQUFFO0FBQXRCLE9BQVA7QUFDQTs7O2dDQUVxQixFLEVBQVksRSxFQUFpQixJLEVBQWM7QUFDaEUsTUFBQSxFQUFFLEdBQUcsRUFBTDtBQUNBLFdBQUssTUFBTCxDQUFZLEVBQVosSUFBa0IsS0FBSyxNQUFMLENBQVksRUFBWixLQUFtQixFQUFyQztBQUNBLFdBQUssTUFBTCxDQUFZLEVBQVosRUFBZ0IsSUFBaEIsQ0FBcUIsSUFBSSxDQUFDLE1BQUwsRUFBckI7QUFDQTs7OytCQUVlO0FBQ2YsVUFBSSxLQUFLLE1BQUwsS0FBZ0IsSUFBcEIsRUFBMEI7QUFDekI7QUFDQTs7QUFDRCxXQUFLLE1BQUwsR0FBYyxRQUFRLENBQUMsU0FBVCxDQUFtQixLQUFLLElBQXhCLENBQWQ7QUFDQSxXQUFLLE1BQUwsR0FBYyxFQUFkOztBQUNBLFdBQUssa0JBQUwsQ0FBd0IsS0FBSyxNQUE3QjtBQUNBOzs7O0VBakR3QyxrQkFBQSxDQUFBLE87O0FBQTFDLE9BQUEsQ0FBQSxPQUFBLEdBQUEsWUFBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjAgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBBYnN0cmFjdFRlbXBsYXRlIGZyb20gJy4vQWJzdHJhY3RUZW1wbGF0ZSc7XG5pbXBvcnQgRGljdGlvbmFyeSBmcm9tICcuL0RpY3Rpb25hcnknO1xuaW1wb3J0ICogYXMgRG9tVXRpbHMgZnJvbSAnLi9Eb21VdGlscyc7XG5pbXBvcnQgVGVtcGxhdGVPdXRwdXQgZnJvbSAnLi9UZW1wbGF0ZU91dHB1dCc7XG5cbi8qKlxuICogSFRNTCB0ZW1wbGF0ZS4gVGhpcyBjbGFzcyBjb21waWxlcyB0aGUgaW5wdXQgdGVtcGxhdGUgb25seSBvbmNlLCBhbmQgdXNlcyBlbGVtZW50IGNsb25pbmcgZnVydGhlciBvbiB0b1xuICogb3B0aW1pemUgcmVuZGVyaW5nIHBlcmZvcm1hbmNlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIdG1sVGVtcGxhdGUgZXh0ZW5kcyBBYnN0cmFjdFRlbXBsYXRlIHtcblx0cHJpdmF0ZSBtaXJyb3I6IEhUTUxFbGVtZW50ID0gbnVsbDtcblx0cHJpdmF0ZSBncm91cHM6IERpY3Rpb25hcnk8bnVtYmVyW11bXT47XG5cblx0LyoqXG5cdCAqIEBwYXJhbSBodG1sIElucHV0IEhUTUwuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihyZWFkb25seSBodG1sOiBzdHJpbmcpIHtcblx0XHRzdXBlcigpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0ZG9jXG5cdCAqL1xuXHRjcmVhdGVFbGVtZW50KCk6IFRlbXBsYXRlT3V0cHV0IHtcblx0XHR0aGlzLl9jb21waWxlKCk7XG5cdFx0dmFyIHJvb3QgPSA8SFRNTEVsZW1lbnQ+KHRoaXMubWlycm9yLmNsb25lTm9kZSh0cnVlKSk7XG5cdFx0dmFyIGdyb3VwczogRGljdGlvbmFyeTxIVE1MRWxlbWVudFtdPiA9IHt9O1xuXHRcdGZvciAodmFyIGluZGV4ID0gMCwgY291bnQgPSB0aGlzLmlkcy5sZW5ndGg7IGluZGV4IDwgY291bnQ7ICsraW5kZXgpIHtcblx0XHRcdHZhciBpZCA9IHRoaXMuaWRzW2luZGV4XTtcblx0XHRcdHZhciBwYXRocyA9IHRoaXMuZ3JvdXBzW2lkXTtcblx0XHRcdHZhciBncm91cFNpemUgPSBwYXRocy5sZW5ndGg7XG5cdFx0XHR2YXIgZ3JvdXAgPSBuZXcgQXJyYXkoZ3JvdXBTaXplKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBTaXplOyArK2kpIHtcblx0XHRcdFx0dmFyIHBhdGggPSBwYXRoc1tpXTtcblx0XHRcdFx0dmFyIGVsID0gcm9vdDtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDAsIG4gPSBwYXRoLmxlbmd0aDsgaiA8IG47ICsraikge1xuXHRcdFx0XHRcdGVsID0gPEhUTUxFbGVtZW50PihlbC5jaGlsZE5vZGVzW3BhdGhbal1dKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRncm91cFtpXSA9IGVsO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzW2lkXSA9IGdyb3VwO1xuXHRcdH1cblx0XHRyZXR1cm4geyByb290OiByb290LCBncm91cHM6IGdyb3VwcyB9O1xuXHR9XG5cblx0cHJvdGVjdGVkIF9hZGRFbGVtZW50KGlkOiBzdHJpbmcsIGVsOiBIVE1MRWxlbWVudCwgcGF0aDogbnVtYmVyW10pIHtcblx0XHRlbCA9IGVsO1xuXHRcdHRoaXMuZ3JvdXBzW2lkXSA9IHRoaXMuZ3JvdXBzW2lkXSB8fCBbXTtcblx0XHR0aGlzLmdyb3Vwc1tpZF0ucHVzaChwYXRoLmNvbmNhdCgpKTtcblx0fVxuXG5cdHByaXZhdGUgX2NvbXBpbGUoKSB7XG5cdFx0aWYgKHRoaXMubWlycm9yICE9PSBudWxsKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMubWlycm9yID0gRG9tVXRpbHMucGFyc2VIdG1sKHRoaXMuaHRtbCk7XG5cdFx0dGhpcy5ncm91cHMgPSB7fTtcblx0XHR0aGlzLl9jb21waWxlQXR0cmlidXRlcyh0aGlzLm1pcnJvcik7XG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "../../main/dist/IndexCount.js":
/*!**********************************************!*\
  !*** C:/jwidget/git/main/dist/IndexCount.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Index and count pair. Used in IList.splice method arguments to specify item segments to remove.
 */

var IndexCount = /*#__PURE__*/function () {
  /**
   * @param index Index.
   * @param count Count.
   */
  function IndexCount(index, count) {
    _classCallCheck(this, IndexCount);

    this.index = index;
    this.count = count;
  }
  /**
   * Clones pair.
   */


  _createClass(IndexCount, [{
    key: "clone",
    value: function clone() {
      return new IndexCount(this.index, this.count);
    }
  }]);

  return IndexCount;
}();

exports.default = IndexCount;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9JbmRleENvdW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMEJBOzs7O0lBR3FCLFU7QUFDcEI7Ozs7QUFJQSxzQkFBcUIsS0FBckIsRUFBMkMsS0FBM0MsRUFBd0Q7QUFBQTs7QUFBbkMsU0FBQSxLQUFBLEdBQUEsS0FBQTtBQUFzQixTQUFBLEtBQUEsR0FBQSxLQUFBO0FBQzFDO0FBRUQ7Ozs7Ozs7NEJBR0s7QUFDSixhQUFPLElBQUksVUFBSixDQUFlLEtBQUssS0FBcEIsRUFBMkIsS0FBSyxLQUFoQyxDQUFQO0FBQ0E7Ozs7OztBQWJGLE9BQUEsQ0FBQSxPQUFBLEdBQUEsVUFBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjAgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBJTGlzdCBmcm9tICcuL0lMaXN0JztcblxuLyoqXG4gKiBJbmRleCBhbmQgY291bnQgcGFpci4gVXNlZCBpbiBJTGlzdC5zcGxpY2UgbWV0aG9kIGFyZ3VtZW50cyB0byBzcGVjaWZ5IGl0ZW0gc2VnbWVudHMgdG8gcmVtb3ZlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbmRleENvdW50IGltcGxlbWVudHMgSUxpc3QuSW5kZXhDb3VudCB7XG5cdC8qKlxuXHQgKiBAcGFyYW0gaW5kZXggSW5kZXguXG5cdCAqIEBwYXJhbSBjb3VudCBDb3VudC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKHJlYWRvbmx5IGluZGV4OiBudW1iZXIsIHB1YmxpYyBjb3VudDogbnVtYmVyKSB7XG5cdH1cblxuXHQvKipcblx0ICogQ2xvbmVzIHBhaXIuXG5cdCAqL1xuXHRjbG9uZSgpOiBJTGlzdC5JbmRleENvdW50IHtcblx0XHRyZXR1cm4gbmV3IEluZGV4Q291bnQodGhpcy5pbmRleCwgdGhpcy5jb3VudCk7XG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "../../main/dist/IndexItems.js":
/*!**********************************************!*\
  !*** C:/jwidget/git/main/dist/IndexItems.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var IndexCount_1 = __importDefault(__webpack_require__(/*! ./IndexCount */ "../../main/dist/IndexCount.js"));
/**
 * Index and items pair. Used in IList.splice method arguments to specify item segments to insert, and in
 * ListSpliceResult class to specify removed and added item segments.
 */


var IndexItems = /*#__PURE__*/function () {
  /**
   * @param index Index.
   * @param items Items.
   */
  function IndexItems(index, items) {
    _classCallCheck(this, IndexItems);

    this.index = index;
    this.items = items;
  }
  /**
   * Converts to index and count pair.
   */


  _createClass(IndexItems, [{
    key: "toIndexCount",
    value: function toIndexCount() {
      return new IndexCount_1.default(this.index, this.items.length);
    }
    /**
     * Clones pair.
     */

  }, {
    key: "clone",
    value: function clone() {
      return new IndexItems(this.index, this.items.concat());
    }
  }]);

  return IndexItems;
}();

exports.default = IndexItems;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9JbmRleEl0ZW1zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCQSxJQUFBLFlBQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQSxDQUFBO0FBRUE7Ozs7OztJQUlxQixVO0FBQ3BCOzs7O0FBSUEsc0JBQXFCLEtBQXJCLEVBQTZDLEtBQTdDLEVBQXVEO0FBQUE7O0FBQWxDLFNBQUEsS0FBQSxHQUFBLEtBQUE7QUFBd0IsU0FBQSxLQUFBLEdBQUEsS0FBQTtBQUM1QztBQUVEOzs7Ozs7O21DQUdZO0FBQ1gsYUFBTyxJQUFJLFlBQUEsQ0FBQSxPQUFKLENBQWUsS0FBSyxLQUFwQixFQUEyQixLQUFLLEtBQUwsQ0FBVyxNQUF0QyxDQUFQO0FBQ0E7QUFFRDs7Ozs7OzRCQUdLO0FBQ0osYUFBTyxJQUFJLFVBQUosQ0FBa0IsS0FBSyxLQUF2QixFQUE4QixLQUFLLEtBQUwsQ0FBVyxNQUFYLEVBQTlCLENBQVA7QUFDQTs7Ozs7O0FBcEJGLE9BQUEsQ0FBQSxPQUFBLEdBQUEsVUFBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjAgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBJTGlzdCBmcm9tICcuL0lMaXN0JztcbmltcG9ydCBJbmRleENvdW50IGZyb20gJy4vSW5kZXhDb3VudCc7XG5cbi8qKlxuICogSW5kZXggYW5kIGl0ZW1zIHBhaXIuIFVzZWQgaW4gSUxpc3Quc3BsaWNlIG1ldGhvZCBhcmd1bWVudHMgdG8gc3BlY2lmeSBpdGVtIHNlZ21lbnRzIHRvIGluc2VydCwgYW5kIGluXG4gKiBMaXN0U3BsaWNlUmVzdWx0IGNsYXNzIHRvIHNwZWNpZnkgcmVtb3ZlZCBhbmQgYWRkZWQgaXRlbSBzZWdtZW50cy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5kZXhJdGVtczxUPiBpbXBsZW1lbnRzIElMaXN0LkluZGV4SXRlbXM8VD4ge1xuXHQvKipcblx0ICogQHBhcmFtIGluZGV4IEluZGV4LlxuXHQgKiBAcGFyYW0gaXRlbXMgSXRlbXMuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihyZWFkb25seSBpbmRleDogbnVtYmVyLCByZWFkb25seSBpdGVtczogVFtdKSB7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgdG8gaW5kZXggYW5kIGNvdW50IHBhaXIuXG5cdCAqL1xuXHR0b0luZGV4Q291bnQoKTogSUxpc3QuSW5kZXhDb3VudCB7XG5cdFx0cmV0dXJuIG5ldyBJbmRleENvdW50KHRoaXMuaW5kZXgsIHRoaXMuaXRlbXMubGVuZ3RoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDbG9uZXMgcGFpci5cblx0ICovXG5cdGNsb25lKCk6IElMaXN0LkluZGV4SXRlbXM8VD4ge1xuXHRcdHJldHVybiBuZXcgSW5kZXhJdGVtczxUPih0aGlzLmluZGV4LCB0aGlzLml0ZW1zLmNvbmNhdCgpKTtcblx0fVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==

/***/ }),

/***/ "../../main/dist/List.js":
/*!****************************************!*\
  !*** C:/jwidget/git/main/dist/List.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var ArrayUtils = __importStar(__webpack_require__(/*! ./ArrayUtils */ "../../main/dist/ArrayUtils.js"));

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));

var Event_1 = __importDefault(__webpack_require__(/*! ./Event */ "../../main/dist/Event.js"));

var index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");

var IndexCount_1 = __importDefault(__webpack_require__(/*! ./IndexCount */ "../../main/dist/IndexCount.js"));

var IndexItems_1 = __importDefault(__webpack_require__(/*! ./IndexItems */ "../../main/dist/IndexItems.js"));

var internal_1 = __webpack_require__(/*! ./internal */ "../../main/dist/internal.js");

var ListSpliceResult_1 = __importDefault(__webpack_require__(/*! ./ListSpliceResult */ "../../main/dist/ListSpliceResult.js"));

var Map_1 = __importDefault(__webpack_require__(/*! ./Map */ "../../main/dist/Map.js"));

var Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));

var Set_1 = __importDefault(__webpack_require__(/*! ./Set */ "../../main/dist/Set.js"));
/**
 * Ordered collection of items. Each item of the list has an index. Index of first item is 0,
 * index of each next one is higher by 1.
 * @param T Item type.
 */


var List = /*#__PURE__*/function (_Class_1$default) {
  _inherits(List, _Class_1$default);

  var _super = _createSuper(List);

  function List(a, b, c) {
    var _this;

    _classCallCheck(this, List);

    _this = _super.call(this);
    _this._ownsItems = false;

    if (typeof a === "boolean") {
      c = a ? index_1.SILENT : 0;
      a = null;
    } else if (typeof a === "function" || a == null && typeof b === "boolean") {
      c = b ? index_1.SILENT : 0;
      b = a;
      a = null;
    } else if (typeof b === "number") {
      c = b;
      b = null;
    }

    var items = a;
    var silent = Boolean(c & index_1.SILENT);
    var adapter = items != null && Boolean(c & index_1.ADAPTER);
    _this.getKey = b || internal_1.vid;
    _this._items = adapter ? items : items ? items.concat() : [];
    _this._length = _this.own(new Property_1.default(_this._items.length, silent));
    _this._spliceEvent = Event_1.default.make(silent);
    _this._replaceEvent = Event_1.default.make(silent);
    _this._moveEvent = Event_1.default.make(silent);
    _this._reorderEvent = Event_1.default.make(silent);
    _this._clearEvent = Event_1.default.make(silent);
    _this._changeEvent = Event_1.default.make(silent);
    return _this;
  }

  _createClass(List, [{
    key: "destroyObject",
    value: function destroyObject() {
      this.clear();

      _get(_getPrototypeOf(List.prototype), "destroyObject", this).call(this);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "ownItems",

    /**
     * @inheritDoc
     */
    value: function ownItems() {
      this._ownsItems = true;
      return this;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "clone",
    value: function clone() {
      return new List(this.items, this.getKey, this.silent ? index_1.SILENT : 0);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "get",
    value: function get(index) {
      return this._items[index];
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "contains",
    value: function contains(item) {
      return ArrayUtils.contains(this._items, item);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "every",
    value: function every(callback, scope) {
      return this._items.every(callback, scope || this);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "some",
    value: function some(callback, scope) {
      return this._items.some(callback, scope || this);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "forEach",
    value: function forEach(callback, scope) {
      this._items.forEach(callback, scope || this);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "findIndex",
    value: function findIndex(callback, scope) {
      return ArrayUtils.findIndex(this._items, callback, scope);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "find",
    value: function find(callback, scope) {
      return ArrayUtils.find(this._items, callback, scope);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "toSorted",
    value: function toSorted(callback, scope, order) {
      return new List(ArrayUtils.toSorted(this._items, callback, scope || this, order), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "toSortedComparing",
    value: function toSortedComparing(compare, scope, order) {
      return new List(ArrayUtils.toSortedComparing(this._items, compare, scope || this, order), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "getSortingIndices",
    value: function getSortingIndices(callback, scope, order) {
      return new List(ArrayUtils.getSortingIndices(this._items, callback, scope || this, order), String, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "getSortingIndicesComparing",
    value: function getSortingIndicesComparing(compare, scope, order) {
      return new List(ArrayUtils.getSortingIndicesComparing(this._items, compare, scope || this, order), String, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "index",
    value: function index(callback, scope) {
      return new Map_1.default(ArrayUtils.index(this._items, callback, scope), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "filter",
    value: function filter(callback, scope) {
      return new List(this._items.filter(callback, scope || this), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "count",
    value: function count(callback, scope) {
      return ArrayUtils.count(this._items, callback, scope || this);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "map",
    value: function map(callback, scope, getKey) {
      return new List(this._items.map(callback, scope || this), getKey, index_1.SILENT | index_1.ADAPTER);
    }
  }, {
    key: "reduce",
    value: function reduce(reducer, initial) {
      return typeof reducer === "function" ? this.items.reduce(reducer, initial) : ArrayUtils.reduce(this.items, reducer);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "max",
    value: function max(callback, scope, order) {
      return ArrayUtils.max(this._items, callback, scope, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "maxIndex",
    value: function maxIndex(callback, scope, order) {
      return ArrayUtils.maxIndex(this._items, callback, scope, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "maxComparing",
    value: function maxComparing(compare, scope, order) {
      return ArrayUtils.maxComparing(this._items, compare, scope, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "maxIndexComparing",
    value: function maxIndexComparing(compare, scope, order) {
      return ArrayUtils.maxIndexComparing(this._items, compare, scope, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "min",
    value: function min(callback, scope, order) {
      return ArrayUtils.min(this._items, callback, scope, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "minIndex",
    value: function minIndex(callback, scope, order) {
      return ArrayUtils.minIndex(this._items, callback, scope, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "minComparing",
    value: function minComparing(compare, scope, order) {
      return ArrayUtils.minComparing(this._items, compare, scope, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "minIndexComparing",
    value: function minIndexComparing(compare, scope, order) {
      return ArrayUtils.minIndexComparing(this._items, compare, scope, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "toArray",
    value: function toArray() {
      return this._items.concat();
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "toList",
    value: function toList() {
      return new List(this.toArray(), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "toSet",
    value: function toSet() {
      return new Set_1.default(this.toArray(), this.getKey, true);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "asArray",
    value: function asArray() {
      return this._items;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "asList",
    value: function asList() {
      return this;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "asSet",
    value: function asSet() {
      return this.toSet();
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "add",
    value: function add(item, index) {
      this.addAll([item], index);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "addAll",
    value: function addAll(items, index) {
      if (index === undefined) {
        index = this._items.length;
      }

      this.trySplice([], [new IndexItems_1.default(index, items)]);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "trySet",
    value: function trySet(index, item) {
      var oldProxy = ArrayUtils.trySet(this._items, index, item);

      if (oldProxy === undefined) {
        return undefined;
      }

      this._replaceEvent.trigger({
        sender: this,
        index: index,
        oldItem: oldProxy.value,
        newItem: item
      });

      this._changeEvent.trigger({
        sender: this
      });

      if (this._ownsItems) {
        oldProxy.value.destroy();
      }

      return oldProxy;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "set",
    value: function set(index, item) {
      var result = this.trySet(index, item);
      return result !== undefined ? result.value : this.get(index);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "remove",
    value: function remove(index) {
      var result = this.tryRemoveAll(index, 1);

      if (result !== undefined) {
        return result[0];
      }

      return undefined;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "removeItem",
    value: function removeItem(item) {
      var key = this.indexOf(item);

      if (key !== -1) {
        this.remove(key);
      }

      return key;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "removeAll",
    value: function removeAll(index, count) {
      var result = this.tryRemoveAll(index, count);
      return result || [];
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "tryRemoveAll",
    value: function tryRemoveAll(index, count) {
      var result = this.trySplice([new IndexCount_1.default(index, count)], []);

      if (result !== undefined) {
        return result.removedItemsList[0].items;
      }

      return undefined;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "removeItems",
    value: function removeItems(items) {
      var itemSet = internal_1.VidSet.fromArray(items, this.getKey);

      var newItems = this._items.filter(function (item) {
        return !itemSet.contains(item);
      });

      this.performFilter(newItems);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "move",
    value: function move(fromIndex, toIndex) {
      this.tryMove(fromIndex, toIndex);
      return this.get(toIndex);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "tryMove",
    value: function tryMove(fromIndex, toIndex) {
      var item = ArrayUtils.tryMove(this._items, fromIndex, toIndex);

      if (item === undefined) {
        return undefined;
      }

      this._moveEvent.trigger({
        sender: this,
        fromIndex: fromIndex,
        toIndex: toIndex,
        item: item
      });

      this._changeEvent.trigger({
        sender: this
      });

      return item;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "clear",
    value: function clear() {
      var oldItems = ArrayUtils.tryClear(this._items);

      if (oldItems === undefined) {
        return undefined;
      }

      this._length.set(0);

      this._clearEvent.trigger({
        sender: this,
        items: oldItems
      });

      this._changeEvent.trigger({
        sender: this
      });

      if (this._ownsItems) {
        ArrayUtils.backEvery(oldItems, index_1.destroy);
      }

      return oldItems;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "splice",
    value: function splice(removeParamsList, addParamsList) {
      var result = this.trySplice(removeParamsList, addParamsList);
      return result !== undefined ? result : new ListSpliceResult_1.default(this._items.concat(), [], []);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "trySplice",
    value: function trySplice(removeParamsList, addParamsList) {
      var result = ArrayUtils.trySplice(this._items, removeParamsList, addParamsList);

      if (result === undefined) {
        return undefined;
      }

      this._length.set(this._items.length);

      this._spliceEvent.trigger({
        sender: this,
        spliceResult: result
      });

      this._changeEvent.trigger({
        sender: this
      });

      if (this._ownsItems) {
        ArrayUtils.backEvery(result.removedItems, index_1.destroy);
      }

      return result;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "reorder",
    value: function reorder(indexArray) {
      this.tryReorder(indexArray);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "tryReorder",
    value: function tryReorder(indexArray) {
      var items = ArrayUtils.tryReorder(this._items, indexArray);

      if (items === undefined) {
        return undefined;
      }

      this._reorderEvent.trigger({
        sender: this,
        indexArray: indexArray,
        items: items
      });

      this._changeEvent.trigger({
        sender: this
      });

      return items;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "detectSplice",
    value: function detectSplice(newItems) {
      return ArrayUtils.detectSplice(this._items, newItems, this.getKey);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "detectFilter",
    value: function detectFilter(newItems) {
      return ArrayUtils.detectFilter(this._items, newItems);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "detectReorder",
    value: function detectReorder(newItems) {
      return ArrayUtils.detectReorder(this._items, newItems, this.getKey);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "detectSort",
    value: function detectSort(callback, scope, order) {
      return ArrayUtils.detectSort(this._items, callback, scope || this, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "detectSortComparing",
    value: function detectSortComparing(compare, scope, order) {
      return ArrayUtils.detectSortComparing(this._items, compare, scope || this, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "performSplice",
    value: function performSplice(newItems) {
      var params = this.detectSplice(newItems);

      if (params !== undefined) {
        this.trySplice(params.removeParamsList, params.addParamsList);
      }
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "performFilter",
    value: function performFilter(newItems) {
      var params = this.detectFilter(newItems);

      if (params !== undefined) {
        this.trySplice(params, []);
      }
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "performReorder",
    value: function performReorder(newItems) {
      var indexArray = this.detectReorder(newItems);

      if (indexArray !== undefined) {
        this.tryReorder(indexArray);
      }
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "sort",
    value: function sort(callback, scope, order) {
      var indexArray = this.detectSort(callback, scope, order);

      if (indexArray !== undefined) {
        this.tryReorder(indexArray);
      }
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "sortComparing",
    value: function sortComparing(compare, scope, order) {
      var indexArray = this.detectSortComparing(compare, scope, order);

      if (indexArray !== undefined) {
        this.tryReorder(indexArray);
      }
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "reverse",
    value: function reverse() {
      if (this.silent) {
        this._items.reverse();

        return;
      }

      var length = this.length.get();
      var indices = new Array(length);

      for (var i = 0; i < length; ++i) {
        indices[i] = length - i - 1;
      }

      this.reorder(indices);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "toReversed",
    value: function toReversed() {
      return new List(ArrayUtils.toReversed(this._items), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "equal",
    value: function equal(arr) {
      return ArrayUtils.equal(this._items, arr);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "indexOf",
    value: function indexOf(item) {
      return this._items.indexOf(item);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "backEvery",
    value: function backEvery(callback, scope) {
      return ArrayUtils.backEvery(this._items, callback, scope);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "pop",
    value: function pop() {
      if (this._items.length !== 0) {
        return this.remove(this._items.length - 1);
      }

      return undefined;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "binarySearch",
    value: function binarySearch(value, compare, scope, order) {
      return ArrayUtils.binarySearch(this._items, value, compare, scope, order);
    }
  }, {
    key: "silent",
    get: function get() {
      return this.changeEvent.dummy;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "length",
    get: function get() {
      return this._length;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "empty",
    get: function get() {
      return this.length.get() === 0;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "first",
    get: function get() {
      return this._items[0];
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "last",
    get: function get() {
      return this._items[this._items.length - 1];
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "lastIndex",
    get: function get() {
      var l = this._items.length;
      return l !== 0 ? l - 1 : undefined;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "items",
    get: function get() {
      return this._items;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "spliceEvent",
    get: function get() {
      return this._spliceEvent;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "replaceEvent",
    get: function get() {
      return this._replaceEvent;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "moveEvent",
    get: function get() {
      return this._moveEvent;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "clearEvent",
    get: function get() {
      return this._clearEvent;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "reorderEvent",
    get: function get() {
      return this._reorderEvent;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "changeEvent",
    get: function get() {
      return this._changeEvent;
    }
  }]);

  return List;
}(Class_1.default);

exports.default = List;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/ListSpliceResult.js":
/*!****************************************************!*\
  !*** C:/jwidget/git/main/dist/ListSpliceResult.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var ArrayUtils = __importStar(__webpack_require__(/*! ./ArrayUtils */ "../../main/dist/ArrayUtils.js"));
/**
 * IList.splice method result.
 */


var ListSpliceResult = /*#__PURE__*/function () {
  /**
   * @param oldItems Old array contents.
   * @param removedItemsList Removed item segments.
   * @param addedItemsList Added item segments.
   */
  function ListSpliceResult(oldItems, removedItemsList, addedItemsList) {
    _classCallCheck(this, ListSpliceResult);

    this.oldItems = oldItems;
    this.removedItemsList = removedItemsList;
    this.addedItemsList = addedItemsList;
  }
  /**
   * Plain array of all removed items.
   */


  _createClass(ListSpliceResult, [{
    key: "removedItems",
    get: function get() {
      if (!this._removedItems) {
        this._removedItems = ArrayUtils.merge(this.removedItemsList.map(function (indexItems) {
          return indexItems.items;
        }));
      }

      return this._removedItems;
    }
    /**
     * Plain array of all added items.
     */

  }, {
    key: "addedItems",
    get: function get() {
      if (!this._addedItems) {
        this._addedItems = ArrayUtils.merge(this.addedItemsList.map(function (indexItems) {
          return indexItems.items;
        }));
      }

      return this._addedItems;
    }
    /**
     * Removed item segments converted to index and count pairs.
     */

  }, {
    key: "removeParamsList",
    get: function get() {
      if (!this._removeParamsList) {
        this._removeParamsList = this.removedItemsList.map(function (x) {
          return x.toIndexCount();
        });
      }

      return this._removeParamsList;
    }
    /**
     * The splice call didn't change the list.
     */

  }, {
    key: "empty",
    get: function get() {
      return this.removedItemsList.length === 0 && this.addedItemsList.length === 0;
    }
  }]);

  return ListSpliceResult;
}();

exports.default = ListSpliceResult;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9MaXN0U3BsaWNlUmVzdWx0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkEsSUFBQSxVQUFBLEdBQUEsWUFBQSxDQUFBLE9BQUEsQ0FBQSxjQUFBLENBQUEsQ0FBQTtBQUdBOzs7OztJQUdxQixnQjtBQUtwQjs7Ozs7QUFLQSw0QkFBcUIsUUFBckIsRUFDVSxnQkFEVixFQUVVLGNBRlYsRUFFK0M7QUFBQTs7QUFGMUIsU0FBQSxRQUFBLEdBQUEsUUFBQTtBQUNYLFNBQUEsZ0JBQUEsR0FBQSxnQkFBQTtBQUNBLFNBQUEsY0FBQSxHQUFBLGNBQUE7QUFDVDtBQUVEOzs7Ozs7O3dCQUdnQjtBQUNmLFVBQUksQ0FBQyxLQUFLLGFBQVYsRUFBeUI7QUFDeEIsYUFBSyxhQUFMLEdBQXFCLFVBQVUsQ0FBQyxLQUFYLENBQWlCLEtBQUssZ0JBQUwsQ0FBc0IsR0FBdEIsQ0FBMEIsVUFBVSxVQUFWLEVBQW9CO0FBQ25GLGlCQUFPLFVBQVUsQ0FBQyxLQUFsQjtBQUNBLFNBRnFDLENBQWpCLENBQXJCO0FBR0E7O0FBQ0QsYUFBTyxLQUFLLGFBQVo7QUFDQTtBQUVEOzs7Ozs7d0JBR2M7QUFDYixVQUFJLENBQUMsS0FBSyxXQUFWLEVBQXVCO0FBQ3RCLGFBQUssV0FBTCxHQUFtQixVQUFVLENBQUMsS0FBWCxDQUFpQixLQUFLLGNBQUwsQ0FBb0IsR0FBcEIsQ0FBd0IsVUFBVSxVQUFWLEVBQW9CO0FBQy9FLGlCQUFPLFVBQVUsQ0FBQyxLQUFsQjtBQUNBLFNBRm1DLENBQWpCLENBQW5CO0FBR0E7O0FBQ0QsYUFBTyxLQUFLLFdBQVo7QUFDQTtBQUVEOzs7Ozs7d0JBR29CO0FBQ25CLFVBQUksQ0FBQyxLQUFLLGlCQUFWLEVBQTZCO0FBQzVCLGFBQUssaUJBQUwsR0FBeUIsS0FBSyxnQkFBTCxDQUFzQixHQUF0QixDQUEwQixVQUFDLENBQUQ7QUFBQSxpQkFBTyxDQUFDLENBQUMsWUFBRixFQUFQO0FBQUEsU0FBMUIsQ0FBekI7QUFDQTs7QUFDRCxhQUFPLEtBQUssaUJBQVo7QUFDQTtBQUVEOzs7Ozs7d0JBR1M7QUFDUixhQUFRLEtBQUssZ0JBQUwsQ0FBc0IsTUFBdEIsS0FBaUMsQ0FBbEMsSUFBeUMsS0FBSyxjQUFMLENBQW9CLE1BQXBCLEtBQStCLENBQS9FO0FBQ0E7Ozs7OztBQXRERixPQUFBLENBQUEsT0FBQSxHQUFBLGdCQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0ICogYXMgQXJyYXlVdGlscyBmcm9tIFwiLi9BcnJheVV0aWxzXCI7XG5pbXBvcnQgSUxpc3QgZnJvbSBcIi4vSUxpc3RcIjtcblxuLyoqXG4gKiBJTGlzdC5zcGxpY2UgbWV0aG9kIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlzdFNwbGljZVJlc3VsdDxUPiBpbXBsZW1lbnRzIElMaXN0LlNwbGljZVJlc3VsdDxUPiB7XG5cdHByaXZhdGUgX3JlbW92ZWRJdGVtczogVFtdO1xuXHRwcml2YXRlIF9hZGRlZEl0ZW1zOiBUW107XG5cdHByaXZhdGUgX3JlbW92ZVBhcmFtc0xpc3Q6IElMaXN0LkluZGV4Q291bnRbXTtcblxuXHQvKipcblx0ICogQHBhcmFtIG9sZEl0ZW1zIE9sZCBhcnJheSBjb250ZW50cy5cblx0ICogQHBhcmFtIHJlbW92ZWRJdGVtc0xpc3QgUmVtb3ZlZCBpdGVtIHNlZ21lbnRzLlxuXHQgKiBAcGFyYW0gYWRkZWRJdGVtc0xpc3QgQWRkZWQgaXRlbSBzZWdtZW50cy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKHJlYWRvbmx5IG9sZEl0ZW1zOiBUW10sXG5cdFx0cmVhZG9ubHkgcmVtb3ZlZEl0ZW1zTGlzdDogSUxpc3QuSW5kZXhJdGVtczxUPltdLFxuXHRcdHJlYWRvbmx5IGFkZGVkSXRlbXNMaXN0OiBJTGlzdC5JbmRleEl0ZW1zPFQ+W10pIHtcblx0fVxuXG5cdC8qKlxuXHQgKiBQbGFpbiBhcnJheSBvZiBhbGwgcmVtb3ZlZCBpdGVtcy5cblx0ICovXG5cdGdldCByZW1vdmVkSXRlbXMoKTogVFtde1xuXHRcdGlmICghdGhpcy5fcmVtb3ZlZEl0ZW1zKSB7XG5cdFx0XHR0aGlzLl9yZW1vdmVkSXRlbXMgPSBBcnJheVV0aWxzLm1lcmdlKHRoaXMucmVtb3ZlZEl0ZW1zTGlzdC5tYXAoZnVuY3Rpb24gKGluZGV4SXRlbXMpIHtcblx0XHRcdFx0cmV0dXJuIGluZGV4SXRlbXMuaXRlbXM7XG5cdFx0XHR9KSk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLl9yZW1vdmVkSXRlbXM7XG5cdH1cblxuXHQvKipcblx0ICogUGxhaW4gYXJyYXkgb2YgYWxsIGFkZGVkIGl0ZW1zLlxuXHQgKi9cblx0Z2V0IGFkZGVkSXRlbXMoKTogVFtde1xuXHRcdGlmICghdGhpcy5fYWRkZWRJdGVtcykge1xuXHRcdFx0dGhpcy5fYWRkZWRJdGVtcyA9IEFycmF5VXRpbHMubWVyZ2UodGhpcy5hZGRlZEl0ZW1zTGlzdC5tYXAoZnVuY3Rpb24gKGluZGV4SXRlbXMpIHtcblx0XHRcdFx0cmV0dXJuIGluZGV4SXRlbXMuaXRlbXM7XG5cdFx0XHR9KSk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLl9hZGRlZEl0ZW1zO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZWQgaXRlbSBzZWdtZW50cyBjb252ZXJ0ZWQgdG8gaW5kZXggYW5kIGNvdW50IHBhaXJzLlxuXHQgKi9cblx0Z2V0IHJlbW92ZVBhcmFtc0xpc3QoKTogSUxpc3QuSW5kZXhDb3VudFtde1xuXHRcdGlmICghdGhpcy5fcmVtb3ZlUGFyYW1zTGlzdCkge1xuXHRcdFx0dGhpcy5fcmVtb3ZlUGFyYW1zTGlzdCA9IHRoaXMucmVtb3ZlZEl0ZW1zTGlzdC5tYXAoKHgpID0+IHgudG9JbmRleENvdW50KCkpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5fcmVtb3ZlUGFyYW1zTGlzdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgc3BsaWNlIGNhbGwgZGlkbid0IGNoYW5nZSB0aGUgbGlzdC5cblx0ICovXG5cdGdldCBlbXB0eSgpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gKHRoaXMucmVtb3ZlZEl0ZW1zTGlzdC5sZW5ndGggPT09IDApICYmICh0aGlzLmFkZGVkSXRlbXNMaXN0Lmxlbmd0aCA9PT0gMCk7XG5cdH1cbn0iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/Map.js":
/*!***************************************!*\
  !*** C:/jwidget/git/main/dist/Map.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var ArrayUtils = __importStar(__webpack_require__(/*! ./ArrayUtils */ "../../main/dist/ArrayUtils.js"));

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));

var DictionaryUtils = __importStar(__webpack_require__(/*! ./DictionaryUtils */ "../../main/dist/DictionaryUtils.js"));

var Event_1 = __importDefault(__webpack_require__(/*! ./Event */ "../../main/dist/Event.js"));

var index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");

var internal_1 = __webpack_require__(/*! ./internal */ "../../main/dist/internal.js");

var List_1 = __importDefault(__webpack_require__(/*! ./List */ "../../main/dist/List.js"));

var Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));

var Set_1 = __importDefault(__webpack_require__(/*! ./Set */ "../../main/dist/Set.js"));
/**
 * Unordered key-value collection. Each item has its own string key.
 * @param T Item type.
 */


var Map = /*#__PURE__*/function (_Class_1$default) {
  _inherits(Map, _Class_1$default);

  var _super = _createSuper(Map);

  function Map(a, b, c) {
    var _this;

    _classCallCheck(this, Map);

    _this = _super.call(this);
    _this._ownsItems = false;

    if (typeof a === "boolean") {
      c = a ? index_1.SILENT : 0;
      a = null;
    } else if (typeof a === "function" || a == null && typeof b === "boolean") {
      c = b ? index_1.SILENT : 0;
      b = a;
      a = null;
    } else if (typeof b === "number") {
      c = b;
      b = null;
    }

    var items = a;
    var silent = Boolean(c & index_1.SILENT);
    var adapter = items != null && Boolean(c & index_1.ADAPTER);
    _this.getKey = b || internal_1.vid;
    _this._adapter = adapter;
    _this._items = _this._adapter ? items : index_1.apply({}, items);
    _this._length = _this.own(new Property_1.default(DictionaryUtils.getLength(_this._items), silent));
    _this._spliceEvent = Event_1.default.make(silent);
    _this._reindexEvent = Event_1.default.make(silent);
    _this._clearEvent = Event_1.default.make(silent);
    _this._changeEvent = Event_1.default.make(silent);
    return _this;
  }

  _createClass(Map, [{
    key: "destroyObject",
    value: function destroyObject() {
      this.clear();

      _get(_getPrototypeOf(Map.prototype), "destroyObject", this).call(this);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "ownItems",

    /**
     * @inheritDoc
     */
    value: function ownItems() {
      this._ownsItems = true;
      return this;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "clone",
    value: function clone() {
      return new Map(this.items, this.getKey, this.silent ? index_1.SILENT : 0);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "get",
    value: function get(key) {
      return this._items[key];
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "getKeys",
    value: function getKeys() {
      return new List_1.default(Object.keys(this._items), String, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "contains",
    value: function contains(item) {
      return DictionaryUtils.contains(this._items, item);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "containsKey",
    value: function containsKey(key) {
      return this.get(key) !== undefined;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "keyOf",
    value: function keyOf(item) {
      return DictionaryUtils.keyOf(this._items, item);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "every",
    value: function every(callback, scope) {
      return DictionaryUtils.every(this._items, callback, scope || this);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "some",
    value: function some(callback, scope) {
      return DictionaryUtils.some(this._items, callback, scope || this);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "forEach",
    value: function forEach(callback, scope) {
      DictionaryUtils.forEach(this._items, callback, scope || this);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "findKey",
    value: function findKey(callback, scope) {
      return DictionaryUtils.findKey(this._items, callback, scope || this);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "find",
    value: function find(callback, scope) {
      return DictionaryUtils.find(this._items, callback, scope || this);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "toSorted",
    value: function toSorted(callback, scope, order) {
      return new List_1.default(DictionaryUtils.toSorted(this._items, callback, scope || this, order), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "toSortedComparing",
    value: function toSortedComparing(compare, scope, order) {
      return new List_1.default(DictionaryUtils.toSortedComparing(this._items, compare, scope || this, order), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "getSortingKeys",
    value: function getSortingKeys(callback, scope, order) {
      return new List_1.default(DictionaryUtils.getSortingKeys(this._items, callback, scope || this, order), String, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "getSortingKeysComparing",
    value: function getSortingKeysComparing(compare, scope, order) {
      return new List_1.default(DictionaryUtils.getSortingKeysComparing(this._items, compare, scope || this, order), String, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "filter",
    value: function filter(callback, scope) {
      return new Map(DictionaryUtils.filter(this._items, callback, scope || this), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "count",
    value: function count(callback, scope) {
      return DictionaryUtils.count(this._items, callback, scope || this);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "map",
    value: function map(callback, scope, getKey) {
      return new Map(DictionaryUtils.map(this._items, callback, scope || this), getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "index",
    value: function index(callback, scope) {
      return new Map(DictionaryUtils.index(this._items, callback, scope || this), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "reduce",
    value: function reduce(reducer, initial) {
      return typeof reducer === "function" ? DictionaryUtils.reduce(this.items, reducer, initial) : DictionaryUtils.reduce(this.items, reducer);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "max",
    value: function max(callback, scope, order) {
      return DictionaryUtils.max(this._items, callback, scope, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "maxKey",
    value: function maxKey(callback, scope, order) {
      return DictionaryUtils.maxKey(this._items, callback, scope, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "maxComparing",
    value: function maxComparing(compare, scope, order) {
      return DictionaryUtils.maxComparing(this._items, compare, scope, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "maxKeyComparing",
    value: function maxKeyComparing(compare, scope, order) {
      return DictionaryUtils.maxKeyComparing(this._items, compare, scope, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "min",
    value: function min(callback, scope, order) {
      return DictionaryUtils.min(this._items, callback, scope, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "minKey",
    value: function minKey(callback, scope, order) {
      return DictionaryUtils.minKey(this._items, callback, scope, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "minComparing",
    value: function minComparing(compare, scope, order) {
      return DictionaryUtils.minComparing(this._items, compare, scope, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "minKeyComparing",
    value: function minKeyComparing(compare, scope, order) {
      return DictionaryUtils.minKeyComparing(this._items, compare, scope, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "toArray",
    value: function toArray() {
      return DictionaryUtils.toArray(this._items);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "toList",
    value: function toList() {
      return new List_1.default(this.toArray(), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "toSet",
    value: function toSet() {
      return new Set_1.default(this.toArray(), this.getKey, true);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "toDictionary",
    value: function toDictionary() {
      return index_1.apply({}, this._items);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "asArray",
    value: function asArray() {
      return this.toArray();
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "asList",
    value: function asList() {
      return this.toList();
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "asSet",
    value: function asSet() {
      return this.toSet();
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "asDictionary",
    value: function asDictionary() {
      return this._items;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "tryPut",
    value: function tryPut(key, item) {
      var result = DictionaryUtils.tryPut(this._items, key, item);

      if (result === undefined) {
        return undefined;
      }

      var removedItem = result.value;

      if (removedItem === undefined) {
        this._length.set(this._length.get() + 1);
      }

      if (!this.silent) {
        var removedItems = {};

        if (removedItem !== undefined) {
          removedItems[key] = removedItem;
        }

        var addedItems = {};
        addedItems[key] = item;
        var spliceResult = {
          removedItems: removedItems,
          addedItems: addedItems
        };

        this._spliceEvent.trigger({
          sender: this,
          spliceResult: spliceResult
        });

        this._changeEvent.trigger({
          sender: this
        });
      }

      if (removedItem !== undefined && this._ownsItems) {
        removedItem.destroy();
      }

      return result;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "put",
    value: function put(key, item) {
      var result = this.tryPut(key, item);
      return result !== undefined ? result.value : this.get(key);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "putAll",
    value: function putAll(items) {
      if (!this.silent) {
        this.tryPutAll(items);
        return;
      }

      for (var key in items) {
        this.tryPut(key, items[key]);
      }
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "putAllVerbose",
    value: function putAllVerbose(items) {
      var spliceResult = this.tryPutAll(items);
      return spliceResult !== undefined ? spliceResult : {
        removedItems: {},
        addedItems: {}
      };
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "tryPutAll",
    value: function tryPutAll(items) {
      return this.trySplice([], items);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "setKey",
    value: function setKey(oldKey, newKey) {
      this.trySetKey(oldKey, newKey);
      return this._items[newKey];
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "trySetKey",
    value: function trySetKey(oldKey, newKey) {
      var item = DictionaryUtils.trySetKey(this._items, oldKey, newKey);

      if (item === undefined) {
        return undefined;
      }

      if (!this.silent) {
        this._reindexEvent.trigger({
          sender: this,
          keyMap: _defineProperty({}, oldKey, newKey)
        });

        this._changeEvent.trigger({
          sender: this
        });
      }

      return item;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "tryRemove",
    value: function tryRemove(key) {
      var item = DictionaryUtils.tryRemove(this._items, key);

      if (item === undefined) {
        return undefined;
      }

      this._length.set(this._length.get() - 1);

      if (!this.silent) {
        var spliceResult = {
          addedItems: {},
          removedItems: _defineProperty({}, key, item)
        };

        this._spliceEvent.trigger({
          sender: this,
          spliceResult: spliceResult
        });

        this._changeEvent.trigger({
          sender: this
        });
      }

      if (this._ownsItems) {
        item.destroy();
      }

      return item;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "remove",
    value: function remove(key) {
      return this.tryRemove(key);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "removeItem",
    value: function removeItem(item) {
      var key = this.keyOf(item);

      if (key !== undefined) {
        this.tryRemove(key);
      }

      return key;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "removeAll",
    value: function removeAll(keys) {
      if (!this.silent) {
        this.tryRemoveAll(keys);
        return;
      }

      for (var i = 0, l = keys.length; i < l; ++i) {
        this.tryRemove(keys[i]);
      }
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "removeAllVerbose",
    value: function removeAllVerbose(keys) {
      var items = this.tryRemoveAll(keys);
      return items !== undefined ? items : {};
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "tryRemoveAll",
    value: function tryRemoveAll(keys) {
      var spliceResult = this.trySplice(keys, {});

      if (spliceResult !== undefined) {
        return spliceResult.removedItems;
      }

      return undefined;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "removeItems",
    value: function removeItems(items) {
      var itemSet = internal_1.VidSet.fromArray(items, this.getKey);
      var newItems = DictionaryUtils.filter(this._items, function (item) {
        return !itemSet.contains(item);
      });
      this.performSplice(newItems);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "clear",
    value: function clear() {
      if (this._length.get() === 0) {
        return undefined;
      }

      var items;

      this._length.set(0);

      if (this._adapter) {
        items = DictionaryUtils.tryClear(this._items);
      } else {
        items = this._items;
        this._items = {};
      }

      this._clearEvent.trigger({
        sender: this,
        items: items
      });

      this._changeEvent.trigger({
        sender: this
      });

      if (this._ownsItems) {
        ArrayUtils.backEvery(DictionaryUtils.toArray(items), index_1.destroy);
      }

      return items;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "splice",
    value: function splice(removedKeys, updatedItems) {
      var spliceResult = this.trySplice(removedKeys, updatedItems);
      return spliceResult !== undefined ? spliceResult : {
        removedItems: {},
        addedItems: {}
      };
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "trySplice",
    value: function trySplice(removedKeys, updatedItems) {
      var spliceResult = DictionaryUtils.trySplice(this._items, removedKeys, updatedItems);

      if (spliceResult === undefined) {
        return undefined;
      }

      this._length.set(this._length.get() + DictionaryUtils.getLength(spliceResult.addedItems) - DictionaryUtils.getLength(spliceResult.removedItems));

      this._spliceEvent.trigger({
        sender: this,
        spliceResult: spliceResult
      });

      this._changeEvent.trigger({
        sender: this
      });

      if (this._ownsItems) {
        ArrayUtils.backEvery(DictionaryUtils.toArray(spliceResult.removedItems), index_1.destroy);
      }

      return spliceResult;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "reindex",
    value: function reindex(keyMap) {
      var result = this.tryReindex(keyMap);
      return result !== undefined ? result : {};
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "tryReindex",
    value: function tryReindex(keyMap) {
      var result = DictionaryUtils.tryReindex(this._items, keyMap);

      if (result === undefined) {
        return undefined;
      }

      this._reindexEvent.trigger({
        sender: this,
        keyMap: result
      });

      this._changeEvent.trigger({
        sender: this
      });

      return result;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "detectSplice",
    value: function detectSplice(newItems) {
      return DictionaryUtils.detectSplice(this._items, newItems);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "detectReindex",
    value: function detectReindex(newItems) {
      return DictionaryUtils.detectReindex(this._items, newItems, this.getKey);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "performSplice",
    value: function performSplice(newItems) {
      var params = this.detectSplice(newItems);

      if (params !== undefined) {
        this.trySplice(params.removedKeys, params.updatedItems);
      }
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "performReindex",
    value: function performReindex(newItems) {
      var keyMap = this.detectReindex(newItems);

      if (keyMap !== undefined) {
        this.tryReindex(keyMap);
      }
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "equal",
    value: function equal(map) {
      return DictionaryUtils.equal(this._items, map);
    }
  }, {
    key: "silent",
    get: function get() {
      return this.changeEvent.dummy;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "length",
    get: function get() {
      return this._length;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "empty",
    get: function get() {
      return this.length.get() === 0;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "first",
    get: function get() {
      return DictionaryUtils.getFirst(this._items);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "firstKey",
    get: function get() {
      return DictionaryUtils.getFirstKey(this._items);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "items",
    get: function get() {
      return this._items;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "spliceEvent",
    get: function get() {
      return this._spliceEvent;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "reindexEvent",
    get: function get() {
      return this._reindexEvent;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "clearEvent",
    get: function get() {
      return this._clearEvent;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "changeEvent",
    get: function get() {
      return this._changeEvent;
    }
  }]);

  return Map;
}(Class_1.default);

exports.default = Map;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/Mapper.js":
/*!******************************************!*\
  !*** C:/jwidget/git/main/dist/Mapper.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapProperties = void 0;

var ArrayUtils = __importStar(__webpack_require__(/*! ./ArrayUtils */ "../../main/dist/ArrayUtils.js"));

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));

var Destructor_1 = __importDefault(__webpack_require__(/*! ./Destructor */ "../../main/dist/Destructor.js"));

var index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");

var Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));
/**
 * Listens source properties modification and recreates target value via mapping function.
 *
 * @param T Target property value type.
 */


var Mapper = /*#__PURE__*/function (_Class_1$default) {
  _inherits(Mapper, _Class_1$default);

  var _super = _createSuper(Mapper);

  /**
   * @param sources Source properties.
   * @param create Mapping function.
   * @param config Configuration.
   */
  function Mapper(sources, create) {
    var _this;

    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, Mapper);

    _this = _super.call(this);
    _this.sources = sources;
    _this._create = create;
    _this._destroy = config.destroy;
    _this._scope = config.scope || _assertThisInitialized(_this);
    _this._targetCreated = config.target == null;
    _this._target = _this._targetCreated ? new Property_1.default(null, _this.sources.every(function (source) {
      return source.silent;
    })) : config.target;
    _this._viaNull = config.viaNull || false;
    _this._sourceValues = null;
    _this._targetValue = null;

    _this.update();

    _this.sources.forEach(_this.bind, _assertThisInitialized(_this));

    return _this;
  }
  /**
   * Target property.
   */


  _createClass(Mapper, [{
    key: "destroyObject",

    /**
     * @inheritDoc
     */
    value: function destroyObject() {
      var oldValue = this.target.get();

      if (oldValue === this._targetValue) {
        this._target.set(null);
      }

      this._done();

      if (this._targetCreated) {
        this._target.destroy();
      }

      this._create = null;
      this._destroy = null;
      this._scope = null;
      this._target = null;
      this._sourceValues = null;
      this._targetValue = null;

      _get(_getPrototypeOf(Mapper.prototype), "destroyObject", this).call(this);
    }
    /**
     * Listens specified event and issues target value recalculation on event triggering.
     * @param event Event.
     * @returns this
     */

  }, {
    key: "listen",
    value: function listen(event) {
      return this.owning(event.listen(this.update, this));
    }
    /**
     * Watches specified property and issues target value recalculation on its change.
     * @param property Property.
     * @returns this
     */

  }, {
    key: "bind",
    value: function bind(property) {
      return this.listen(property.changeEvent);
    }
    /**
     * Updates target property forcibly.
     */

  }, {
    key: "update",
    value: function update() {
      if (this._viaNull) {
        this._target.set(null);

        this._done();
      }

      var values = this.sources.map(function (source) {
        return source.get();
      });

      var newValue = this._create.apply(this._scope, values);

      this._target.set(newValue);

      if (!this._viaNull) {
        this._done();
      }

      this._targetValue = newValue;
      this._sourceValues = values;
    }
  }, {
    key: "_done",
    value: function _done() {
      if (this._destroy && this._sourceValues) {
        this._destroy.apply(this._scope, [this._targetValue].concat(this._sourceValues));
      }
    }
  }, {
    key: "target",
    get: function get() {
      return this._target;
    }
  }]);

  return Mapper;
}(Class_1.default);

(function (Mapper) {
  /**
   * Mapper by reducer. Kind of mapper optimized for working with collections of similar properties.
   */
  var ByReducer = /*#__PURE__*/function (_Class_1$default2) {
    _inherits(ByReducer, _Class_1$default2);

    var _super2 = _createSuper(ByReducer);

    /**
     * @param sources Source bindables.
     * @param reducer Mapping reducer.
     * @param target Target property.
     */
    function ByReducer(sources, reducer, target) {
      var _this2;

      _classCallCheck(this, ByReducer);

      _this2 = _super2.call(this);
      _this2.sources = sources;
      _this2.reducer = reducer;
      _this2._target = target || _this2.own(new Property_1.default());

      _this2._update();

      _this2.sources.forEach(_this2._bind, _assertThisInitialized(_this2));

      return _this2;
    }
    /**
     * Target property.
     */


    _createClass(ByReducer, [{
      key: "_update",
      value: function _update() {
        var values = this.sources.map(function (source) {
          return source.get();
        });

        this._target.set(ArrayUtils.reduce(values, this.reducer));
      }
    }, {
      key: "_bind",
      value: function _bind(property) {
        return this.owning(property.changeEvent.listen(this._update, this));
      }
    }, {
      key: "target",
      get: function get() {
        return this._target;
      }
    }]);

    return ByReducer;
  }(Class_1.default);

  Mapper.ByReducer = ByReducer;
})(Mapper || (Mapper = {}));

exports.default = Mapper;

function mapProperties(sources, reducer) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (!sources.every(function (source) {
    return source.silent;
  })) {
    var _target = new Property_1.default();

    return _target.owning(typeof reducer === "function" ? new Mapper(sources, reducer, {
      target: _target,
      destroy: config.destroy,
      scope: config.scope,
      viaNull: config.viaNull
    }) : new Mapper.ByReducer(sources, reducer));
  }

  var sourceValues = sources.map(function (source) {
    return source.get();
  });

  if (typeof reducer !== "function") {
    return new Property_1.default(ArrayUtils.reduce(sourceValues, reducer), true);
  }

  var targetValue = reducer.apply(config.scope, sourceValues);
  var target = new Property_1.default(targetValue, true);

  if (config.destroy === index_1.destroy) {
    target.ownValue();
  } else if (config.destroy) {
    target.own(new Destructor_1.default(function () {
      return config.destroy.apply(config.scope, [targetValue].concat(sourceValues));
    }));
  }

  return target;
}

exports.mapProperties = mapProperties;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/Property.js":
/*!********************************************!*\
  !*** C:/jwidget/git/main/dist/Property.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));

var Event_1 = __importDefault(__webpack_require__(/*! ./Event */ "../../main/dist/Event.js"));

var index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");

var Mapper_1 = __webpack_require__(/*! ./Mapper */ "../../main/dist/Mapper.js");
/**
 * Container for a value. Provides basic data binding functionality.
 */


var Property = /*#__PURE__*/function (_Class_1$default) {
  _inherits(Property, _Class_1$default);

  var _super = _createSuper(Property);

  /**
   * Constructs a property and sets initial value.
   * @param value Initial value.
   * @param silent If true, uses `dummyEvent` implementation for `changeEvent.
   */
  function Property() {
    var _this;

    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var silent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    _classCallCheck(this, Property);

    _this = _super.call(this);
    _this.value = value;
    _this._ownsValue = false;
    _this._changeEvent = Event_1.default.make(silent);
    return _this;
  }

  _createClass(Property, [{
    key: "destroyObject",
    value: function destroyObject() {
      if (this._ownsValue) {
        index_1.destroy(this.value);
      }

      _get(_getPrototypeOf(Property.prototype), "destroyObject", this).call(this);
    }
    /**
     * Checks if this property never triggers events. This knowledge may help you do certain code optimizations.
     */

  }, {
    key: "get",

    /**
     * Returns current property value.
     * Think twice before calling this method - probably it makes sense to use some kind of binding instead?
     */
    value: function get() {
      return this.value;
    }
    /**
     * Changes property value and triggers `changeEvent` if the value has been changed.
     * @param value New value to set.
     */

  }, {
    key: "set",
    value: function set(value) {
      if (value === undefined) {
        value = null;
      }

      var oldValue = this.value;

      if (oldValue === value) {
        return;
      }

      this.value = value;

      this._changeEvent.trigger({
        sender: this,
        value: value,
        oldValue: oldValue
      });

      if (this._ownsValue) {
        index_1.destroy(oldValue);
      }
    }
    /**
     * Makes this property an owner of its value. It means that the value is
     * destroyed automatically on reassignment or destruction of the
     * property.
     */

  }, {
    key: "ownValue",
    value: function ownValue() {
      this._ownsValue = true;
      return this;
    }
    /**
     * Builds a new property containing the result of the callback function called
     * on this property value. To stop synchronization, destroy the result property.
     * In comparison to `mapDestroyable` method, doesn't destroy the previously assigned target values.
     * To map multiple properties, use `Mapper`.
     *
     * @param create Mapping function.
     * @param config Mapping configuration.
     */

  }, {
    key: "map",
    value: function map(create, config) {
      return Mapper_1.mapProperties([this], create, config);
    }
  }, {
    key: "silent",
    get: function get() {
      return this._changeEvent.dummy;
    }
    /**
     * Property value is changed. Triggered in result of `set` method call if the value has been changed.
     */

  }, {
    key: "changeEvent",
    get: function get() {
      return this._changeEvent;
    }
  }]);

  return Property;
}(Class_1.default);

exports.default = Property;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Qcm9wZXJ0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCQSxJQUFBLE9BQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsT0FBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsU0FBQSxDQUFBLENBQUE7O0FBRUEsSUFBQSxPQUFBLEdBQUEsT0FBQSxDQUFBLFNBQUEsQ0FBQTs7QUFHQSxJQUFBLFFBQUEsR0FBQSxPQUFBLENBQUEsVUFBQSxDQUFBO0FBRUE7Ozs7O0lBR3FCLFE7Ozs7O0FBS3BCOzs7OztBQUtBLHNCQUE4RDtBQUFBOztBQUFBLFFBQXhDLEtBQXdDLHVFQUE3QixJQUE2QjtBQUFBLFFBQXZCLE1BQXVCLHVFQUFMLEtBQUs7O0FBQUE7O0FBQzdEO0FBRHFCLFVBQUEsS0FBQSxHQUFBLEtBQUE7QUFUZCxVQUFBLFVBQUEsR0FBYSxLQUFiO0FBV1AsVUFBSyxZQUFMLEdBQW9CLE9BQUEsQ0FBQSxPQUFBLENBQU0sSUFBTixDQUEwQyxNQUExQyxDQUFwQjtBQUY2RDtBQUc3RDs7OztvQ0FFc0I7QUFDdEIsVUFBSSxLQUFLLFVBQVQsRUFBcUI7QUFDcEIsUUFBQSxPQUFBLENBQUEsT0FBQSxDQUFRLEtBQUssS0FBYjtBQUNBOztBQUNEO0FBQ0E7QUFFRDs7Ozs7OztBQWNBOzs7OzBCQUlHO0FBQ0YsYUFBTyxLQUFLLEtBQVo7QUFDQTtBQUVEOzs7Ozs7O3dCQUlJLEssRUFBUTtBQUNYLFVBQUksS0FBSyxLQUFLLFNBQWQsRUFBeUI7QUFDeEIsUUFBQSxLQUFLLEdBQUcsSUFBUjtBQUNBOztBQUNELFVBQU0sUUFBUSxHQUFHLEtBQUssS0FBdEI7O0FBQ0EsVUFBSSxRQUFRLEtBQUssS0FBakIsRUFBd0I7QUFDdkI7QUFDQTs7QUFDRCxXQUFLLEtBQUwsR0FBYSxLQUFiOztBQUNBLFdBQUssWUFBTCxDQUFrQixPQUFsQixDQUEwQjtBQUFFLFFBQUEsTUFBTSxFQUFFLElBQVY7QUFBZ0IsUUFBQSxLQUFLLEVBQUUsS0FBdkI7QUFBOEIsUUFBQSxRQUFRLEVBQUU7QUFBeEMsT0FBMUI7O0FBQ0EsVUFBSSxLQUFLLFVBQVQsRUFBcUI7QUFDcEIsUUFBQSxPQUFBLENBQUEsT0FBQSxDQUFRLFFBQVI7QUFDQTtBQUNEO0FBRUQ7Ozs7Ozs7OytCQUtRO0FBQ1AsV0FBSyxVQUFMLEdBQWtCLElBQWxCO0FBQ0EsYUFBTyxJQUFQO0FBQ0E7QUFFRDs7Ozs7Ozs7Ozs7O3dCQVNPLE0sRUFBeUIsTSxFQUF5QjtBQUN4RCxhQUFPLFFBQUEsQ0FBQSxhQUFBLENBQWMsQ0FBQyxJQUFELENBQWQsRUFBc0IsTUFBdEIsRUFBOEIsTUFBOUIsQ0FBUDtBQUNBOzs7d0JBM0RTO0FBQ1QsYUFBTyxLQUFLLFlBQUwsQ0FBa0IsS0FBekI7QUFDQTtBQUVEOzs7Ozs7d0JBR2U7QUFDZCxhQUFPLEtBQUssWUFBWjtBQUNBOzs7O0VBbEN1QyxPQUFBLENBQUEsTzs7QUFBekMsT0FBQSxDQUFBLE9BQUEsR0FBQSxRQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IEJpbmRhYmxlIGZyb20gXCIuL0JpbmRhYmxlXCI7XG5pbXBvcnQgQ2xhc3MgZnJvbSBcIi4vQ2xhc3NcIjtcbmltcG9ydCBEZXN0cm95YWJsZUJpbmRhYmxlIGZyb20gXCIuL0Rlc3Ryb3lhYmxlQmluZGFibGVcIjtcbmltcG9ydCBFdmVudCBmcm9tIFwiLi9FdmVudFwiO1xuaW1wb3J0IElFdmVudCBmcm9tIFwiLi9JRXZlbnRcIjtcbmltcG9ydCB7ZGVzdHJveX0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBJUHJvcGVydHkgZnJvbSBcIi4vSVByb3BlcnR5XCI7XG5pbXBvcnQgTGlzdGVuYWJsZSBmcm9tIFwiLi9MaXN0ZW5hYmxlXCI7XG5pbXBvcnQge2RlZmF1bHQgYXMgTWFwcGVyLCBtYXBQcm9wZXJ0aWVzfSBmcm9tIFwiLi9NYXBwZXJcIjtcblxuLyoqXG4gKiBDb250YWluZXIgZm9yIGEgdmFsdWUuIFByb3ZpZGVzIGJhc2ljIGRhdGEgYmluZGluZyBmdW5jdGlvbmFsaXR5LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9wZXJ0eTxWPiBleHRlbmRzIENsYXNzIGltcGxlbWVudHMgSVByb3BlcnR5PFY+IHtcblx0cHJpdmF0ZSBfb3duc1ZhbHVlID0gZmFsc2U7XG5cblx0cHJvdGVjdGVkIF9jaGFuZ2VFdmVudDogSUV2ZW50PEJpbmRhYmxlLkNoYW5nZUV2ZW50UGFyYW1zPFY+PjtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIHByb3BlcnR5IGFuZCBzZXRzIGluaXRpYWwgdmFsdWUuXG5cdCAqIEBwYXJhbSB2YWx1ZSBJbml0aWFsIHZhbHVlLlxuXHQgKiBAcGFyYW0gc2lsZW50IElmIHRydWUsIHVzZXMgYGR1bW15RXZlbnRgIGltcGxlbWVudGF0aW9uIGZvciBgY2hhbmdlRXZlbnQuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdmFsdWU6IFYgPSBudWxsLCBzaWxlbnQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5fY2hhbmdlRXZlbnQgPSBFdmVudC5tYWtlPEJpbmRhYmxlLkNoYW5nZUV2ZW50UGFyYW1zPFY+PihzaWxlbnQpO1xuXHR9XG5cblx0cHJvdGVjdGVkIGRlc3Ryb3lPYmplY3QoKSB7XG5cdFx0aWYgKHRoaXMuX293bnNWYWx1ZSkge1xuXHRcdFx0ZGVzdHJveSh0aGlzLnZhbHVlKTtcblx0XHR9XG5cdFx0c3VwZXIuZGVzdHJveU9iamVjdCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGlzIHByb3BlcnR5IG5ldmVyIHRyaWdnZXJzIGV2ZW50cy4gVGhpcyBrbm93bGVkZ2UgbWF5IGhlbHAgeW91IGRvIGNlcnRhaW4gY29kZSBvcHRpbWl6YXRpb25zLlxuXHQgKi9cblx0Z2V0IHNpbGVudCgpIHtcblx0XHRyZXR1cm4gdGhpcy5fY2hhbmdlRXZlbnQuZHVtbXk7XG5cdH1cblxuXHQvKipcblx0ICogUHJvcGVydHkgdmFsdWUgaXMgY2hhbmdlZC4gVHJpZ2dlcmVkIGluIHJlc3VsdCBvZiBgc2V0YCBtZXRob2QgY2FsbCBpZiB0aGUgdmFsdWUgaGFzIGJlZW4gY2hhbmdlZC5cblx0ICovXG5cdGdldCBjaGFuZ2VFdmVudCgpOiBMaXN0ZW5hYmxlPEJpbmRhYmxlLkNoYW5nZUV2ZW50UGFyYW1zPFY+PiB7XG5cdFx0cmV0dXJuIHRoaXMuX2NoYW5nZUV2ZW50O1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgY3VycmVudCBwcm9wZXJ0eSB2YWx1ZS5cblx0ICogVGhpbmsgdHdpY2UgYmVmb3JlIGNhbGxpbmcgdGhpcyBtZXRob2QgLSBwcm9iYWJseSBpdCBtYWtlcyBzZW5zZSB0byB1c2Ugc29tZSBraW5kIG9mIGJpbmRpbmcgaW5zdGVhZD9cblx0ICovXG5cdGdldCgpOiBWIHtcblx0XHRyZXR1cm4gdGhpcy52YWx1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGFuZ2VzIHByb3BlcnR5IHZhbHVlIGFuZCB0cmlnZ2VycyBgY2hhbmdlRXZlbnRgIGlmIHRoZSB2YWx1ZSBoYXMgYmVlbiBjaGFuZ2VkLlxuXHQgKiBAcGFyYW0gdmFsdWUgTmV3IHZhbHVlIHRvIHNldC5cblx0ICovXG5cdHNldCh2YWx1ZTogVikge1xuXHRcdGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR2YWx1ZSA9IG51bGw7XG5cdFx0fVxuXHRcdGNvbnN0IG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcblx0XHRpZiAob2xkVmFsdWUgPT09IHZhbHVlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMudmFsdWUgPSB2YWx1ZTtcblx0XHR0aGlzLl9jaGFuZ2VFdmVudC50cmlnZ2VyKHsgc2VuZGVyOiB0aGlzLCB2YWx1ZTogdmFsdWUsIG9sZFZhbHVlOiBvbGRWYWx1ZSB9KTtcblx0XHRpZiAodGhpcy5fb3duc1ZhbHVlKSB7XG5cdFx0XHRkZXN0cm95KG9sZFZhbHVlKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogTWFrZXMgdGhpcyBwcm9wZXJ0eSBhbiBvd25lciBvZiBpdHMgdmFsdWUuIEl0IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGlzXG5cdCAqIGRlc3Ryb3llZCBhdXRvbWF0aWNhbGx5IG9uIHJlYXNzaWdubWVudCBvciBkZXN0cnVjdGlvbiBvZiB0aGVcblx0ICogcHJvcGVydHkuXG5cdCAqL1xuXHRvd25WYWx1ZSgpOiB0aGlzIHtcblx0XHR0aGlzLl9vd25zVmFsdWUgPSB0cnVlO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJ1aWxkcyBhIG5ldyBwcm9wZXJ0eSBjb250YWluaW5nIHRoZSByZXN1bHQgb2YgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGNhbGxlZFxuXHQgKiBvbiB0aGlzIHByb3BlcnR5IHZhbHVlLiBUbyBzdG9wIHN5bmNocm9uaXphdGlvbiwgZGVzdHJveSB0aGUgcmVzdWx0IHByb3BlcnR5LlxuXHQgKiBJbiBjb21wYXJpc29uIHRvIGBtYXBEZXN0cm95YWJsZWAgbWV0aG9kLCBkb2Vzbid0IGRlc3Ryb3kgdGhlIHByZXZpb3VzbHkgYXNzaWduZWQgdGFyZ2V0IHZhbHVlcy5cblx0ICogVG8gbWFwIG11bHRpcGxlIHByb3BlcnRpZXMsIHVzZSBgTWFwcGVyYC5cblx0ICpcblx0ICogQHBhcmFtIGNyZWF0ZSBNYXBwaW5nIGZ1bmN0aW9uLlxuXHQgKiBAcGFyYW0gY29uZmlnIE1hcHBpbmcgY29uZmlndXJhdGlvbi5cblx0ICovXG5cdG1hcDxVPihjcmVhdGU6ICh2YWx1ZTogVikgPT4gVSwgY29uZmlnPzogTWFwcGVyLkNvbmZpZzxVPik6IERlc3Ryb3lhYmxlQmluZGFibGU8VT4ge1xuXHRcdHJldHVybiBtYXBQcm9wZXJ0aWVzKFt0aGlzXSwgY3JlYXRlLCBjb25maWcpO1xuXHR9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/Set.js":
/*!***************************************!*\
  !*** C:/jwidget/git/main/dist/Set.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var ArrayUtils = __importStar(__webpack_require__(/*! ./ArrayUtils */ "../../main/dist/ArrayUtils.js"));

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));

var Event_1 = __importDefault(__webpack_require__(/*! ./Event */ "../../main/dist/Event.js"));

var index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");

var internal_1 = __webpack_require__(/*! ./internal */ "../../main/dist/internal.js");

var List_1 = __importDefault(__webpack_require__(/*! ./List */ "../../main/dist/List.js"));

var Map_1 = __importDefault(__webpack_require__(/*! ./Map */ "../../main/dist/Map.js"));

var Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));
/**
 * Unordered collection optimized for items adding, removal and search.
 * @param T Item type.
 */


var Set = /*#__PURE__*/function (_Class_1$default) {
  _inherits(Set, _Class_1$default);

  var _super = _createSuper(Set);

  function Set(a, b, c) {
    var _this;

    _classCallCheck(this, Set);

    _this = _super.call(this);
    _this._ownsItems = false;

    if (typeof a === "boolean") {
      c = a;
      a = null;
    } else if (typeof a === "function" || a == null && typeof b === "boolean") {
      c = b;
      b = a;
      a = null;
    } else if (typeof b === "boolean") {
      c = b;
      b = null;
    }

    var items = a || [];
    var silent = c || false;
    _this.getKey = b || internal_1.vid;
    _this._items = internal_1.VidSet.fromArray(items, _this.getKey);
    _this._length = _this.own(new Property_1.default(items.length, silent));
    _this._spliceEvent = Event_1.default.make(silent);
    _this._clearEvent = Event_1.default.make(silent);
    _this._changeEvent = Event_1.default.make(silent);
    return _this;
  }

  _createClass(Set, [{
    key: "destroyObject",
    value: function destroyObject() {
      this.clear();

      _get(_getPrototypeOf(Set.prototype), "destroyObject", this).call(this);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "ownItems",

    /**
     * @inheritDoc
     */
    value: function ownItems() {
      this._ownsItems = true;
      return this;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "clone",
    value: function clone() {
      return new Set(this.items, this.getKey, this.silent);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "contains",
    value: function contains(item) {
      return this._items.contains(item);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "every",
    value: function every(callback, scope) {
      return this._items.every(callback, scope);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "some",
    value: function some(callback, scope) {
      var _this2 = this;

      return !this._items.every(function (item) {
        return !callback.call(scope || _this2, item);
      });
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "forEach",
    value: function forEach(callback, scope) {
      var _this3 = this;

      this._items.every(function (item) {
        callback.call(scope || _this3, item);
        return true;
      });
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "find",
    value: function find(callback, scope) {
      var _this4 = this;

      var result = undefined;

      this._items.every(function (item) {
        if (callback.call(scope || _this4, item)) {
          result = item;
          return false;
        }

        return true;
      });

      return result;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "toSorted",
    value: function toSorted(callback, scope, order) {
      return new List_1.default(ArrayUtils.toSorted(this._items.values, callback, scope || this, order), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "toSortedComparing",
    value: function toSortedComparing(compare, scope, order) {
      return new List_1.default(ArrayUtils.toSortedComparing(this._items.values, compare, scope || this, order), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "index",
    value: function index(callback, scope) {
      var _this5 = this;

      var result = {};

      this._items.every(function (item) {
        var key = callback.call(scope || _this5, item);

        if (key != null) {
          result[key] = item;
        }

        return true;
      });

      return new Map_1.default(result, this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "filter",
    value: function filter(callback, scope) {
      return new Set(this._items.values.filter(callback, scope), this.getKey, true);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "count",
    value: function count(callback, scope) {
      return ArrayUtils.count(this._items.values, callback, scope);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "map",
    value: function map(callback, scope, getKey) {
      return new Set(this._items.values.map(callback, scope), getKey, true);
    }
  }, {
    key: "reduce",
    value: function reduce(reducer, initial) {
      return typeof reducer === "function" ? this._items.values.reduce(reducer, initial) : ArrayUtils.reduce(this._items.values, reducer);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "max",
    value: function max(callback, scope, order) {
      return ArrayUtils.max(this._items.values, callback, scope, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "maxComparing",
    value: function maxComparing(compare, scope, order) {
      return ArrayUtils.maxComparing(this._items.values, compare, scope, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "min",
    value: function min(callback, scope, order) {
      return ArrayUtils.min(this._items.values, callback, scope, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "minComparing",
    value: function minComparing(compare, scope, order) {
      return ArrayUtils.minComparing(this._items.values, compare, scope, order);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "toArray",
    value: function toArray() {
      return this._items.values.concat();
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "toList",
    value: function toList() {
      return new List_1.default(this.toArray(), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "toSet",
    value: function toSet() {
      return new Set(this._items.values, this.getKey, true);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "asArray",
    value: function asArray() {
      return this.toArray();
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "asList",
    value: function asList() {
      return this.toList();
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "asSet",
    value: function asSet() {
      return this;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "add",
    value: function add(item) {
      return this.trySplice([], [item]) !== undefined;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "addAll",
    value: function addAll(items) {
      var result = this.tryAddAll(items);
      return result !== undefined ? result : [];
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "tryAddAll",
    value: function tryAddAll(items) {
      var spliceResult = this.trySplice([], items);

      if (spliceResult !== undefined) {
        return spliceResult.addedItems;
      }

      return undefined;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "remove",
    value: function remove(item) {
      return this.trySplice([item], []) !== undefined;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "removeItem",
    value: function removeItem(item) {
      this.remove(item);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "removeAll",
    value: function removeAll(items) {
      var result = this.tryRemoveAll(items);
      return result !== undefined ? result : [];
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "tryRemoveAll",
    value: function tryRemoveAll(items) {
      var spliceResult = this.trySplice(items, []);

      if (spliceResult !== undefined) {
        return spliceResult.removedItems;
      }

      return undefined;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "removeItems",
    value: function removeItems(items) {
      this.tryRemoveAll(items);
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "clear",
    value: function clear() {
      if (this._length.get() === 0) {
        return undefined;
      }

      var items = this._items.values.concat();

      this._items.clear();

      this._length.set(0);

      this._clearEvent.trigger({
        sender: this,
        items: items
      });

      this._changeEvent.trigger({
        sender: this
      });

      if (this._ownsItems) {
        ArrayUtils.backEvery(items, index_1.destroy);
      }

      return items;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "splice",
    value: function splice(removedItems, addedItems) {
      var spliceResult = this.trySplice(removedItems, addedItems);
      return spliceResult !== undefined ? spliceResult : {
        addedItems: [],
        removedItems: []
      };
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "trySplice",
    value: function trySplice(removedItems, addedItems) {
      var spliceResult = this._trySplice(removedItems, addedItems);

      if (spliceResult === undefined) {
        return undefined;
      }

      this._spliceEvent.trigger({
        sender: this,
        spliceResult: spliceResult
      });

      this._changeEvent.trigger({
        sender: this
      });

      if (this._ownsItems) {
        ArrayUtils.backEvery(spliceResult.removedItems, index_1.destroy);
      }

      return spliceResult;
    }
  }, {
    key: "_trySplice",
    value: function _trySplice(removedItems, addedItems) {
      var addedItemSet = internal_1.VidSet.fromArray(addedItems, this.getKey);
      removedItems = removedItems.filter(function (item) {
        return !addedItemSet.contains(item);
      });
      removedItems = this._tryRemoveAll(removedItems);
      addedItems = this._tryAddAll(addedItems);

      if (removedItems === undefined && addedItems === undefined) {
        return undefined;
      }

      var spliceResult = {
        removedItems: removedItems || [],
        addedItems: addedItems || []
      };

      this._length.set(this._length.get() + spliceResult.addedItems.length - spliceResult.removedItems.length);

      return spliceResult;
    }
  }, {
    key: "_tryRemoveAll",
    value: function _tryRemoveAll(items) {
      var removedItems = [];

      for (var i = 0, l = items.length; i < l; ++i) {
        var item = items[i];

        if (this._tryRemove(item)) {
          removedItems.push(item);
        }
      }

      if (removedItems.length !== 0) {
        return removedItems;
      }

      return undefined;
    }
  }, {
    key: "_tryRemove",
    value: function _tryRemove(item) {
      return this._items.remove(item) || undefined;
    }
  }, {
    key: "_tryAddAll",
    value: function _tryAddAll(items) {
      var addedItems = [];

      for (var i = 0, l = items.length; i < l; ++i) {
        var item = items[i];

        if (this._tryAdd(item)) {
          addedItems.push(item);
        }
      }

      if (addedItems.length !== 0) {
        return addedItems;
      }

      return undefined;
    }
  }, {
    key: "_tryAdd",
    value: function _tryAdd(item) {
      return this._items.add(item) || undefined;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "detectSplice",
    value: function detectSplice(newItemArray) {
      var removedItems = [];
      var addedItems = [];
      var oldItems = this._items;
      var newItems = internal_1.VidSet.fromArray(newItemArray);
      var oldItemArray = this._items.values;

      for (var i = 0, l = oldItemArray.length; i < l; ++i) {
        var item = oldItemArray[i];

        if (!newItems.contains(item)) {
          removedItems.push(item);
        }
      }

      for (var _i = 0, _l = newItemArray.length; _i < _l; ++_i) {
        var _item = newItemArray[_i];

        if (!oldItems.contains(_item)) {
          addedItems.push(_item);
        }
      }

      if (removedItems.length !== 0 || addedItems.length !== 0) {
        return {
          removedItems: removedItems,
          addedItems: addedItems
        };
      }

      return undefined;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "performSplice",
    value: function performSplice(newItems) {
      var spliceParams = this.detectSplice(newItems);

      if (spliceParams !== undefined) {
        this.trySplice(spliceParams.removedItems, spliceParams.addedItems);
      }
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "equal",
    value: function equal(array) {
      if (this.length.get() !== array.length) {
        return false;
      }

      for (var i = 0, l = array.length; i < l; ++i) {
        if (!this._items.contains(array[i])) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "silent",
    get: function get() {
      return this.changeEvent.dummy;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "length",
    get: function get() {
      return this._length;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "empty",
    get: function get() {
      return this.length.get() === 0;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "items",
    get: function get() {
      return this._items.values;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "first",
    get: function get() {
      var result;

      this._items.every(function (item) {
        result = item;
        return false;
      });

      return result;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "spliceEvent",
    get: function get() {
      return this._spliceEvent;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "clearEvent",
    get: function get() {
      return this._clearEvent;
    }
    /**
     * @inheritDoc
     */

  }, {
    key: "changeEvent",
    get: function get() {
      return this._changeEvent;
    }
  }]);

  return Set;
}(Class_1.default);

exports.default = Set;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/StringUtils.js":
/*!***********************************************!*\
  !*** C:/jwidget/git/main/dist/StringUtils.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseClass = exports.hyphen = exports.camel = exports.capitalize = exports.pad = exports.ellipsis = exports.htmlDecode = exports.htmlEncode = void 0;

var index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");
/**
 * Escapes special HTML symbols.
 * Converts symbols &amp;, &gt;, &lt;, &quot; to `&amp;` `&gt;` `&lt;` `&quot;` correspondingly.
 *
 * @deprecated Use Underscore's _.escape instead.
 */


function htmlEncode(str) {
  return String(str).replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;");
}

exports.htmlEncode = htmlEncode;
/**
 * Unescapes special HTML symbols.
 * Converts sequences `&amp;` `&gt;` `&lt;` `&quot;` to &amp;, &gt;, &lt;, &quot; correspondingly.
 *
 * @deprecated Use Underscore's _.unescape instead.
 */

function htmlDecode(str) {
  return String(str).replace(/&quot;/g, '"').replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&");
}

exports.htmlDecode = htmlDecode;
/**
 * Shortens the string to specified length. If string is short enough, it stays the same.
 * Otherwise it is cutted and `ellipsis` substring is appended so that the resulting string length
 * equals to `length`.
 *
 * @param str Input string.
 * @param length Maximum length of resulting string.
 * @param ellipsis String tail for shortening. Defaults to `...`
 * @returns Result string.
 */

function ellipsis(str, length, ellipsis) {
  str = String(str);

  if (str.length <= length) {
    return str;
  }

  ellipsis = index_1.defn(ellipsis, "...");
  return str.substr(0, length - ellipsis.length) + ellipsis;
}

exports.ellipsis = ellipsis;
/**
 * Prepends string with specified symbol at the beginning to adjust it to specified length.
 * If string is long enough, it stays the same.
 *
 * @param str Input string.
 * @param length Minimum length of resulting string.
 * @param ch Symbol to prepend.
 * @returns Result string.
 */

function pad(str, length, ch) {
  str = String(str);
  var buf = [];
  length -= str.length;

  for (var i = 0; i < length; ++i) {
    buf.push(ch);
  }

  buf.push(str);
  return buf.join("");
}

exports.pad = pad;
/**
 * Capitalizes first symbol.
 *
 *     JW.strings.capitalize("vasya")  // "Vasya"
 */

function capitalize(str) {
  return String(str).charAt(0).toUpperCase() + str.substr(1);
}

exports.capitalize = capitalize;
/**
 * Converts hyphen-style to camelStyle.
 *
 *     JW.strings.camel("i-love-js")  // "iLoveJs"
 */

function camel(str) {
  return String(str).replace(/-([a-z])/ig, _fcamel);
}

exports.camel = camel;
/**
 * Converts camelStyle to hyphen-style.
 *
 *     JW.strings.hyphen("iLoveJs")  // "i-love-js"
 */

function hyphen(str) {
  return String(str).replace(/([A-Z])/g, _fhyphen);
}

exports.hyphen = hyphen;

function parseClass(str) {
  if (index_1.isArray(str)) {
    var result = [];

    for (var i = 0; i < str.length; ++i) {
      result.push.apply(result, parseClass(str[i]));
    }

    return result;
  }

  if (typeof str === "string") {
    str = str.trim();

    if (str === "") {
      return [];
    }

    return str.split(/\s+/);
  }

  return [];
}

exports.parseClass = parseClass;

function _fcamel(a, b) {
  a = a;
  return b.toUpperCase();
}

function _fhyphen(a, b) {
  a = a;
  return "-" + b.toLowerCase();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/Switcher.js":
/*!********************************************!*\
  !*** C:/jwidget/git/main/dist/Switcher.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));
/**
 * Listens source property modification and calls the specified functions.
 */


var Switcher = /*#__PURE__*/function (_Class_1$default) {
  _inherits(Switcher, _Class_1$default);

  var _super = _createSuper(Switcher);

  /**
   * @param source Source property.
   * @param config Configuration.
   */
  function Switcher(source) {
    var _this;

    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Switcher);

    _this = _super.call(this);
    _this.source = source;
    _this._init = config.init;
    _this._done = config.done;
    _this._scope = config.scope || _assertThisInitialized(_this);
    _this._acceptNil = config.acceptNil || false;

    _this._doInit();

    _this.own(source.changeEvent.listen(_this._update, _assertThisInitialized(_this)));

    return _this;
  }

  _createClass(Switcher, [{
    key: "destroyObject",
    value: function destroyObject() {
      this._doDone();

      this._init = null;
      this._done = null;
      this._scope = null;
      this._value = null;

      _get(_getPrototypeOf(Switcher.prototype), "destroyObject", this).call(this);
    }
  }, {
    key: "_update",
    value: function _update() {
      this._doDone();

      this._doInit();
    }
  }, {
    key: "_doInit",
    value: function _doInit() {
      this._value = this.source.get();

      if (this._init && (this._acceptNil || this._value != null)) {
        this._init.call(this._scope, this._value);
      }
    }
  }, {
    key: "_doDone",
    value: function _doDone() {
      if (this._done && (this._acceptNil || this._value != null)) {
        this._done.call(this._scope, this._value);
      }

      this._value = null;
    }
  }]);

  return Switcher;
}(Class_1.default);

exports.default = Switcher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Td2l0Y2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCQSxJQUFBLE9BQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBO0FBRUE7Ozs7O0lBR00sUTs7Ozs7QUFPTDs7OztBQUlBLG9CQUFxQixNQUFyQixFQUF5RTtBQUFBOztBQUFBLFFBQS9CLE1BQStCLHVFQUFGLEVBQUU7O0FBQUE7O0FBQ3hFO0FBRG9CLFVBQUEsTUFBQSxHQUFBLE1BQUE7QUFFcEIsVUFBSyxLQUFMLEdBQWEsTUFBTSxDQUFDLElBQXBCO0FBQ0EsVUFBSyxLQUFMLEdBQWEsTUFBTSxDQUFDLElBQXBCO0FBQ0EsVUFBSyxNQUFMLEdBQWMsTUFBTSxDQUFDLEtBQVAsaUNBQWQ7QUFDQSxVQUFLLFVBQUwsR0FBa0IsTUFBTSxDQUFDLFNBQVAsSUFBb0IsS0FBdEM7O0FBQ0EsVUFBSyxPQUFMOztBQUNBLFVBQUssR0FBTCxDQUFTLE1BQU0sQ0FBQyxXQUFQLENBQW1CLE1BQW5CLENBQTBCLE1BQUssT0FBL0IsZ0NBQVQ7O0FBUHdFO0FBUXhFOzs7O29DQUVzQjtBQUN0QixXQUFLLE9BQUw7O0FBQ0EsV0FBSyxLQUFMLEdBQWEsSUFBYjtBQUNBLFdBQUssS0FBTCxHQUFhLElBQWI7QUFDQSxXQUFLLE1BQUwsR0FBYyxJQUFkO0FBQ0EsV0FBSyxNQUFMLEdBQWMsSUFBZDs7QUFDQTtBQUNBOzs7OEJBRWM7QUFDZCxXQUFLLE9BQUw7O0FBQ0EsV0FBSyxPQUFMO0FBQ0E7Ozs4QkFFYztBQUNkLFdBQUssTUFBTCxHQUFjLEtBQUssTUFBTCxDQUFZLEdBQVosRUFBZDs7QUFDQSxVQUFJLEtBQUssS0FBTCxLQUFlLEtBQUssVUFBTCxJQUFtQixLQUFLLE1BQUwsSUFBZSxJQUFqRCxDQUFKLEVBQTREO0FBQzNELGFBQUssS0FBTCxDQUFXLElBQVgsQ0FBZ0IsS0FBSyxNQUFyQixFQUE2QixLQUFLLE1BQWxDO0FBQ0E7QUFDRDs7OzhCQUVjO0FBQ2QsVUFBSSxLQUFLLEtBQUwsS0FBZSxLQUFLLFVBQUwsSUFBbUIsS0FBSyxNQUFMLElBQWUsSUFBakQsQ0FBSixFQUE0RDtBQUMzRCxhQUFLLEtBQUwsQ0FBVyxJQUFYLENBQWdCLEtBQUssTUFBckIsRUFBNkIsS0FBSyxNQUFsQztBQUNBOztBQUNELFdBQUssTUFBTCxHQUFjLElBQWQ7QUFDQTs7OztFQS9Dd0IsT0FBQSxDQUFBLE87O0FBb0YxQixPQUFBLENBQUEsT0FBQSxHQUFlLFFBQWYiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgQmluZGFibGUgZnJvbSAnLi9CaW5kYWJsZSc7XG5pbXBvcnQgQ2xhc3MgZnJvbSAnLi9DbGFzcyc7XG5cbi8qKlxuICogTGlzdGVucyBzb3VyY2UgcHJvcGVydHkgbW9kaWZpY2F0aW9uIGFuZCBjYWxscyB0aGUgc3BlY2lmaWVkIGZ1bmN0aW9ucy5cbiAqL1xuY2xhc3MgU3dpdGNoZXI8VD4gZXh0ZW5kcyBDbGFzcyB7XG5cdHByaXZhdGUgX2luaXQ6IFN3aXRjaGVyLkNhbGxiYWNrPFQ+O1xuXHRwcml2YXRlIF9kb25lOiBTd2l0Y2hlci5DYWxsYmFjazxUPjtcblx0cHJpdmF0ZSBfc2NvcGU6IGFueTtcblx0cHJpdmF0ZSBfYWNjZXB0TmlsOiBib29sZWFuO1xuXHRwcml2YXRlIF92YWx1ZTogVDtcblxuXHQvKipcblx0ICogQHBhcmFtIHNvdXJjZSBTb3VyY2UgcHJvcGVydHkuXG5cdCAqIEBwYXJhbSBjb25maWcgQ29uZmlndXJhdGlvbi5cblx0ICovXG5cdGNvbnN0cnVjdG9yKHJlYWRvbmx5IHNvdXJjZTogQmluZGFibGU8VD4sIGNvbmZpZzogU3dpdGNoZXIuQ29uZmlnPFQ+ID0ge30pIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMuX2luaXQgPSBjb25maWcuaW5pdDtcblx0XHR0aGlzLl9kb25lID0gY29uZmlnLmRvbmU7XG5cdFx0dGhpcy5fc2NvcGUgPSBjb25maWcuc2NvcGUgfHwgdGhpcztcblx0XHR0aGlzLl9hY2NlcHROaWwgPSBjb25maWcuYWNjZXB0TmlsIHx8IGZhbHNlO1xuXHRcdHRoaXMuX2RvSW5pdCgpO1xuXHRcdHRoaXMub3duKHNvdXJjZS5jaGFuZ2VFdmVudC5saXN0ZW4odGhpcy5fdXBkYXRlLCB0aGlzKSk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgZGVzdHJveU9iamVjdCgpIHtcblx0XHR0aGlzLl9kb0RvbmUoKTtcblx0XHR0aGlzLl9pbml0ID0gbnVsbDtcblx0XHR0aGlzLl9kb25lID0gbnVsbDtcblx0XHR0aGlzLl9zY29wZSA9IG51bGw7XG5cdFx0dGhpcy5fdmFsdWUgPSBudWxsO1xuXHRcdHN1cGVyLmRlc3Ryb3lPYmplY3QoKTtcblx0fVxuXG5cdHByaXZhdGUgX3VwZGF0ZSgpIHtcblx0XHR0aGlzLl9kb0RvbmUoKTtcblx0XHR0aGlzLl9kb0luaXQoKTtcblx0fVxuXG5cdHByaXZhdGUgX2RvSW5pdCgpIHtcblx0XHR0aGlzLl92YWx1ZSA9IHRoaXMuc291cmNlLmdldCgpO1xuXHRcdGlmICh0aGlzLl9pbml0ICYmICh0aGlzLl9hY2NlcHROaWwgfHwgdGhpcy5fdmFsdWUgIT0gbnVsbCkpIHtcblx0XHRcdHRoaXMuX2luaXQuY2FsbCh0aGlzLl9zY29wZSwgdGhpcy5fdmFsdWUpO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgX2RvRG9uZSgpIHtcblx0XHRpZiAodGhpcy5fZG9uZSAmJiAodGhpcy5fYWNjZXB0TmlsIHx8IHRoaXMuX3ZhbHVlICE9IG51bGwpKSB7XG5cdFx0XHR0aGlzLl9kb25lLmNhbGwodGhpcy5fc2NvcGUsIHRoaXMuX3ZhbHVlKTtcblx0XHR9XG5cdFx0dGhpcy5fdmFsdWUgPSBudWxsO1xuXHR9XG59XG5cbm5hbWVzcGFjZSBTd2l0Y2hlciB7XG5cdC8qKlxuXHQgKiBTd2l0Y2hlciBjYWxsYmFjay5cblx0ICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQ2FsbGJhY2s8VD4ge1xuXHRcdCh2YWx1ZTogVCk6IGFueTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb25maWd1cmF0aW9uIG9mIFN3aXRjaGVyLlxuXHQgKi9cblx0ZXhwb3J0IGludGVyZmFjZSBDb25maWc8VD4ge1xuXHRcdC8qKlxuXHRcdCAqIFZhbHVlIGluaXRpYWxpemF0aW9uIGNhbGxiYWNrLlxuXHRcdCAqL1xuXHRcdHJlYWRvbmx5IGluaXQ/OiBDYWxsYmFjazxUPjtcblxuXHRcdC8qKlxuXHRcdCAqIFZhbHVlIHJlbGVhc2luZyBjYWxsYmFjay5cblx0XHQgKi9cblx0XHRyZWFkb25seSBkb25lPzogQ2FsbGJhY2s8VD47XG5cblx0XHQvKipcblx0XHQgKiBgaW5pdGAgYW5kIGBkb25lYCBjYWxsIHNjb3BlLiBEZWZhdWx0cyB0byBzd2l0Y2hlciBpdHNlbGYuXG5cdFx0ICovXG5cdFx0cmVhZG9ubHkgc2NvcGU/OiBhbnk7XG5cblx0XHQvKipcblx0XHQgKiBTZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0aGUgY2FsbGJhY2tzIHRvIGJlIGNhbGxlZCBldmVuIGlmIG9uZSBvZiBzb3VyY2UgdmFsdWVzIGlzIG51bGwuXG5cdFx0ICovXG5cdFx0cmVhZG9ubHkgYWNjZXB0TmlsPzogYm9vbGVhbjtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBTd2l0Y2hlcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "../../main/dist/component/ComponentBindable.js":
/*!***************************************************************!*\
  !*** C:/jwidget/git/main/dist/component/ComponentBindable.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Class_1 = __importDefault(__webpack_require__(/*! ../Class */ "../../main/dist/Class.js"));

var Switcher_1 = __importDefault(__webpack_require__(/*! ../Switcher */ "../../main/dist/Switcher.js"));
/**
 * @hidden
 */


var ComponentBindable = /*#__PURE__*/function (_Class_1$default) {
  _inherits(ComponentBindable, _Class_1$default);

  var _super = _createSuper(ComponentBindable);

  function ComponentBindable(parent, component, id) {
    var _this;

    _classCallCheck(this, ComponentBindable);

    _this = _super.call(this);
    _this.parent = parent;
    _this.id = id;
    parent._bindables[_this.iid] = _assertThisInitialized(_this);

    _this.own(new Switcher_1.default(component, {
      init: function init(child) {
        _this.parent.children.put(_this.id, child);
      },
      done: function done() {
        _this.parent.children.remove(_this.id);
      }
    }));

    return _this;
  }

  _createClass(ComponentBindable, [{
    key: "destroy",
    value: function destroy() {
      delete this.parent._bindables[this.iid];

      _get(_getPrototypeOf(ComponentBindable.prototype), "destroy", this).call(this);
    }
  }]);

  return ComponentBindable;
}(Class_1.default);

exports.default = ComponentBindable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnQvQ29tcG9uZW50QmluZGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QkEsSUFBQSxPQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxVQUFBLENBQUEsQ0FBQTs7QUFFQSxJQUFBLFVBQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQSxDQUFBO0FBRUE7Ozs7O0lBR3FCLGlCOzs7OztBQUNwQiw2QkFBb0IsTUFBcEIsRUFBdUMsU0FBdkMsRUFBK0UsRUFBL0UsRUFBeUY7QUFBQTs7QUFBQTs7QUFDeEY7QUFEbUIsVUFBQSxNQUFBLEdBQUEsTUFBQTtBQUEyRCxVQUFBLEVBQUEsR0FBQSxFQUFBO0FBRTlFLElBQUEsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsTUFBSyxHQUF2Qjs7QUFFQSxVQUFLLEdBQUwsQ0FBUyxJQUFJLFVBQUEsQ0FBQSxPQUFKLENBQXdCLFNBQXhCLEVBQW1DO0FBQzNDLE1BQUEsSUFBSSxFQUFFLGNBQUEsS0FBSyxFQUFHO0FBQ2IsY0FBSyxNQUFMLENBQVksUUFBWixDQUFxQixHQUFyQixDQUF5QixNQUFLLEVBQTlCLEVBQWtDLEtBQWxDO0FBQ0EsT0FIMEM7QUFJM0MsTUFBQSxJQUFJLEVBQUUsZ0JBQUs7QUFDVixjQUFLLE1BQUwsQ0FBWSxRQUFaLENBQXFCLE1BQXJCLENBQTRCLE1BQUssRUFBakM7QUFDQTtBQU4wQyxLQUFuQyxDQUFUOztBQUp3RjtBQVl4Rjs7Ozs4QkFFTTtBQUNOLGFBQU8sS0FBSyxNQUFMLENBQVksVUFBWixDQUF1QixLQUFLLEdBQTVCLENBQVA7O0FBQ0E7QUFDQTs7OztFQWxCNkMsT0FBQSxDQUFBLE87O0FBQS9DLE9BQUEsQ0FBQSxPQUFBLEdBQUEsaUJBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgQmluZGFibGUgZnJvbSAnLi4vQmluZGFibGUnO1xuaW1wb3J0IENsYXNzIGZyb20gJy4uL0NsYXNzJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vQ29tcG9uZW50JztcbmltcG9ydCBTd2l0Y2hlciBmcm9tICcuLi9Td2l0Y2hlcic7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRCaW5kYWJsZSBleHRlbmRzIENsYXNzIHtcblx0Y29uc3RydWN0b3IocHJpdmF0ZSBwYXJlbnQ6IENvbXBvbmVudCwgY29tcG9uZW50OiBCaW5kYWJsZTxDb21wb25lbnQ+LCBwcml2YXRlIGlkOiBzdHJpbmcpIHtcblx0XHRzdXBlcigpO1xuXHRcdHBhcmVudC5fYmluZGFibGVzW3RoaXMuaWlkXSA9IHRoaXM7XG5cblx0XHR0aGlzLm93bihuZXcgU3dpdGNoZXI8Q29tcG9uZW50Pihjb21wb25lbnQsIHtcblx0XHRcdGluaXQ6IGNoaWxkID0+IHtcblx0XHRcdFx0dGhpcy5wYXJlbnQuY2hpbGRyZW4ucHV0KHRoaXMuaWQsIGNoaWxkKTtcblx0XHRcdH0sXG5cdFx0XHRkb25lOiAoKSA9PiB7XG5cdFx0XHRcdHRoaXMucGFyZW50LmNoaWxkcmVuLnJlbW92ZSh0aGlzLmlkKTtcblx0XHRcdH1cblx0XHR9KSk7XG5cdH1cblxuXHRkZXN0cm95KCkge1xuXHRcdGRlbGV0ZSB0aGlzLnBhcmVudC5fYmluZGFibGVzW3RoaXMuaWlkXTtcblx0XHRzdXBlci5kZXN0cm95KCk7XG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "../../main/dist/component/ComponentChild.js":
/*!************************************************************!*\
  !*** C:/jwidget/git/main/dist/component/ComponentChild.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var DomUtils = __importStar(__webpack_require__(/*! ../DomUtils */ "../../main/dist/DomUtils.js"));

var index_1 = __webpack_require__(/*! ../index */ "../../main/dist/index.js");
/**
 * @hidden
 */


var ComponentChild = /*#__PURE__*/function () {
  function ComponentChild(parent, child) {
    _classCallCheck(this, ComponentChild);

    this.parent = parent;
    this.child = child;
    this.iid = index_1.newIid();
  }

  _createClass(ComponentChild, [{
    key: "attach",
    value: function attach(name) {
      // JW.assertNull(this.name);
      this._name = name;
      this._el = this.parent._elements[name];

      this.parent._initChild(this.child);

      this.parent._elements[name] = this.child.el;
      DomUtils.replace(this._el[0], this.child.el[0], true);

      this.child._afterAppend();
    }
  }, {
    key: "detach",
    value: function detach() {
      // JW.assertString(this.name, JW.isNotBlank);
      if (this.parent._elements[this._name] === this.child.el) {
        this.parent._elements[this._name] = this._el;
      }

      DomUtils.replace(this.child.el[0], this._el[0]);

      this.parent._doneChild(this.child);

      this._el = null;
      this._name = null;
    }
  }]);

  return ComponentChild;
}();

exports.default = ComponentChild;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnQvQ29tcG9uZW50Q2hpbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCQSxJQUFBLFFBQUEsR0FBQSxZQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxVQUFBLENBQUE7QUFFQTs7Ozs7SUFHcUIsYztBQU1wQiwwQkFBb0IsTUFBcEIsRUFBK0MsS0FBL0MsRUFBK0Q7QUFBQTs7QUFBM0MsU0FBQSxNQUFBLEdBQUEsTUFBQTtBQUEyQixTQUFBLEtBQUEsR0FBQSxLQUFBO0FBRnRDLFNBQUEsR0FBQSxHQUFNLE9BQUEsQ0FBQSxNQUFBLEVBQU47QUFFMEQ7Ozs7MkJBRTVELEksRUFBWTtBQUNsQjtBQUNBLFdBQUssS0FBTCxHQUFhLElBQWI7QUFDQSxXQUFLLEdBQUwsR0FBVyxLQUFLLE1BQUwsQ0FBWSxTQUFaLENBQXNCLElBQXRCLENBQVg7O0FBQ0EsV0FBSyxNQUFMLENBQVksVUFBWixDQUF1QixLQUFLLEtBQTVCOztBQUNBLFdBQUssTUFBTCxDQUFZLFNBQVosQ0FBc0IsSUFBdEIsSUFBOEIsS0FBSyxLQUFMLENBQVcsRUFBekM7QUFDQSxNQUFBLFFBQVEsQ0FBQyxPQUFULENBQWlCLEtBQUssR0FBTCxDQUFTLENBQVQsQ0FBakIsRUFBOEIsS0FBSyxLQUFMLENBQVcsRUFBWCxDQUFjLENBQWQsQ0FBOUIsRUFBZ0QsSUFBaEQ7O0FBQ0EsV0FBSyxLQUFMLENBQVcsWUFBWDtBQUNBOzs7NkJBRUs7QUFDTDtBQUNBLFVBQUksS0FBSyxNQUFMLENBQVksU0FBWixDQUFzQixLQUFLLEtBQTNCLE1BQXNDLEtBQUssS0FBTCxDQUFXLEVBQXJELEVBQXlEO0FBQ3hELGFBQUssTUFBTCxDQUFZLFNBQVosQ0FBc0IsS0FBSyxLQUEzQixJQUFvQyxLQUFLLEdBQXpDO0FBQ0E7O0FBQ0QsTUFBQSxRQUFRLENBQUMsT0FBVCxDQUFpQixLQUFLLEtBQUwsQ0FBVyxFQUFYLENBQWMsQ0FBZCxDQUFqQixFQUFtQyxLQUFLLEdBQUwsQ0FBUyxDQUFULENBQW5DOztBQUNBLFdBQUssTUFBTCxDQUFZLFVBQVosQ0FBdUIsS0FBSyxLQUE1Qjs7QUFDQSxXQUFLLEdBQUwsR0FBVyxJQUFYO0FBQ0EsV0FBSyxLQUFMLEdBQWEsSUFBYjtBQUNBOzs7Ozs7QUEzQkYsT0FBQSxDQUFBLE9BQUEsR0FBQSxjQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9Db21wb25lbnQnO1xuaW1wb3J0ICogYXMgRG9tVXRpbHMgZnJvbSAnLi4vRG9tVXRpbHMnO1xuaW1wb3J0IElkZW50aWZpYWJsZSBmcm9tICcuLi9JZGVudGlmaWFibGUnO1xuaW1wb3J0IHtuZXdJaWR9IGZyb20gJy4uL2luZGV4JztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvbmVudENoaWxkIGltcGxlbWVudHMgSWRlbnRpZmlhYmxlIHtcblx0cHJpdmF0ZSBfbmFtZTogc3RyaW5nO1xuXHRwcml2YXRlIF9lbDogSlF1ZXJ5O1xuXG5cdHJlYWRvbmx5IGlpZCA9IG5ld0lpZCgpO1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcGFyZW50OiBDb21wb25lbnQsIHByaXZhdGUgY2hpbGQ6IENvbXBvbmVudCkge31cblxuXHRhdHRhY2gobmFtZTogc3RyaW5nKSB7XG5cdFx0Ly8gSlcuYXNzZXJ0TnVsbCh0aGlzLm5hbWUpO1xuXHRcdHRoaXMuX25hbWUgPSBuYW1lO1xuXHRcdHRoaXMuX2VsID0gdGhpcy5wYXJlbnQuX2VsZW1lbnRzW25hbWVdO1xuXHRcdHRoaXMucGFyZW50Ll9pbml0Q2hpbGQodGhpcy5jaGlsZCk7XG5cdFx0dGhpcy5wYXJlbnQuX2VsZW1lbnRzW25hbWVdID0gdGhpcy5jaGlsZC5lbDtcblx0XHREb21VdGlscy5yZXBsYWNlKHRoaXMuX2VsWzBdLCB0aGlzLmNoaWxkLmVsWzBdLCB0cnVlKTtcblx0XHR0aGlzLmNoaWxkLl9hZnRlckFwcGVuZCgpO1xuXHR9XG5cblx0ZGV0YWNoKCkge1xuXHRcdC8vIEpXLmFzc2VydFN0cmluZyh0aGlzLm5hbWUsIEpXLmlzTm90QmxhbmspO1xuXHRcdGlmICh0aGlzLnBhcmVudC5fZWxlbWVudHNbdGhpcy5fbmFtZV0gPT09IHRoaXMuY2hpbGQuZWwpIHtcblx0XHRcdHRoaXMucGFyZW50Ll9lbGVtZW50c1t0aGlzLl9uYW1lXSA9IHRoaXMuX2VsO1xuXHRcdH1cblx0XHREb21VdGlscy5yZXBsYWNlKHRoaXMuY2hpbGQuZWxbMF0sIHRoaXMuX2VsWzBdKTtcblx0XHR0aGlzLnBhcmVudC5fZG9uZUNoaWxkKHRoaXMuY2hpbGQpO1xuXHRcdHRoaXMuX2VsID0gbnVsbDtcblx0XHR0aGlzLl9uYW1lID0gbnVsbDtcblx0fVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==

/***/ }),

/***/ "../../main/dist/component/ComponentChildInserter.js":
/*!********************************************************************!*\
  !*** C:/jwidget/git/main/dist/component/ComponentChildInserter.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var DictionaryUtils = __importStar(__webpack_require__(/*! ../DictionaryUtils */ "../../main/dist/DictionaryUtils.js"));

var index_1 = __webpack_require__(/*! ../index */ "../../main/dist/index.js");

var Map_1 = __importDefault(__webpack_require__(/*! ../Map */ "../../main/dist/Map.js"));
/**
 * @hidden
 */


var ComponentChildInserter = /*#__PURE__*/function (_Map_1$default) {
  _inherits(ComponentChildInserter, _Map_1$default);

  var _super = _createSuper(ComponentChildInserter);

  function ComponentChildInserter() {
    _classCallCheck(this, ComponentChildInserter);

    return _super.call(this, index_1.iidStr, true);
  }

  _createClass(ComponentChildInserter, [{
    key: "tryPut",
    value: function tryPut(key, item) {
      var result = _get(_getPrototypeOf(ComponentChildInserter.prototype), "tryPut", this).call(this, key, item);

      if (result === undefined) {
        return undefined;
      }

      var removedItem = result.value;

      if (removedItem) {
        removedItem.detach();
      }

      item.attach(key);
      return result;
    }
  }, {
    key: "trySetKey",
    value: function trySetKey(oldKey, newKey) {
      var item = _get(_getPrototypeOf(ComponentChildInserter.prototype), "trySetKey", this).call(this, oldKey, newKey);

      if (item === undefined) {
        return undefined;
      }

      item.detach();
      item.attach(newKey);
      return item;
    }
  }, {
    key: "tryRemove",
    value: function tryRemove(key) {
      var item = _get(_getPrototypeOf(ComponentChildInserter.prototype), "tryRemove", this).call(this, key);

      if (item === undefined) {
        return undefined;
      }

      item.detach();
      return item;
    }
  }, {
    key: "trySplice",
    value: function trySplice(removedKeys, updatedItems) {
      var spliceResult = _get(_getPrototypeOf(ComponentChildInserter.prototype), "trySplice", this).call(this, removedKeys, updatedItems);

      if (spliceResult === undefined) {
        return undefined;
      }

      DictionaryUtils.forEach(spliceResult.removedItems, this._detach, this);
      DictionaryUtils.forEach(spliceResult.addedItems, this._attach, this);
      return spliceResult;
    }
  }, {
    key: "clear",
    value: function clear() {
      var items = _get(_getPrototypeOf(ComponentChildInserter.prototype), "clear", this).call(this);

      if (items === undefined) {
        return undefined;
      }

      DictionaryUtils.forEach(items, this._detach, this);
      return items;
    }
  }, {
    key: "tryReindex",
    value: function tryReindex(keyMap) {
      var result = _get(_getPrototypeOf(ComponentChildInserter.prototype), "tryReindex", this).call(this, keyMap);

      if (result === undefined) {
        return undefined;
      }

      for (var oldKey in keyMap) {
        var newKey = keyMap[oldKey];
        var item = this.get(newKey);
        item.detach();
        item.attach(newKey);
      }

      return result;
    }
  }, {
    key: "_attach",
    value: function _attach(item, key) {
      item.attach(key);
    }
  }, {
    key: "_detach",
    value: function _detach(item) {
      item.detach();
    }
  }]);

  return ComponentChildInserter;
}(Map_1.default);

exports.default = ComponentChildInserter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnQvQ29tcG9uZW50Q2hpbGRJbnNlcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QkEsSUFBQSxlQUFBLEdBQUEsWUFBQSxDQUFBLE9BQUEsQ0FBQSxvQkFBQSxDQUFBLENBQUE7O0FBRUEsSUFBQSxPQUFBLEdBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQTs7QUFDQSxJQUFBLEtBQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQSxDQUFBO0FBSUE7Ozs7O0lBR3FCLHNCOzs7OztBQUNwQixvQ0FBQTtBQUFBOztBQUFBLDZCQUNPLE9BQUEsQ0FBQSxNQURQLEVBQ2UsSUFEZjtBQUVDOzs7OzJCQUVNLEcsRUFBYSxJLEVBQW9CO0FBQ3ZDLFVBQUksTUFBTSxzRkFBZ0IsR0FBaEIsRUFBcUIsSUFBckIsQ0FBVjs7QUFDQSxVQUFJLE1BQU0sS0FBSyxTQUFmLEVBQTBCO0FBQ3pCLGVBQU8sU0FBUDtBQUNBOztBQUNELFVBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxLQUF6Qjs7QUFDQSxVQUFJLFdBQUosRUFBaUI7QUFDaEIsUUFBQSxXQUFXLENBQUMsTUFBWjtBQUNBOztBQUNELE1BQUEsSUFBSSxDQUFDLE1BQUwsQ0FBWSxHQUFaO0FBQ0EsYUFBTyxNQUFQO0FBQ0E7Ozs4QkFFUyxNLEVBQWdCLE0sRUFBYztBQUN2QyxVQUFJLElBQUkseUZBQW1CLE1BQW5CLEVBQTJCLE1BQTNCLENBQVI7O0FBQ0EsVUFBSSxJQUFJLEtBQUssU0FBYixFQUF3QjtBQUN2QixlQUFPLFNBQVA7QUFDQTs7QUFDRCxNQUFBLElBQUksQ0FBQyxNQUFMO0FBQ0EsTUFBQSxJQUFJLENBQUMsTUFBTCxDQUFZLE1BQVo7QUFDQSxhQUFPLElBQVA7QUFDQTs7OzhCQUVTLEcsRUFBVztBQUNwQixVQUFJLElBQUkseUZBQW1CLEdBQW5CLENBQVI7O0FBQ0EsVUFBSSxJQUFJLEtBQUssU0FBYixFQUF3QjtBQUN2QixlQUFPLFNBQVA7QUFDQTs7QUFDRCxNQUFBLElBQUksQ0FBQyxNQUFMO0FBQ0EsYUFBTyxJQUFQO0FBQ0E7Ozs4QkFFUyxXLEVBQXVCLFksRUFBd0M7QUFDeEUsVUFBSSxZQUFZLHlGQUFtQixXQUFuQixFQUFnQyxZQUFoQyxDQUFoQjs7QUFDQSxVQUFJLFlBQVksS0FBSyxTQUFyQixFQUFnQztBQUMvQixlQUFPLFNBQVA7QUFDQTs7QUFDRCxNQUFBLGVBQWUsQ0FBQyxPQUFoQixDQUF3QixZQUFZLENBQUMsWUFBckMsRUFBbUQsS0FBSyxPQUF4RCxFQUFpRSxJQUFqRTtBQUNBLE1BQUEsZUFBZSxDQUFDLE9BQWhCLENBQXdCLFlBQVksQ0FBQyxVQUFyQyxFQUFpRCxLQUFLLE9BQXRELEVBQStELElBQS9EO0FBQ0EsYUFBTyxZQUFQO0FBQ0E7Ozs0QkFFSTtBQUNKLFVBQUksS0FBSyxvRkFBVDs7QUFDQSxVQUFJLEtBQUssS0FBSyxTQUFkLEVBQXlCO0FBQ3hCLGVBQU8sU0FBUDtBQUNBOztBQUNELE1BQUEsZUFBZSxDQUFDLE9BQWhCLENBQXdCLEtBQXhCLEVBQStCLEtBQUssT0FBcEMsRUFBNkMsSUFBN0M7QUFDQSxhQUFPLEtBQVA7QUFDQTs7OytCQUVVLE0sRUFBMEI7QUFDcEMsVUFBSSxNQUFNLDBGQUFvQixNQUFwQixDQUFWOztBQUNBLFVBQUksTUFBTSxLQUFLLFNBQWYsRUFBMEI7QUFDekIsZUFBTyxTQUFQO0FBQ0E7O0FBQ0QsV0FBSyxJQUFJLE1BQVQsSUFBbUIsTUFBbkIsRUFBMkI7QUFDMUIsWUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQUQsQ0FBbkI7QUFDQSxZQUFJLElBQUksR0FBRyxLQUFLLEdBQUwsQ0FBUyxNQUFULENBQVg7QUFDQSxRQUFBLElBQUksQ0FBQyxNQUFMO0FBQ0EsUUFBQSxJQUFJLENBQUMsTUFBTCxDQUFZLE1BQVo7QUFDQTs7QUFDRCxhQUFPLE1BQVA7QUFDQTs7OzRCQUVPLEksRUFBc0IsRyxFQUFXO0FBQ3hDLE1BQUEsSUFBSSxDQUFDLE1BQUwsQ0FBWSxHQUFaO0FBQ0E7Ozs0QkFFTyxJLEVBQW9CO0FBQzNCLE1BQUEsSUFBSSxDQUFDLE1BQUw7QUFDQTs7OztFQTVFa0QsS0FBQSxDQUFBLE87O0FBQXBELE9BQUEsQ0FBQSxPQUFBLEdBQUEsc0JBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgRGljdGlvbmFyeSBmcm9tICcuLi9EaWN0aW9uYXJ5JztcbmltcG9ydCAqIGFzIERpY3Rpb25hcnlVdGlscyBmcm9tICcuLi9EaWN0aW9uYXJ5VXRpbHMnO1xuaW1wb3J0IElNYXAgZnJvbSAnLi4vSU1hcCc7XG5pbXBvcnQge2lpZFN0cn0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IE1hcCBmcm9tICcuLi9NYXAnO1xuaW1wb3J0IFNvbWUgZnJvbSAnLi4vU29tZSc7XG5pbXBvcnQgQ29tcG9uZW50Q2hpbGQgZnJvbSAnLi9Db21wb25lbnRDaGlsZCc7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRDaGlsZEluc2VydGVyIGV4dGVuZHMgTWFwPENvbXBvbmVudENoaWxkPiB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKGlpZFN0ciwgdHJ1ZSk7XG5cdH1cblxuXHR0cnlQdXQoa2V5OiBzdHJpbmcsIGl0ZW06IENvbXBvbmVudENoaWxkKTogU29tZTxDb21wb25lbnRDaGlsZD4ge1xuXHRcdHZhciByZXN1bHQgPSBzdXBlci50cnlQdXQoa2V5LCBpdGVtKTtcblx0XHRpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHZhciByZW1vdmVkSXRlbSA9IHJlc3VsdC52YWx1ZTtcblx0XHRpZiAocmVtb3ZlZEl0ZW0pIHtcblx0XHRcdHJlbW92ZWRJdGVtLmRldGFjaCgpO1xuXHRcdH1cblx0XHRpdGVtLmF0dGFjaChrZXkpO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHR0cnlTZXRLZXkob2xkS2V5OiBzdHJpbmcsIG5ld0tleTogc3RyaW5nKTogQ29tcG9uZW50Q2hpbGQge1xuXHRcdHZhciBpdGVtID0gc3VwZXIudHJ5U2V0S2V5KG9sZEtleSwgbmV3S2V5KTtcblx0XHRpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpdGVtLmRldGFjaCgpO1xuXHRcdGl0ZW0uYXR0YWNoKG5ld0tleSk7XG5cdFx0cmV0dXJuIGl0ZW07XG5cdH1cblxuXHR0cnlSZW1vdmUoa2V5OiBzdHJpbmcpOiBDb21wb25lbnRDaGlsZCB7XG5cdFx0dmFyIGl0ZW0gPSBzdXBlci50cnlSZW1vdmUoa2V5KTtcblx0XHRpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpdGVtLmRldGFjaCgpO1xuXHRcdHJldHVybiBpdGVtO1xuXHR9XG5cblx0dHJ5U3BsaWNlKHJlbW92ZWRLZXlzOiBzdHJpbmdbXSwgdXBkYXRlZEl0ZW1zOiBEaWN0aW9uYXJ5PENvbXBvbmVudENoaWxkPik6IElNYXAuU3BsaWNlUmVzdWx0PENvbXBvbmVudENoaWxkPiB7XG5cdFx0dmFyIHNwbGljZVJlc3VsdCA9IHN1cGVyLnRyeVNwbGljZShyZW1vdmVkS2V5cywgdXBkYXRlZEl0ZW1zKTtcblx0XHRpZiAoc3BsaWNlUmVzdWx0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdERpY3Rpb25hcnlVdGlscy5mb3JFYWNoKHNwbGljZVJlc3VsdC5yZW1vdmVkSXRlbXMsIHRoaXMuX2RldGFjaCwgdGhpcyk7XG5cdFx0RGljdGlvbmFyeVV0aWxzLmZvckVhY2goc3BsaWNlUmVzdWx0LmFkZGVkSXRlbXMsIHRoaXMuX2F0dGFjaCwgdGhpcyk7XG5cdFx0cmV0dXJuIHNwbGljZVJlc3VsdDtcblx0fVxuXG5cdGNsZWFyKCk6IERpY3Rpb25hcnk8Q29tcG9uZW50Q2hpbGQ+IHtcblx0XHR2YXIgaXRlbXMgPSBzdXBlci5jbGVhcigpO1xuXHRcdGlmIChpdGVtcyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHREaWN0aW9uYXJ5VXRpbHMuZm9yRWFjaChpdGVtcywgdGhpcy5fZGV0YWNoLCB0aGlzKTtcblx0XHRyZXR1cm4gaXRlbXM7XG5cdH1cblxuXHR0cnlSZWluZGV4KGtleU1hcDogRGljdGlvbmFyeTxzdHJpbmc+KTogRGljdGlvbmFyeTxzdHJpbmc+IHtcblx0XHR2YXIgcmVzdWx0ID0gc3VwZXIudHJ5UmVpbmRleChrZXlNYXApO1xuXHRcdGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICh2YXIgb2xkS2V5IGluIGtleU1hcCkge1xuXHRcdFx0dmFyIG5ld0tleSA9IGtleU1hcFtvbGRLZXldO1xuXHRcdFx0dmFyIGl0ZW0gPSB0aGlzLmdldChuZXdLZXkpO1xuXHRcdFx0aXRlbS5kZXRhY2goKTtcblx0XHRcdGl0ZW0uYXR0YWNoKG5ld0tleSk7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRfYXR0YWNoKGl0ZW06IENvbXBvbmVudENoaWxkLCBrZXk6IHN0cmluZykge1xuXHRcdGl0ZW0uYXR0YWNoKGtleSk7XG5cdH1cblxuXHRfZGV0YWNoKGl0ZW06IENvbXBvbmVudENoaWxkKSB7XG5cdFx0aXRlbS5kZXRhY2goKTtcblx0fVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==

/***/ }),

/***/ "../../main/dist/component/ComponentChildren.js":
/*!***************************************************************!*\
  !*** C:/jwidget/git/main/dist/component/ComponentChildren.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var DictionaryUtils = __importStar(__webpack_require__(/*! ../DictionaryUtils */ "../../main/dist/DictionaryUtils.js"));

var index_1 = __webpack_require__(/*! ../index */ "../../main/dist/index.js");

var Map_1 = __importDefault(__webpack_require__(/*! ../Map */ "../../main/dist/Map.js"));

var ComponentChild_1 = __importDefault(__webpack_require__(/*! ./ComponentChild */ "../../main/dist/component/ComponentChild.js"));

var ComponentChildInserter_1 = __importDefault(__webpack_require__(/*! ./ComponentChildInserter */ "../../main/dist/component/ComponentChildInserter.js"));
/**
 * @hidden
 */


var ComponentChildren = /*#__PURE__*/function (_Map_1$default) {
  _inherits(ComponentChildren, _Map_1$default);

  var _super = _createSuper(ComponentChildren);

  function ComponentChildren(component) {
    var _this;

    _classCallCheck(this, ComponentChildren);

    _this = _super.call(this, index_1.iidStr, true);
    _this.component = component;
    _this.target = new ComponentChildInserter_1.default();
    return _this;
  }

  _createClass(ComponentChildren, [{
    key: "unrender",
    value: function unrender() {
      this.target.destroy();
    }
  }, {
    key: "tryPut",
    value: function tryPut(key, item) {
      var result = _get(_getPrototypeOf(ComponentChildren.prototype), "tryPut", this).call(this, key, item);

      if (result === undefined) {
        return undefined;
      }

      var child = new ComponentChild_1.default(this.component, item);
      this.target.tryPut(key, child);
      return result;
    }
  }, {
    key: "trySetKey",
    value: function trySetKey(oldKey, newKey) {
      var item = _get(_getPrototypeOf(ComponentChildren.prototype), "trySetKey", this).call(this, oldKey, newKey);

      if (item === undefined) {
        return undefined;
      }

      this.target.trySetKey(oldKey, newKey);
      return item;
    }
  }, {
    key: "tryRemove",
    value: function tryRemove(key) {
      var item = _get(_getPrototypeOf(ComponentChildren.prototype), "tryRemove", this).call(this, key);

      if (item === undefined) {
        return undefined;
      }

      this.target.tryRemove(key);
      return item;
    }
  }, {
    key: "trySplice",
    value: function trySplice(removedKeys, updatedItems) {
      var _this2 = this;

      var spliceResult = _get(_getPrototypeOf(ComponentChildren.prototype), "trySplice", this).call(this, removedKeys, updatedItems);

      if (spliceResult === undefined) {
        return undefined;
      }

      var removedItems = spliceResult.removedItems;
      var addedItems = spliceResult.addedItems;
      var children = DictionaryUtils.map(addedItems, function (item) {
        return new ComponentChild_1.default(_this2.component, item);
      }, this);
      this.target.trySplice(DictionaryUtils.getRemovedKeys(removedItems, addedItems), children);
      return spliceResult;
    }
  }, {
    key: "clear",
    value: function clear() {
      var items = _get(_getPrototypeOf(ComponentChildren.prototype), "clear", this).call(this);

      if (items === undefined) {
        return undefined;
      }

      this.target.clear();
      return items;
    }
  }, {
    key: "tryReindex",
    value: function tryReindex(keyMap) {
      var result = _get(_getPrototypeOf(ComponentChildren.prototype), "tryReindex", this).call(this, keyMap);

      if (result === undefined) {
        return undefined;
      }

      this.target.tryReindex(keyMap);
      return result;
    }
  }]);

  return ComponentChildren;
}(Map_1.default);

exports.default = ComponentChildren;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnQvQ29tcG9uZW50Q2hpbGRyZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMEJBLElBQUEsZUFBQSxHQUFBLFlBQUEsQ0FBQSxPQUFBLENBQUEsb0JBQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxVQUFBLENBQUE7O0FBQ0EsSUFBQSxLQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQTs7QUFFQSxJQUFBLGdCQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxrQkFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSx3QkFBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsMEJBQUEsQ0FBQSxDQUFBO0FBRUE7Ozs7O0lBR3FCLGlCOzs7OztBQUdwQiw2QkFBb0IsU0FBcEIsRUFBd0M7QUFBQTs7QUFBQTs7QUFDdkMsOEJBQU0sT0FBQSxDQUFBLE1BQU4sRUFBYyxJQUFkO0FBRG1CLFVBQUEsU0FBQSxHQUFBLFNBQUE7QUFFbkIsVUFBSyxNQUFMLEdBQWMsSUFBSSx3QkFBQSxDQUFBLE9BQUosRUFBZDtBQUZ1QztBQUd2Qzs7OzsrQkFFTztBQUNQLFdBQUssTUFBTCxDQUFZLE9BQVo7QUFDQTs7OzJCQUVNLEcsRUFBYSxJLEVBQWU7QUFDbEMsVUFBTSxNQUFNLGlGQUFnQixHQUFoQixFQUFxQixJQUFyQixDQUFaOztBQUNBLFVBQUksTUFBTSxLQUFLLFNBQWYsRUFBMEI7QUFDekIsZUFBTyxTQUFQO0FBQ0E7O0FBQ0QsVUFBTSxLQUFLLEdBQUcsSUFBSSxnQkFBQSxDQUFBLE9BQUosQ0FBbUIsS0FBSyxTQUF4QixFQUFtQyxJQUFuQyxDQUFkO0FBQ0EsV0FBSyxNQUFMLENBQVksTUFBWixDQUFtQixHQUFuQixFQUF3QixLQUF4QjtBQUNBLGFBQU8sTUFBUDtBQUNBOzs7OEJBRVMsTSxFQUFnQixNLEVBQWM7QUFDdkMsVUFBTSxJQUFJLG9GQUFtQixNQUFuQixFQUEyQixNQUEzQixDQUFWOztBQUNBLFVBQUksSUFBSSxLQUFLLFNBQWIsRUFBd0I7QUFDdkIsZUFBTyxTQUFQO0FBQ0E7O0FBQ0QsV0FBSyxNQUFMLENBQVksU0FBWixDQUFzQixNQUF0QixFQUE4QixNQUE5QjtBQUNBLGFBQU8sSUFBUDtBQUNBOzs7OEJBRVMsRyxFQUFXO0FBQ3BCLFVBQU0sSUFBSSxvRkFBbUIsR0FBbkIsQ0FBVjs7QUFDQSxVQUFJLElBQUksS0FBSyxTQUFiLEVBQXdCO0FBQ3ZCLGVBQU8sU0FBUDtBQUNBOztBQUNELFdBQUssTUFBTCxDQUFZLFNBQVosQ0FBc0IsR0FBdEI7QUFDQSxhQUFPLElBQVA7QUFDQTs7OzhCQUVTLFcsRUFBdUIsWSxFQUFtQztBQUFBOztBQUNuRSxVQUFNLFlBQVksb0ZBQW1CLFdBQW5CLEVBQWdDLFlBQWhDLENBQWxCOztBQUNBLFVBQUksWUFBWSxLQUFLLFNBQXJCLEVBQWdDO0FBQy9CLGVBQU8sU0FBUDtBQUNBOztBQUNELFVBQU0sWUFBWSxHQUFHLFlBQVksQ0FBQyxZQUFsQztBQUNBLFVBQU0sVUFBVSxHQUFHLFlBQVksQ0FBQyxVQUFoQztBQUNBLFVBQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQyxHQUFoQixDQUFvQixVQUFwQixFQUFnQyxVQUFDLElBQUQsRUFBUztBQUN6RCxlQUFPLElBQUksZ0JBQUEsQ0FBQSxPQUFKLENBQW1CLE1BQUksQ0FBQyxTQUF4QixFQUFtQyxJQUFuQyxDQUFQO0FBQ0EsT0FGZ0IsRUFFZCxJQUZjLENBQWpCO0FBR0EsV0FBSyxNQUFMLENBQVksU0FBWixDQUFzQixlQUFlLENBQUMsY0FBaEIsQ0FBK0IsWUFBL0IsRUFBNkMsVUFBN0MsQ0FBdEIsRUFBZ0YsUUFBaEY7QUFDQSxhQUFPLFlBQVA7QUFDQTs7OzRCQUVJO0FBQ0osVUFBTSxLQUFLLCtFQUFYOztBQUNBLFVBQUksS0FBSyxLQUFLLFNBQWQsRUFBeUI7QUFDeEIsZUFBTyxTQUFQO0FBQ0E7O0FBQ0QsV0FBSyxNQUFMLENBQVksS0FBWjtBQUNBLGFBQU8sS0FBUDtBQUNBOzs7K0JBRVUsTSxFQUEwQjtBQUNwQyxVQUFNLE1BQU0scUZBQW9CLE1BQXBCLENBQVo7O0FBQ0EsVUFBSSxNQUFNLEtBQUssU0FBZixFQUEwQjtBQUN6QixlQUFPLFNBQVA7QUFDQTs7QUFDRCxXQUFLLE1BQUwsQ0FBWSxVQUFaLENBQXVCLE1BQXZCO0FBQ0EsYUFBTyxNQUFQO0FBQ0E7Ozs7RUF0RTZDLEtBQUEsQ0FBQSxPOztBQUEvQyxPQUFBLENBQUEsT0FBQSxHQUFBLGlCQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9Db21wb25lbnQnO1xuaW1wb3J0IERpY3Rpb25hcnkgZnJvbSAnLi4vRGljdGlvbmFyeSc7XG5pbXBvcnQgKiBhcyBEaWN0aW9uYXJ5VXRpbHMgZnJvbSAnLi4vRGljdGlvbmFyeVV0aWxzJztcbmltcG9ydCBJTWFwIGZyb20gJy4uL0lNYXAnO1xuaW1wb3J0IHtpaWRTdHJ9IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCBNYXAgZnJvbSAnLi4vTWFwJztcbmltcG9ydCBTb21lIGZyb20gJy4uL1NvbWUnO1xuaW1wb3J0IENvbXBvbmVudENoaWxkIGZyb20gJy4vQ29tcG9uZW50Q2hpbGQnO1xuaW1wb3J0IENvbXBvbmVudENoaWxkSW5zZXJ0ZXIgZnJvbSAnLi9Db21wb25lbnRDaGlsZEluc2VydGVyJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvbmVudENoaWxkcmVuIGV4dGVuZHMgTWFwPENvbXBvbmVudD4ge1xuXHRwcml2YXRlIHRhcmdldDogQ29tcG9uZW50Q2hpbGRJbnNlcnRlcjtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbXBvbmVudDogQ29tcG9uZW50KSB7XG5cdFx0c3VwZXIoaWlkU3RyLCB0cnVlKTtcblx0XHR0aGlzLnRhcmdldCA9IG5ldyBDb21wb25lbnRDaGlsZEluc2VydGVyKCk7XG5cdH1cblxuXHR1bnJlbmRlcigpIHtcblx0XHR0aGlzLnRhcmdldC5kZXN0cm95KCk7XG5cdH1cblxuXHR0cnlQdXQoa2V5OiBzdHJpbmcsIGl0ZW06IENvbXBvbmVudCk6IFNvbWU8Q29tcG9uZW50PiB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gc3VwZXIudHJ5UHV0KGtleSwgaXRlbSk7XG5cdFx0aWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRjb25zdCBjaGlsZCA9IG5ldyBDb21wb25lbnRDaGlsZCh0aGlzLmNvbXBvbmVudCwgaXRlbSk7XG5cdFx0dGhpcy50YXJnZXQudHJ5UHV0KGtleSwgY2hpbGQpO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHR0cnlTZXRLZXkob2xkS2V5OiBzdHJpbmcsIG5ld0tleTogc3RyaW5nKTogQ29tcG9uZW50IHtcblx0XHRjb25zdCBpdGVtID0gc3VwZXIudHJ5U2V0S2V5KG9sZEtleSwgbmV3S2V5KTtcblx0XHRpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0aGlzLnRhcmdldC50cnlTZXRLZXkob2xkS2V5LCBuZXdLZXkpO1xuXHRcdHJldHVybiBpdGVtO1xuXHR9XG5cblx0dHJ5UmVtb3ZlKGtleTogc3RyaW5nKTogQ29tcG9uZW50IHtcblx0XHRjb25zdCBpdGVtID0gc3VwZXIudHJ5UmVtb3ZlKGtleSk7XG5cdFx0aWYgKGl0ZW0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dGhpcy50YXJnZXQudHJ5UmVtb3ZlKGtleSk7XG5cdFx0cmV0dXJuIGl0ZW07XG5cdH1cblxuXHR0cnlTcGxpY2UocmVtb3ZlZEtleXM6IHN0cmluZ1tdLCB1cGRhdGVkSXRlbXM6IERpY3Rpb25hcnk8Q29tcG9uZW50Pik6IElNYXAuU3BsaWNlUmVzdWx0PENvbXBvbmVudD4ge1xuXHRcdGNvbnN0IHNwbGljZVJlc3VsdCA9IHN1cGVyLnRyeVNwbGljZShyZW1vdmVkS2V5cywgdXBkYXRlZEl0ZW1zKTtcblx0XHRpZiAoc3BsaWNlUmVzdWx0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGNvbnN0IHJlbW92ZWRJdGVtcyA9IHNwbGljZVJlc3VsdC5yZW1vdmVkSXRlbXM7XG5cdFx0Y29uc3QgYWRkZWRJdGVtcyA9IHNwbGljZVJlc3VsdC5hZGRlZEl0ZW1zO1xuXHRcdGNvbnN0IGNoaWxkcmVuID0gRGljdGlvbmFyeVV0aWxzLm1hcChhZGRlZEl0ZW1zLCAoaXRlbSkgPT4ge1xuXHRcdFx0cmV0dXJuIG5ldyBDb21wb25lbnRDaGlsZCh0aGlzLmNvbXBvbmVudCwgaXRlbSk7XG5cdFx0fSwgdGhpcyk7XG5cdFx0dGhpcy50YXJnZXQudHJ5U3BsaWNlKERpY3Rpb25hcnlVdGlscy5nZXRSZW1vdmVkS2V5cyhyZW1vdmVkSXRlbXMsIGFkZGVkSXRlbXMpLCBjaGlsZHJlbik7XG5cdFx0cmV0dXJuIHNwbGljZVJlc3VsdDtcblx0fVxuXG5cdGNsZWFyKCk6IERpY3Rpb25hcnk8Q29tcG9uZW50PiB7XG5cdFx0Y29uc3QgaXRlbXMgPSBzdXBlci5jbGVhcigpO1xuXHRcdGlmIChpdGVtcyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0aGlzLnRhcmdldC5jbGVhcigpO1xuXHRcdHJldHVybiBpdGVtcztcblx0fVxuXG5cdHRyeVJlaW5kZXgoa2V5TWFwOiBEaWN0aW9uYXJ5PHN0cmluZz4pOiBEaWN0aW9uYXJ5PHN0cmluZz4ge1xuXHRcdGNvbnN0IHJlc3VsdCA9IHN1cGVyLnRyeVJlaW5kZXgoa2V5TWFwKTtcblx0XHRpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHRoaXMudGFyZ2V0LnRyeVJlaW5kZXgoa2V5TWFwKTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/component/ComponentCollection.js":
/*!*****************************************************************!*\
  !*** C:/jwidget/git/main/dist/component/ComponentCollection.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Class_1 = __importDefault(__webpack_require__(/*! ../Class */ "../../main/dist/Class.js"));

var DomUtils = __importStar(__webpack_require__(/*! ../DomUtils */ "../../main/dist/DomUtils.js"));

var collection_1 = __webpack_require__(/*! ../mapper/collection */ "../../main/dist/mapper/collection.js");

var ComponentCollectionInserter_1 = __importDefault(__webpack_require__(/*! ./ComponentCollectionInserter */ "../../main/dist/component/ComponentCollectionInserter.js"));
/**
 * @hidden
 */


var ComponentCollection = /*#__PURE__*/function (_Class_1$default) {
  _inherits(ComponentCollection, _Class_1$default);

  var _super = _createSuper(ComponentCollection);

  function ComponentCollection(parent, source, el) {
    var _this;

    _classCallCheck(this, ComponentCollection);

    _this = _super.call(this);
    _this.parent = parent;
    _this.source = source;
    parent._collections[_this.iid] = _assertThisInitialized(_this);

    var mapper = _this.own(collection_1.createMapper(source, function (child) {
      _this.parent._initChild(child);

      return child;
    }, {
      destroy: function destroy(child) {
        _this.parent._doneChild(child);
      },
      getKey: source.getKey
    }));

    _this.own(new ComponentCollectionInserter_1.default(mapper.target, el[0]));

    return _this;
  }

  _createClass(ComponentCollection, [{
    key: "destroy",
    value: function destroy() {
      delete this.parent._collections[this.iid];

      _get(_getPrototypeOf(ComponentCollection.prototype), "destroy", this).call(this);
    }
  }, {
    key: "_afterAppend",
    value: function _afterAppend() {
      this.source.forEach(DomUtils._afterAppend);
    }
  }]);

  return ComponentCollection;
}(Class_1.default);

exports.default = ComponentCollection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnQvQ29tcG9uZW50Q29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkEsSUFBQSxPQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxVQUFBLENBQUEsQ0FBQTs7QUFFQSxJQUFBLFFBQUEsR0FBQSxZQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsWUFBQSxHQUFBLE9BQUEsQ0FBQSxzQkFBQSxDQUFBOztBQUVBLElBQUEsNkJBQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLCtCQUFBLENBQUEsQ0FBQTtBQUVBOzs7OztJQUdxQixtQjs7Ozs7QUFDcEIsK0JBQW9CLE1BQXBCLEVBQStDLE1BQS9DLEVBQXNGLEVBQXRGLEVBQWdHO0FBQUE7O0FBQUE7O0FBQy9GO0FBRG1CLFVBQUEsTUFBQSxHQUFBLE1BQUE7QUFBMkIsVUFBQSxNQUFBLEdBQUEsTUFBQTtBQUU5QyxJQUFBLE1BQU0sQ0FBQyxZQUFQLENBQW9CLE1BQUssR0FBekI7O0FBRUEsUUFBTSxNQUFNLEdBQUcsTUFBSyxHQUFMLENBQVMsWUFBQSxDQUFBLFlBQUEsQ0FBbUMsTUFBbkMsRUFBMkMsVUFBQyxLQUFELEVBQVU7QUFDNUUsWUFBSyxNQUFMLENBQVksVUFBWixDQUF1QixLQUF2Qjs7QUFDQSxhQUFPLEtBQVA7QUFDQSxLQUh1QixFQUdyQjtBQUNGLE1BQUEsT0FBTyxFQUFFLGlCQUFDLEtBQUQsRUFBVTtBQUNsQixjQUFLLE1BQUwsQ0FBWSxVQUFaLENBQXVCLEtBQXZCO0FBQ0EsT0FIQztBQUlGLE1BQUEsTUFBTSxFQUFFLE1BQU0sQ0FBQztBQUpiLEtBSHFCLENBQVQsQ0FBZjs7QUFVQSxVQUFLLEdBQUwsQ0FBUyxJQUFJLDZCQUFBLENBQUEsT0FBSixDQUFnQyxNQUFNLENBQUMsTUFBdkMsRUFBK0MsRUFBRSxDQUFDLENBQUQsQ0FBakQsQ0FBVDs7QUFkK0Y7QUFlL0Y7Ozs7OEJBRU07QUFDTixhQUFPLEtBQUssTUFBTCxDQUFZLFlBQVosQ0FBeUIsS0FBSyxHQUE5QixDQUFQOztBQUNBO0FBQ0E7OzttQ0FFVztBQUNYLFdBQUssTUFBTCxDQUFZLE9BQVosQ0FBb0IsUUFBUSxDQUFDLFlBQTdCO0FBQ0E7Ozs7RUF6QitDLE9BQUEsQ0FBQSxPOztBQUFqRCxPQUFBLENBQUEsT0FBQSxHQUFBLG1CQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IENsYXNzIGZyb20gJy4uL0NsYXNzJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vQ29tcG9uZW50JztcbmltcG9ydCAqIGFzIERvbVV0aWxzIGZyb20gJy4uL0RvbVV0aWxzJztcbmltcG9ydCB7Y3JlYXRlTWFwcGVyfSBmcm9tICcuLi9tYXBwZXIvY29sbGVjdGlvbic7XG5pbXBvcnQgUmVhZG9ubHlDb2xsZWN0aW9uIGZyb20gJy4uL1JlYWRvbmx5Q29sbGVjdGlvbic7XG5pbXBvcnQgQ29tcG9uZW50Q29sbGVjdGlvbkluc2VydGVyIGZyb20gJy4vQ29tcG9uZW50Q29sbGVjdGlvbkluc2VydGVyJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvbmVudENvbGxlY3Rpb24gZXh0ZW5kcyBDbGFzcyB7XG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcGFyZW50OiBDb21wb25lbnQsIHByaXZhdGUgc291cmNlOiBSZWFkb25seUNvbGxlY3Rpb248Q29tcG9uZW50PiwgZWw6IEpRdWVyeSkge1xuXHRcdHN1cGVyKCk7XG5cdFx0cGFyZW50Ll9jb2xsZWN0aW9uc1t0aGlzLmlpZF0gPSB0aGlzO1xuXG5cdFx0Y29uc3QgbWFwcGVyID0gdGhpcy5vd24oY3JlYXRlTWFwcGVyPENvbXBvbmVudCwgQ29tcG9uZW50Pihzb3VyY2UsIChjaGlsZCkgPT4ge1xuXHRcdFx0dGhpcy5wYXJlbnQuX2luaXRDaGlsZChjaGlsZCk7XG5cdFx0XHRyZXR1cm4gY2hpbGQ7XG5cdFx0fSwge1xuXHRcdFx0ZGVzdHJveTogKGNoaWxkKSA9PiB7XG5cdFx0XHRcdHRoaXMucGFyZW50Ll9kb25lQ2hpbGQoY2hpbGQpO1xuXHRcdFx0fSxcblx0XHRcdGdldEtleTogc291cmNlLmdldEtleVxuXHRcdH0pKTtcblxuXHRcdHRoaXMub3duKG5ldyBDb21wb25lbnRDb2xsZWN0aW9uSW5zZXJ0ZXIobWFwcGVyLnRhcmdldCwgZWxbMF0pKTtcblx0fVxuXG5cdGRlc3Ryb3koKSB7XG5cdFx0ZGVsZXRlIHRoaXMucGFyZW50Ll9jb2xsZWN0aW9uc1t0aGlzLmlpZF07XG5cdFx0c3VwZXIuZGVzdHJveSgpO1xuXHR9XG5cblx0X2FmdGVyQXBwZW5kKCkge1xuXHRcdHRoaXMuc291cmNlLmZvckVhY2goRG9tVXRpbHMuX2FmdGVyQXBwZW5kKTtcblx0fVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==

/***/ }),

/***/ "../../main/dist/component/ComponentCollectionInserter.js":
/*!*************************************************************************!*\
  !*** C:/jwidget/git/main/dist/component/ComponentCollectionInserter.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Class_1 = __importDefault(__webpack_require__(/*! ../Class */ "../../main/dist/Class.js"));

var DomUtils = __importStar(__webpack_require__(/*! ../DomUtils */ "../../main/dist/DomUtils.js"));

var collection_1 = __webpack_require__(/*! ../observer/collection */ "../../main/dist/observer/collection.js");
/**
 * @hidden
 */


var ComponentCollectionInserter = /*#__PURE__*/function (_Class_1$default) {
  _inherits(ComponentCollectionInserter, _Class_1$default);

  var _super = _createSuper(ComponentCollectionInserter);

  function ComponentCollectionInserter(source, el) {
    var _this;

    _classCallCheck(this, ComponentCollectionInserter);

    _this = _super.call(this);
    _this.el = el;
    _this.len = 0;

    _this.own(collection_1.createObserver(source, {
      add: _this._addItem,
      remove: _this._removeItem,
      scope: _assertThisInitialized(_this)
    }));

    return _this;
  }

  _createClass(ComponentCollectionInserter, [{
    key: "_addItem",
    value: function _addItem(item) {
      var parent = this.el;
      var anchor = parent.childNodes[this.len];
      var child = item.el[0];

      if (anchor != null) {
        parent.insertBefore(child, anchor);
      } else {
        parent.appendChild(child);
      }

      ++this.len;

      item._afterAppend();
    }
  }, {
    key: "_removeItem",
    value: function _removeItem(item) {
      DomUtils.remove(item.el[0]);
      --this.len;
    }
  }]);

  return ComponentCollectionInserter;
}(Class_1.default);

exports.default = ComponentCollectionInserter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnQvQ29tcG9uZW50Q29sbGVjdGlvbkluc2VydGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBLElBQUEsT0FBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsVUFBQSxDQUFBLENBQUE7O0FBRUEsSUFBQSxRQUFBLEdBQUEsWUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLFlBQUEsR0FBQSxPQUFBLENBQUEsd0JBQUEsQ0FBQTtBQUdBOzs7OztJQUdxQiwyQjs7Ozs7QUFHcEIsdUNBQVksTUFBWixFQUEyRCxFQUEzRCxFQUEwRTtBQUFBOztBQUFBOztBQUN6RTtBQUQwRCxVQUFBLEVBQUEsR0FBQSxFQUFBO0FBRm5ELFVBQUEsR0FBQSxHQUFjLENBQWQ7O0FBSVAsVUFBSyxHQUFMLENBQVMsWUFBQSxDQUFBLGNBQUEsQ0FBZSxNQUFmLEVBQXVCO0FBQy9CLE1BQUEsR0FBRyxFQUFFLE1BQUssUUFEcUI7QUFFL0IsTUFBQSxNQUFNLEVBQUUsTUFBSyxXQUZrQjtBQUcvQixNQUFBLEtBQUs7QUFIMEIsS0FBdkIsQ0FBVDs7QUFGeUU7QUFPekU7Ozs7NkJBRVEsSSxFQUFlO0FBQ3ZCLFVBQUksTUFBTSxHQUFHLEtBQUssRUFBbEI7QUFDQSxVQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsVUFBUCxDQUFrQixLQUFLLEdBQXZCLENBQWI7QUFDQSxVQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBTCxDQUFRLENBQVIsQ0FBWjs7QUFDQSxVQUFJLE1BQU0sSUFBSSxJQUFkLEVBQW9CO0FBQ25CLFFBQUEsTUFBTSxDQUFDLFlBQVAsQ0FBb0IsS0FBcEIsRUFBMkIsTUFBM0I7QUFDQSxPQUZELE1BRU87QUFDTixRQUFBLE1BQU0sQ0FBQyxXQUFQLENBQW1CLEtBQW5CO0FBQ0E7O0FBQ0QsUUFBRSxLQUFLLEdBQVA7O0FBQ0EsTUFBQSxJQUFJLENBQUMsWUFBTDtBQUNBOzs7Z0NBRVcsSSxFQUFlO0FBQzFCLE1BQUEsUUFBUSxDQUFDLE1BQVQsQ0FBZ0IsSUFBSSxDQUFDLEVBQUwsQ0FBUSxDQUFSLENBQWhCO0FBQ0EsUUFBRSxLQUFLLEdBQVA7QUFDQTs7OztFQTVCdUQsT0FBQSxDQUFBLE87O0FBQXpELE9BQUEsQ0FBQSxPQUFBLEdBQUEsMkJBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgQ2xhc3MgZnJvbSAnLi4vQ2xhc3MnO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9Db21wb25lbnQnO1xuaW1wb3J0ICogYXMgRG9tVXRpbHMgZnJvbSAnLi4vRG9tVXRpbHMnO1xuaW1wb3J0IHtjcmVhdGVPYnNlcnZlcn0gZnJvbSAnLi4vb2JzZXJ2ZXIvY29sbGVjdGlvbic7XG5pbXBvcnQgUmVhZG9ubHlDb2xsZWN0aW9uIGZyb20gJy4uL1JlYWRvbmx5Q29sbGVjdGlvbic7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRDb2xsZWN0aW9uSW5zZXJ0ZXIgZXh0ZW5kcyBDbGFzcyB7XG5cdHByaXZhdGUgbGVuOiBudW1iZXIgPSAwO1xuXG5cdGNvbnN0cnVjdG9yKHNvdXJjZTogUmVhZG9ubHlDb2xsZWN0aW9uPENvbXBvbmVudD4sIHByaXZhdGUgZWw6IEhUTUxFbGVtZW50KSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLm93bihjcmVhdGVPYnNlcnZlcihzb3VyY2UsIHtcblx0XHRcdGFkZDogdGhpcy5fYWRkSXRlbSxcblx0XHRcdHJlbW92ZTogdGhpcy5fcmVtb3ZlSXRlbSxcblx0XHRcdHNjb3BlOiB0aGlzXG5cdFx0fSkpO1xuXHR9XG5cblx0X2FkZEl0ZW0oaXRlbTogQ29tcG9uZW50KSB7XG5cdFx0dmFyIHBhcmVudCA9IHRoaXMuZWw7XG5cdFx0dmFyIGFuY2hvciA9IHBhcmVudC5jaGlsZE5vZGVzW3RoaXMubGVuXTtcblx0XHR2YXIgY2hpbGQgPSBpdGVtLmVsWzBdO1xuXHRcdGlmIChhbmNob3IgIT0gbnVsbCkge1xuXHRcdFx0cGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgYW5jaG9yKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cGFyZW50LmFwcGVuZENoaWxkKGNoaWxkKTtcblx0XHR9XG5cdFx0Kyt0aGlzLmxlbjtcblx0XHRpdGVtLl9hZnRlckFwcGVuZCgpO1xuXHR9XG5cblx0X3JlbW92ZUl0ZW0oaXRlbTogQ29tcG9uZW50KSB7XG5cdFx0RG9tVXRpbHMucmVtb3ZlKGl0ZW0uZWxbMF0pO1xuXHRcdC0tdGhpcy5sZW47XG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "../../main/dist/component/ComponentInserter.js":
/*!***************************************************************!*\
  !*** C:/jwidget/git/main/dist/component/ComponentInserter.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var AbstractInserter_1 = __importDefault(__webpack_require__(/*! ../AbstractInserter */ "../../main/dist/AbstractInserter.js"));
/**
 * @hidden
 */


var ComponentInserter = /*#__PURE__*/function (_AbstractInserter_1$d) {
  _inherits(ComponentInserter, _AbstractInserter_1$d);

  var _super = _createSuper(ComponentInserter);

  function ComponentInserter() {
    _classCallCheck(this, ComponentInserter);

    return _super.apply(this, arguments);
  }

  _createClass(ComponentInserter, [{
    key: "_getElement",
    value: function _getElement(item) {
      return item.el[0];
    }
  }, {
    key: "_addItem",
    value: function _addItem(item, index) {
      _get(_getPrototypeOf(ComponentInserter.prototype), "_addItem", this).call(this, item, index);

      item._afterAppend();
    }
  }]);

  return ComponentInserter;
}(AbstractInserter_1.default);

exports.default = ComponentInserter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnQvQ29tcG9uZW50SW5zZXJ0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkEsSUFBQSxrQkFBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEscUJBQUEsQ0FBQSxDQUFBO0FBR0E7Ozs7O0lBR3FCLGlCOzs7Ozs7Ozs7Ozs7O2dDQUNFLEksRUFBZTtBQUNwQyxhQUFPLElBQUksQ0FBQyxFQUFMLENBQVEsQ0FBUixDQUFQO0FBQ0E7Ozs2QkFFa0IsSSxFQUFpQixLLEVBQWE7QUFDaEQsc0ZBQWUsSUFBZixFQUFxQixLQUFyQjs7QUFDQSxNQUFBLElBQUksQ0FBQyxZQUFMO0FBQ0E7Ozs7RUFSNkMsa0JBQUEsQ0FBQSxPOztBQUEvQyxPQUFBLENBQUEsT0FBQSxHQUFBLGlCQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IEFic3RyYWN0SW5zZXJ0ZXIgZnJvbSAnLi4vQWJzdHJhY3RJbnNlcnRlcic7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL0NvbXBvbmVudCc7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRJbnNlcnRlciBleHRlbmRzIEFic3RyYWN0SW5zZXJ0ZXI8Q29tcG9uZW50PiB7XG5cdHByb3RlY3RlZCBfZ2V0RWxlbWVudChpdGVtOiBDb21wb25lbnQpOiBIVE1MRWxlbWVudCB7XG5cdFx0cmV0dXJuIGl0ZW0uZWxbMF07XG5cdH1cblxuXHRwcm90ZWN0ZWQgX2FkZEl0ZW0oaXRlbTogQ29tcG9uZW50LCBpbmRleDogbnVtYmVyKSB7XG5cdFx0c3VwZXIuX2FkZEl0ZW0oaXRlbSwgaW5kZXgpO1xuXHRcdGl0ZW0uX2FmdGVyQXBwZW5kKCk7XG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "../../main/dist/component/ComponentList.js":
/*!***********************************************************!*\
  !*** C:/jwidget/git/main/dist/component/ComponentList.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Class_1 = __importDefault(__webpack_require__(/*! ../Class */ "../../main/dist/Class.js"));

var DomUtils = __importStar(__webpack_require__(/*! ../DomUtils */ "../../main/dist/DomUtils.js"));

var list_1 = __importDefault(__webpack_require__(/*! ../mapper/list */ "../../main/dist/mapper/list.js"));

var ComponentInserter_1 = __importDefault(__webpack_require__(/*! ./ComponentInserter */ "../../main/dist/component/ComponentInserter.js"));
/**
 * @hidden
 */


var ComponentList = /*#__PURE__*/function (_Class_1$default) {
  _inherits(ComponentList, _Class_1$default);

  var _super = _createSuper(ComponentList);

  function ComponentList(parent, source, el) {
    var _this;

    _classCallCheck(this, ComponentList);

    _this = _super.call(this);
    _this.parent = parent;
    _this.source = source;
    parent._arrays[_this.iid] = _assertThisInitialized(_this);

    var mapper = _this.own(new list_1.default(source, function (child) {
      _this.parent._initChild(child);

      return child;
    }, {
      destroy: function destroy(child) {
        _this.parent._doneChild(child);
      }
    }));

    _this.own(new ComponentInserter_1.default(mapper.target, el[0]));

    return _this;
  }

  _createClass(ComponentList, [{
    key: "destroy",
    value: function destroy() {
      delete this.parent._arrays[this.iid];

      _get(_getPrototypeOf(ComponentList.prototype), "destroy", this).call(this);
    }
  }, {
    key: "_afterAppend",
    value: function _afterAppend() {
      this.source.forEach(DomUtils._afterAppend);
    }
  }]);

  return ComponentList;
}(Class_1.default);

exports.default = ComponentList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnQvQ29tcG9uZW50TGlzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkEsSUFBQSxPQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxVQUFBLENBQUEsQ0FBQTs7QUFFQSxJQUFBLFFBQUEsR0FBQSxZQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsTUFBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsZ0JBQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsbUJBQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLHFCQUFBLENBQUEsQ0FBQTtBQUVBOzs7OztJQUdxQixhOzs7OztBQUNwQix5QkFBb0IsTUFBcEIsRUFBK0MsTUFBL0MsRUFBZ0YsRUFBaEYsRUFBMEY7QUFBQTs7QUFBQTs7QUFDekY7QUFEbUIsVUFBQSxNQUFBLEdBQUEsTUFBQTtBQUEyQixVQUFBLE1BQUEsR0FBQSxNQUFBO0FBRTlDLElBQUEsTUFBTSxDQUFDLE9BQVAsQ0FBZSxNQUFLLEdBQXBCOztBQUVBLFFBQU0sTUFBTSxHQUFHLE1BQUssR0FBTCxDQUFTLElBQUksTUFBQSxDQUFBLE9BQUosQ0FBcUMsTUFBckMsRUFBNkMsVUFBQyxLQUFELEVBQVU7QUFDOUUsWUFBSyxNQUFMLENBQVksVUFBWixDQUF1QixLQUF2Qjs7QUFDQSxhQUFPLEtBQVA7QUFDQSxLQUh1QixFQUdyQjtBQUNGLE1BQUEsT0FBTyxFQUFFLGlCQUFDLEtBQUQsRUFBVTtBQUNsQixjQUFLLE1BQUwsQ0FBWSxVQUFaLENBQXVCLEtBQXZCO0FBQ0E7QUFIQyxLQUhxQixDQUFULENBQWY7O0FBU0EsVUFBSyxHQUFMLENBQVMsSUFBSSxtQkFBQSxDQUFBLE9BQUosQ0FBc0IsTUFBTSxDQUFDLE1BQTdCLEVBQXFDLEVBQUUsQ0FBQyxDQUFELENBQXZDLENBQVQ7O0FBYnlGO0FBY3pGOzs7OzhCQUVNO0FBQ04sYUFBTyxLQUFLLE1BQUwsQ0FBWSxPQUFaLENBQW9CLEtBQUssR0FBekIsQ0FBUDs7QUFDQTtBQUNBOzs7bUNBRVc7QUFDWCxXQUFLLE1BQUwsQ0FBWSxPQUFaLENBQW9CLFFBQVEsQ0FBQyxZQUE3QjtBQUNBOzs7O0VBeEJ5QyxPQUFBLENBQUEsTzs7QUFBM0MsT0FBQSxDQUFBLE9BQUEsR0FBQSxhQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IENsYXNzIGZyb20gJy4uL0NsYXNzJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vQ29tcG9uZW50JztcbmltcG9ydCAqIGFzIERvbVV0aWxzIGZyb20gJy4uL0RvbVV0aWxzJztcbmltcG9ydCBMaXN0TWFwcGVyIGZyb20gJy4uL21hcHBlci9saXN0JztcbmltcG9ydCBSZWFkb25seUxpc3QgZnJvbSAnLi4vUmVhZG9ubHlMaXN0JztcbmltcG9ydCBDb21wb25lbnRJbnNlcnRlciBmcm9tICcuL0NvbXBvbmVudEluc2VydGVyJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvbmVudExpc3QgZXh0ZW5kcyBDbGFzcyB7XG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcGFyZW50OiBDb21wb25lbnQsIHByaXZhdGUgc291cmNlOiBSZWFkb25seUxpc3Q8Q29tcG9uZW50PiwgZWw6IEpRdWVyeSkge1xuXHRcdHN1cGVyKCk7XG5cdFx0cGFyZW50Ll9hcnJheXNbdGhpcy5paWRdID0gdGhpcztcblxuXHRcdGNvbnN0IG1hcHBlciA9IHRoaXMub3duKG5ldyBMaXN0TWFwcGVyPENvbXBvbmVudCwgQ29tcG9uZW50Pihzb3VyY2UsIChjaGlsZCkgPT4ge1xuXHRcdFx0dGhpcy5wYXJlbnQuX2luaXRDaGlsZChjaGlsZCk7XG5cdFx0XHRyZXR1cm4gY2hpbGQ7XG5cdFx0fSwge1xuXHRcdFx0ZGVzdHJveTogKGNoaWxkKSA9PiB7XG5cdFx0XHRcdHRoaXMucGFyZW50Ll9kb25lQ2hpbGQoY2hpbGQpO1xuXHRcdFx0fVxuXHRcdH0pKTtcblxuXHRcdHRoaXMub3duKG5ldyBDb21wb25lbnRJbnNlcnRlcihtYXBwZXIudGFyZ2V0LCBlbFswXSkpO1xuXHR9XG5cblx0ZGVzdHJveSgpIHtcblx0XHRkZWxldGUgdGhpcy5wYXJlbnQuX2FycmF5c1t0aGlzLmlpZF07XG5cdFx0c3VwZXIuZGVzdHJveSgpO1xuXHR9XG5cblx0X2FmdGVyQXBwZW5kKCkge1xuXHRcdHRoaXMuc291cmNlLmZvckVhY2goRG9tVXRpbHMuX2FmdGVyQXBwZW5kKTtcblx0fVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==

/***/ }),

/***/ "../../main/dist/dummyDestroyable.js":
/*!****************************************************!*\
  !*** C:/jwidget/git/main/dist/dummyDestroyable.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var DummyDestroyable = /*#__PURE__*/function () {
  function DummyDestroyable() {
    _classCallCheck(this, DummyDestroyable);
  }

  _createClass(DummyDestroyable, [{
    key: "destroy",
    value: function destroy() {}
  }]);

  return DummyDestroyable;
}();
/**
 * Dummy implementation of `Destroyable` interface.
 * Exposes `destroy` method which does nothing.
 */


var dummyDestroyable = new DummyDestroyable(); // An extra variable helps IntelliSense to find this import

exports.default = dummyDestroyable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kdW1teURlc3Ryb3lhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQTBCTSxnQjs7Ozs7Ozs4QkFDRSxDQUFLOzs7OztBQUdiOzs7Ozs7QUFJQSxJQUFNLGdCQUFnQixHQUFpQixJQUFJLGdCQUFKLEVBQXZDLEMsQ0FBZ0U7O0FBQ2hFLE9BQUEsQ0FBQSxPQUFBLEdBQWUsZ0JBQWYiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgRGVzdHJveWFibGUgZnJvbSBcIi4vRGVzdHJveWFibGVcIjtcblxuY2xhc3MgRHVtbXlEZXN0cm95YWJsZSBpbXBsZW1lbnRzIERlc3Ryb3lhYmxlIHtcblx0ZGVzdHJveSgpIHt9XG59XG5cbi8qKlxuICogRHVtbXkgaW1wbGVtZW50YXRpb24gb2YgYERlc3Ryb3lhYmxlYCBpbnRlcmZhY2UuXG4gKiBFeHBvc2VzIGBkZXN0cm95YCBtZXRob2Qgd2hpY2ggZG9lcyBub3RoaW5nLlxuICovXG5jb25zdCBkdW1teURlc3Ryb3lhYmxlID0gPERlc3Ryb3lhYmxlPihuZXcgRHVtbXlEZXN0cm95YWJsZSgpKTsgLy8gQW4gZXh0cmEgdmFyaWFibGUgaGVscHMgSW50ZWxsaVNlbnNlIHRvIGZpbmQgdGhpcyBpbXBvcnRcbmV4cG9ydCBkZWZhdWx0IGR1bW15RGVzdHJveWFibGU7XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/dummyEvent.js":
/*!**********************************************!*\
  !*** C:/jwidget/git/main/dist/dummyEvent.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var dummyDestroyable_1 = __importDefault(__webpack_require__(/*! ./dummyDestroyable */ "../../main/dist/dummyDestroyable.js"));

var DummyEvent = /*#__PURE__*/function () {
  function DummyEvent() {
    _classCallCheck(this, DummyEvent);
  }

  _createClass(DummyEvent, [{
    key: "purge",
    value: function purge() {}
  }, {
    key: "listen",
    value: function listen(_handler, _scope) {
      return dummyDestroyable_1.default;
    }
  }, {
    key: "trigger",
    value: function trigger(_params) {}
  }, {
    key: "dummy",
    get: function get() {
      return true;
    }
  }]);

  return DummyEvent;
}();
/**
 * Dummy implementation of `Listenable<any>` interface.
 * As opposed to `Event`, doesn't really bind the event handlers, just pretends it does that.
 */


var dummyEvent = new DummyEvent(); // An extra variable helps IntelliSense to find this import

exports.default = dummyEvent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kdW1teUV2ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCQSxJQUFBLGtCQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxvQkFBQSxDQUFBLENBQUE7O0lBR00sVTs7Ozs7Ozs0QkFNQSxDQUNKOzs7MkJBRU0sUSxFQUFnQyxNLEVBQVk7QUFDbEQsYUFBTyxrQkFBQSxDQUFBLE9BQVA7QUFDQTs7OzRCQUVPLE8sRUFBYSxDQUNwQjs7O3dCQVpRO0FBQ1IsYUFBTyxJQUFQO0FBQ0E7Ozs7O0FBYUY7Ozs7OztBQUlBLElBQU0sVUFBVSxHQUFpQixJQUFJLFVBQUosRUFBakMsQyxDQUFvRDs7QUFDcEQsT0FBQSxDQUFBLE9BQUEsR0FBZSxVQUFmIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IERlc3Ryb3lhYmxlIGZyb20gXCIuL0Rlc3Ryb3lhYmxlXCI7XG5pbXBvcnQgZHVtbXlEZXN0cm95YWJsZSBmcm9tIFwiLi9kdW1teURlc3Ryb3lhYmxlXCI7XG5pbXBvcnQgSUV2ZW50IGZyb20gXCIuL0lFdmVudFwiO1xuXG5jbGFzcyBEdW1teUV2ZW50IGltcGxlbWVudHMgSUV2ZW50PGFueT4ge1xuXG5cdGdldCBkdW1teSgpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHB1cmdlKCk6IHZvaWQge1xuXHR9XG5cblx0bGlzdGVuKF9oYW5kbGVyOiAocGFyYW1zOiBhbnkpID0+IGFueSwgX3Njb3BlPzogYW55KTogRGVzdHJveWFibGUge1xuXHRcdHJldHVybiBkdW1teURlc3Ryb3lhYmxlO1xuXHR9XG5cblx0dHJpZ2dlcihfcGFyYW1zPzogYW55KTogdm9pZCB7XG5cdH1cbn1cblxuLyoqXG4gKiBEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBgTGlzdGVuYWJsZTxhbnk+YCBpbnRlcmZhY2UuXG4gKiBBcyBvcHBvc2VkIHRvIGBFdmVudGAsIGRvZXNuJ3QgcmVhbGx5IGJpbmQgdGhlIGV2ZW50IGhhbmRsZXJzLCBqdXN0IHByZXRlbmRzIGl0IGRvZXMgdGhhdC5cbiAqL1xuY29uc3QgZHVtbXlFdmVudCA9IDxJRXZlbnQ8YW55Pj4obmV3IER1bW15RXZlbnQoKSk7IC8vIEFuIGV4dHJhIHZhcmlhYmxlIGhlbHBzIEludGVsbGlTZW5zZSB0byBmaW5kIHRoaXMgaW1wb3J0XG5leHBvcnQgZGVmYXVsdCBkdW1teUV2ZW50O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==

/***/ }),

/***/ "../../main/dist/index.js":
/*!*****************************************!*\
  !*** C:/jwidget/git/main/dist/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CollectionFlags = exports.ADAPTER = exports.SILENT = exports.Binding = exports.TWOWAY = exports.WATCH = exports.UPDATE = exports.destroy = exports.iidStr = exports.newIid = exports.get = exports.smartCmp = exports.cmp = exports.apply = exports.defn = exports.def = exports.isDate = exports.isRegExp = exports.isArray = exports.isFunction = exports.isBoolean = exports.isString = exports.isNumber = exports.isInt = exports.isTruthy = exports.isFalsy = exports.isNil = exports.isNotNil = exports.isNotNull = exports.isNull = exports.isDefined = exports.isUndefined = void 0;

var internal_1 = __webpack_require__(/*! ./internal */ "../../main/dist/internal.js");

var internal_2 = __webpack_require__(/*! ./internal */ "../../main/dist/internal.js");

Object.defineProperty(exports, "identity", {
  enumerable: true,
  get: function get() {
    return internal_2.identity;
  }
});
/**
 * Checks if value is undefined.
 */

function isUndefined(value) {
  return value === undefined;
}

exports.isUndefined = isUndefined;
/**
 * Checks if value is not undefined.
 */

function isDefined(value) {
  return value !== undefined;
}

exports.isDefined = isDefined;
/**
 * Checks if value is null.
 */

function isNull(value) {
  return value === null;
}

exports.isNull = isNull;
/**
 * Checks if value is not null.
 */

function isNotNull(value) {
  return value !== null;
}

exports.isNotNull = isNotNull;
/**
 * Checks if value is not undefined and null.
 */

function isNotNil(value) {
  return value != null;
}

exports.isNotNil = isNotNil;
/**
 * Checks if value is undefined or null.
 */

function isNil(value) {
  return value == null;
}

exports.isNil = isNil;
/**
 * Checks if value is falsy (`null`, `undefined`, `false`, 0, `NaN` or blank string).
 */

function isFalsy(value) {
  return !value;
}

exports.isFalsy = isFalsy;
/**
 * Checks if value is truthy (not `null`, `undefined`, `false`, 0, `NaN` or blank string).
 */

function isTruthy(value) {
  return Boolean(value);
}

exports.isTruthy = isTruthy;
/**
 * Checks if value is an integer.
 */

function isInt(value) {
  return typeof value === "number" && Math.round(value) === value;
}

exports.isInt = isInt;
/**
 * Checks if value is a number.
 */

function isNumber(value) {
  return typeof value === "number";
}

exports.isNumber = isNumber;
/**
 * Checks if value is a string.
 */

function isString(value) {
  return typeof value === "string";
}

exports.isString = isString;
/**
 * Checks if value is a boolean.
 */

function isBoolean(value) {
  return typeof value === "boolean";
}

exports.isBoolean = isBoolean;
/**
 * Checks if value is a function.
 */

function isFunction(value) {
  return typeof value === "function";
}

exports.isFunction = isFunction;
/**
 * Checks if value is a native JavaScript Array.
 */

function isArray(value) {
  return Object.prototype.toString.apply(value) === '[object Array]';
}

exports.isArray = isArray;
/**
 * Checks if value is a regular expression.
 */

function isRegExp(value) {
  return Object.prototype.toString.apply(value) === '[object RegExp]';
}

exports.isRegExp = isRegExp;
/**
 * Checks if value is a date.
 */

function isDate(value) {
  return Object.prototype.toString.apply(value) === '[object Date]';
}

exports.isDate = isDate;
/**
 * Defines default value. Returns `value`, if it is not undefined, else returns `default`.
 */

function def(value, defaultValue) {
  return value !== undefined ? value : defaultValue;
}

exports.def = def;
/**
 * Defines default value. Returns `value`, if it is not undefined and null, else returns `default`.
 */

function defn(value, defaultValue) {
  return value != null ? value : defaultValue;
}

exports.defn = defn;
/**
 * Iterates through objects passed after first argument and copies all their fields into
 * `target` object. Returns `target`. Undefined source object fields are ignored.
 * Null and undefined source objects are be ignored.
 *
 * Function modifies `target` object!
 */

function apply(target) {
  for (var i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); ++i) {
    var source = i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1];

    if (!source) {
      continue;
    }

    for (var key in source) {
      if (source[key] !== undefined) {
        target[key] = source[key];
      }
    }
  }

  return target;
}

exports.apply = apply;
/**
 * Universal and sophisticated comparer for array sorting. Broadly speaking, it:
 *
 * - Returns 1, if x > y
 * - Returns -1, if x < y
 * - Returns 0, if x == y
 *
 * See online documentation for details.
 */

function cmp(x, y) {
  return smartCmp(x, y);
}

exports.cmp = cmp;
/**
 * Universal and sophisticated comparer for array sorting. Broadly speaking, it:
 *
 * - Returns 1, if x > y
 * - Returns -1, if x < y
 * - Returns 0, if x == y
 *
 * See online documentation for details.
 */

function smartCmp(x, y, config) {
  var xRank = getTypeRank(x);
  var yRank = getTypeRank(y);

  if (xRank !== yRank) {
    return internal_1.cmpPrimitives(xRank, yRank);
  }

  switch (xRank) {
    case "array":
      return cmpArrays(x, y, config);

    case "boolean":
      return cmpBooleans(x, y);

    case "identifiable":
      return cmpIdentifiables(x, y);

    case "string":
      return cmpStrings(x, y, config);

    default:
      return internal_1.cmpPrimitives(x, y);
  }
}

exports.smartCmp = smartCmp;

function getTypeRank(x) {
  return x === undefined ? "0" : x === null ? "1" : isArray(x) ? "array" : typeof x.iid === "number" ? "identifiable" : _typeof(x);
}

function cmpArrays(x, y, config) {
  var n = Math.min(x.length, y.length);

  for (var i = 0; i < n; ++i) {
    var result = smartCmp(x[i], y[i], config);

    if (result) {
      return result;
    }
  }

  return internal_1.cmpPrimitives(x.length, y.length);
}

function cmpBooleans(x, y) {
  return x ? y ? 0 : 1 : y ? -1 : 0;
}

function cmpIdentifiables(x, y) {
  return internal_1.cmpPrimitives(x.iid, y.iid);
}

function cmpStrings(x, y, config) {
  x = x || "";
  y = y || "";

  if (config && config.caseInsensitive) {
    x = x.toLowerCase();
    y = y.toLowerCase();
  }

  if (!config || !config.compareNumbersInStrings) {
    return internal_1.cmpPrimitives(x, y);
  }

  var xIndex = 0;
  var yIndex = 0;

  while (true) {
    var xLength = x.substr(xIndex).search(/\d+/);

    if (xLength === -1) {
      xLength = x.length - xIndex;
    }

    var yLength = y.substr(yIndex).search(/\d+/);

    if (yLength === -1) {
      yLength = y.length - yIndex;
    }

    var result1 = internal_1.cmpPrimitives(x.substr(xIndex, xLength), y.substr(yIndex, yLength));

    if (result1) {
      return result1;
    }

    xIndex += xLength;
    yIndex += yLength;
    var xMatches = /^\d+/.exec(x.substr(xIndex));
    var yMatches = /^\d+/.exec(y.substr(yIndex));

    if (xMatches == null || yMatches == null) {
      return cmpBooleans(xMatches != null, yMatches != null);
    }

    var xNumber = +xMatches[0];
    var yNumber = +yMatches[0];
    var result2 = internal_1.cmpPrimitives(xNumber, yNumber);

    if (result2) {
      return result2;
    }

    xIndex += xMatches[0].length;
    yIndex += yMatches[0].length;
  }
}
/**
 * Returns object item or subitem by path.
 * Path is a primitive value (object key), or an array of subpaths.
 * If `path` is null, undefined or empty array, returns `obj`.
 * If item doesn't exist, returns undefined.
 */


function get(obj, path) {
  if (path == null) {
    return obj;
  }

  if (!isArray(path)) {
    return obj && _typeof(obj) === "object" ? obj[path] : undefined;
  }

  for (var i = 0, l = path.length; i < l; ++i) {
    obj = get(obj, path[i]);
  }

  return obj;
}

exports.get = get;
var _lastIid = 0;
/**
 * Returns a new auto-incrementing instance identifier for `Identifiable` interface.
 */

function newIid() {
  return ++_lastIid;
}

exports.newIid = newIid;
/**
 * Returns object `iid` converted to a string. Can be used as efficient `getKey` implementation
 * for collections consisting of `Identifiable` objects only.
 */

function iidStr(obj) {
  return obj === undefined ? "u" : obj === null ? "n" : String(obj.iid);
}

exports.iidStr = iidStr;
/**
 * Calls object method `destroy` if available. Can be used in mapper configuration.
 */

function destroy(obj) {
  if (obj && typeof obj.destroy === "function") {
    obj.destroy();
  }
}

exports.destroy = destroy;
/**
 * Shorthand for Binding.UPDATE.
 */

exports.UPDATE = 1;
/**
 * Shorthand for Binding.WATCH.
 */

exports.WATCH = 2;
/**
 * Shorthand for Binding.TWOWAY.
 */

exports.TWOWAY = 3;
/**
 * jWidget binding modes. All options have shorthands.
 */

var Binding;

(function (Binding) {
  /**
   * Bind invoker to argument. Always used as default binding.
   */
  Binding[Binding["UPDATE"] = 1] = "UPDATE";
  /**
   * Bind argument to invoker. Always supplied with a no-argument method, which creates the property automatically.
   */

  Binding[Binding["WATCH"] = 2] = "WATCH";
  /**
   * Bind invoker and argument to each other. UPDATE-binding is applied first.
   */

  Binding[Binding["TWOWAY"] = 3] = "TWOWAY";
})(Binding = exports.Binding || (exports.Binding = {}));
/**
 * Shorthand for CollectionFlags.SILENT.
 */


exports.SILENT = 1;
/**
 * Shorthand for CollectionFlags.ADAPTER.
 */

exports.ADAPTER = 2;
/**
 * jWidget collection flags. All options have shorthands.
 */

var CollectionFlags;

(function (CollectionFlags) {
  /**
   * If on, uses `dummyEvent` implementation for all collection events.
   * Toggle it on only if you know that this collection never gets modified or
   * there are no listeners intersted in its modification.
   */
  CollectionFlags[CollectionFlags["SILENT"] = 1] = "SILENT";
  /**
   * Creates a collection as an adapter over constructor argument.
   * If off, creates a copy. Toggle it on only if noone else manages collection contents.
   */

  CollectionFlags[CollectionFlags["ADAPTER"] = 2] = "ADAPTER";
})(CollectionFlags = exports.CollectionFlags || (exports.CollectionFlags = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/inserter/list.js":
/*!*************************************************!*\
  !*** C:/jwidget/git/main/dist/inserter/list.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Class_1 = __importDefault(__webpack_require__(/*! ../Class */ "../../main/dist/Class.js"));
/**
 * Inserter implementation for List.
 * @param T List item type.
 */


var ListInserter = /*#__PURE__*/function (_Class_1$default) {
  _inherits(ListInserter, _Class_1$default);

  var _super = _createSuper(ListInserter);

  /**
   * @param source Source list.
   * @param config Inserter configuration.
   */
  function ListInserter(source) {
    var _this;

    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, ListInserter);

    _this = _super.call(this);
    _this.source = source;
    _this._add = config.add;
    _this._remove = config.remove;
    _this._clear = config.clear;
    _this._scope = config.scope || _assertThisInitialized(_this);

    _this._addItems(_this.source.items, 0);

    _this.own(source.spliceEvent.listen(_this._onSplice, _assertThisInitialized(_this)));

    _this.own(source.replaceEvent.listen(_this._onReplace, _assertThisInitialized(_this)));

    _this.own(source.moveEvent.listen(_this._onMove, _assertThisInitialized(_this)));

    _this.own(source.clearEvent.listen(_this._onClear, _assertThisInitialized(_this)));

    _this.own(source.reorderEvent.listen(_this._onReorder, _assertThisInitialized(_this)));

    return _this;
  }
  /**
   * @inheritDoc
   */


  _createClass(ListInserter, [{
    key: "destroyObject",
    value: function destroyObject() {
      this._doClearItems(this.source.items);

      this._add = null;
      this._remove = null;
      this._clear = null;
      this._scope = null;

      _get(_getPrototypeOf(ListInserter.prototype), "destroyObject", this).call(this);
    }
  }, {
    key: "_addItems",
    value: function _addItems(items, index) {
      if (!this._add) {
        return;
      }

      for (var i = 0; i < items.length; ++i) {
        this._add.call(this._scope, items[i], i + index);
      }
    }
  }, {
    key: "_removeItems",
    value: function _removeItems(items, index) {
      if (!this._remove) {
        return;
      }

      for (var i = items.length - 1; i >= 0; --i) {
        this._remove.call(this._scope, items[i], i + index);
      }
    }
  }, {
    key: "_doClearItems",
    value: function _doClearItems(items) {
      if (items.length === 0) {
        return;
      }

      if (this._clear) {
        this._clear.call(this._scope, items);
      } else {
        this._removeItems(items, 0);
      }
    }
  }, {
    key: "_onSplice",
    value: function _onSplice(params) {
      var spliceResult = params.spliceResult;
      var oldItems = spliceResult.oldItems;
      var removedItems = spliceResult.removedItems; // if there is an effective clearing function, just reset the controller

      if (this._clear && 3 * removedItems.length > 2 * oldItems.length) {
        this._clear.call(this._scope, oldItems);

        this._addItems(this.source.items, 0);

        return;
      } // else, splice the elements


      var removedItemsList = spliceResult.removedItemsList;
      var addedItemsList = spliceResult.addedItemsList;

      for (var i = removedItemsList.length - 1; i >= 0; --i) {
        var removeRarams = removedItemsList[i];

        this._removeItems(removeRarams.items, removeRarams.index);
      }

      for (var i = 0, l = addedItemsList.length; i < l; ++i) {
        var addParams = addedItemsList[i];

        this._addItems(addParams.items, addParams.index);
      }
    }
  }, {
    key: "_onReplace",
    value: function _onReplace(params) {
      if (this._remove) {
        this._remove.call(this._scope, params.oldItem, params.index);
      }

      if (this._add) {
        this._add.call(this._scope, params.newItem, params.index);
      }
    }
  }, {
    key: "_onMove",
    value: function _onMove(params) {
      if (this._remove) {
        this._remove.call(this._scope, params.item, params.fromIndex);
      }

      if (this._add) {
        this._add.call(this._scope, params.item, params.toIndex);
      }
    }
  }, {
    key: "_onClear",
    value: function _onClear(params) {
      this._doClearItems(params.items);
    }
  }, {
    key: "_onReorder",
    value: function _onReorder(params) {
      this._doClearItems(params.items);

      this._addItems(this.source.items, 0);
    }
  }]);

  return ListInserter;
}(Class_1.default);

exports.default = ListInserter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/internal.js":
/*!********************************************!*\
  !*** C:/jwidget/git/main/dist/internal.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VidSet = exports.VidMap = exports.vid = exports.initReduceState = exports.countMerged = exports.cmpPrimitives = exports.identity = void 0;

function identity(x) {
  return x;
}

exports.identity = identity;

function cmpPrimitives(x, y) {
  return x > y ? 1 : x < y ? -1 : 0;
}

exports.cmpPrimitives = cmpPrimitives;

function countMerged(arrays) {
  var result = 0;

  for (var i = 0, l = arrays.length; i < l; ++i) {
    result += arrays[i].length;
  }

  return result;
}

exports.countMerged = countMerged;

function initReduceState(reducer) {
  return {
    value: typeof reducer.initial === "function" ? reducer.initial() : reducer.initial,
    callback: reducer.callback
  };
}

exports.initReduceState = initReduceState;
var vidWarning = true;
/**
 * Returns value unique ID. Can recognize all primitive types and `Identifiable` instances.
 * For other objects, returns null.
 */

function vid(value) {
  if (value === undefined) {
    return "u";
  }

  if (value === null) {
    return "n";
  }

  if (value === true) {
    return "t";
  }

  if (value === false) {
    return "f";
  }

  var type = _typeof(value);

  if (type === "number") {
    return "n" + value;
  }

  if (type === "string") {
    return "s" + value;
  }

  var iid = value.iid;

  if (iid) {
    return "i" + iid;
  }

  if (vidWarning) {
    vidWarning = false;
    console.error("Inefficient code detected: value ", value, " doesn't have a unique identifier. " + "Consider inheriting it from jwidget/Class, jwidget/Identifiable or " + "assigning a proper getKey callback to a specific collection/algorithm.");
  }

  return undefined;
}

exports.vid = vid;

var VidMap = /*#__PURE__*/function () {
  function VidMap() {
    var _getKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : vid;

    _classCallCheck(this, VidMap);

    this._getKey = _getKey;
    this._dict = {};
    this._array = [];
  }

  _createClass(VidMap, [{
    key: "put",
    value: function put(key, value) {
      if (key === undefined || value === undefined) {
        throw new TypeError("Invalid argument: undefined keys or values are not supported in collections.");
      }

      var id = this._getKey(key);

      var oldPair = id ? this._dict[id] : this._pair(key);

      if (oldPair !== undefined) {
        var oldValue = oldPair.v;

        if (oldValue === value) {
          return value;
        }

        oldPair.v = value;
        this._cache = undefined;
        return oldValue;
      }

      var newPair = {
        k: key,
        v: value
      };

      if (id !== undefined) {
        this._dict[id] = newPair;
      } else {
        this._array.push(newPair);
      }

      this._cache = undefined;
      return undefined;
    }
  }, {
    key: "get",
    value: function get(key) {
      var id = this._getKey(key);

      var pair = id !== undefined ? this._dict[id] : this._pair(key);
      return pair !== undefined ? pair.v : undefined;
    }
  }, {
    key: "remove",
    value: function remove(key) {
      var id = this._getKey(key);

      if (id !== undefined) {
        if (!this._dict.hasOwnProperty(id)) {
          return undefined;
        }

        var _result = this._dict[id].v;
        delete this._dict[id];
        this._cache = undefined;
        return _result;
      }

      var index = this._index(key);

      if (index === undefined) {
        return undefined;
      }

      var result = this._array[index].v;

      this._array.splice(index, 1);

      this._cache = undefined;
      return result;
    }
  }, {
    key: "clear",
    value: function clear() {
      this._dict = {};
      this._array = [];
      this._cache = undefined;
    }
  }, {
    key: "every",
    value: function every(test, scope) {
      scope = scope || this;

      if (!this._array.every(function (pair) {
        return test.call(scope, pair.v, pair.k);
      })) {
        return false;
      }

      var dict = this._dict;

      for (var key in dict) {
        var pair = dict[key];

        if (!test.call(scope, pair.v, pair.k)) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "_index",
    value: function _index(key) {
      var arr = this._array;

      for (var i = 0, l = arr.length; i < l; ++i) {
        var pair = arr[i];

        if (pair.k === key) {
          return i;
        }
      }

      return undefined;
    }
  }, {
    key: "_pair",
    value: function _pair(key) {
      var index = this._index(key);

      return index !== undefined ? this._array[index] : undefined;
    }
  }, {
    key: "values",
    get: function get() {
      if (this._cache !== undefined) {
        return this._cache;
      }

      var result = this._array.map(function (pair) {
        return pair.v;
      });

      var dict = this._dict;

      for (var id in dict) {
        result.push(dict[id].v);
      }

      this._cache = result;
      return result;
    }
  }]);

  return VidMap;
}();

exports.VidMap = VidMap;

var VidSet = /*#__PURE__*/function () {
  function VidSet() {
    var _getKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : vid;

    _classCallCheck(this, VidSet);

    this._getKey = _getKey;
    this._dict = {};
    this._array = [];
  }

  _createClass(VidSet, [{
    key: "add",
    value: function add(item) {
      if (item === undefined) {
        throw new TypeError("Invalid argument: undefined values are not supported in collections.");
      }

      var id = this._getKey(item);

      if (id !== undefined) {
        var dict = this._dict;

        if (dict.hasOwnProperty(id)) {
          return false;
        }

        dict[id] = item;
        this._cache = undefined;
        return true;
      }

      var index = this._index(item);

      if (index !== undefined) {
        return false;
      }

      this._array.push(item);

      this._cache = undefined;
      return undefined;
    }
  }, {
    key: "contains",
    value: function contains(item) {
      var id = this._getKey(item);

      return id !== undefined ? this._dict.hasOwnProperty(id) : this._index(item) !== undefined;
    }
  }, {
    key: "remove",
    value: function remove(item) {
      var id = this._getKey(item);

      if (id !== undefined) {
        if (!this._dict.hasOwnProperty(id)) {
          return false;
        }

        delete this._dict[id];
        this._cache = undefined;
        return true;
      }

      var index = this._index(item);

      if (index === undefined) {
        return false;
      }

      this._array.splice(index, 1);

      this._cache = undefined;
      return true;
    }
  }, {
    key: "clear",
    value: function clear() {
      this._dict = {};
      this._array = [];
      this._cache = undefined;
    }
  }, {
    key: "every",
    value: function every(test, scope) {
      if (!this._array.every(test, scope)) {
        return false;
      }

      var dict = this._dict;

      for (var key in dict) {
        var item = dict[key];

        if (!test.call(this, item)) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "_index",
    value: function _index(item) {
      var arr = this._array;

      for (var i = 0, l = arr.length; i < l; ++i) {
        if (arr[i] === item) {
          return i;
        }
      }

      return undefined;
    }
  }, {
    key: "values",
    get: function get() {
      if (this._cache !== undefined) {
        return this._cache;
      }

      var result = this._array.concat();

      var dict = this._dict;

      for (var id in dict) {
        result.push(dict[id]);
      }

      this._cache = result;
      return result;
    }
  }], [{
    key: "fromArray",
    value: function fromArray(items, getKey) {
      var set = new VidSet(getKey);
      items.forEach(set.add, set);
      return set;
    }
  }, {
    key: "fromDictionary",
    value: function fromDictionary(items, getKey) {
      var set = new VidSet(getKey);

      for (var key in items) {
        set.add(items[key]);
      }

      return set;
    }
  }]);

  return VidSet;
}();

exports.VidSet = VidSet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/mapper/AbstractMapper.js":
/*!*********************************************************!*\
  !*** C:/jwidget/git/main/dist/mapper/AbstractMapper.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Class_1 = __importDefault(__webpack_require__(/*! ../Class */ "../../main/dist/Class.js"));
/**
 * Abstract collection item mapper. Builds new collection of the same type, consisting of results of callback function
 * call for each collection item, and starts continuous synchronization.
 * @param T Source collection item type.
 * @param U Target collection item type.
 */


var AbstractMapper = /*#__PURE__*/function (_Class_1$default) {
  _inherits(AbstractMapper, _Class_1$default);

  var _super = _createSuper(AbstractMapper);

  /**
   * @hidden
   */
  function AbstractMapper(source, _create) {
    var _this;

    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, AbstractMapper);

    _this = _super.call(this);
    _this.source = source;
    _this._create = _create;
    _this._destroy = config.destroy;
    _this._scope = config.scope || _assertThisInitialized(_this);
    return _this;
  }
  /**
   * @inheritDoc
   */


  _createClass(AbstractMapper, [{
    key: "destroyObject",
    value: function destroyObject() {
      this._create = null;
      this._destroy = null;
      this._scope = null;

      _get(_getPrototypeOf(AbstractMapper.prototype), "destroyObject", this).call(this);
    }
  }]);

  return AbstractMapper;
}(Class_1.default);

exports.default = AbstractMapper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXBwZXIvQWJzdHJhY3RNYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkEsSUFBQSxPQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxVQUFBLENBQUEsQ0FBQTtBQUdBOzs7Ozs7OztJQU1lLGM7Ozs7O0FBZ0JkOzs7QUFHQSwwQkFBcUIsTUFBckIsRUFBOEQsT0FBOUQsRUFDMkM7QUFBQTs7QUFBQSxRQUF4QyxNQUF3Qyx1RUFBRixFQUFFOztBQUFBOztBQUMxQztBQUZvQixVQUFBLE1BQUEsR0FBQSxNQUFBO0FBQXlDLFVBQUEsT0FBQSxHQUFBLE9BQUE7QUFHN0QsVUFBSyxRQUFMLEdBQWdCLE1BQU0sQ0FBQyxPQUF2QjtBQUNBLFVBQUssTUFBTCxHQUFjLE1BQU0sQ0FBQyxLQUFQLGlDQUFkO0FBSDBDO0FBSTFDO0FBRUQ7Ozs7Ozs7b0NBR3VCO0FBQ3RCLFdBQUssT0FBTCxHQUFlLElBQWY7QUFDQSxXQUFLLFFBQUwsR0FBZ0IsSUFBaEI7QUFDQSxXQUFLLE1BQUwsR0FBYyxJQUFkOztBQUNBO0FBQ0E7Ozs7RUFsQzBDLE9BQUEsQ0FBQSxPOztBQXFDNUMsT0FBQSxDQUFBLE9BQUEsR0FBZSxjQUFmIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IENsYXNzIGZyb20gJy4uL0NsYXNzJztcbmltcG9ydCBSZWFkb25seUNvbGxlY3Rpb24gZnJvbSAnLi4vUmVhZG9ubHlDb2xsZWN0aW9uJztcblxuLyoqXG4gKiBBYnN0cmFjdCBjb2xsZWN0aW9uIGl0ZW0gbWFwcGVyLiBCdWlsZHMgbmV3IGNvbGxlY3Rpb24gb2YgdGhlIHNhbWUgdHlwZSwgY29uc2lzdGluZyBvZiByZXN1bHRzIG9mIGNhbGxiYWNrIGZ1bmN0aW9uXG4gKiBjYWxsIGZvciBlYWNoIGNvbGxlY3Rpb24gaXRlbSwgYW5kIHN0YXJ0cyBjb250aW51b3VzIHN5bmNocm9uaXphdGlvbi5cbiAqIEBwYXJhbSBUIFNvdXJjZSBjb2xsZWN0aW9uIGl0ZW0gdHlwZS5cbiAqIEBwYXJhbSBVIFRhcmdldCBjb2xsZWN0aW9uIGl0ZW0gdHlwZS5cbiAqL1xuYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RNYXBwZXI8VCwgVT4gZXh0ZW5kcyBDbGFzcyB7XG5cdC8qKlxuXHQgKiBAaGlkZGVuXG5cdCAqL1xuXHRwcm90ZWN0ZWQgX2Rlc3Ryb3k6IChpdGVtOiBVLCBkYXRhOiBUKSA9PiB2b2lkO1xuXG5cdC8qKlxuXHQgKiBAaGlkZGVuXG5cdCAqL1xuXHRwcm90ZWN0ZWQgX3Njb3BlOiBhbnk7XG5cblx0LyoqXG5cdCAqIFRhcmdldCBjb2xsZWN0aW9uLlxuXHQgKi9cblx0cmVhZG9ubHkgdGFyZ2V0OiBSZWFkb25seUNvbGxlY3Rpb248VT47XG5cblx0LyoqXG5cdCAqIEBoaWRkZW5cblx0ICovXG5cdGNvbnN0cnVjdG9yKHJlYWRvbmx5IHNvdXJjZTogUmVhZG9ubHlDb2xsZWN0aW9uPFQ+LCBwcm90ZWN0ZWQgX2NyZWF0ZTogKGRhdGE6IFQpID0+IFUsXG5cdFx0XHRcdGNvbmZpZzogQWJzdHJhY3RNYXBwZXIuQ29uZmlnPFQsIFU+ID0ge30pIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMuX2Rlc3Ryb3kgPSBjb25maWcuZGVzdHJveTtcblx0XHR0aGlzLl9zY29wZSA9IGNvbmZpZy5zY29wZSB8fCB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwcm90ZWN0ZWQgZGVzdHJveU9iamVjdCgpIHtcblx0XHR0aGlzLl9jcmVhdGUgPSBudWxsO1xuXHRcdHRoaXMuX2Rlc3Ryb3kgPSBudWxsO1xuXHRcdHRoaXMuX3Njb3BlID0gbnVsbDtcblx0XHRzdXBlci5kZXN0cm95T2JqZWN0KCk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQWJzdHJhY3RNYXBwZXI7XG5cbm5hbWVzcGFjZSBBYnN0cmFjdE1hcHBlciB7XG5cdGV4cG9ydCBpbnRlcmZhY2UgRGVzdHJveUNhbGxiYWNrPFQsIFU+IHtcblx0XHQodGFyZ2V0VmFsdWU6IFUsIHNvdXJjZVZhbHVlOiBUKTogYW55O1xuXHR9XG5cblx0LyoqXG5cdCAqIEFic3RyYWN0TWFwcGVyIGNvbmZpZ3VyYXRpb24uXG5cdCAqIEBwYXJhbSBUIFNvdXJjZSBjb2xsZWN0aW9uIGl0ZW0gdHlwZS5cblx0ICogQHBhcmFtIFUgVGFyZ2V0IGNvbGxlY3Rpb24gaXRlbSB0eXBlLlxuXHQgKi9cblx0ZXhwb3J0IGludGVyZmFjZSBDb25maWc8VCwgVT4ge1xuXHRcdC8qKlxuXHRcdCAqIEl0ZW0gZGVzdHJ1Y3Rvci4gRGVzdHJveXMgYW4gaXRlbSBvZiB0YXJnZXQgY29sbGVjdGlvbi5cblx0XHQgKi9cblx0XHRyZWFkb25seSBkZXN0cm95PzogRGVzdHJveUNhbGxiYWNrPFQsIFU+O1xuXG5cdFx0LyoqXG5cdFx0ICogQ2FsbCBzY29wZSBvZiBtYXBwZXIncyBgY3JlYXRlYCBhbmQgYGRlc3Ryb3lgIGNhbGxiYWNrcy4gRGVmYXVsdHMgdG8gdGhlIHN5bmNocm9uaXplciBpdHNlbGYuXG5cdFx0ICovXG5cdFx0cmVhZG9ubHkgc2NvcGU/OiBhbnk7XG5cblx0XHQvKipcblx0XHQgKiBJZGVudGlmaWVzIGFuIGl0ZW0gaW4gdGhlIGF1dG8tY3JlYXRlZCB0YXJnZXQgY29sbGVjdGlvbiBmb3Igb3B0aW1pemF0aW9uIG9mIHNvbWUgYWxnb3JpdGhtcy5cblx0XHQgKi9cblx0XHRyZWFkb25seSBnZXRLZXk/OiAoaXRlbTogVSkgPT4gYW55O1xuXHR9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/mapper/collection.js":
/*!*****************************************************!*\
  !*** C:/jwidget/git/main/dist/mapper/collection.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapCollection = exports.createMapper = void 0;

var List_1 = __importDefault(__webpack_require__(/*! ../List */ "../../main/dist/List.js"));

var Map_1 = __importDefault(__webpack_require__(/*! ../Map */ "../../main/dist/Map.js"));

var Set_1 = __importDefault(__webpack_require__(/*! ../Set */ "../../main/dist/Set.js"));

var list_1 = __importStar(__webpack_require__(/*! ./list */ "../../main/dist/mapper/list.js"));

var map_1 = __importStar(__webpack_require__(/*! ./map */ "../../main/dist/mapper/map.js"));

var set_1 = __importStar(__webpack_require__(/*! ./set */ "../../main/dist/mapper/set.js"));
/**
 * Creates a mapper matching the source collection type.
 * @param source Source collection.
 * @param create Mapping callback.
 * @param config Mapper configuration.
 * @returns Collection mapper.
 */


function createMapper(source, create, config) {
  return source instanceof List_1.default ? new list_1.default(source, create, config) : source instanceof Map_1.default ? new map_1.default(source, create, config) : source instanceof Set_1.default ? new set_1.default(source, create, config) : null;
}

exports.createMapper = createMapper;
/**
 * Maps a collection and starts synchronization.
 * @param source Source collection.
 * @param create Mapping callback.
 * @param config Mapper configuration.
 * @returns Target collection.
 */

function mapCollection(source, create, config) {
  return source instanceof List_1.default ? list_1.mapList(source, create, config) : source instanceof Map_1.default ? map_1.mapMap(source, create, config) : source instanceof Set_1.default ? set_1.mapSet(source, create, config) : null;
}

exports.mapCollection = mapCollection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXBwZXIvY29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCQSxJQUFBLE1BQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsS0FBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsUUFBQSxDQUFBLENBQUE7O0FBRUEsSUFBQSxLQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQTs7QUFFQSxJQUFBLE1BQUEsR0FBQSxZQUFBLENBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsS0FBQSxHQUFBLFlBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxLQUFBLEdBQUEsWUFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQTtBQUVBOzs7Ozs7Ozs7QUFPQSxTQUFnQixZQUFoQixDQUFtQyxNQUFuQyxFQUFrRSxNQUFsRSxFQUNtQyxNQURuQyxFQUN1RTtBQUN0RSxTQUFRLE1BQU0sWUFBWSxNQUFBLENBQUEsT0FBbkIsR0FBMkIsSUFBSSxNQUFBLENBQUEsT0FBSixDQUFlLE1BQWYsRUFBdUIsTUFBdkIsRUFBK0IsTUFBL0IsQ0FBM0IsR0FDTCxNQUFNLFlBQVksS0FBQSxDQUFBLE9BQW5CLEdBQTBCLElBQUksS0FBQSxDQUFBLE9BQUosQ0FBYyxNQUFkLEVBQXNCLE1BQXRCLEVBQThCLE1BQTlCLENBQTFCLEdBQ0UsTUFBTSxZQUFZLEtBQUEsQ0FBQSxPQUFuQixHQUEwQixJQUFJLEtBQUEsQ0FBQSxPQUFKLENBQWMsTUFBZCxFQUFzQixNQUF0QixFQUE4QixNQUE5QixDQUExQixHQUFrRSxJQUZwRTtBQUdBOztBQUxELE9BQUEsQ0FBQSxZQUFBLEdBQUEsWUFBQTtBQU9BOzs7Ozs7OztBQU9BLFNBQWdCLGFBQWhCLENBQW9DLE1BQXBDLEVBQW1FLE1BQW5FLEVBQ29DLE1BRHBDLEVBQ3dFO0FBQ3ZFLFNBQVEsTUFBTSxZQUFZLE1BQUEsQ0FBQSxPQUFuQixHQUEyQixNQUFBLENBQUEsT0FBQSxDQUFRLE1BQVIsRUFBZ0IsTUFBaEIsRUFBd0IsTUFBeEIsQ0FBM0IsR0FDTCxNQUFNLFlBQVksS0FBQSxDQUFBLE9BQW5CLEdBQTBCLEtBQUEsQ0FBQSxNQUFBLENBQU8sTUFBUCxFQUFlLE1BQWYsRUFBdUIsTUFBdkIsQ0FBMUIsR0FDRSxNQUFNLFlBQVksS0FBQSxDQUFBLE9BQW5CLEdBQTBCLEtBQUEsQ0FBQSxNQUFBLENBQU8sTUFBUCxFQUFlLE1BQWYsRUFBdUIsTUFBdkIsQ0FBMUIsR0FBMkQsSUFGN0Q7QUFHQTs7QUFMRCxPQUFBLENBQUEsYUFBQSxHQUFBLGFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgRGVzdHJveWFibGVSZWFkb25seUNvbGxlY3Rpb24gZnJvbSAnLi4vRGVzdHJveWFibGVSZWFkb25seUNvbGxlY3Rpb24nO1xuaW1wb3J0IExpc3QgZnJvbSAnLi4vTGlzdCc7XG5pbXBvcnQgTWFwIGZyb20gJy4uL01hcCc7XG5pbXBvcnQgUmVhZG9ubHlDb2xsZWN0aW9uIGZyb20gJy4uL1JlYWRvbmx5Q29sbGVjdGlvbic7XG5pbXBvcnQgU2V0IGZyb20gJy4uL1NldCc7XG5pbXBvcnQgQWJzdHJhY3RNYXBwZXIgZnJvbSAnLi9BYnN0cmFjdE1hcHBlcic7XG5pbXBvcnQge2RlZmF1bHQgYXMgTGlzdE1hcHBlciwgbWFwTGlzdH0gZnJvbSAnLi9saXN0JztcbmltcG9ydCB7ZGVmYXVsdCBhcyBNYXBNYXBwZXIsIG1hcE1hcH0gZnJvbSAnLi9tYXAnO1xuaW1wb3J0IHtkZWZhdWx0IGFzIFNldE1hcHBlciwgbWFwU2V0fSBmcm9tICcuL3NldCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcHBlciBtYXRjaGluZyB0aGUgc291cmNlIGNvbGxlY3Rpb24gdHlwZS5cbiAqIEBwYXJhbSBzb3VyY2UgU291cmNlIGNvbGxlY3Rpb24uXG4gKiBAcGFyYW0gY3JlYXRlIE1hcHBpbmcgY2FsbGJhY2suXG4gKiBAcGFyYW0gY29uZmlnIE1hcHBlciBjb25maWd1cmF0aW9uLlxuICogQHJldHVybnMgQ29sbGVjdGlvbiBtYXBwZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNYXBwZXI8VCwgVT4oc291cmNlOiBSZWFkb25seUNvbGxlY3Rpb248VD4sIGNyZWF0ZTogKHNvdXJjZVZhbHVlOiBUKSA9PiBVLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc/OiBBYnN0cmFjdE1hcHBlci5Db25maWc8VCwgVT4pOiBBYnN0cmFjdE1hcHBlcjxULCBVPiB7XG5cdHJldHVybiAoc291cmNlIGluc3RhbmNlb2YgTGlzdCkgPyBuZXcgTGlzdE1hcHBlcihzb3VyY2UsIGNyZWF0ZSwgY29uZmlnKSA6XG5cdFx0KHNvdXJjZSBpbnN0YW5jZW9mIE1hcCkgPyBuZXcgTWFwTWFwcGVyKHNvdXJjZSwgY3JlYXRlLCBjb25maWcpIDpcblx0XHRcdChzb3VyY2UgaW5zdGFuY2VvZiBTZXQpID8gbmV3IFNldE1hcHBlcihzb3VyY2UsIGNyZWF0ZSwgY29uZmlnKSA6IG51bGw7XG59XG5cbi8qKlxuICogTWFwcyBhIGNvbGxlY3Rpb24gYW5kIHN0YXJ0cyBzeW5jaHJvbml6YXRpb24uXG4gKiBAcGFyYW0gc291cmNlIFNvdXJjZSBjb2xsZWN0aW9uLlxuICogQHBhcmFtIGNyZWF0ZSBNYXBwaW5nIGNhbGxiYWNrLlxuICogQHBhcmFtIGNvbmZpZyBNYXBwZXIgY29uZmlndXJhdGlvbi5cbiAqIEByZXR1cm5zIFRhcmdldCBjb2xsZWN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFwQ29sbGVjdGlvbjxULCBVPihzb3VyY2U6IFJlYWRvbmx5Q29sbGVjdGlvbjxUPiwgY3JlYXRlOiAoaXRlbTogVCkgPT4gVSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZz86IEFic3RyYWN0TWFwcGVyLkNvbmZpZzxULCBVPik6IERlc3Ryb3lhYmxlUmVhZG9ubHlDb2xsZWN0aW9uPFU+IHtcblx0cmV0dXJuIChzb3VyY2UgaW5zdGFuY2VvZiBMaXN0KSA/IG1hcExpc3Qoc291cmNlLCBjcmVhdGUsIGNvbmZpZykgOlxuXHRcdChzb3VyY2UgaW5zdGFuY2VvZiBNYXApID8gbWFwTWFwKHNvdXJjZSwgY3JlYXRlLCBjb25maWcpIDpcblx0XHRcdChzb3VyY2UgaW5zdGFuY2VvZiBTZXQpID8gbWFwU2V0KHNvdXJjZSwgY3JlYXRlLCBjb25maWcpIDogbnVsbDtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "../../main/dist/mapper/list.js":
/*!***********************************************!*\
  !*** C:/jwidget/git/main/dist/mapper/list.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapList = void 0;

var Destructor_1 = __importDefault(__webpack_require__(/*! ../Destructor */ "../../main/dist/Destructor.js"));

var index_1 = __webpack_require__(/*! ../index */ "../../main/dist/index.js");

var IndexItems_1 = __importDefault(__webpack_require__(/*! ../IndexItems */ "../../main/dist/IndexItems.js"));

var List_1 = __importDefault(__webpack_require__(/*! ../List */ "../../main/dist/List.js"));

var AbstractMapper_1 = __importDefault(__webpack_require__(/*! ./AbstractMapper */ "../../main/dist/mapper/AbstractMapper.js"));
/**
 * AbstractMapper implementation for List.
 * @param T Source collection item type.
 * @param U Target collection item type.
 */


var ListMapper = /*#__PURE__*/function (_AbstractMapper_1$def) {
  _inherits(ListMapper, _AbstractMapper_1$def);

  var _super = _createSuper(ListMapper);

  /**
   * @param source Source list.
   * @param create Mapping callback.
   * @param config Mapper configuration.
   */
  function ListMapper(source, create) {
    var _this;

    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, ListMapper);

    _this = _super.call(this, source, create, config);
    _this._targetCreated = config.target == null;
    _this.target = _this._targetCreated ? new List_1.default(config.getKey, _this.source.silent) : config.target;

    _this.target.addAll(_this._createItems(_this.source.items));

    _this.own(source.spliceEvent.listen(_this._onSplice, _assertThisInitialized(_this)));

    _this.own(source.replaceEvent.listen(_this._onReplace, _assertThisInitialized(_this)));

    _this.own(source.moveEvent.listen(_this._onMove, _assertThisInitialized(_this)));

    _this.own(source.clearEvent.listen(_this._onClear, _assertThisInitialized(_this)));

    _this.own(source.reorderEvent.listen(_this._onReorder, _assertThisInitialized(_this)));

    return _this;
  }
  /**
   * @inheritDoc
   */


  _createClass(ListMapper, [{
    key: "destroyObject",
    value: function destroyObject() {
      this._destroyItems(this.target.clear() || [], this.source.items);

      if (this._targetCreated) {
        this.target.destroy();
      }

      _get(_getPrototypeOf(ListMapper.prototype), "destroyObject", this).call(this);
    }
  }, {
    key: "_createItems",
    value: function _createItems(datas) {
      var items = [];

      for (var i = 0, l = datas.length; i < l; ++i) {
        items.push(this._create.call(this._scope, datas[i]));
      }

      return items;
    }
  }, {
    key: "_destroyItems",
    value: function _destroyItems(items, datas) {
      if (this._destroy === undefined) {
        return;
      }

      for (var i = items.length - 1; i >= 0; --i) {
        this._destroy.call(this._scope, items[i], datas[i]);
      }
    }
  }, {
    key: "_onSplice",
    value: function _onSplice(params) {
      var sourceResult = params.spliceResult;
      var sourceAddedItemsList = sourceResult.addedItemsList;
      var targetAddParamsList = [];

      for (var i = 0, l = sourceAddedItemsList.length; i < l; ++i) {
        var addParams = sourceAddedItemsList[i];
        targetAddParamsList.push(new IndexItems_1.default(addParams.index, this._createItems(addParams.items)));
      }

      var targetResult = this.target.trySplice(sourceResult.removeParamsList, targetAddParamsList);
      var sourceRemovedItemsList = sourceResult.removedItemsList;
      var targetRemovedItemsList = targetResult.removedItemsList;

      for (var i = targetRemovedItemsList.length - 1; i >= 0; --i) {
        this._destroyItems(targetRemovedItemsList[i].items, sourceRemovedItemsList[i].items);
      }
    }
  }, {
    key: "_onReplace",
    value: function _onReplace(params) {
      var newItem = this._create.call(this._scope, params.newItem);

      var oldItem = this.target.trySet(params.index, newItem).value;

      this._destroy.call(this._scope, oldItem, params.oldItem);
    }
  }, {
    key: "_onMove",
    value: function _onMove(params) {
      this.target.tryMove(params.fromIndex, params.toIndex);
    }
  }, {
    key: "_onClear",
    value: function _onClear(params) {
      this._destroyItems(this.target.clear(), params.items);
    }
  }, {
    key: "_onReorder",
    value: function _onReorder(params) {
      this.target.tryReorder(params.indexArray);
    }
  }]);

  return ListMapper;
}(AbstractMapper_1.default);

exports.default = ListMapper;
/**
 * Maps a list and starts synchronization.
 * @param source Source list.
 * @param create Mapping callback.
 * @param config Mapper configuration.
 * @returns Target list.
 */

function mapList(source, create) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (!source.silent) {
    var _target = new List_1.default(config.getKey);

    return _target.owning(new ListMapper(source, create, {
      target: _target,
      destroy: config.destroy,
      scope: config.scope,
      getKey: config.getKey
    }));
  }

  var target = source.map(create, config.scope, config.getKey);

  if (config.destroy === index_1.destroy) {
    target.ownItems();
  } else if (config.destroy) {
    var sourceValues = source.items.concat();
    target.own(new Destructor_1.default(function () {
      return target.backEvery(function (item, index) {
        config.destroy.call(config.scope, item, sourceValues[index]);
        return true;
      });
    }));
  }

  return target;
}

exports.mapList = mapList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/mapper/map.js":
/*!**********************************************!*\
  !*** C:/jwidget/git/main/dist/mapper/map.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapMap = void 0;

var Destructor_1 = __importDefault(__webpack_require__(/*! ../Destructor */ "../../main/dist/Destructor.js"));

var DictionaryUtils = __importStar(__webpack_require__(/*! ../DictionaryUtils */ "../../main/dist/DictionaryUtils.js"));

var index_1 = __webpack_require__(/*! ../index */ "../../main/dist/index.js");

var Map_1 = __importDefault(__webpack_require__(/*! ../Map */ "../../main/dist/Map.js"));

var AbstractMapper_1 = __importDefault(__webpack_require__(/*! ./AbstractMapper */ "../../main/dist/mapper/AbstractMapper.js"));
/**
 * AbstractMapper implementation for Map.
 * @param T Source collection item type.
 * @param U Target collection item type.
 */


var MapMapper = /*#__PURE__*/function (_AbstractMapper_1$def) {
  _inherits(MapMapper, _AbstractMapper_1$def);

  var _super = _createSuper(MapMapper);

  /**
   * @param source Source map.
   * @param create Mapping callback.
   * @param config Mapper configuration.
   */
  function MapMapper(source, create) {
    var _this;

    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, MapMapper);

    _this = _super.call(this, source, create, config);
    _this._targetCreated = config.target == null;
    _this.target = _this._targetCreated ? new Map_1.default(config.getKey, _this.source.silent) : config.target;

    _this.target.tryPutAll(_this._createItems(source.items));

    _this.own(source.spliceEvent.listen(_this._onSplice, _assertThisInitialized(_this)));

    _this.own(source.reindexEvent.listen(_this._onReindex, _assertThisInitialized(_this)));

    _this.own(source.clearEvent.listen(_this._onClear, _assertThisInitialized(_this)));

    return _this;
  }
  /**
   * @inheritDoc
   */


  _createClass(MapMapper, [{
    key: "destroyObject",
    value: function destroyObject() {
      this._destroyItems(this.target.removeAllVerbose(this.source.getKeys().items), this.source.items);

      if (this._targetCreated) {
        this.target.destroy();
      }

      _get(_getPrototypeOf(MapMapper.prototype), "destroyObject", this).call(this);
    }
  }, {
    key: "_createItems",
    value: function _createItems(datas) {
      var items = {};

      for (var key in datas) {
        items[key] = this._create.call(this._scope, datas[key]);
      }

      return items;
    }
  }, {
    key: "_destroyItems",
    value: function _destroyItems(items, datas) {
      if (this._destroy === undefined) {
        return;
      }

      for (var key in items) {
        this._destroy.call(this._scope, items[key], datas[key]);
      }
    }
  }, {
    key: "_onSplice",
    value: function _onSplice(params) {
      var sourceResult = params.spliceResult;
      var removedDatas = sourceResult.removedItems;
      var addedDatas = sourceResult.addedItems;
      var targetResult = this.target.trySplice(DictionaryUtils.getRemovedKeys(removedDatas, addedDatas), this._createItems(addedDatas));

      if (targetResult !== undefined) {
        this._destroyItems(targetResult.removedItems, removedDatas);
      }
    }
  }, {
    key: "_onReindex",
    value: function _onReindex(params) {
      this.target.tryReindex(params.keyMap);
    }
  }, {
    key: "_onClear",
    value: function _onClear(params) {
      var datas = params.items;

      this._destroyItems(this.target.tryRemoveAll(Object.keys(datas)), datas);
    }
  }]);

  return MapMapper;
}(AbstractMapper_1.default);

exports.default = MapMapper;
/**
 * Maps a map and starts synchronization.
 * @param source Source map.
 * @param create Mapping callback.
 * @param config Mapper configuration.
 * @returns Target map.
 */

function mapMap(source, create) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (!source.silent) {
    var _target = new Map_1.default(config.getKey);

    return _target.owning(new MapMapper(source, create, {
      target: _target,
      destroy: config.destroy,
      scope: config.scope
    }));
  }

  var target = source.map(create, config.scope, config.getKey);

  if (config.destroy === index_1.destroy) {
    target.ownItems();
  } else if (config.destroy) {
    var sourceValues = DictionaryUtils.clone(source.items);
    target.own(new Destructor_1.default(function () {
      return target.every(function (item, key) {
        config.destroy.call(config.scope, item, sourceValues[key]);
        return true;
      });
    }));
  }

  return target;
}

exports.mapMap = mapMap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/mapper/set.js":
/*!**********************************************!*\
  !*** C:/jwidget/git/main/dist/mapper/set.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapSet = void 0;

var Destructor_1 = __importDefault(__webpack_require__(/*! ../Destructor */ "../../main/dist/Destructor.js"));

var index_1 = __webpack_require__(/*! ../index */ "../../main/dist/index.js");

var internal_1 = __webpack_require__(/*! ../internal */ "../../main/dist/internal.js");

var Set_1 = __importDefault(__webpack_require__(/*! ../Set */ "../../main/dist/Set.js"));

var AbstractMapper_1 = __importDefault(__webpack_require__(/*! ./AbstractMapper */ "../../main/dist/mapper/AbstractMapper.js"));
/**
 * AbstractMapper implementation for Set.
 * @param T Source collection item type.
 * @param U Target collection item type.
 */


var SetMapper = /*#__PURE__*/function (_AbstractMapper_1$def) {
  _inherits(SetMapper, _AbstractMapper_1$def);

  var _super = _createSuper(SetMapper);

  /**
   * @param source Source set.
   * @param create Mapping callback.
   * @param config Mapper configuration.
   */
  function SetMapper(source, create) {
    var _this;

    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, SetMapper);

    _this = _super.call(this, source, create, config);
    _this._items = new internal_1.VidMap(source.getKey);
    _this._targetCreated = config.target == null;
    _this.target = _this._targetCreated ? new Set_1.default(config.getKey, _this.source.silent) : config.target;

    _this.target.tryAddAll(_this._createItems(source.toArray()));

    _this.own(source.spliceEvent.listen(_this._onSplice, _assertThisInitialized(_this)));

    _this.own(source.clearEvent.listen(_this._onClear, _assertThisInitialized(_this)));

    return _this;
  }
  /**
   * @inheritDoc
   */


  _createClass(SetMapper, [{
    key: "destroyObject",
    value: function destroyObject() {
      var datas = this.source.toArray();
      this.target.tryRemoveAll(this._getItems(datas));

      this._destroyItems(datas);

      if (this._targetCreated) {
        this.target.destroy();
      }

      _get(_getPrototypeOf(SetMapper.prototype), "destroyObject", this).call(this);
    }
  }, {
    key: "_getItems",
    value: function _getItems(datas) {
      var _this2 = this;

      return datas.map(function (data) {
        return _this2._items.get(data);
      });
    }
  }, {
    key: "_createItems",
    value: function _createItems(datas) {
      var items = [];

      for (var i = 0, l = datas.length; i < l; ++i) {
        var data = datas[i];

        var item = this._create.call(this._scope || this, data);

        items.push(item);

        this._items.put(data, item);
      }

      return items;
    }
  }, {
    key: "_destroyItems",
    value: function _destroyItems(datas) {
      if (this._destroy === undefined) {
        return;
      }

      for (var i = datas.length - 1; i >= 0; --i) {
        var data = datas[i];

        var item = this._items.remove(data);

        this._destroy.call(this._scope || this, item, data);
      }
    }
  }, {
    key: "_onSplice",
    value: function _onSplice(params) {
      var spliceResult = params.spliceResult;
      var removedDatas = spliceResult.removedItems;
      var addedDatas = spliceResult.addedItems;
      this.target.trySplice(this._getItems(removedDatas), this._createItems(addedDatas));

      this._destroyItems(removedDatas);
    }
  }, {
    key: "_onClear",
    value: function _onClear(params) {
      var datas = params.items;
      this.target.tryRemoveAll(this._getItems(datas));

      this._destroyItems(datas);
    }
  }]);

  return SetMapper;
}(AbstractMapper_1.default);

exports.default = SetMapper;
/**
 * Maps a set and starts synchronization.
 * @param source Source set.
 * @param create Mapping callback.
 * @param config Mapper configuration.
 * @returns Target set.
 */

function mapSet(source, create) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (!source.silent) {
    var _target = new Set_1.default(config.getKey);

    return _target.owning(new SetMapper(source, create, {
      target: _target,
      destroy: config.destroy,
      scope: config.scope
    }));
  }

  var target = source.map(create, config.scope, config.getKey);

  if (config.destroy === index_1.destroy) {
    target.ownItems();
  } else if (config.destroy) {
    var items = new internal_1.VidMap(source.getKey);
    target.own(new Destructor_1.default(function () {
      return items.every(function (item, key) {
        config.destroy.call(config.scope, item, key);
        return true;
      });
    }));
  }

  return target;
}

exports.mapSet = mapSet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../main/dist/observer/AbstractObserver.js":
/*!*************************************************************!*\
  !*** C:/jwidget/git/main/dist/observer/AbstractObserver.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Class_1 = __importDefault(__webpack_require__(/*! ../Class */ "../../main/dist/Class.js"));
/**
 * Collection observer. Listens all collection events and reduces them to 2 granular functions:
 * item is added and item is removed.
 * @param T Collection item type.
 */


var AbstractObserver = /*#__PURE__*/function (_Class_1$default) {
  _inherits(AbstractObserver, _Class_1$default);

  var _super = _createSuper(AbstractObserver);

  /**
   * @hidden
   */
  function AbstractObserver(source, config) {
    var _this;

    _classCallCheck(this, AbstractObserver);

    _this = _super.call(this);
    _this.source = source;
    _this._add = config.add;
    _this._remove = config.remove;
    _this._clear = config.clear;
    _this._scope = config.scope || _assertThisInitialized(_this);

    _this._addItems(source.asArray());

    return _this;
  }
  /**
   * @inheritDoc
   */


  _createClass(AbstractObserver, [{
    key: "destroyObject",
    value: function destroyObject() {
      this._doClearItems(this.source.asArray());

      this._add = null;
      this._remove = null;
      this._clear = null;
      this._scope = null;

      _get(_getPrototypeOf(AbstractObserver.prototype), "destroyObject", this).call(this);
    }
    /**
     * @hidden
     */

  }, {
    key: "_addItems",
    value: function _addItems(items) {
      if (!this._add) {
        return;
      }

      for (var i = 0, l = items.length; i < l; ++i) {
        this._add.call(this._scope, items[i]);
      }
    }
    /**
     * @hidden
     */

  }, {
    key: "_removeItems",
    value: function _removeItems(items) {
      if (!this._remove) {
        return;
      }

      for (var i = items.length - 1; i >= 0; --i) {
        this._remove.call(this._scope, items[i]);
      }
    }
    /**
     * @hidden
     */

  }, {
    key: "_doClearItems",
    value: function _doClearItems(items) {
      if (items.length === 0) {
        return;
      }

      if (this._clear) {
        this._clear.call(this._scope, items);
      } else {
        this._removeItems(items);
      }
    }
  }]);

  return AbstractObserver;
}(Class_1.default);

exports.default = AbstractObserver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vYnNlcnZlci9BYnN0cmFjdE9ic2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBLElBQUEsT0FBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsVUFBQSxDQUFBLENBQUE7QUFHQTs7Ozs7OztJQUtlLGdCOzs7OztBQXFCZDs7O0FBR0EsNEJBQXFCLE1BQXJCLEVBQW9ELE1BQXBELEVBQXNGO0FBQUE7O0FBQUE7O0FBQ3JGO0FBRG9CLFVBQUEsTUFBQSxHQUFBLE1BQUE7QUFFcEIsVUFBSyxJQUFMLEdBQVksTUFBTSxDQUFDLEdBQW5CO0FBQ0EsVUFBSyxPQUFMLEdBQWUsTUFBTSxDQUFDLE1BQXRCO0FBQ0EsVUFBSyxNQUFMLEdBQWMsTUFBTSxDQUFDLEtBQXJCO0FBQ0EsVUFBSyxNQUFMLEdBQWMsTUFBTSxDQUFDLEtBQVAsaUNBQWQ7O0FBQ0EsVUFBSyxTQUFMLENBQWUsTUFBTSxDQUFDLE9BQVAsRUFBZjs7QUFOcUY7QUFPckY7QUFFRDs7Ozs7OztvQ0FHdUI7QUFDdEIsV0FBSyxhQUFMLENBQW1CLEtBQUssTUFBTCxDQUFZLE9BQVosRUFBbkI7O0FBQ0EsV0FBSyxJQUFMLEdBQVksSUFBWjtBQUNBLFdBQUssT0FBTCxHQUFlLElBQWY7QUFDQSxXQUFLLE1BQUwsR0FBYyxJQUFkO0FBQ0EsV0FBSyxNQUFMLEdBQWMsSUFBZDs7QUFDQTtBQUNBO0FBRUQ7Ozs7Ozs4QkFHb0IsSyxFQUFVO0FBQzdCLFVBQUksQ0FBQyxLQUFLLElBQVYsRUFBZ0I7QUFDZjtBQUNBOztBQUNELFdBQUssSUFBSSxDQUFDLEdBQUcsQ0FBUixFQUFXLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBMUIsRUFBa0MsQ0FBQyxHQUFHLENBQXRDLEVBQXlDLEVBQUUsQ0FBM0MsRUFBOEM7QUFDN0MsYUFBSyxJQUFMLENBQVUsSUFBVixDQUFlLEtBQUssTUFBcEIsRUFBNEIsS0FBSyxDQUFDLENBQUQsQ0FBakM7QUFDQTtBQUNEO0FBRUQ7Ozs7OztpQ0FHdUIsSyxFQUFVO0FBQ2hDLFVBQUksQ0FBQyxLQUFLLE9BQVYsRUFBbUI7QUFDbEI7QUFDQTs7QUFDRCxXQUFLLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFOLEdBQWUsQ0FBNUIsRUFBK0IsQ0FBQyxJQUFJLENBQXBDLEVBQXVDLEVBQUUsQ0FBekMsRUFBNEM7QUFDM0MsYUFBSyxPQUFMLENBQWEsSUFBYixDQUFrQixLQUFLLE1BQXZCLEVBQStCLEtBQUssQ0FBQyxDQUFELENBQXBDO0FBQ0E7QUFDRDtBQUVEOzs7Ozs7a0NBR3dCLEssRUFBVTtBQUNqQyxVQUFJLEtBQUssQ0FBQyxNQUFOLEtBQWlCLENBQXJCLEVBQXdCO0FBQ3ZCO0FBQ0E7O0FBQ0QsVUFBSSxLQUFLLE1BQVQsRUFBaUI7QUFDaEIsYUFBSyxNQUFMLENBQVksSUFBWixDQUFpQixLQUFLLE1BQXRCLEVBQThCLEtBQTlCO0FBQ0EsT0FGRCxNQUVPO0FBQ04sYUFBSyxZQUFMLENBQWtCLEtBQWxCO0FBQ0E7QUFDRDs7OztFQWpGeUMsT0FBQSxDQUFBLE87O0FBb0YzQyxPQUFBLENBQUEsT0FBQSxHQUFlLGdCQUFmIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IENsYXNzIGZyb20gJy4uL0NsYXNzJztcbmltcG9ydCBSZWFkb25seUNvbGxlY3Rpb24gZnJvbSAnLi4vUmVhZG9ubHlDb2xsZWN0aW9uJztcblxuLyoqXG4gKiBDb2xsZWN0aW9uIG9ic2VydmVyLiBMaXN0ZW5zIGFsbCBjb2xsZWN0aW9uIGV2ZW50cyBhbmQgcmVkdWNlcyB0aGVtIHRvIDIgZ3JhbnVsYXIgZnVuY3Rpb25zOlxuICogaXRlbSBpcyBhZGRlZCBhbmQgaXRlbSBpcyByZW1vdmVkLlxuICogQHBhcmFtIFQgQ29sbGVjdGlvbiBpdGVtIHR5cGUuXG4gKi9cbmFic3RyYWN0IGNsYXNzIEFic3RyYWN0T2JzZXJ2ZXI8VD4gZXh0ZW5kcyBDbGFzcyB7XG5cdC8qKlxuXHQgKiBAaGlkZGVuXG5cdCAqL1xuXHRwcm90ZWN0ZWQgX2FkZDogKGl0ZW06IFQpID0+IHZvaWQ7XG5cblx0LyoqXG5cdCAqIEBoaWRkZW5cblx0ICovXG5cdHByb3RlY3RlZCBfcmVtb3ZlOiAoaXRlbTogVCkgPT4gdm9pZDtcblxuXHQvKipcblx0ICogQGhpZGRlblxuXHQgKi9cblx0cHJvdGVjdGVkIF9jbGVhcjogKGl0ZW1zOiBUW10pID0+IHZvaWQ7XG5cblx0LyoqXG5cdCAqIEBoaWRkZW5cblx0ICovXG5cdHByb3RlY3RlZCBfc2NvcGU6IGFueTtcblxuXHQvKipcblx0ICogQGhpZGRlblxuXHQgKi9cblx0Y29uc3RydWN0b3IocmVhZG9ubHkgc291cmNlOiBSZWFkb25seUNvbGxlY3Rpb248VD4sIGNvbmZpZzogQWJzdHJhY3RPYnNlcnZlci5Db25maWc8VD4pIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMuX2FkZCA9IGNvbmZpZy5hZGQ7XG5cdFx0dGhpcy5fcmVtb3ZlID0gY29uZmlnLnJlbW92ZTtcblx0XHR0aGlzLl9jbGVhciA9IGNvbmZpZy5jbGVhcjtcblx0XHR0aGlzLl9zY29wZSA9IGNvbmZpZy5zY29wZSB8fCB0aGlzO1xuXHRcdHRoaXMuX2FkZEl0ZW1zKHNvdXJjZS5hc0FycmF5KCkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwcm90ZWN0ZWQgZGVzdHJveU9iamVjdCgpIHtcblx0XHR0aGlzLl9kb0NsZWFySXRlbXModGhpcy5zb3VyY2UuYXNBcnJheSgpKTtcblx0XHR0aGlzLl9hZGQgPSBudWxsO1xuXHRcdHRoaXMuX3JlbW92ZSA9IG51bGw7XG5cdFx0dGhpcy5fY2xlYXIgPSBudWxsO1xuXHRcdHRoaXMuX3Njb3BlID0gbnVsbDtcblx0XHRzdXBlci5kZXN0cm95T2JqZWN0KCk7XG5cdH1cblxuXHQvKipcblx0ICogQGhpZGRlblxuXHQgKi9cblx0cHJvdGVjdGVkIF9hZGRJdGVtcyhpdGVtczogVFtdKSB7XG5cdFx0aWYgKCF0aGlzLl9hZGQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcblx0XHRcdHRoaXMuX2FkZC5jYWxsKHRoaXMuX3Njb3BlLCBpdGVtc1tpXSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEBoaWRkZW5cblx0ICovXG5cdHByb3RlY3RlZCBfcmVtb3ZlSXRlbXMoaXRlbXM6IFRbXSkge1xuXHRcdGlmICghdGhpcy5fcmVtb3ZlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGZvciAodmFyIGkgPSBpdGVtcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuXHRcdFx0dGhpcy5fcmVtb3ZlLmNhbGwodGhpcy5fc2NvcGUsIGl0ZW1zW2ldKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQGhpZGRlblxuXHQgKi9cblx0cHJvdGVjdGVkIF9kb0NsZWFySXRlbXMoaXRlbXM6IFRbXSkge1xuXHRcdGlmIChpdGVtcy5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKHRoaXMuX2NsZWFyKSB7XG5cdFx0XHR0aGlzLl9jbGVhci5jYWxsKHRoaXMuX3Njb3BlLCBpdGVtcyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX3JlbW92ZUl0ZW1zKGl0ZW1zKTtcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQWJzdHJhY3RPYnNlcnZlcjtcblxubmFtZXNwYWNlIEFic3RyYWN0T2JzZXJ2ZXIge1xuXHQvKipcblx0ICogQWJzdHJhY3RPYnNlcnZlciBjb25maWd1cmF0aW9uLlxuXHQgKiBAcGFyYW0gVCBDb2xsZWN0aW9uIGl0ZW0gdHlwZS5cblx0ICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQ29uZmlnPFQ+IHtcblx0XHQvKipcblx0XHQgKiBDYWxsYmFjayB0byBjYWxsIHdoZW4gYW4gaXRlbSBpcyBhZGRlZCB0byB0aGUgY29sbGVjdGlvbi5cblx0XHQgKi9cblx0XHRyZWFkb25seSBhZGQ/OiAoaXRlbTogVCkgPT4gdm9pZDtcblxuXHRcdC8qKlxuXHRcdCAqIENhbGxiYWNrIHRvIGNhbGwgd2hlbiBhbiBpdGVtIGlzIHJlbW92ZWQgZnJvbSB0aGUgY29sbGVjdGlvbi5cblx0XHQgKi9cblx0XHRyZWFkb25seSByZW1vdmU/OiAoaXRlbTogVCkgPT4gdm9pZDtcblxuXHRcdC8qKlxuXHRcdCAqIENhbGxiYWNrIHRvIGNhbGwgd2hlbiB0aGUgY29sbGVjdGlvbiBpcyBjbGVhcmVkLiBCeSBkZWZhdWx0LCBjYWxscyBgcmVtb3ZlYCBmb3IgYWxsIGNvbGxlY3Rpb24gaXRlbXMuXG5cdFx0ICovXG5cdFx0cmVhZG9ubHkgY2xlYXI/OiAoaXRlbXM6IFRbXSkgPT4gdm9pZDtcblxuXHRcdC8qKlxuXHRcdCAqIENhbGwgc2NvcGUgb2YgYGFkZGAsIGByZW1vdmVgIGFuZCBgY2xlYXJgIGNhbGxiYWNrcy4gRGVmYXVsdHMgdG8gdGhlIHN5bmNocm9uaXplciBpdHNlbGYuXG5cdFx0ICovXG5cdFx0cmVhZG9ubHkgc2NvcGU/OiBhbnk7XG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "../../main/dist/observer/collection.js":
/*!*******************************************************!*\
  !*** C:/jwidget/git/main/dist/observer/collection.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createObserver = void 0;

var List_1 = __importDefault(__webpack_require__(/*! ../List */ "../../main/dist/List.js"));

var Map_1 = __importDefault(__webpack_require__(/*! ../Map */ "../../main/dist/Map.js"));

var Set_1 = __importDefault(__webpack_require__(/*! ../Set */ "../../main/dist/Set.js"));

var list_1 = __importDefault(__webpack_require__(/*! ./list */ "../../main/dist/observer/list.js"));

var map_1 = __importDefault(__webpack_require__(/*! ./map */ "../../main/dist/observer/map.js"));

var set_1 = __importDefault(__webpack_require__(/*! ./set */ "../../main/dist/observer/set.js"));
/**
 * Creates an observer matching the source collection type.
 * @param source Source collection.
 * @param config Observer configuration.
 * @returns Collection observer.
 */


function createObserver(source, config) {
  return source instanceof List_1.default ? new list_1.default(source, config) : source instanceof Map_1.default ? new map_1.default(source, config) : source instanceof Set_1.default ? new set_1.default(source, config) : null;
}

exports.createObserver = createObserver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vYnNlcnZlci9jb2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkEsSUFBQSxNQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLEtBQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsS0FBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsUUFBQSxDQUFBLENBQUE7O0FBRUEsSUFBQSxNQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLEtBQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsS0FBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7QUFFQTs7Ozs7Ozs7QUFNQSxTQUFnQixjQUFoQixDQUFrQyxNQUFsQyxFQUNrQyxNQURsQyxFQUNvRTtBQUNuRSxTQUFRLE1BQU0sWUFBWSxNQUFBLENBQUEsT0FBbkIsR0FBMkIsSUFBSSxNQUFBLENBQUEsT0FBSixDQUFpQixNQUFqQixFQUF5QixNQUF6QixDQUEzQixHQUNMLE1BQU0sWUFBWSxLQUFBLENBQUEsT0FBbkIsR0FBMEIsSUFBSSxLQUFBLENBQUEsT0FBSixDQUFnQixNQUFoQixFQUF3QixNQUF4QixDQUExQixHQUNFLE1BQU0sWUFBWSxLQUFBLENBQUEsT0FBbkIsR0FBMEIsSUFBSSxLQUFBLENBQUEsT0FBSixDQUFnQixNQUFoQixFQUF3QixNQUF4QixDQUExQixHQUE0RCxJQUY5RDtBQUdBOztBQUxELE9BQUEsQ0FBQSxjQUFBLEdBQUEsY0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjAgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBMaXN0IGZyb20gJy4uL0xpc3QnO1xuaW1wb3J0IE1hcCBmcm9tICcuLi9NYXAnO1xuaW1wb3J0IFJlYWRvbmx5Q29sbGVjdGlvbiBmcm9tICcuLi9SZWFkb25seUNvbGxlY3Rpb24nO1xuaW1wb3J0IFNldCBmcm9tICcuLi9TZXQnO1xuaW1wb3J0IEFic3RyYWN0T2JzZXJ2ZXIgZnJvbSAnLi9BYnN0cmFjdE9ic2VydmVyJztcbmltcG9ydCBMaXN0T2JzZXJ2ZXIgZnJvbSAnLi9saXN0JztcbmltcG9ydCBNYXBPYnNlcnZlciBmcm9tICcuL21hcCc7XG5pbXBvcnQgU2V0T2JzZXJ2ZXIgZnJvbSAnLi9zZXQnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JzZXJ2ZXIgbWF0Y2hpbmcgdGhlIHNvdXJjZSBjb2xsZWN0aW9uIHR5cGUuXG4gKiBAcGFyYW0gc291cmNlIFNvdXJjZSBjb2xsZWN0aW9uLlxuICogQHBhcmFtIGNvbmZpZyBPYnNlcnZlciBjb25maWd1cmF0aW9uLlxuICogQHJldHVybnMgQ29sbGVjdGlvbiBvYnNlcnZlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU9ic2VydmVyPFQ+KHNvdXJjZTogUmVhZG9ubHlDb2xsZWN0aW9uPFQ+LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzogQWJzdHJhY3RPYnNlcnZlci5Db25maWc8VD4pOiBBYnN0cmFjdE9ic2VydmVyPFQ+IHtcblx0cmV0dXJuIChzb3VyY2UgaW5zdGFuY2VvZiBMaXN0KSA/IG5ldyBMaXN0T2JzZXJ2ZXIoc291cmNlLCBjb25maWcpIDpcblx0XHQoc291cmNlIGluc3RhbmNlb2YgTWFwKSA/IG5ldyBNYXBPYnNlcnZlcihzb3VyY2UsIGNvbmZpZykgOlxuXHRcdFx0KHNvdXJjZSBpbnN0YW5jZW9mIFNldCkgPyBuZXcgU2V0T2JzZXJ2ZXIoc291cmNlLCBjb25maWcpIDogbnVsbDtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "../../main/dist/observer/list.js":
/*!*************************************************!*\
  !*** C:/jwidget/git/main/dist/observer/list.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var AbstractObserver_1 = __importDefault(__webpack_require__(/*! ./AbstractObserver */ "../../main/dist/observer/AbstractObserver.js"));
/**
 * AbstractObserver implementation for List.
 */


var ListObserver = /*#__PURE__*/function (_AbstractObserver_1$d) {
  _inherits(ListObserver, _AbstractObserver_1$d);

  var _super = _createSuper(ListObserver);

  /**
   * @param source Source list.
   * @param config Observer configuration.
   */
  function ListObserver(source, config) {
    var _this;

    _classCallCheck(this, ListObserver);

    _this = _super.call(this, source, config);

    _this.own(source.spliceEvent.listen(_this._onSplice, _assertThisInitialized(_this)));

    _this.own(source.replaceEvent.listen(_this._onReplace, _assertThisInitialized(_this)));

    _this.own(source.clearEvent.listen(_this._onClear, _assertThisInitialized(_this)));

    return _this;
  }

  _createClass(ListObserver, [{
    key: "_onSplice",
    value: function _onSplice(params) {
      var spliceResult = params.spliceResult;
      var oldItems = spliceResult.oldItems;
      var removedItems = spliceResult.removedItems;

      if (this._clear && 3 * removedItems.length > 2 * oldItems.length) {
        // if there is an effective clearing function, just reset the controller
        this._clear.call(this._scope, oldItems);

        this._addItems(this.source.items);
      } else {
        // else, splice the elements
        this._removeItems(removedItems);

        this._addItems(spliceResult.addedItems);
      }
    }
  }, {
    key: "_onReplace",
    value: function _onReplace(params) {
      if (this._remove) {
        this._remove.call(this._scope, params.oldItem);
      }

      if (this._add) {
        this._add.call(this._scope, params.newItem);
      }
    }
  }, {
    key: "_onClear",
    value: function _onClear(params) {
      this._doClearItems(params.items);
    }
  }]);

  return ListObserver;
}(AbstractObserver_1.default);

exports.default = ListObserver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vYnNlcnZlci9saXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwQkEsSUFBQSxrQkFBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsb0JBQUEsQ0FBQSxDQUFBO0FBRUE7Ozs7O0lBR3FCLFk7Ozs7O0FBTXBCOzs7O0FBSUEsd0JBQVksTUFBWixFQUFxQyxNQUFyQyxFQUF1RTtBQUFBOztBQUFBOztBQUN0RSw4QkFBTSxNQUFOLEVBQWMsTUFBZDs7QUFDQSxVQUFLLEdBQUwsQ0FBUyxNQUFNLENBQUMsV0FBUCxDQUFtQixNQUFuQixDQUEwQixNQUFLLFNBQS9CLGdDQUFUOztBQUNBLFVBQUssR0FBTCxDQUFTLE1BQU0sQ0FBQyxZQUFQLENBQW9CLE1BQXBCLENBQTJCLE1BQUssVUFBaEMsZ0NBQVQ7O0FBQ0EsVUFBSyxHQUFMLENBQVMsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsTUFBbEIsQ0FBeUIsTUFBSyxRQUE5QixnQ0FBVDs7QUFKc0U7QUFLdEU7Ozs7OEJBRWlCLE0sRUFBa0M7QUFDbkQsVUFBSSxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQTFCO0FBQ0EsVUFBSSxRQUFRLEdBQUcsWUFBWSxDQUFDLFFBQTVCO0FBQ0EsVUFBSSxZQUFZLEdBQUcsWUFBWSxDQUFDLFlBQWhDOztBQUVBLFVBQUksS0FBSyxNQUFMLElBQWdCLElBQUksWUFBWSxDQUFDLE1BQWpCLEdBQTBCLElBQUksUUFBUSxDQUFDLE1BQTNELEVBQW9FO0FBQ25FO0FBQ0EsYUFBSyxNQUFMLENBQVksSUFBWixDQUFpQixLQUFLLE1BQXRCLEVBQThCLFFBQTlCOztBQUNBLGFBQUssU0FBTCxDQUFlLEtBQUssTUFBTCxDQUFZLEtBQTNCO0FBQ0EsT0FKRCxNQUlPO0FBQ047QUFDQSxhQUFLLFlBQUwsQ0FBa0IsWUFBbEI7O0FBQ0EsYUFBSyxTQUFMLENBQWUsWUFBWSxDQUFDLFVBQTVCO0FBQ0E7QUFDRDs7OytCQUVrQixNLEVBQW1DO0FBQ3JELFVBQUksS0FBSyxPQUFULEVBQWtCO0FBQ2pCLGFBQUssT0FBTCxDQUFhLElBQWIsQ0FBa0IsS0FBSyxNQUF2QixFQUErQixNQUFNLENBQUMsT0FBdEM7QUFDQTs7QUFDRCxVQUFJLEtBQUssSUFBVCxFQUFlO0FBQ2QsYUFBSyxJQUFMLENBQVUsSUFBVixDQUFlLEtBQUssTUFBcEIsRUFBNEIsTUFBTSxDQUFDLE9BQW5DO0FBQ0E7QUFDRDs7OzZCQUVnQixNLEVBQWlDO0FBQ2pELFdBQUssYUFBTCxDQUFtQixNQUFNLENBQUMsS0FBMUI7QUFDQTs7OztFQTVDMkMsa0JBQUEsQ0FBQSxPOztBQUE3QyxPQUFBLENBQUEsT0FBQSxHQUFBLFlBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgSUxpc3QgZnJvbSAnLi4vSUxpc3QnO1xuaW1wb3J0IFJlYWRvbmx5TGlzdCBmcm9tICcuLi9SZWFkb25seUxpc3QnO1xuaW1wb3J0IEFic3RyYWN0T2JzZXJ2ZXIgZnJvbSAnLi9BYnN0cmFjdE9ic2VydmVyJztcblxuLyoqXG4gKiBBYnN0cmFjdE9ic2VydmVyIGltcGxlbWVudGF0aW9uIGZvciBMaXN0LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaXN0T2JzZXJ2ZXI8VD4gZXh0ZW5kcyBBYnN0cmFjdE9ic2VydmVyPFQ+IHtcblx0LyoqXG5cdCAqIFNvdXJjZSBsaXN0LlxuXHQgKi9cblx0cmVhZG9ubHkgc291cmNlOiBSZWFkb25seUxpc3Q8VD47XG5cblx0LyoqXG5cdCAqIEBwYXJhbSBzb3VyY2UgU291cmNlIGxpc3QuXG5cdCAqIEBwYXJhbSBjb25maWcgT2JzZXJ2ZXIgY29uZmlndXJhdGlvbi5cblx0ICovXG5cdGNvbnN0cnVjdG9yKHNvdXJjZTogUmVhZG9ubHlMaXN0PFQ+LCBjb25maWc6IEFic3RyYWN0T2JzZXJ2ZXIuQ29uZmlnPFQ+KSB7XG5cdFx0c3VwZXIoc291cmNlLCBjb25maWcpO1xuXHRcdHRoaXMub3duKHNvdXJjZS5zcGxpY2VFdmVudC5saXN0ZW4odGhpcy5fb25TcGxpY2UsIHRoaXMpKTtcblx0XHR0aGlzLm93bihzb3VyY2UucmVwbGFjZUV2ZW50Lmxpc3Rlbih0aGlzLl9vblJlcGxhY2UsIHRoaXMpKTtcblx0XHR0aGlzLm93bihzb3VyY2UuY2xlYXJFdmVudC5saXN0ZW4odGhpcy5fb25DbGVhciwgdGhpcykpO1xuXHR9XG5cblx0cHJpdmF0ZSBfb25TcGxpY2UocGFyYW1zOiBJTGlzdC5TcGxpY2VFdmVudFBhcmFtczxUPikge1xuXHRcdHZhciBzcGxpY2VSZXN1bHQgPSBwYXJhbXMuc3BsaWNlUmVzdWx0O1xuXHRcdHZhciBvbGRJdGVtcyA9IHNwbGljZVJlc3VsdC5vbGRJdGVtcztcblx0XHR2YXIgcmVtb3ZlZEl0ZW1zID0gc3BsaWNlUmVzdWx0LnJlbW92ZWRJdGVtcztcblxuXHRcdGlmICh0aGlzLl9jbGVhciAmJiAoMyAqIHJlbW92ZWRJdGVtcy5sZW5ndGggPiAyICogb2xkSXRlbXMubGVuZ3RoKSkge1xuXHRcdFx0Ly8gaWYgdGhlcmUgaXMgYW4gZWZmZWN0aXZlIGNsZWFyaW5nIGZ1bmN0aW9uLCBqdXN0IHJlc2V0IHRoZSBjb250cm9sbGVyXG5cdFx0XHR0aGlzLl9jbGVhci5jYWxsKHRoaXMuX3Njb3BlLCBvbGRJdGVtcyk7XG5cdFx0XHR0aGlzLl9hZGRJdGVtcyh0aGlzLnNvdXJjZS5pdGVtcyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGVsc2UsIHNwbGljZSB0aGUgZWxlbWVudHNcblx0XHRcdHRoaXMuX3JlbW92ZUl0ZW1zKHJlbW92ZWRJdGVtcyk7XG5cdFx0XHR0aGlzLl9hZGRJdGVtcyhzcGxpY2VSZXN1bHQuYWRkZWRJdGVtcyk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBfb25SZXBsYWNlKHBhcmFtczogSUxpc3QuUmVwbGFjZUV2ZW50UGFyYW1zPFQ+KSB7XG5cdFx0aWYgKHRoaXMuX3JlbW92ZSkge1xuXHRcdFx0dGhpcy5fcmVtb3ZlLmNhbGwodGhpcy5fc2NvcGUsIHBhcmFtcy5vbGRJdGVtKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuX2FkZCkge1xuXHRcdFx0dGhpcy5fYWRkLmNhbGwodGhpcy5fc2NvcGUsIHBhcmFtcy5uZXdJdGVtKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIF9vbkNsZWFyKHBhcmFtczogSUxpc3QuSXRlbXNFdmVudFBhcmFtczxUPikge1xuXHRcdHRoaXMuX2RvQ2xlYXJJdGVtcyhwYXJhbXMuaXRlbXMpO1xuXHR9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/observer/map.js":
/*!************************************************!*\
  !*** C:/jwidget/git/main/dist/observer/map.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var DictionaryUtils = __importStar(__webpack_require__(/*! ../DictionaryUtils */ "../../main/dist/DictionaryUtils.js"));

var AbstractObserver_1 = __importDefault(__webpack_require__(/*! ./AbstractObserver */ "../../main/dist/observer/AbstractObserver.js"));
/**
 * AbstractObserver implementation for Map.
 */


var MapObserver = /*#__PURE__*/function (_AbstractObserver_1$d) {
  _inherits(MapObserver, _AbstractObserver_1$d);

  var _super = _createSuper(MapObserver);

  /**
   * @param source Source map.
   * @param config Observer configuration.
   */
  function MapObserver(source, config) {
    var _this;

    _classCallCheck(this, MapObserver);

    _this = _super.call(this, source, config);

    _this.own(source.spliceEvent.listen(_this._onSplice, _assertThisInitialized(_this)));

    _this.own(source.clearEvent.listen(_this._onClear, _assertThisInitialized(_this)));

    return _this;
  }

  _createClass(MapObserver, [{
    key: "_onSplice",
    value: function _onSplice(params) {
      var spliceResult = params.spliceResult;

      this._removeItems(DictionaryUtils.toArray(spliceResult.removedItems));

      this._addItems(DictionaryUtils.toArray(spliceResult.addedItems));
    }
  }, {
    key: "_onClear",
    value: function _onClear(params) {
      this._doClearItems(DictionaryUtils.toArray(params.items));
    }
  }]);

  return MapObserver;
}(AbstractObserver_1.default);

exports.default = MapObserver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vYnNlcnZlci9tYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkEsSUFBQSxlQUFBLEdBQUEsWUFBQSxDQUFBLE9BQUEsQ0FBQSxvQkFBQSxDQUFBLENBQUE7O0FBR0EsSUFBQSxrQkFBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsb0JBQUEsQ0FBQSxDQUFBO0FBRUE7Ozs7O0lBR3FCLFc7Ozs7O0FBTXBCOzs7O0FBSUEsdUJBQVksTUFBWixFQUFvQyxNQUFwQyxFQUFzRTtBQUFBOztBQUFBOztBQUNyRSw4QkFBTSxNQUFOLEVBQWMsTUFBZDs7QUFDQSxVQUFLLEdBQUwsQ0FBUyxNQUFNLENBQUMsV0FBUCxDQUFtQixNQUFuQixDQUEwQixNQUFLLFNBQS9CLGdDQUFUOztBQUNBLFVBQUssR0FBTCxDQUFTLE1BQU0sQ0FBQyxVQUFQLENBQWtCLE1BQWxCLENBQXlCLE1BQUssUUFBOUIsZ0NBQVQ7O0FBSHFFO0FBSXJFOzs7OzhCQUVpQixNLEVBQWlDO0FBQ2xELFVBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUExQjs7QUFDQSxXQUFLLFlBQUwsQ0FBa0IsZUFBZSxDQUFDLE9BQWhCLENBQXdCLFlBQVksQ0FBQyxZQUFyQyxDQUFsQjs7QUFDQSxXQUFLLFNBQUwsQ0FBZSxlQUFlLENBQUMsT0FBaEIsQ0FBd0IsWUFBWSxDQUFDLFVBQXJDLENBQWY7QUFDQTs7OzZCQUVnQixNLEVBQWdDO0FBQ2hELFdBQUssYUFBTCxDQUFtQixlQUFlLENBQUMsT0FBaEIsQ0FBd0IsTUFBTSxDQUFDLEtBQS9CLENBQW5CO0FBQ0E7Ozs7RUF4QjBDLGtCQUFBLENBQUEsTzs7QUFBNUMsT0FBQSxDQUFBLE9BQUEsR0FBQSxXQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0ICogYXMgRGljdGlvbmFyeVV0aWxzIGZyb20gJy4uL0RpY3Rpb25hcnlVdGlscyc7XG5pbXBvcnQgSU1hcCBmcm9tICcuLi9JTWFwJztcbmltcG9ydCBSZWFkb25seU1hcCBmcm9tICcuLi9SZWFkb25seU1hcCc7XG5pbXBvcnQgQWJzdHJhY3RPYnNlcnZlciBmcm9tICcuL0Fic3RyYWN0T2JzZXJ2ZXInO1xuXG4vKipcbiAqIEFic3RyYWN0T2JzZXJ2ZXIgaW1wbGVtZW50YXRpb24gZm9yIE1hcC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFwT2JzZXJ2ZXI8VD4gZXh0ZW5kcyBBYnN0cmFjdE9ic2VydmVyPFQ+IHtcblx0LyoqXG5cdCAqIFNvdXJjZSBtYXAuXG5cdCAqL1xuXHRyZWFkb25seSBzb3VyY2U6IFJlYWRvbmx5TWFwPFQ+O1xuXG5cdC8qKlxuXHQgKiBAcGFyYW0gc291cmNlIFNvdXJjZSBtYXAuXG5cdCAqIEBwYXJhbSBjb25maWcgT2JzZXJ2ZXIgY29uZmlndXJhdGlvbi5cblx0ICovXG5cdGNvbnN0cnVjdG9yKHNvdXJjZTogUmVhZG9ubHlNYXA8VD4sIGNvbmZpZzogQWJzdHJhY3RPYnNlcnZlci5Db25maWc8VD4pIHtcblx0XHRzdXBlcihzb3VyY2UsIGNvbmZpZyk7XG5cdFx0dGhpcy5vd24oc291cmNlLnNwbGljZUV2ZW50Lmxpc3Rlbih0aGlzLl9vblNwbGljZSwgdGhpcykpO1xuXHRcdHRoaXMub3duKHNvdXJjZS5jbGVhckV2ZW50Lmxpc3Rlbih0aGlzLl9vbkNsZWFyLCB0aGlzKSk7XG5cdH1cblxuXHRwcml2YXRlIF9vblNwbGljZShwYXJhbXM6IElNYXAuU3BsaWNlRXZlbnRQYXJhbXM8VD4pIHtcblx0XHR2YXIgc3BsaWNlUmVzdWx0ID0gcGFyYW1zLnNwbGljZVJlc3VsdDtcblx0XHR0aGlzLl9yZW1vdmVJdGVtcyhEaWN0aW9uYXJ5VXRpbHMudG9BcnJheShzcGxpY2VSZXN1bHQucmVtb3ZlZEl0ZW1zKSk7XG5cdFx0dGhpcy5fYWRkSXRlbXMoRGljdGlvbmFyeVV0aWxzLnRvQXJyYXkoc3BsaWNlUmVzdWx0LmFkZGVkSXRlbXMpKTtcblx0fVxuXG5cdHByaXZhdGUgX29uQ2xlYXIocGFyYW1zOiBJTWFwLkl0ZW1zRXZlbnRQYXJhbXM8VD4pIHtcblx0XHR0aGlzLl9kb0NsZWFySXRlbXMoRGljdGlvbmFyeVV0aWxzLnRvQXJyYXkocGFyYW1zLml0ZW1zKSk7XG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "../../main/dist/observer/set.js":
/*!************************************************!*\
  !*** C:/jwidget/git/main/dist/observer/set.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var AbstractObserver_1 = __importDefault(__webpack_require__(/*! ./AbstractObserver */ "../../main/dist/observer/AbstractObserver.js"));
/**
 * AbstractObserver implementation for Set.
 */


var SetObserver = /*#__PURE__*/function (_AbstractObserver_1$d) {
  _inherits(SetObserver, _AbstractObserver_1$d);

  var _super = _createSuper(SetObserver);

  /**
   * @param source Source set.
   * @param config Observer configuration.
   */
  function SetObserver(source, config) {
    var _this;

    _classCallCheck(this, SetObserver);

    _this = _super.call(this, source, config);

    _this.own(source.spliceEvent.listen(_this._onSplice, _assertThisInitialized(_this)));

    _this.own(source.clearEvent.listen(_this._onClear, _assertThisInitialized(_this)));

    return _this;
  }

  _createClass(SetObserver, [{
    key: "_onSplice",
    value: function _onSplice(params) {
      var spliceResult = params.spliceResult;

      this._removeItems(spliceResult.removedItems);

      this._addItems(spliceResult.addedItems);
    }
  }, {
    key: "_onClear",
    value: function _onClear(params) {
      this._doClearItems(params.items);
    }
  }]);

  return SetObserver;
}(AbstractObserver_1.default);

exports.default = SetObserver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vYnNlcnZlci9zZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBCQSxJQUFBLGtCQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxvQkFBQSxDQUFBLENBQUE7QUFFQTs7Ozs7SUFHcUIsVzs7Ozs7QUFNcEI7Ozs7QUFJQSx1QkFBWSxNQUFaLEVBQW9DLE1BQXBDLEVBQXNFO0FBQUE7O0FBQUE7O0FBQ3JFLDhCQUFNLE1BQU4sRUFBYyxNQUFkOztBQUNBLFVBQUssR0FBTCxDQUFTLE1BQU0sQ0FBQyxXQUFQLENBQW1CLE1BQW5CLENBQTBCLE1BQUssU0FBL0IsZ0NBQVQ7O0FBQ0EsVUFBSyxHQUFMLENBQVMsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsTUFBbEIsQ0FBeUIsTUFBSyxRQUE5QixnQ0FBVDs7QUFIcUU7QUFJckU7Ozs7OEJBRWlCLE0sRUFBaUM7QUFDbEQsVUFBSSxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQTFCOztBQUNBLFdBQUssWUFBTCxDQUFrQixZQUFZLENBQUMsWUFBL0I7O0FBQ0EsV0FBSyxTQUFMLENBQWUsWUFBWSxDQUFDLFVBQTVCO0FBQ0E7Ozs2QkFFZ0IsTSxFQUFnQztBQUNoRCxXQUFLLGFBQUwsQ0FBbUIsTUFBTSxDQUFDLEtBQTFCO0FBQ0E7Ozs7RUF4QjBDLGtCQUFBLENBQUEsTzs7QUFBNUMsT0FBQSxDQUFBLE9BQUEsR0FBQSxXQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IElTZXQgZnJvbSAnLi4vSVNldCc7XG5pbXBvcnQgUmVhZG9ubHlTZXQgZnJvbSAnLi4vUmVhZG9ubHlTZXQnO1xuaW1wb3J0IEFic3RyYWN0T2JzZXJ2ZXIgZnJvbSAnLi9BYnN0cmFjdE9ic2VydmVyJztcblxuLyoqXG4gKiBBYnN0cmFjdE9ic2VydmVyIGltcGxlbWVudGF0aW9uIGZvciBTZXQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNldE9ic2VydmVyPFQ+IGV4dGVuZHMgQWJzdHJhY3RPYnNlcnZlcjxUPiB7XG5cdC8qKlxuXHQgKiBTb3VyY2Ugc2V0LlxuXHQgKi9cblx0cmVhZG9ubHkgc291cmNlOiBSZWFkb25seVNldDxUPjtcblxuXHQvKipcblx0ICogQHBhcmFtIHNvdXJjZSBTb3VyY2Ugc2V0LlxuXHQgKiBAcGFyYW0gY29uZmlnIE9ic2VydmVyIGNvbmZpZ3VyYXRpb24uXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcihzb3VyY2U6IFJlYWRvbmx5U2V0PFQ+LCBjb25maWc6IEFic3RyYWN0T2JzZXJ2ZXIuQ29uZmlnPFQ+KSB7XG5cdFx0c3VwZXIoc291cmNlLCBjb25maWcpO1xuXHRcdHRoaXMub3duKHNvdXJjZS5zcGxpY2VFdmVudC5saXN0ZW4odGhpcy5fb25TcGxpY2UsIHRoaXMpKTtcblx0XHR0aGlzLm93bihzb3VyY2UuY2xlYXJFdmVudC5saXN0ZW4odGhpcy5fb25DbGVhciwgdGhpcykpO1xuXHR9XG5cblx0cHJpdmF0ZSBfb25TcGxpY2UocGFyYW1zOiBJU2V0LlNwbGljZUV2ZW50UGFyYW1zPFQ+KSB7XG5cdFx0dmFyIHNwbGljZVJlc3VsdCA9IHBhcmFtcy5zcGxpY2VSZXN1bHQ7XG5cdFx0dGhpcy5fcmVtb3ZlSXRlbXMoc3BsaWNlUmVzdWx0LnJlbW92ZWRJdGVtcyk7XG5cdFx0dGhpcy5fYWRkSXRlbXMoc3BsaWNlUmVzdWx0LmFkZGVkSXRlbXMpO1xuXHR9XG5cblx0cHJpdmF0ZSBfb25DbGVhcihwYXJhbXM6IElTZXQuSXRlbXNFdmVudFBhcmFtczxUPikge1xuXHRcdHRoaXMuX2RvQ2xlYXJJdGVtcyhwYXJhbXMuaXRlbXMpO1xuXHR9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../main/dist/template.js":
/*!********************************************!*\
  !*** C:/jwidget/git/main/dist/template.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var HtmlTemplate_1 = __importDefault(__webpack_require__(/*! ./HtmlTemplate */ "../../main/dist/HtmlTemplate.js"));
/**
 * Defines HTML template for a `Component` subclass.
 * @param html Template HTML string.
 */


function default_1(html) {
  return function (target) {
    target.prototype._template = new HtmlTemplate_1.default(html);
  };
}

exports.default = default_1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90ZW1wbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkEsSUFBQSxjQUFBLEdBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBLENBQUE7QUFFQTs7Ozs7O0FBSUEsU0FBQSxTQUFBLENBQXlCLElBQXpCLEVBQXFDO0FBQ3BDLFNBQU8sVUFBVSxNQUFWLEVBQXFCO0FBQzNCLElBQUEsTUFBTSxDQUFDLFNBQVAsQ0FBaUIsU0FBakIsR0FBNkIsSUFBSSxjQUFBLENBQUEsT0FBSixDQUFpQixJQUFqQixDQUE3QjtBQUNBLEdBRkQ7QUFHQTs7QUFKRCxPQUFBLENBQUEsT0FBQSxHQUFBLFNBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgSHRtbFRlbXBsYXRlIGZyb20gXCIuL0h0bWxUZW1wbGF0ZVwiO1xuXG4vKipcbiAqIERlZmluZXMgSFRNTCB0ZW1wbGF0ZSBmb3IgYSBgQ29tcG9uZW50YCBzdWJjbGFzcy5cbiAqIEBwYXJhbSBodG1sIFRlbXBsYXRlIEhUTUwgc3RyaW5nLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoaHRtbDogc3RyaW5nKTogYW55IHtcblx0cmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQ6IGFueSkge1xuXHRcdHRhcmdldC5wcm90b3R5cGUuX3RlbXBsYXRlID0gbmV3IEh0bWxUZW1wbGF0ZShodG1sKTtcblx0fTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,