(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["bindAttr~bindClass1~bindClass2~bindCss~bindDisplay~bindHtml~bindProp1~bindProp2~bindRadio1~bindRadio~25c09681"],{

/***/ "../../main/dist/AbstractInserter.js":
/*!****************************************************!*\
  !*** C:/jwidget/git/main/dist/AbstractInserter.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));
const DomUtils = __importStar(__webpack_require__(/*! ./DomUtils */ "../../main/dist/DomUtils.js"));
const list_1 = __importDefault(__webpack_require__(/*! ./inserter/list */ "../../main/dist/inserter/list.js"));
class AbstractInserter extends Class_1.default {
    /**
     * @param source Child element list.
     * @param el Parent element to insert children into.
     */
    constructor(source, el) {
        super();
        this.el = el;
        this.own(new list_1.default(source, {
            add: this._addItem,
            remove: this._removeItem,
            scope: this
        }));
    }
    _addItem(item, index) {
        const parent = this.el;
        const anchor = parent.childNodes[index];
        const child = this._getElement(item);
        if (anchor != null) {
            parent.insertBefore(child, anchor);
        }
        else {
            parent.appendChild(child);
        }
    }
    _removeItem(item, _index) {
        DomUtils.remove(this._getElement(item));
    }
}
exports.default = AbstractInserter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWJzdHJhY3RJbnNlcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9BYnN0cmFjdEluc2VydGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXNCRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUYsb0RBQTRCO0FBQzVCLHFEQUF1QztBQUN2QywyREFBMkM7QUFHM0MsTUFBOEIsZ0JBQW9CLFNBQVEsZUFBSztJQUM5RDs7O09BR0c7SUFDSCxZQUFZLE1BQXVCLEVBQVcsRUFBZTtRQUM1RCxLQUFLLEVBQUUsQ0FBQztRQURxQyxPQUFFLEdBQUYsRUFBRSxDQUFhO1FBRTVELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxjQUFZLENBQUMsTUFBTSxFQUFFO1lBQ2pDLEdBQUcsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUNsQixNQUFNLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDeEIsS0FBSyxFQUFFLElBQUk7U0FDWCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFJUyxRQUFRLENBQUMsSUFBTyxFQUFFLEtBQWE7UUFDeEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUN2QixNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFO1lBQ25CLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ25DO2FBQU07WUFDTixNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzFCO0lBQ0YsQ0FBQztJQUVTLFdBQVcsQ0FBQyxJQUFPLEVBQUUsTUFBYztRQUM1QyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN6QyxDQUFDO0NBQ0Q7QUE5QkQsbUNBOEJDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IENsYXNzIGZyb20gJy4vQ2xhc3MnO1xuaW1wb3J0ICogYXMgRG9tVXRpbHMgZnJvbSAnLi9Eb21VdGlscyc7XG5pbXBvcnQgTGlzdEluc2VydGVyIGZyb20gJy4vaW5zZXJ0ZXIvbGlzdCc7XG5pbXBvcnQgUmVhZG9ubHlMaXN0IGZyb20gJy4vUmVhZG9ubHlMaXN0JztcblxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RJbnNlcnRlcjxUPiBleHRlbmRzIENsYXNzIHtcblx0LyoqXG5cdCAqIEBwYXJhbSBzb3VyY2UgQ2hpbGQgZWxlbWVudCBsaXN0LlxuXHQgKiBAcGFyYW0gZWwgUGFyZW50IGVsZW1lbnQgdG8gaW5zZXJ0IGNoaWxkcmVuIGludG8uXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcihzb3VyY2U6IFJlYWRvbmx5TGlzdDxUPiwgcmVhZG9ubHkgZWw6IEhUTUxFbGVtZW50KSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLm93bihuZXcgTGlzdEluc2VydGVyKHNvdXJjZSwge1xuXHRcdFx0YWRkOiB0aGlzLl9hZGRJdGVtLFxuXHRcdFx0cmVtb3ZlOiB0aGlzLl9yZW1vdmVJdGVtLFxuXHRcdFx0c2NvcGU6IHRoaXNcblx0XHR9KSk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgYWJzdHJhY3QgX2dldEVsZW1lbnQoaXRlbTogVCk6IEhUTUxFbGVtZW50O1xuXG5cdHByb3RlY3RlZCBfYWRkSXRlbShpdGVtOiBULCBpbmRleDogbnVtYmVyKSB7XG5cdFx0Y29uc3QgcGFyZW50ID0gdGhpcy5lbDtcblx0XHRjb25zdCBhbmNob3IgPSBwYXJlbnQuY2hpbGROb2Rlc1tpbmRleF07XG5cdFx0Y29uc3QgY2hpbGQgPSB0aGlzLl9nZXRFbGVtZW50KGl0ZW0pO1xuXHRcdGlmIChhbmNob3IgIT0gbnVsbCkge1xuXHRcdFx0cGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgYW5jaG9yKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cGFyZW50LmFwcGVuZENoaWxkKGNoaWxkKTtcblx0XHR9XG5cdH1cblxuXHRwcm90ZWN0ZWQgX3JlbW92ZUl0ZW0oaXRlbTogVCwgX2luZGV4OiBudW1iZXIpIHtcblx0XHREb21VdGlscy5yZW1vdmUodGhpcy5fZ2V0RWxlbWVudChpdGVtKSk7XG5cdH1cbn1cbiJdfQ==

/***/ }),

/***/ "../../main/dist/AbstractTemplate.js":
/*!****************************************************!*\
  !*** C:/jwidget/git/main/dist/AbstractTemplate.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const DomUtils = __importStar(__webpack_require__(/*! ./DomUtils */ "../../main/dist/DomUtils.js"));
const StringUtils = __importStar(__webpack_require__(/*! ./StringUtils */ "../../main/dist/StringUtils.js"));
/**
 * Abstract HTML template.
 */
class AbstractTemplate {
    constructor() {
        this.prefixes = null;
        this.parentIdMap = null; // The parent IDs of [key] item.
        this.childIdMap = null; // The child IDs of [key] item.
        this.ids = null; // IDs in dependency order.
    }
    get requiresAfterAppend() {
        return false;
    }
    _compileAttributes(root) {
        this.prefixes = StringUtils.parseClass(root.getAttribute("jwclass"));
        root.removeAttribute("jwclass");
        for (let i = 0, l = this.prefixes.length; i < l; ++i) {
            DomUtils.addClass(root, this.prefixes[i]);
        }
        this.parentIdMap = {};
        this.childIdMap = {};
        // add elements to groups and fill in dependencies
        this._walkAll(root);
        // resolving dependencies to a plain list of IDs
        this.ids = [];
        this._backtrace("root");
        // check for trash
        let remainingIds = Object.keys(this.parentIdMap);
        if (remainingIds.length !== 0) {
            // some ID's may not have been backtraced if they are assigned to the root element,
            // so we must backtrace them to make sure that everything is processed
            remainingIds.forEach(this._backtrace, this);
            remainingIds = Object.keys(this.parentIdMap);
            if (remainingIds.length !== 0) {
                console.warn("jWidget template '" + this.prefixes.join(" ") +
                    "' has cyclic dependencies among the next jwid's: " + remainingIds.join(", ") +
                    ". Can't detect the desired rendering order. Rendering elements in arbitrary order...");
                this.ids.push.apply(this.ids, remainingIds);
            }
        }
        this.prefixes = null;
        this.parentIdMap = null;
        this.childIdMap = null;
    }
    _walkAll(root) {
        this._walk(root, [], [], (el, path) => {
            const attr = el.getAttribute("jwid");
            if (!attr) {
                return null;
            }
            const ids = StringUtils.parseClass(attr);
            el.removeAttribute("jwid");
            const l = ids.length;
            if (l === 0) {
                return null;
            }
            for (let i = 0; i < l; ++i) {
                const id = ids[i];
                for (let j = 0, n = this.prefixes.length; j < n; ++j) {
                    DomUtils.addClass(el, this.prefixes[j] + "-" + id);
                }
                this._addElement(id, el, path);
            }
            return ids;
        }, this);
        this._addElement("root", root, []);
    }
    _walk(el, path, parentIds, callback, scope) {
        if (el.nodeType !== 1) { // ELEMENT
            return;
        }
        let childIds = callback.call(scope, el, path);
        if (path.length === 0) {
            childIds = childIds || [];
            childIds.push("root");
        }
        if (childIds !== null) {
            for (let i = 0, l = childIds.length; i < l; ++i) {
                const childId = childIds[i];
                this.parentIdMap[childId] = this.parentIdMap[childId] || {};
                for (let j = 0, m = parentIds.length; j < m; ++j) {
                    const parentId = parentIds[j];
                    this.childIdMap[parentId] = this.childIdMap[parentId] || {};
                    this.parentIdMap[childId][parentId] = true;
                    this.childIdMap[parentId][childId] = true;
                }
            }
            parentIds = childIds;
        }
        const index = path.length;
        path.push(0);
        const childNodes = el.childNodes;
        for (var i = 0, l = childNodes.length; i < l; ++i) {
            path[index] = i;
            this._walk(childNodes[i], path, parentIds, callback, scope);
        }
        path.pop();
    }
    _backtrace(id) {
        // if this element has already been processed, skip it
        const parentIds = this.parentIdMap[id];
        if (parentIds === undefined) {
            return;
        }
        // if this element still has parents, skip it
        for (let parentId in parentIds) {
            if (this.parentIdMap.hasOwnProperty(parentId)) {
                return;
            }
        }
        // remove the element from graph
        delete this.parentIdMap[id];
        this.ids.push(id);
        // traverse into children
        const childIds = this.childIdMap[id];
        for (let childId in childIds) {
            this._backtrace(childId);
        }
    }
}
exports.default = AbstractTemplate;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "../../main/dist/ArrayUtils.js":
/*!**********************************************!*\
  !*** C:/jwidget/git/main/dist/ArrayUtils.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectSortComparing = exports.detectSort = exports.detectReorder = exports.detectFilter = exports.detectSplice = exports.tryReorder = exports.trySplice = exports.tryClear = exports.tryMove = exports.tryRemoveAll = exports.trySet = exports.tryAddAll = exports.merge = exports.invert = exports.isIdentity = exports.backEvery = exports.equal = exports.sortComparing = exports.sort = exports.reorder = exports.splice = exports.clear = exports.move = exports.removeItems = exports.removeItem = exports.removeAll = exports.remove = exports.set = exports.addAll = exports.add = exports.reduce = exports.index = exports.toReversed = exports.toSortedComparing = exports.toSorted = exports.getSortingIndicesComparing = exports.getSortingIndices = exports.count = exports.minIndexComparing = exports.minComparing = exports.minIndex = exports.min = exports.maxIndexComparing = exports.maxComparing = exports.maxIndex = exports.max = exports.binarySearch = exports.findIndex = exports.find = exports.contains = exports.isEmpty = exports.getLast = void 0;
const index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");
const IndexCount_1 = __importDefault(__webpack_require__(/*! ./IndexCount */ "../../main/dist/IndexCount.js"));
const IndexItems_1 = __importDefault(__webpack_require__(/*! ./IndexItems */ "../../main/dist/IndexItems.js"));
const internal_1 = __webpack_require__(/*! ./internal */ "../../main/dist/internal.js");
const ListSpliceResult_1 = __importDefault(__webpack_require__(/*! ./ListSpliceResult */ "../../main/dist/ListSpliceResult.js"));
/**
 * Returns the last array item.
 *
 * @param arr Array.
 * @returns Last array item or undefined. If array is empty, returns undefined.
 */
function getLast(arr) {
    return arr[arr.length - 1];
}
exports.getLast = getLast;
/**
 * Checks if array is empty.
 *
 * @param arr Array.
 * @returns Array has zero length.
 */
function isEmpty(arr) {
    return arr.length === 0;
}
exports.isEmpty = isEmpty;
/**
 * Checks if the item exists in array, i.e. if `arr.indexOf(item)` doesn't return -1.
 *
 * @param arr Array.
 * @param item Item to find.
 * @returns Item exists in array.
 */
function contains(arr, item) {
    return arr.indexOf(item) !== -1;
}
exports.contains = contains;
/**
 * Finds an item matching criteria.
 *
 * Returns the first item for which callback returns truthy value.
 *
 * Algorithms iterates items consequently, and stops after the first item matching the criteria.
 *
 * @param arr Array.
 * @param callback Criteria callback.
 * @param scope `callback` call scope. Defaults to array itself.
 * @returns The found item or undefined.
 */
function find(arr, callback, scope) {
    return arr[findIndex(arr, callback, scope)];
}
exports.find = find;
/**
 * Finds an item matching criteria.
 *
 * Returns index of the first item for which callback returns truthy value.
 *
 * Algorithms iterates items consequently, and stops after the first item matching the criteria.
 *
 * @param arr Array.
 * @param callback Criteria callback.
 * @param scope `callback` call scope. Defaults to array itself.
 * @returns Index of the found item or undefined.
 */
function findIndex(arr, callback, scope) {
    scope = scope || arr;
    let result;
    arr.every(function (item, index) {
        if (callback.call(scope, item, index)) {
            result = index;
            return false;
        }
        return true;
    });
    return result;
}
exports.findIndex = findIndex;
/**
 * Determines index of the first item which is more (or less if `order` < 0) than the specified value by `compare` function,
 * using binary search. Array must be sorted by `compare` function.
 * Can be used for item insertion easily.
 * If you want to use this method for item removal, you must look at previous item and compare it to `value` first.
 *
 * @param arr Sorted array.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2.
 * Defaults to `cmp`.
 * @param scope `comparer` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number if array is sorted ascending, negative if descending.
 * @returns Item index.
 */
function binarySearch(arr, value, compare, scope, order) {
    compare = compare || index_1.cmp;
    scope = scope || arr;
    order = order || 1;
    var length = arr.length;
    var len2 = length >> 1;
    var step = 1;
    while (step <= len2) {
        step <<= 1;
    }
    var index = 0;
    while (step) {
        if ((index + step <= length) && (order * compare.call(scope, value, arr[index + step - 1]) >= 0)) {
            index += step;
        }
        step >>= 1;
    }
    return index;
}
exports.binarySearch = binarySearch;
/**
 * Returns the array item which callback returns the highest (or lowest) value for.
 *
 * @param arr Array.
 * @param callback Returns a comparable value, compatible with `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to array itself.
 * @param order Pass positive order to find the highest value, and negative to find the lowest one.
 * @returns Array item.
 */
function max(arr, callback, scope, order = 1) {
    return arr[maxIndex(arr, callback, scope, order)];
}
exports.max = max;
/**
 * Returns index of the array item which callback returns the highest (or lowest) value for.
 *
 * @param arr Array.
 * @param callback Returns a comparable value, compatible with `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to array itself.
 * @param order Pass positive order to find the highest value, and negative to find the lowest one.
 * @returns Item index.
 */
function maxIndex(arr, callback, scope, order = 1) {
    if (arr.length === 0) {
        return -1;
    }
    callback = callback || internal_1.identity;
    scope = scope || arr;
    let result = 0;
    let max = callback.call(scope, arr[0]);
    for (let i = 1, l = arr.length; i < l; ++i) {
        const item = callback.call(scope, arr[i], i);
        const diff = index_1.cmp(item, max);
        if ((order > 0 && diff > 0) || (order < 0 && diff < 0)) {
            result = i;
            max = item;
        }
    }
    return result;
}
exports.maxIndex = maxIndex;
/**
 * Returns the highest (or lowest) array item in terms of the specified comparer function.
 *
 * @param arr Array.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `compare` call scope. Defaults to array itself.
 * @param order Pass positive order to find the highest value, and negative to find the lowest one.
 * @returns Array item.
 */
function maxComparing(arr, compare, scope, order = 1) {
    return arr[maxIndexComparing(arr, compare, scope, order)];
}
exports.maxComparing = maxComparing;
/**
 * Returns index of the highest (or lowest) array item in terms of the specified comparer function.
 *
 * @param arr Array.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `compare` call scope. Defaults to array itself.
 * @param order Pass positive order to find the highest value, and negative to find the lowest one.
 * @returns Item index.
 */
function maxIndexComparing(arr, compare, scope, order = 1) {
    if (arr.length === 0) {
        return -1;
    }
    compare = compare || index_1.cmp;
    scope = scope || arr;
    let result = 0;
    for (let i = 1, l = arr.length; i < l; ++i) {
        if (order * compare.call(scope, arr[result], arr[i], result, i) < 0) {
            result = i;
        }
    }
    return result;
}
exports.maxIndexComparing = maxIndexComparing;
/**
 * Returns the array item which callback returns the lowest (or highest) value for.
 *
 * @param arr Array.
 * @param callback Returns a comparable value, compatible with `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to array itself.
 * @param order Pass positive order to find the lowest value, and negative to find the highest one.
 * @returns Array item.
 */
function min(arr, callback, scope, order = 1) {
    return max(arr, callback, scope, -order);
}
exports.min = min;
/**
 * Returns index of the array item which callback returns the lowest (or highest) value for.
 *
 * @param arr Array.
 * @param callback Returns a comparable value, compatible with `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to array itself.
 * @param order Pass positive order to find the lowest value, and negative to find the highest one.
 * @returns Item index.
 */
function minIndex(arr, callback, scope, order = 1) {
    return maxIndex(arr, callback, scope, -order);
}
exports.minIndex = minIndex;
/**
 * Returns the lowest (or highest) array item in terms of the specified comparer function.
 *
 * @param arr Array.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `compare` call scope. Defaults to array itself.
 * @param order Pass positive order to find the lowest value, and negative to find the highest one.
 * @returns Array item.
 */
function minComparing(arr, compare, scope, order = 1) {
    return maxComparing(arr, compare, scope, -order);
}
exports.minComparing = minComparing;
/**
 * Returns index of the lowest (or highest) array item in terms of the specified comparer function.
 *
 * @param arr Array.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `compare` call scope. Defaults to array itself.
 * @param order Pass positive order to find the lowest value, and negative to find the highest one.
 * @returns Item index.
 */
function minIndexComparing(arr, compare, scope, order = 1) {
    return maxIndexComparing(arr, compare, scope, -order);
}
exports.minIndexComparing = minIndexComparing;
/**
 * Counts the items matching criteria.
 *
 * Returns count of items which `callback` returns truthy value for.
 *
 * @param arr Array.
 * @param callback Criteria callback.
 * @param scope `callback` call scope. Defaults to array itself.
 * @returns Number of items.
 */
function count(arr, callback, scope) {
    scope = scope || arr;
    let result = 0;
    arr.every(function (item, index) {
        if (callback.call(scope, item, index)) {
            ++result;
        }
        return true;
    });
    return result;
}
exports.count = count;
/**
 * Returns indices of sorted items.
 *
 * Builds array of item indices, sorted by the result of callback call for each item.
 *
 * @param arr Array.
 * @param callback Indexer function. Must return a comparable value, compatible with
 * `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 * @returns Array of indices.
 */
function getSortingIndices(arr, callback, scope, order) {
    callback = callback || internal_1.identity;
    scope = scope || arr;
    order = order || 1;
    const pairs = [];
    arr.every(function (item, key) {
        pairs.push([key, callback.call(scope, item, key)]);
        return true;
    });
    pairs.sort(function (x, y) {
        return order * index_1.cmp(x[1], y[1]);
    });
    return pairs.map(function (pair) {
        return pair[0];
    });
}
exports.getSortingIndices = getSortingIndices;
/**
 * Returns indices of sorted items.
 *
 * Builds array of item indices, sorted by comparer.
 *
 * @param arr Array.
 * @param compare Comparer function. Must return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `comparer` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 * @returns Array of indices.
 */
function getSortingIndicesComparing(arr, compare, scope, order) {
    compare = compare || index_1.cmp;
    scope = scope || arr;
    order = order || 1;
    const pairs = [];
    arr.every(function (item, key) {
        pairs.push([key, item]);
        return true;
    });
    pairs.sort(function (x, y) {
        return order * compare.call(scope, x[1], y[1], x[0], y[0]);
    });
    return pairs.map(function (pair) {
        return pair[0];
    });
}
exports.getSortingIndicesComparing = getSortingIndicesComparing;
/**
 * Builds and returns a new array consisting of original array items sorted by the result of
 * callback call for each item.
 *
 * @param arr Array.
 * @param callback Indexer function. Must return a comparable value, compatible with
 * `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 * @returns Sorted array.
 */
function toSorted(arr, callback, scope, order) {
    return getSortingIndices(arr, callback, scope, order).map(function (index) {
        return arr[index];
    });
}
exports.toSorted = toSorted;
/**
 * Builds and returns a new array consisting of original array items sorted by comparer.
 *
 * @param arr Array.
 * @param compare Comparer function. Must return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `comparer` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 * @returns Sorted array.
 */
function toSortedComparing(arr, compare, scope, order) {
    return getSortingIndicesComparing(arr, compare, scope, order).map(function (index) {
        return arr[index];
    });
}
exports.toSortedComparing = toSortedComparing;
/**
 * Builds a new array containing items of this array in reversed order.
 * Current array is not modified.
 *
 * @param arrays Array.
 * @returns Reversed array.
 */
function toReversed(arr) {
    var result = arr.concat();
    result.reverse();
    return result;
}
exports.toReversed = toReversed;
/**
 * Indexes collection.
 *
 * Builds and returns a new map by rule: key is the result of the indexer function call,
 * value is the corresponding item.
 *
 * @param arr Array.
 * @param callback Indexer function.
 * @param scope `callback` call scope. Defaults to array itself.
 * @returns Array index.
 */
function index(arr, callback, scope) {
    scope = scope || arr;
    const result = {};
    arr.every(function (item, index) {
        const key = callback.call(scope, item, index);
        if (key != null) {
            result[key] = item;
        }
        return true;
    });
    return result;
}
exports.index = index;
function reduce(arr, reducer, initial) {
    let { value, callback } = (typeof reducer !== "function") ? internal_1.initReduceState(reducer) : {
        value: initial,
        callback: reducer
    };
    return arr.reduce(callback, value);
}
exports.reduce = reduce;
/**
 * Inserts an item to array.
 *
 * @param arr Array.
 * @param item Item to insert.
 * @param index Index of an item to insert the new one before.
 * By default, appends the item to the end of array.
 */
function add(arr, item, index) {
    arr.splice(index_1.def(index, arr.length), 0, item);
}
exports.add = add;
/**
 * Inserts item range to array.
 *
 * @param arr Array.
 * @param items Items to insert.
 * @param index Index of an item to insert the new ones before.
 * By default, appends the items to the end of array.
 */
function addAll(arr, items, index) {
    tryAddAll(arr, items, index);
}
exports.addAll = addAll;
/**
 * Replaces item at specified index.
 * If array doesn't contain such index, it will demolish the application.
 *
 * @param arr Array.
 * @param index Index of an item to replace.
 * @param item Item to replace with.
 * @returns The replaced item.
 */
function set(arr, index, item) {
    var result = trySet(arr, index, item);
    return (result !== undefined) ? result.value : arr[index];
}
exports.set = set;
/**
 * Removes item at specified position.
 * If array doesn't contain such index, it will demolish the application.
 *
 * @param arr Array.
 * @param index Index of an item to remove.
 * @returns The removed item.
 */
function remove(arr, index) {
    return arr.splice(index, 1)[0];
}
exports.remove = remove;
/**
 * Removes item range from array.
 *
 * @param arr Array.
 * @param index Index of the first item to remove.
 * @param count Count of items to remove.
 * @returns The removed items.
 */
function removeAll(arr, index, count) {
    var result = tryRemoveAll(arr, index, count);
    return result || [];
}
exports.removeAll = removeAll;
/**
 * Removes the first occurrence of an item in array.
 *
 * @param arr Array.
 * @param item Item to remove.
 * @returns Index of the removed item or -1.
 */
function removeItem(arr, item) {
    const index = arr.indexOf(item);
    if (index !== -1) {
        remove(arr, index);
    }
    return index;
}
exports.removeItem = removeItem;
/**
 * Removes all occurrences of items in array.
 *
 * @param arr Array.
 * @param items Items to remove.
 * @param getKey Function which returns unique key of an item in this array.
 * By default, identifies primitive values and `Identifiable` objects.
 */
function removeItems(arr, items, getKey) {
    const itemSet = internal_1.VidSet.fromArray(items, getKey);
    const newItems = arr.filter(function (item) {
        return !itemSet.contains(item);
    });
    clear(arr);
    addAll(arr, newItems);
}
exports.removeItems = removeItems;
/**
 * Moves an item inside array.
 *
 * @param arr Array.
 * @param fromIndex Item index to move.
 * @param toIndex Index to move to.
 * @returns The moved item.
 */
function move(arr, fromIndex, toIndex) {
    tryMove(arr, fromIndex, toIndex);
    return arr[toIndex];
}
exports.move = move;
/**
 * Clears array.
 *
 * @param arr Array.
 * @returns Old array contents. Never returns null or undefined.
 */
function clear(arr) {
    var result = tryClear(arr);
    return (result !== undefined) ? result : [];
}
exports.clear = clear;
/**
 * Removes and inserts item ranges.
 *
 * @param arr Array.
 * @param removeParamsList Array of segments to remove sorted by index asc. Segments are removed in backward order.
 * @param addParamsList Array of segments to insert sorted by index asc. Segments are inserted in forward order.
 * @returns Splice result. Never returns null or undefined.
 */
function splice(arr, removeParamsList, addParamsList) {
    var result = trySplice(arr, removeParamsList, addParamsList);
    return (result !== undefined) ? result :
        new ListSpliceResult_1.default(arr.concat(), [], []);
}
exports.splice = splice;
/**
 * Reorders array items.
 *
 * @param arr Array.
 * @param indexArray Index array. Item with index `i` is moved to index `indexArray[i]`.
 * Must contain all indexes from 0 to (length - 1).
 */
function reorder(arr, indexArray) {
    tryReorder(arr, indexArray);
}
exports.reorder = reorder;
/**
 * Sorts array by the result of `callback` function call for each item.
 *
 * @param arr Array.
 * @param callback Indexer function. Must return a comparable value, compatible with
 * `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 */
function sort(arr, callback, scope, order) {
    var indexArray = detectSort(arr, callback, scope, order);
    if (indexArray !== undefined) {
        tryReorder(arr, indexArray);
    }
}
exports.sort = sort;
/**
 * Sorts array by comparer.
 *
 * @param arr Array.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `comparer` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 */
function sortComparing(arr, compare, scope, order) {
    var indexArray = detectSortComparing(arr, compare, scope, order);
    if (indexArray !== undefined) {
        tryReorder(arr, indexArray);
    }
}
exports.sortComparing = sortComparing;
/**
 * Checks two arrays for equality, item by item (===).
 *
 * @param x First array.
 * @param y Second array.
 * @returns Arrays are equal.
 */
function equal(x, y) {
    if (x === y) {
        return true;
    }
    if (x.length !== y.length) {
        return false;
    }
    for (var i = 0, l = x.length; i < l; ++i) {
        if (x[i] !== y[i]) {
            return false;
        }
    }
    return true;
}
exports.equal = equal;
/**
 * Checks all items against criteria in backward order.
 *
 * Returns true if criteria returns truthy value for all collection items.
 *
 * Algorithms iterates items consequently, and stops after the first item not matching the criteria.
 *
 * @param arr Array.
 * @param callback Criteria callback.
 * @param scope `callback` call scope. Defaults to array itself.
 * @returns True if every item matches the criteria.
 */
function backEvery(arr, callback, scope) {
    scope = scope || arr;
    for (var i = arr.length - 1; i >= 0; --i) {
        if (!callback.call(scope, arr[i], i)) {
            return false;
        }
    }
    return true;
}
exports.backEvery = backEvery;
/**
 * Checks if every item in array is equal to its index: `array[i] === i`.
 *
 * @param arr Array.
 * @returns Every item is equal to its index.
 */
function isIdentity(arr) {
    for (var i = 0, l = arr.length; i < l; ++i) {
        if (arr[i] !== i) {
            return false;
        }
    }
    return true;
}
exports.isIdentity = isIdentity;
/**
 * Builds a new array by the rule: `result[array[i]] === i`.
 *
 * @param arr Array.
 * @returns The inverted array.
 */
function invert(arr) {
    var l = arr.length;
    var result = new Array(l);
    for (var i = 0; i < l; ++i) {
        result[arr[i]] = i;
    }
    return result;
}
exports.invert = invert;
/**
 * Builds a new array consisting of subarray items in the same order.
 *
 * @param arrays Array of subarrays.
 * @returns The merged array.
 */
function merge(arrays) {
    var result = [];
    for (var i = 0, l = arrays.length; i < l; ++i) {
        result.push.apply(result, arrays[i]);
    }
    return result;
}
exports.merge = merge;
/**
 * The same as `addAll`, but returns undefined if the array stays unmodified. Else returns true.
 *
 * @param arr Array.
 * @param items Items to insert.
 * @param index Index of an item to insert the new ones before.
 * By default, appends the items to the end of array.
 * @returns True if array was modified, else undefined.
 */
function tryAddAll(arr, items, index) {
    if (items.length === 0) {
        return undefined;
    }
    if (index === undefined) {
        var l = arr.length;
        arr.length += items.length;
        for (var i = 0; i < items.length; ++i) {
            arr[i + l] = items[i];
        }
    }
    else {
        var tail = arr.splice(index, arr.length - index);
        tryAddAll(arr, items);
        tryAddAll(arr, tail);
    }
    return true;
}
exports.tryAddAll = tryAddAll;
/**
 * Replaces item at specified index.
 * If array doesn't contain such index, it will demolish the application.
 *
 * @param arr Array.
 * @param index Index of an item to replace.
 * @param item Item to replace with.
 * @returns The replaced item. If array is not modified, returns undefined.
 */
function trySet(arr, index, item) {
    var oldItem = arr[index];
    if (item !== oldItem) {
        arr[index] = item;
        return { value: oldItem };
    }
    return undefined;
}
exports.trySet = trySet;
/**
 * Removes item range from array.
 *
 * @param arr Array.
 * @param index Index of first item to remove.
 * @param count Count of items to remove.
 * @returns The removed items. If array is not modified, returns undefined.
 */
function tryRemoveAll(arr, index, count) {
    if (count !== 0) {
        return arr.splice(index, count);
    }
    return undefined;
}
exports.tryRemoveAll = tryRemoveAll;
/**
 * Moves an item inside array.
 *
 * @param arr Array.
 * @param fromIndex Item index to move.
 * @param toIndex Index to move to.
 * @returns The moved item. If array is not modified, returns undefined.
 */
function tryMove(arr, fromIndex, toIndex) {
    if (fromIndex === toIndex) {
        return undefined;
    }
    var item = arr[fromIndex];
    arr.splice(fromIndex, 1);
    arr.splice(toIndex, 0, item);
    return item;
}
exports.tryMove = tryMove;
/**
 * Clears array.
 *
 * @param arr Array.
 * @returns Old array contents. If not modified - undefined.
 */
function tryClear(arr) {
    if (arr.length !== 0) {
        return arr.splice(0, arr.length);
    }
    return undefined;
}
exports.tryClear = tryClear;
/**
 * Removes and inserts item ranges.
 *
 * @param arr Array.
 * @param removeParamsList Array of segments to remove sorted by index asc. Segments are removed in backward order.
 * @param addParamsList Array of segments to insert sorted by index asc. Segments are inserted in forward order.
 * @returns Splice result. If collection is not modified, returns undefined.
 */
function trySplice(arr, removeParamsList, addParamsList) {
    var optimizedRemoveParamsList = [];
    var rlast = null;
    var rparams;
    for (var i = 0, l = removeParamsList.length; i < l; ++i) {
        rparams = removeParamsList[i];
        if (rlast && (rparams.index === rlast.index + rlast.count)) {
            rlast.count += rparams.count;
        }
        else {
            rlast = rparams.clone();
            optimizedRemoveParamsList.push(rlast);
        }
    }
    var optimizedAddParamsList = [];
    var alast = null;
    var aparams;
    for (var i = 0, l = addParamsList.length; i < l; ++i) {
        aparams = addParamsList[i];
        if (alast && (aparams.index === alast.index + alast.items.length)) {
            tryAddAll(alast.items, aparams.items);
        }
        else {
            alast = aparams.clone();
            optimizedAddParamsList.push(alast);
        }
    }
    var oldItems = arr.concat();
    var removedItemsList = [];
    for (var i = optimizedRemoveParamsList.length - 1; i >= 0; --i) {
        rparams = optimizedRemoveParamsList[i];
        var index = rparams.index;
        var items = tryRemoveAll(arr, index, rparams.count);
        if (items === undefined) {
            continue;
        }
        removedItemsList.push(new IndexItems_1.default(index, items));
    }
    var addedItemsList = [];
    for (var i = 0, l = optimizedAddParamsList.length; i < l; ++i) {
        aparams = optimizedAddParamsList[i];
        if (tryAddAll(arr, aparams.items, aparams.index) === undefined) {
            continue;
        }
        addedItemsList.push(aparams);
    }
    if ((removedItemsList.length !== 0) || (addedItemsList.length !== 0)) {
        removedItemsList.reverse();
        return new ListSpliceResult_1.default(oldItems, removedItemsList, addedItemsList);
    }
    return undefined;
}
exports.trySplice = trySplice;
/**
 * Reorders array items.
 *
 * @param arr Array.
 * @param indexArray Index array. Item with index `i` will be moved to index `indexArray[i]`.
 * Must contain all indexes from 0 to (length - 1).
 * @returns Old array contents. If collection is not modified, returns undefined.
 */
function tryReorder(arr, indexArray) {
    var length = arr.length;
    if (isIdentity(indexArray)) {
        return undefined;
    }
    var oldItems = arr.concat();
    for (var i = 0; i < length; ++i) {
        arr[indexArray[i]] = oldItems[i];
    }
    return oldItems;
}
exports.tryReorder = tryReorder;
/**
 * Detects `splice` method arguments to adjust array contents to `newItems`.
 * Determines item ranges neccessary to be removed and inserted.
 * All items must have unique `getKey` function result.
 * If items don't have unique key, probably `detectFilter` method may help,
 * because it doesn't require item uniquiness.
 *
 * @param oldItems Old array contents.
 * @param newItems New array contents.
 * @param getKey Function which returns unique key of an item in this array.
 * By default, identifies primitive values and `Identifiable` objects.
 * @returns `splice` method arguments. If no method call required, returns undefined.
 */
function detectSplice(oldItems, newItems, getKey) {
    var removeParamsList = [];
    var addParamsList = [];
    var oldIndexMap = new internal_1.VidMap(getKey);
    for (var i = 0, l = oldItems.length; i < l; ++i) {
        oldIndexMap.put(oldItems[i], i);
    }
    var nextOldIndex = 0;
    var offset = 0;
    var newItemBuffer = [];
    function buffer(item) {
        newItemBuffer.push(item);
    }
    function flush() {
        if (newItemBuffer.length === 0) {
            return;
        }
        addParamsList.push(new IndexItems_1.default(offset + nextOldIndex, newItemBuffer));
        offset += newItemBuffer.length;
        newItemBuffer = [];
    }
    function testRemove(oldIndex) {
        if (oldIndex > nextOldIndex) {
            const count = oldIndex - nextOldIndex;
            removeParamsList.push(new IndexCount_1.default(nextOldIndex, count));
            offset -= count;
        }
    }
    for (let newIndex = 0, l = newItems.length; newIndex < l; ++newIndex) {
        const item = newItems[newIndex];
        const oldIndex = oldIndexMap.get(item);
        if ((oldIndex === undefined) || (oldIndex < nextOldIndex)) {
            buffer(item);
        }
        else {
            flush();
            testRemove(oldIndex);
            nextOldIndex = oldIndex + 1;
        }
    }
    flush();
    testRemove(oldItems.length);
    if ((removeParamsList.length !== 0) || (addParamsList.length !== 0)) {
        return { removeParamsList: removeParamsList, addParamsList: addParamsList };
    }
    return undefined;
}
exports.detectSplice = detectSplice;
/**
 * Detects `removeParamsList` argument of `splice` method to adjust array contents to `newItems`.
 * Determines item ranges neccessary to be removed.
 * Doesn't assume item insertion - try `detectSplice` if that's the case.
 * In advantage to `detectSplice`, doesn't require item uniquiness.
 *
 * @param oldItems Old array contents.
 * @param newItems New array contents.
 * @returns `removeParamsList` argument of `splice` method.
 * If no method call required, returns undefined.
 */
function detectFilter(oldItems, newItems) {
    const removeParamsList = [];
    let oldIndex = 0;
    const oldLength = oldItems.length;
    const newLength = newItems.length;
    for (let newIndex = 0; newIndex <= newLength; ++newIndex) {
        const newItem = newItems[newIndex];
        let count = 0;
        while ((oldIndex + count < oldLength) && (oldItems[oldIndex + count] !== newItem)) {
            ++count;
        }
        if (count !== 0) {
            removeParamsList.push(new IndexCount_1.default(oldIndex, count));
        }
        oldIndex += count + 1;
    }
    if (removeParamsList.length !== 0) {
        return removeParamsList;
    }
    return undefined;
}
exports.detectFilter = detectFilter;
/**
 * Detects `reorder` method arguments to adjust array contents to `newItems`.
 * Determines indices to move the items to.
 * If `newItems` contents differ from `oldItems` contents,
 * you should pray Gods that application still works well.
 *
 * @param oldItems Old array contents.
 * @param newItems New array contents.
 * @param getKey Function which returns unique key of an item in this array.
 * By default, identifies primitive values and `Identifiable` objects.
 * @returns `indexArray` argument of `reorder` method.
 * If no method call required, returns undefined.
 */
function detectReorder(oldItems, newItems, getKey) {
    var indexArray = [];
    var newIndexMap = new internal_1.VidMap(getKey);
    for (var i = 0, l = newItems.length; i < l; ++i) {
        newIndexMap.put(newItems[i], i);
    }
    for (var i = 0, l = oldItems.length; i < l; ++i) {
        indexArray.push(newIndexMap.get(oldItems[i]));
    }
    if (!isIdentity(indexArray)) {
        return indexArray;
    }
    return undefined;
}
exports.detectReorder = detectReorder;
/**
 * Detects `reorder` method arguments to sort array contents by the result of `callback` call for each item.
 *
 * @param arr Array.
 * @param callback Indexer function. Must return a comparable value, compatible with
 * `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 * @returns `indexArray` argument of `reorder` method.
 * If no method call required, returns undefined.
 */
function detectSort(arr, callback, scope, order) {
    var keys = getSortingIndices(arr, callback, scope, order);
    if (!isIdentity(keys)) {
        return invert(keys);
    }
    return undefined;
}
exports.detectSort = detectSort;
/**
 * Detects `reorder` method arguments to sort array contents by comparer.
 *
 * @param arr Array.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `comparer` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 * @returns `indexArray` argument of `reorder` method.
 * If no method call required, returns undefined.
 */
function detectSortComparing(arr, compare, scope, order) {
    var keys = getSortingIndicesComparing(arr, compare, scope, order);
    if (!isIdentity(keys)) {
        return invert(keys);
    }
    return undefined;
}
exports.detectSortComparing = detectSortComparing;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXJyYXlVdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9BcnJheVV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXNCRTs7Ozs7O0FBSUYsbUNBQWlDO0FBQ2pDLDhEQUFzQztBQUN0Qyw4REFBc0M7QUFDdEMseUNBQXFFO0FBQ3JFLDBFQUFrRDtBQUlsRDs7Ozs7R0FLRztBQUNILFNBQWdCLE9BQU8sQ0FBSSxHQUFRO0lBQ2xDLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQUZELDBCQUVDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFnQixPQUFPLENBQUksR0FBUTtJQUNsQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO0FBQ3pCLENBQUM7QUFGRCwwQkFFQztBQUVEOzs7Ozs7R0FNRztBQUNILFNBQWdCLFFBQVEsQ0FBSSxHQUFRLEVBQUUsSUFBTztJQUM1QyxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDakMsQ0FBQztBQUZELDRCQUVDO0FBRUQ7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxTQUFnQixJQUFJLENBQUksR0FBUSxFQUFFLFFBQXlDLEVBQUUsS0FBVztJQUN2RixPQUFPLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzdDLENBQUM7QUFGRCxvQkFFQztBQUVEOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsU0FBZ0IsU0FBUyxDQUFJLEdBQVEsRUFBRSxRQUF5QyxFQUFFLEtBQVc7SUFDNUYsS0FBSyxHQUFHLEtBQUssSUFBSSxHQUFHLENBQUM7SUFDckIsSUFBSSxNQUFjLENBQUM7SUFDbkIsR0FBRyxDQUFDLEtBQUssQ0FBQyxVQUFVLElBQUksRUFBRSxLQUFLO1FBQzlCLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQ3RDLE1BQU0sR0FBRyxLQUFLLENBQUM7WUFDZixPQUFPLEtBQUssQ0FBQztTQUNiO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sTUFBTSxDQUFDO0FBQ2YsQ0FBQztBQVhELDhCQVdDO0FBRUQ7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUNILFNBQWdCLFlBQVksQ0FBSSxHQUFRLEVBQUUsS0FBUSxFQUFFLE9BQWtDLEVBQUUsS0FBVyxFQUFFLEtBQWM7SUFDbEgsT0FBTyxHQUFHLE9BQU8sSUFBSSxXQUFHLENBQUM7SUFDekIsS0FBSyxHQUFHLEtBQUssSUFBSSxHQUFHLENBQUM7SUFDckIsS0FBSyxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUM7SUFDbkIsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztJQUN4QixJQUFJLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxDQUFDO0lBQ3ZCLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztJQUNiLE9BQU8sSUFBSSxJQUFJLElBQUksRUFBRTtRQUNwQixJQUFJLEtBQUssQ0FBQyxDQUFDO0tBQ1g7SUFDRCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxPQUFPLElBQUksRUFBRTtRQUNaLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO1lBQ2pHLEtBQUssSUFBSSxJQUFJLENBQUM7U0FDZDtRQUNELElBQUksS0FBSyxDQUFDLENBQUM7S0FDWDtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2QsQ0FBQztBQWxCRCxvQ0FrQkM7QUFFRDs7Ozs7Ozs7R0FRRztBQUNILFNBQWdCLEdBQUcsQ0FBSSxHQUFRLEVBQUUsUUFBMEMsRUFBRSxLQUFXLEVBQUUsUUFBZ0IsQ0FBQztJQUMxRyxPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNuRCxDQUFDO0FBRkQsa0JBRUM7QUFFRDs7Ozs7Ozs7R0FRRztBQUNILFNBQWdCLFFBQVEsQ0FBSSxHQUFRLEVBQUUsUUFBMEMsRUFBRSxLQUFXLEVBQUUsUUFBZ0IsQ0FBQztJQUMvRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3JCLE9BQU8sQ0FBQyxDQUFDLENBQUM7S0FDVjtJQUNELFFBQVEsR0FBRyxRQUFRLElBQUksbUJBQVEsQ0FBQztJQUNoQyxLQUFLLEdBQUcsS0FBSyxJQUFJLEdBQUcsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDZixJQUFJLEdBQUcsR0FBUSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQzNDLE1BQU0sSUFBSSxHQUFRLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsRCxNQUFNLElBQUksR0FBRyxXQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ3ZELE1BQU0sR0FBRyxDQUFDLENBQUM7WUFDWCxHQUFHLEdBQUcsSUFBSSxDQUFDO1NBQ1g7S0FDRDtJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2YsQ0FBQztBQWpCRCw0QkFpQkM7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxTQUFnQixZQUFZLENBQUksR0FBUSxFQUFFLE9BQTBELEVBQUUsS0FBVyxFQUFFLFFBQWdCLENBQUM7SUFDbkksT0FBTyxHQUFHLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBRkQsb0NBRUM7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxTQUFnQixpQkFBaUIsQ0FBSSxHQUFRLEVBQUUsT0FBMEQsRUFBRSxLQUFXLEVBQUUsUUFBZ0IsQ0FBQztJQUN4SSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3JCLE9BQU8sQ0FBQyxDQUFDLENBQUM7S0FDVjtJQUNELE9BQU8sR0FBRyxPQUFPLElBQUksV0FBRyxDQUFDO0lBQ3pCLEtBQUssR0FBRyxLQUFLLElBQUksR0FBRyxDQUFDO0lBQ3JCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNmLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDM0MsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3BFLE1BQU0sR0FBRyxDQUFDLENBQUM7U0FDWDtLQUNEO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDO0FBYkQsOENBYUM7QUFFRDs7Ozs7Ozs7R0FRRztBQUNILFNBQWdCLEdBQUcsQ0FBSSxHQUFRLEVBQUUsUUFBMEMsRUFBRSxLQUFXLEVBQUUsUUFBZ0IsQ0FBQztJQUMxRyxPQUFPLEdBQUcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFDLENBQUM7QUFGRCxrQkFFQztBQUVEOzs7Ozs7OztHQVFHO0FBQ0gsU0FBZ0IsUUFBUSxDQUFJLEdBQVEsRUFBRSxRQUEwQyxFQUFFLEtBQVcsRUFBRSxRQUFnQixDQUFDO0lBQy9HLE9BQU8sUUFBUSxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDL0MsQ0FBQztBQUZELDRCQUVDO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsU0FBZ0IsWUFBWSxDQUFJLEdBQVEsRUFBRSxPQUEwRCxFQUFFLEtBQVcsRUFBRSxRQUFnQixDQUFDO0lBQ25JLE9BQU8sWUFBWSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUZELG9DQUVDO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsU0FBZ0IsaUJBQWlCLENBQUksR0FBUSxFQUFFLE9BQTBELEVBQUUsS0FBVyxFQUFFLFFBQWdCLENBQUM7SUFDeEksT0FBTyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3ZELENBQUM7QUFGRCw4Q0FFQztBQUVEOzs7Ozs7Ozs7R0FTRztBQUNILFNBQWdCLEtBQUssQ0FBSSxHQUFRLEVBQUUsUUFBeUMsRUFBRSxLQUFXO0lBQ3hGLEtBQUssR0FBRyxLQUFLLElBQUksR0FBRyxDQUFDO0lBQ3JCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNmLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxJQUFJLEVBQUUsS0FBSztRQUM5QixJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRTtZQUN0QyxFQUFFLE1BQU0sQ0FBQztTQUNUO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sTUFBTSxDQUFDO0FBQ2YsQ0FBQztBQVZELHNCQVVDO0FBRUQ7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxTQUFnQixpQkFBaUIsQ0FBSSxHQUFRLEVBQUUsUUFBMEMsRUFBRSxLQUFXLEVBQUUsS0FBYztJQUNySCxRQUFRLEdBQUcsUUFBUSxJQUFJLG1CQUFRLENBQUM7SUFDaEMsS0FBSyxHQUFHLEtBQUssSUFBSSxHQUFHLENBQUM7SUFDckIsS0FBSyxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUM7SUFDbkIsTUFBTSxLQUFLLEdBQVUsRUFBRSxDQUFDO0lBQ3hCLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxJQUFJLEVBQUUsR0FBRztRQUM1QixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkQsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDLENBQUMsQ0FBQztJQUNILEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztRQUN4QixPQUFPLEtBQUssR0FBRyxXQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSTtRQUM5QixPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoQixDQUFDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFmRCw4Q0FlQztBQUVEOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsU0FBZ0IsMEJBQTBCLENBQUksR0FBUSxFQUFFLE9BQTBELEVBQUUsS0FBVyxFQUFFLEtBQWM7SUFDOUksT0FBTyxHQUFHLE9BQU8sSUFBSSxXQUFHLENBQUM7SUFDekIsS0FBSyxHQUFHLEtBQUssSUFBSSxHQUFHLENBQUM7SUFDckIsS0FBSyxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUM7SUFDbkIsTUFBTSxLQUFLLEdBQVUsRUFBRSxDQUFDO0lBQ3hCLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxJQUFJLEVBQUUsR0FBRztRQUM1QixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDeEIsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDLENBQUMsQ0FBQztJQUNILEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztRQUN4QixPQUFPLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUk7UUFDOUIsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEIsQ0FBQyxDQUFDLENBQUM7QUFDSixDQUFDO0FBZkQsZ0VBZUM7QUFFRDs7Ozs7Ozs7OztHQVVHO0FBQ0gsU0FBZ0IsUUFBUSxDQUFJLEdBQVEsRUFBRSxRQUEwQyxFQUFFLEtBQVcsRUFBRSxLQUFjO0lBQzVHLE9BQU8saUJBQWlCLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsS0FBSztRQUN4RSxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQixDQUFDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFKRCw0QkFJQztBQUVEOzs7Ozs7Ozs7R0FTRztBQUNILFNBQWdCLGlCQUFpQixDQUFJLEdBQVEsRUFBRSxPQUEwRCxFQUFFLEtBQVcsRUFBRSxLQUFjO0lBQ3JJLE9BQU8sMEJBQTBCLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsS0FBSztRQUNoRixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQixDQUFDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFKRCw4Q0FJQztBQUVEOzs7Ozs7R0FNRztBQUNILFNBQWdCLFVBQVUsQ0FBSSxHQUFRO0lBQ3JDLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUMxQixNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDakIsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDO0FBSkQsZ0NBSUM7QUFFRDs7Ozs7Ozs7OztHQVVHO0FBQ0gsU0FBZ0IsS0FBSyxDQUFJLEdBQVEsRUFBRSxRQUF5QyxFQUFFLEtBQVc7SUFDeEYsS0FBSyxHQUFHLEtBQUssSUFBSSxHQUFHLENBQUM7SUFDckIsTUFBTSxNQUFNLEdBQWtCLEVBQUUsQ0FBQztJQUNqQyxHQUFHLENBQUMsS0FBSyxDQUFDLFVBQVUsSUFBSSxFQUFFLEtBQUs7UUFDOUIsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzlDLElBQUksR0FBRyxJQUFJLElBQUksRUFBRTtZQUNoQixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQ25CO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sTUFBTSxDQUFDO0FBQ2YsQ0FBQztBQVhELHNCQVdDO0FBc0JELFNBQWdCLE1BQU0sQ0FBTyxHQUFRLEVBQ25DLE9BQXdFLEVBQUUsT0FBVztJQUN0RixJQUFJLEVBQUMsS0FBSyxFQUFFLFFBQVEsRUFBQyxHQUFHLENBQUMsT0FBTyxPQUFPLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLDBCQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BGLEtBQUssRUFBRSxPQUFPO1FBQ2QsUUFBUSxFQUFFLE9BQU87S0FDakIsQ0FBQztJQUNGLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQVBELHdCQU9DO0FBRUQ7Ozs7Ozs7R0FPRztBQUNILFNBQWdCLEdBQUcsQ0FBSSxHQUFRLEVBQUUsSUFBTyxFQUFFLEtBQWM7SUFDdkQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUZELGtCQUVDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNILFNBQWdCLE1BQU0sQ0FBSSxHQUFRLEVBQUUsS0FBVSxFQUFFLEtBQWM7SUFDN0QsU0FBUyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQUZELHdCQUVDO0FBRUQ7Ozs7Ozs7O0dBUUc7QUFDSCxTQUFnQixHQUFHLENBQUksR0FBUSxFQUFFLEtBQWEsRUFBRSxJQUFPO0lBQ3RELElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RDLE9BQU8sQ0FBQyxNQUFNLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBSEQsa0JBR0M7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsU0FBZ0IsTUFBTSxDQUFJLEdBQVEsRUFBRSxLQUFhO0lBQ2hELE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUZELHdCQUVDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNILFNBQWdCLFNBQVMsQ0FBSSxHQUFRLEVBQUUsS0FBYSxFQUFFLEtBQWE7SUFDbEUsSUFBSSxNQUFNLEdBQUcsWUFBWSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDN0MsT0FBTyxNQUFNLElBQUksRUFBRSxDQUFDO0FBQ3JCLENBQUM7QUFIRCw4QkFHQztBQUVEOzs7Ozs7R0FNRztBQUNILFNBQWdCLFVBQVUsQ0FBSSxHQUFRLEVBQUUsSUFBTztJQUM5QyxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO1FBQ2pCLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDbkI7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNkLENBQUM7QUFORCxnQ0FNQztBQUVEOzs7Ozs7O0dBT0c7QUFDSCxTQUFnQixXQUFXLENBQUksR0FBUSxFQUFFLEtBQVUsRUFBRSxNQUF5QjtJQUM3RSxNQUFNLE9BQU8sR0FBRyxpQkFBTSxDQUFDLFNBQVMsQ0FBSSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbkQsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQU87UUFDNUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDLENBQUM7SUFDSCxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDWCxNQUFNLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZCLENBQUM7QUFQRCxrQ0FPQztBQUVEOzs7Ozs7O0dBT0c7QUFDSCxTQUFnQixJQUFJLENBQUksR0FBUSxFQUFFLFNBQWlCLEVBQUUsT0FBZTtJQUNuRSxPQUFPLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqQyxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNyQixDQUFDO0FBSEQsb0JBR0M7QUFFRDs7Ozs7R0FLRztBQUNILFNBQWdCLEtBQUssQ0FBSSxHQUFRO0lBQ2hDLElBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzQixPQUFPLENBQUMsTUFBTSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUM3QyxDQUFDO0FBSEQsc0JBR0M7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsU0FBZ0IsTUFBTSxDQUFJLEdBQVEsRUFDaEMsZ0JBQW9DLEVBQ3BDLGFBQW9DO0lBQ3JDLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDN0QsT0FBTyxDQUFDLE1BQU0sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkMsSUFBSSwwQkFBZ0IsQ0FBSSxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQXlCLEVBQUUsRUFBeUIsRUFBRSxDQUFDLENBQUM7QUFDOUYsQ0FBQztBQU5ELHdCQU1DO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsT0FBTyxDQUFJLEdBQVEsRUFBRSxVQUFvQjtJQUN4RCxVQUFVLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQzdCLENBQUM7QUFGRCwwQkFFQztBQUVEOzs7Ozs7OztHQVFHO0FBQ0gsU0FBZ0IsSUFBSSxDQUFJLEdBQVEsRUFBRSxRQUEwQyxFQUFFLEtBQVcsRUFBRSxLQUFjO0lBQ3hHLElBQUksVUFBVSxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN6RCxJQUFJLFVBQVUsS0FBSyxTQUFTLEVBQUU7UUFDN0IsVUFBVSxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztLQUM1QjtBQUNGLENBQUM7QUFMRCxvQkFLQztBQUVEOzs7Ozs7OztHQVFHO0FBQ0gsU0FBZ0IsYUFBYSxDQUFJLEdBQVEsRUFBRSxPQUEwRCxFQUFFLEtBQVcsRUFBRSxLQUFjO0lBQ2pJLElBQUksVUFBVSxHQUFHLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2pFLElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRTtRQUM3QixVQUFVLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0tBQzVCO0FBQ0YsQ0FBQztBQUxELHNDQUtDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsS0FBSyxDQUFJLENBQU0sRUFBRSxDQUFNO0lBQ3RDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNaLE9BQU8sSUFBSSxDQUFDO0tBQ1o7SUFDRCxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLE1BQU0sRUFBRTtRQUMxQixPQUFPLEtBQUssQ0FBQztLQUNiO0lBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtRQUN6QyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDbEIsT0FBTyxLQUFLLENBQUM7U0FDYjtLQUNEO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDYixDQUFDO0FBYkQsc0JBYUM7QUFFRDs7Ozs7Ozs7Ozs7R0FXRztBQUNILFNBQWdCLFNBQVMsQ0FBSSxHQUFRLEVBQUUsUUFBeUMsRUFBRSxLQUFXO0lBQzVGLEtBQUssR0FBRyxLQUFLLElBQUksR0FBRyxDQUFDO0lBQ3JCLEtBQUssSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtRQUN6QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO1lBQ3JDLE9BQU8sS0FBSyxDQUFDO1NBQ2I7S0FDRDtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2IsQ0FBQztBQVJELDhCQVFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFnQixVQUFVLENBQUMsR0FBYTtJQUN2QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQzNDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNqQixPQUFPLEtBQUssQ0FBQztTQUNiO0tBQ0Q7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNiLENBQUM7QUFQRCxnQ0FPQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsTUFBTSxDQUFDLEdBQWE7SUFDbkMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztJQUNuQixJQUFJLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBUyxDQUFDLENBQUMsQ0FBQztJQUNsQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQzNCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDbkI7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUM7QUFQRCx3QkFPQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsS0FBSyxDQUFJLE1BQWE7SUFDckMsSUFBSSxNQUFNLEdBQVEsRUFBRSxDQUFDO0lBQ3JCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDOUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3JDO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDO0FBTkQsc0JBTUM7QUFFRDs7Ozs7Ozs7R0FRRztBQUNILFNBQWdCLFNBQVMsQ0FBSSxHQUFRLEVBQUUsS0FBVSxFQUFFLEtBQWM7SUFDaEUsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN2QixPQUFPLFNBQVMsQ0FBQztLQUNqQjtJQUNELElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtRQUN4QixJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO1FBQ25CLEdBQUcsQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUMzQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRTtZQUN0QyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN0QjtLQUNEO1NBQU07UUFDTixJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ2pELFNBQVMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdEIsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNyQjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2IsQ0FBQztBQWhCRCw4QkFnQkM7QUFFRDs7Ozs7Ozs7R0FRRztBQUNILFNBQWdCLE1BQU0sQ0FBSSxHQUFRLEVBQUUsS0FBYSxFQUFFLElBQU87SUFDekQsSUFBSSxPQUFPLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLElBQUksSUFBSSxLQUFLLE9BQU8sRUFBRTtRQUNyQixHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUM7S0FDMUI7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNsQixDQUFDO0FBUEQsd0JBT0M7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsU0FBZ0IsWUFBWSxDQUFJLEdBQVEsRUFBRSxLQUFhLEVBQUUsS0FBYTtJQUNyRSxJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7UUFDaEIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztLQUNoQztJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ2xCLENBQUM7QUFMRCxvQ0FLQztBQUVEOzs7Ozs7O0dBT0c7QUFDSCxTQUFnQixPQUFPLENBQUksR0FBUSxFQUFFLFNBQWlCLEVBQUUsT0FBZTtJQUN0RSxJQUFJLFNBQVMsS0FBSyxPQUFPLEVBQUU7UUFDMUIsT0FBTyxTQUFTLENBQUM7S0FDakI7SUFDRCxJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDMUIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzdCLE9BQU8sSUFBSSxDQUFDO0FBQ2IsQ0FBQztBQVJELDBCQVFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFnQixRQUFRLENBQUksR0FBUTtJQUNuQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3JCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ2pDO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDbEIsQ0FBQztBQUxELDRCQUtDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNILFNBQWdCLFNBQVMsQ0FBSSxHQUFRLEVBQ25DLGdCQUFvQyxFQUNwQyxhQUFvQztJQUNyQyxJQUFJLHlCQUF5QixHQUF1QixFQUFFLENBQUM7SUFDdkQsSUFBSSxLQUFLLEdBQWUsSUFBSSxDQUFDO0lBQzdCLElBQUksT0FBeUIsQ0FBQztJQUM5QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDeEQsT0FBTyxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLElBQUksS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMzRCxLQUFLLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUM7U0FDN0I7YUFBTTtZQUNOLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDeEIseUJBQXlCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3RDO0tBQ0Q7SUFFRCxJQUFJLHNCQUFzQixHQUFHLEVBQUUsQ0FBQztJQUNoQyxJQUFJLEtBQUssR0FBd0IsSUFBSSxDQUFDO0lBQ3RDLElBQUksT0FBNEIsQ0FBQztJQUNqQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQ3JELE9BQU8sR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0IsSUFBSSxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNsRSxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdEM7YUFBTTtZQUNOLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDeEIsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ25DO0tBQ0Q7SUFFRCxJQUFJLFFBQVEsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDNUIsSUFBSSxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7SUFDMUIsS0FBSyxJQUFJLENBQUMsR0FBRyx5QkFBeUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDL0QsT0FBTyxHQUFHLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFDMUIsSUFBSSxLQUFLLEdBQUcsWUFBWSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BELElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUN4QixTQUFTO1NBQ1Q7UUFDRCxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxvQkFBVSxDQUFJLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0tBQ3ZEO0lBQ0QsSUFBSSxjQUFjLEdBQUcsRUFBRSxDQUFDO0lBQ3hCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtRQUM5RCxPQUFPLEdBQUcsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsSUFBSSxTQUFTLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUMvRCxTQUFTO1NBQ1Q7UUFDRCxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzdCO0lBQ0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLEVBQUU7UUFDckUsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDM0IsT0FBTyxJQUFJLDBCQUFnQixDQUFJLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxjQUFjLENBQUMsQ0FBQztLQUMzRTtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ2xCLENBQUM7QUFyREQsOEJBcURDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNILFNBQWdCLFVBQVUsQ0FBSSxHQUFRLEVBQUUsVUFBb0I7SUFDM0QsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztJQUN4QixJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUMzQixPQUFPLFNBQVMsQ0FBQztLQUNqQjtJQUNELElBQUksUUFBUSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM1QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQ2hDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDakM7SUFDRCxPQUFPLFFBQVEsQ0FBQztBQUNqQixDQUFDO0FBVkQsZ0NBVUM7QUFFRDs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSCxTQUFnQixZQUFZLENBQUksUUFBYSxFQUFFLFFBQWEsRUFDcEQsTUFBeUI7SUFDaEMsSUFBSSxnQkFBZ0IsR0FBdUIsRUFBRSxDQUFDO0lBQzlDLElBQUksYUFBYSxHQUEwQixFQUFFLENBQUM7SUFDOUMsSUFBSSxXQUFXLEdBQUcsSUFBSSxpQkFBTSxDQUFZLE1BQU0sQ0FBQyxDQUFDO0lBQ2hELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDaEQsV0FBVyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDaEM7SUFDRCxJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsSUFBSSxhQUFhLEdBQVEsRUFBRSxDQUFDO0lBRTVCLFNBQVMsTUFBTSxDQUFDLElBQU87UUFDdEIsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsU0FBUyxLQUFLO1FBQ2IsSUFBSSxhQUFhLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUMvQixPQUFPO1NBQ1A7UUFDRCxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksb0JBQVUsQ0FBSSxNQUFNLEdBQUcsWUFBWSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDNUUsTUFBTSxJQUFJLGFBQWEsQ0FBQyxNQUFNLENBQUM7UUFDL0IsYUFBYSxHQUFHLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsU0FBUyxVQUFVLENBQUMsUUFBZ0I7UUFDbkMsSUFBSSxRQUFRLEdBQUcsWUFBWSxFQUFFO1lBQzVCLE1BQU0sS0FBSyxHQUFHLFFBQVEsR0FBRyxZQUFZLENBQUM7WUFDdEMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksb0JBQVUsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUMzRCxNQUFNLElBQUksS0FBSyxDQUFDO1NBQ2hCO0lBQ0YsQ0FBQztJQUVELEtBQUssSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLFFBQVEsR0FBRyxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUU7UUFDckUsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLFFBQVEsS0FBSyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxZQUFZLENBQUMsRUFBRTtZQUMxRCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDYjthQUFNO1lBQ04sS0FBSyxFQUFFLENBQUM7WUFDUixVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDckIsWUFBWSxHQUFHLFFBQVEsR0FBRyxDQUFDLENBQUM7U0FDNUI7S0FDRDtJQUNELEtBQUssRUFBRSxDQUFDO0lBQ1IsVUFBVSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsRUFBRTtRQUNwRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxDQUFDO0tBQzVFO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDbEIsQ0FBQztBQWxERCxvQ0FrREM7QUFFRDs7Ozs7Ozs7OztHQVVHO0FBQ0gsU0FBZ0IsWUFBWSxDQUFJLFFBQWEsRUFBRSxRQUFhO0lBQzNELE1BQU0sZ0JBQWdCLEdBQXVCLEVBQUUsQ0FBQztJQUNoRCxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDakIsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUNsQyxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO0lBQ2xDLEtBQUssSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFLFFBQVEsSUFBSSxTQUFTLEVBQUUsRUFBRSxRQUFRLEVBQUU7UUFDekQsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ25DLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLE9BQU8sQ0FBQyxRQUFRLEdBQUcsS0FBSyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsS0FBSyxPQUFPLENBQUMsRUFBRTtZQUNsRixFQUFFLEtBQUssQ0FBQztTQUNSO1FBQ0QsSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO1lBQ2hCLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLG9CQUFVLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDdkQ7UUFDRCxRQUFRLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztLQUN0QjtJQUNELElBQUksZ0JBQWdCLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUNsQyxPQUFPLGdCQUFnQixDQUFDO0tBQ3hCO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDbEIsQ0FBQztBQXBCRCxvQ0FvQkM7QUFFRDs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSCxTQUFnQixhQUFhLENBQUksUUFBYSxFQUFFLFFBQWEsRUFBRSxNQUF5QjtJQUN2RixJQUFJLFVBQVUsR0FBYSxFQUFFLENBQUM7SUFDOUIsSUFBSSxXQUFXLEdBQUcsSUFBSSxpQkFBTSxDQUFZLE1BQU0sQ0FBQyxDQUFDO0lBQ2hELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDaEQsV0FBVyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDaEM7SUFDRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQ2hELFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzlDO0lBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUM1QixPQUFPLFVBQVUsQ0FBQztLQUNsQjtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ2xCLENBQUM7QUFiRCxzQ0FhQztBQUVEOzs7Ozs7Ozs7O0dBVUc7QUFDSCxTQUFnQixVQUFVLENBQUksR0FBUSxFQUFFLFFBQTBDLEVBQUUsS0FBVyxFQUFFLEtBQWM7SUFDOUcsSUFBSSxJQUFJLEdBQUcsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDMUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN0QixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNwQjtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ2xCLENBQUM7QUFORCxnQ0FNQztBQUVEOzs7Ozs7Ozs7O0dBVUc7QUFDSCxTQUFnQixtQkFBbUIsQ0FBSSxHQUFRLEVBQUUsT0FBMEQsRUFBRSxLQUFXLEVBQUUsS0FBYztJQUN2SSxJQUFJLElBQUksR0FBRywwQkFBMEIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3RCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3BCO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDbEIsQ0FBQztBQU5ELGtEQU1DIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IERpY3Rpb25hcnkgZnJvbSAnLi9EaWN0aW9uYXJ5JztcbmltcG9ydCBJTGlzdCBmcm9tICcuL0lMaXN0JztcbmltcG9ydCB7Y21wLCBkZWZ9IGZyb20gJy4vaW5kZXgnO1xuaW1wb3J0IEluZGV4Q291bnQgZnJvbSAnLi9JbmRleENvdW50JztcbmltcG9ydCBJbmRleEl0ZW1zIGZyb20gJy4vSW5kZXhJdGVtcyc7XG5pbXBvcnQge2lkZW50aXR5LCBpbml0UmVkdWNlU3RhdGUsIFZpZE1hcCwgVmlkU2V0fSBmcm9tICcuL2ludGVybmFsJztcbmltcG9ydCBMaXN0U3BsaWNlUmVzdWx0IGZyb20gJy4vTGlzdFNwbGljZVJlc3VsdCc7XG5pbXBvcnQgUmVkdWNlciBmcm9tICcuL1JlZHVjZXInO1xuaW1wb3J0IFNvbWUgZnJvbSAnLi9Tb21lJztcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBsYXN0IGFycmF5IGl0ZW0uXG4gKlxuICogQHBhcmFtIGFyciBBcnJheS5cbiAqIEByZXR1cm5zIExhc3QgYXJyYXkgaXRlbSBvciB1bmRlZmluZWQuIElmIGFycmF5IGlzIGVtcHR5LCByZXR1cm5zIHVuZGVmaW5lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExhc3Q8VD4oYXJyOiBUW10pOiBUIHtcblx0cmV0dXJuIGFyclthcnIubGVuZ3RoIC0gMV07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGFycmF5IGlzIGVtcHR5LlxuICpcbiAqIEBwYXJhbSBhcnIgQXJyYXkuXG4gKiBAcmV0dXJucyBBcnJheSBoYXMgemVybyBsZW5ndGguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5PFQ+KGFycjogVFtdKTogYm9vbGVhbiB7XG5cdHJldHVybiBhcnIubGVuZ3RoID09PSAwO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgaXRlbSBleGlzdHMgaW4gYXJyYXksIGkuZS4gaWYgYGFyci5pbmRleE9mKGl0ZW0pYCBkb2Vzbid0IHJldHVybiAtMS5cbiAqXG4gKiBAcGFyYW0gYXJyIEFycmF5LlxuICogQHBhcmFtIGl0ZW0gSXRlbSB0byBmaW5kLlxuICogQHJldHVybnMgSXRlbSBleGlzdHMgaW4gYXJyYXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb250YWluczxUPihhcnI6IFRbXSwgaXRlbTogVCk6IGJvb2xlYW4ge1xuXHRyZXR1cm4gYXJyLmluZGV4T2YoaXRlbSkgIT09IC0xO1xufVxuXG4vKipcbiAqIEZpbmRzIGFuIGl0ZW0gbWF0Y2hpbmcgY3JpdGVyaWEuXG4gKlxuICogUmV0dXJucyB0aGUgZmlyc3QgaXRlbSBmb3Igd2hpY2ggY2FsbGJhY2sgcmV0dXJucyB0cnV0aHkgdmFsdWUuXG4gKlxuICogQWxnb3JpdGhtcyBpdGVyYXRlcyBpdGVtcyBjb25zZXF1ZW50bHksIGFuZCBzdG9wcyBhZnRlciB0aGUgZmlyc3QgaXRlbSBtYXRjaGluZyB0aGUgY3JpdGVyaWEuXG4gKlxuICogQHBhcmFtIGFyciBBcnJheS5cbiAqIEBwYXJhbSBjYWxsYmFjayBDcml0ZXJpYSBjYWxsYmFjay5cbiAqIEBwYXJhbSBzY29wZSBgY2FsbGJhY2tgIGNhbGwgc2NvcGUuIERlZmF1bHRzIHRvIGFycmF5IGl0c2VsZi5cbiAqIEByZXR1cm5zIFRoZSBmb3VuZCBpdGVtIG9yIHVuZGVmaW5lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmQ8VD4oYXJyOiBUW10sIGNhbGxiYWNrOiAoaXRlbTogVCwgaW5kZXg6IG51bWJlcikgPT4gYW55LCBzY29wZT86IGFueSk6IFQge1xuXHRyZXR1cm4gYXJyW2ZpbmRJbmRleChhcnIsIGNhbGxiYWNrLCBzY29wZSldO1xufVxuXG4vKipcbiAqIEZpbmRzIGFuIGl0ZW0gbWF0Y2hpbmcgY3JpdGVyaWEuXG4gKlxuICogUmV0dXJucyBpbmRleCBvZiB0aGUgZmlyc3QgaXRlbSBmb3Igd2hpY2ggY2FsbGJhY2sgcmV0dXJucyB0cnV0aHkgdmFsdWUuXG4gKlxuICogQWxnb3JpdGhtcyBpdGVyYXRlcyBpdGVtcyBjb25zZXF1ZW50bHksIGFuZCBzdG9wcyBhZnRlciB0aGUgZmlyc3QgaXRlbSBtYXRjaGluZyB0aGUgY3JpdGVyaWEuXG4gKlxuICogQHBhcmFtIGFyciBBcnJheS5cbiAqIEBwYXJhbSBjYWxsYmFjayBDcml0ZXJpYSBjYWxsYmFjay5cbiAqIEBwYXJhbSBzY29wZSBgY2FsbGJhY2tgIGNhbGwgc2NvcGUuIERlZmF1bHRzIHRvIGFycmF5IGl0c2VsZi5cbiAqIEByZXR1cm5zIEluZGV4IG9mIHRoZSBmb3VuZCBpdGVtIG9yIHVuZGVmaW5lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRJbmRleDxUPihhcnI6IFRbXSwgY2FsbGJhY2s6IChpdGVtOiBULCBpbmRleDogbnVtYmVyKSA9PiBhbnksIHNjb3BlPzogYW55KTogbnVtYmVyIHtcblx0c2NvcGUgPSBzY29wZSB8fCBhcnI7XG5cdGxldCByZXN1bHQ6IG51bWJlcjtcblx0YXJyLmV2ZXJ5KGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuXHRcdGlmIChjYWxsYmFjay5jYWxsKHNjb3BlLCBpdGVtLCBpbmRleCkpIHtcblx0XHRcdHJlc3VsdCA9IGluZGV4O1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSk7XG5cdHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpbmRleCBvZiB0aGUgZmlyc3QgaXRlbSB3aGljaCBpcyBtb3JlIChvciBsZXNzIGlmIGBvcmRlcmAgPCAwKSB0aGFuIHRoZSBzcGVjaWZpZWQgdmFsdWUgYnkgYGNvbXBhcmVgIGZ1bmN0aW9uLFxuICogdXNpbmcgYmluYXJ5IHNlYXJjaC4gQXJyYXkgbXVzdCBiZSBzb3J0ZWQgYnkgYGNvbXBhcmVgIGZ1bmN0aW9uLlxuICogQ2FuIGJlIHVzZWQgZm9yIGl0ZW0gaW5zZXJ0aW9uIGVhc2lseS5cbiAqIElmIHlvdSB3YW50IHRvIHVzZSB0aGlzIG1ldGhvZCBmb3IgaXRlbSByZW1vdmFsLCB5b3UgbXVzdCBsb29rIGF0IHByZXZpb3VzIGl0ZW0gYW5kIGNvbXBhcmUgaXQgdG8gYHZhbHVlYCBmaXJzdC5cbiAqXG4gKiBAcGFyYW0gYXJyIFNvcnRlZCBhcnJheS5cbiAqIEBwYXJhbSBjb21wYXJlIENvbXBhcmVyIGZ1bmN0aW9uLiBTaG91bGQgcmV0dXJuIHBvc2l0aXZlIHZhbHVlIGlmIHQxID4gdDI7XG4gKiBuZWdhdGl2ZSB2YWx1ZSBpZiB0MSA8IHQyOyAwIGlmIHQxID09IHQyLlxuICogRGVmYXVsdHMgdG8gYGNtcGAuXG4gKiBAcGFyYW0gc2NvcGUgYGNvbXBhcmVyYCBjYWxsIHNjb3BlLiBEZWZhdWx0cyB0byBhcnJheSBpdHNlbGYuXG4gKiBAcGFyYW0gb3JkZXIgU29ydGluZyBvcmRlci4gUG9zaXRpdmUgbnVtYmVyIGlmIGFycmF5IGlzIHNvcnRlZCBhc2NlbmRpbmcsIG5lZ2F0aXZlIGlmIGRlc2NlbmRpbmcuXG4gKiBAcmV0dXJucyBJdGVtIGluZGV4LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYmluYXJ5U2VhcmNoPFQ+KGFycjogVFtdLCB2YWx1ZTogVCwgY29tcGFyZT86ICh0MTogVCwgdDI6IFQpID0+IG51bWJlciwgc2NvcGU/OiBhbnksIG9yZGVyPzogbnVtYmVyKTogbnVtYmVyIHtcblx0Y29tcGFyZSA9IGNvbXBhcmUgfHwgY21wO1xuXHRzY29wZSA9IHNjb3BlIHx8IGFycjtcblx0b3JkZXIgPSBvcmRlciB8fCAxO1xuXHR2YXIgbGVuZ3RoID0gYXJyLmxlbmd0aDtcblx0dmFyIGxlbjIgPSBsZW5ndGggPj4gMTtcblx0dmFyIHN0ZXAgPSAxO1xuXHR3aGlsZSAoc3RlcCA8PSBsZW4yKSB7XG5cdFx0c3RlcCA8PD0gMTtcblx0fVxuXHR2YXIgaW5kZXggPSAwO1xuXHR3aGlsZSAoc3RlcCkge1xuXHRcdGlmICgoaW5kZXggKyBzdGVwIDw9IGxlbmd0aCkgJiYgKG9yZGVyICogY29tcGFyZS5jYWxsKHNjb3BlLCB2YWx1ZSwgYXJyW2luZGV4ICsgc3RlcCAtIDFdKSA+PSAwKSkge1xuXHRcdFx0aW5kZXggKz0gc3RlcDtcblx0XHR9XG5cdFx0c3RlcCA+Pj0gMTtcblx0fVxuXHRyZXR1cm4gaW5kZXg7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYXJyYXkgaXRlbSB3aGljaCBjYWxsYmFjayByZXR1cm5zIHRoZSBoaWdoZXN0IChvciBsb3dlc3QpIHZhbHVlIGZvci5cbiAqXG4gKiBAcGFyYW0gYXJyIEFycmF5LlxuICogQHBhcmFtIGNhbGxiYWNrIFJldHVybnMgYSBjb21wYXJhYmxlIHZhbHVlLCBjb21wYXRpYmxlIHdpdGggYGNtcGAuIFJldHVybnMgaXRlbSBpdHNlbGYgYnkgZGVmYXVsdC5cbiAqIEBwYXJhbSBzY29wZSBgY2FsbGJhY2tgIGNhbGwgc2NvcGUuIERlZmF1bHRzIHRvIGFycmF5IGl0c2VsZi5cbiAqIEBwYXJhbSBvcmRlciBQYXNzIHBvc2l0aXZlIG9yZGVyIHRvIGZpbmQgdGhlIGhpZ2hlc3QgdmFsdWUsIGFuZCBuZWdhdGl2ZSB0byBmaW5kIHRoZSBsb3dlc3Qgb25lLlxuICogQHJldHVybnMgQXJyYXkgaXRlbS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1heDxUPihhcnI6IFRbXSwgY2FsbGJhY2s/OiAoaXRlbTogVCwgaW5kZXg6IG51bWJlcikgPT4gYW55LCBzY29wZT86IGFueSwgb3JkZXI6IG51bWJlciA9IDEpOiBUIHtcblx0cmV0dXJuIGFyclttYXhJbmRleChhcnIsIGNhbGxiYWNrLCBzY29wZSwgb3JkZXIpXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGluZGV4IG9mIHRoZSBhcnJheSBpdGVtIHdoaWNoIGNhbGxiYWNrIHJldHVybnMgdGhlIGhpZ2hlc3QgKG9yIGxvd2VzdCkgdmFsdWUgZm9yLlxuICpcbiAqIEBwYXJhbSBhcnIgQXJyYXkuXG4gKiBAcGFyYW0gY2FsbGJhY2sgUmV0dXJucyBhIGNvbXBhcmFibGUgdmFsdWUsIGNvbXBhdGlibGUgd2l0aCBgY21wYC4gUmV0dXJucyBpdGVtIGl0c2VsZiBieSBkZWZhdWx0LlxuICogQHBhcmFtIHNjb3BlIGBjYWxsYmFja2AgY2FsbCBzY29wZS4gRGVmYXVsdHMgdG8gYXJyYXkgaXRzZWxmLlxuICogQHBhcmFtIG9yZGVyIFBhc3MgcG9zaXRpdmUgb3JkZXIgdG8gZmluZCB0aGUgaGlnaGVzdCB2YWx1ZSwgYW5kIG5lZ2F0aXZlIHRvIGZpbmQgdGhlIGxvd2VzdCBvbmUuXG4gKiBAcmV0dXJucyBJdGVtIGluZGV4LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF4SW5kZXg8VD4oYXJyOiBUW10sIGNhbGxiYWNrPzogKGl0ZW06IFQsIGluZGV4OiBudW1iZXIpID0+IGFueSwgc2NvcGU/OiBhbnksIG9yZGVyOiBudW1iZXIgPSAxKTogbnVtYmVyIHtcblx0aWYgKGFyci5sZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm4gLTE7XG5cdH1cblx0Y2FsbGJhY2sgPSBjYWxsYmFjayB8fCBpZGVudGl0eTtcblx0c2NvcGUgPSBzY29wZSB8fCBhcnI7XG5cdGxldCByZXN1bHQgPSAwO1xuXHRsZXQgbWF4OiBhbnkgPSBjYWxsYmFjay5jYWxsKHNjb3BlLCBhcnJbMF0pO1xuXHRmb3IgKGxldCBpID0gMSwgbCA9IGFyci5sZW5ndGg7IGkgPCBsOyArK2kpIHtcblx0XHRjb25zdCBpdGVtOiBhbnkgPSBjYWxsYmFjay5jYWxsKHNjb3BlLCBhcnJbaV0sIGkpO1xuXHRcdGNvbnN0IGRpZmYgPSBjbXAoaXRlbSwgbWF4KTtcblx0XHRpZiAoKG9yZGVyID4gMCAmJiBkaWZmID4gMCkgfHwgKG9yZGVyIDwgMCAmJiBkaWZmIDwgMCkpIHtcblx0XHRcdHJlc3VsdCA9IGk7XG5cdFx0XHRtYXggPSBpdGVtO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGhpZ2hlc3QgKG9yIGxvd2VzdCkgYXJyYXkgaXRlbSBpbiB0ZXJtcyBvZiB0aGUgc3BlY2lmaWVkIGNvbXBhcmVyIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSBhcnIgQXJyYXkuXG4gKiBAcGFyYW0gY29tcGFyZSBDb21wYXJlciBmdW5jdGlvbi4gU2hvdWxkIHJldHVybiBwb3NpdGl2ZSB2YWx1ZSBpZiB0MSA+IHQyO1xuICogbmVnYXRpdmUgdmFsdWUgaWYgdDEgPCB0MjsgMCBpZiB0MSA9PSB0Mi4gRGVmYXVsdHMgdG8gYGNtcGAuXG4gKiBAcGFyYW0gc2NvcGUgYGNvbXBhcmVgIGNhbGwgc2NvcGUuIERlZmF1bHRzIHRvIGFycmF5IGl0c2VsZi5cbiAqIEBwYXJhbSBvcmRlciBQYXNzIHBvc2l0aXZlIG9yZGVyIHRvIGZpbmQgdGhlIGhpZ2hlc3QgdmFsdWUsIGFuZCBuZWdhdGl2ZSB0byBmaW5kIHRoZSBsb3dlc3Qgb25lLlxuICogQHJldHVybnMgQXJyYXkgaXRlbS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1heENvbXBhcmluZzxUPihhcnI6IFRbXSwgY29tcGFyZT86ICh0MTogVCwgdDI6IFQsIGkxOiBudW1iZXIsIGkyOiBudW1iZXIpID0+IG51bWJlciwgc2NvcGU/OiBhbnksIG9yZGVyOiBudW1iZXIgPSAxKTogVCB7XG5cdHJldHVybiBhcnJbbWF4SW5kZXhDb21wYXJpbmcoYXJyLCBjb21wYXJlLCBzY29wZSwgb3JkZXIpXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGluZGV4IG9mIHRoZSBoaWdoZXN0IChvciBsb3dlc3QpIGFycmF5IGl0ZW0gaW4gdGVybXMgb2YgdGhlIHNwZWNpZmllZCBjb21wYXJlciBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gYXJyIEFycmF5LlxuICogQHBhcmFtIGNvbXBhcmUgQ29tcGFyZXIgZnVuY3Rpb24uIFNob3VsZCByZXR1cm4gcG9zaXRpdmUgdmFsdWUgaWYgdDEgPiB0MjtcbiAqIG5lZ2F0aXZlIHZhbHVlIGlmIHQxIDwgdDI7IDAgaWYgdDEgPT0gdDIuIERlZmF1bHRzIHRvIGBjbXBgLlxuICogQHBhcmFtIHNjb3BlIGBjb21wYXJlYCBjYWxsIHNjb3BlLiBEZWZhdWx0cyB0byBhcnJheSBpdHNlbGYuXG4gKiBAcGFyYW0gb3JkZXIgUGFzcyBwb3NpdGl2ZSBvcmRlciB0byBmaW5kIHRoZSBoaWdoZXN0IHZhbHVlLCBhbmQgbmVnYXRpdmUgdG8gZmluZCB0aGUgbG93ZXN0IG9uZS5cbiAqIEByZXR1cm5zIEl0ZW0gaW5kZXguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXhJbmRleENvbXBhcmluZzxUPihhcnI6IFRbXSwgY29tcGFyZT86ICh0MTogVCwgdDI6IFQsIGkxOiBudW1iZXIsIGkyOiBudW1iZXIpID0+IG51bWJlciwgc2NvcGU/OiBhbnksIG9yZGVyOiBudW1iZXIgPSAxKTogbnVtYmVyIHtcblx0aWYgKGFyci5sZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm4gLTE7XG5cdH1cblx0Y29tcGFyZSA9IGNvbXBhcmUgfHwgY21wO1xuXHRzY29wZSA9IHNjb3BlIHx8IGFycjtcblx0bGV0IHJlc3VsdCA9IDA7XG5cdGZvciAobGV0IGkgPSAxLCBsID0gYXJyLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuXHRcdGlmIChvcmRlciAqIGNvbXBhcmUuY2FsbChzY29wZSwgYXJyW3Jlc3VsdF0sIGFycltpXSwgcmVzdWx0LCBpKSA8IDApIHtcblx0XHRcdHJlc3VsdCA9IGk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYXJyYXkgaXRlbSB3aGljaCBjYWxsYmFjayByZXR1cm5zIHRoZSBsb3dlc3QgKG9yIGhpZ2hlc3QpIHZhbHVlIGZvci5cbiAqXG4gKiBAcGFyYW0gYXJyIEFycmF5LlxuICogQHBhcmFtIGNhbGxiYWNrIFJldHVybnMgYSBjb21wYXJhYmxlIHZhbHVlLCBjb21wYXRpYmxlIHdpdGggYGNtcGAuIFJldHVybnMgaXRlbSBpdHNlbGYgYnkgZGVmYXVsdC5cbiAqIEBwYXJhbSBzY29wZSBgY2FsbGJhY2tgIGNhbGwgc2NvcGUuIERlZmF1bHRzIHRvIGFycmF5IGl0c2VsZi5cbiAqIEBwYXJhbSBvcmRlciBQYXNzIHBvc2l0aXZlIG9yZGVyIHRvIGZpbmQgdGhlIGxvd2VzdCB2YWx1ZSwgYW5kIG5lZ2F0aXZlIHRvIGZpbmQgdGhlIGhpZ2hlc3Qgb25lLlxuICogQHJldHVybnMgQXJyYXkgaXRlbS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1pbjxUPihhcnI6IFRbXSwgY2FsbGJhY2s/OiAoaXRlbTogVCwgaW5kZXg6IG51bWJlcikgPT4gYW55LCBzY29wZT86IGFueSwgb3JkZXI6IG51bWJlciA9IDEpOiBUIHtcblx0cmV0dXJuIG1heChhcnIsIGNhbGxiYWNrLCBzY29wZSwgLW9yZGVyKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGluZGV4IG9mIHRoZSBhcnJheSBpdGVtIHdoaWNoIGNhbGxiYWNrIHJldHVybnMgdGhlIGxvd2VzdCAob3IgaGlnaGVzdCkgdmFsdWUgZm9yLlxuICpcbiAqIEBwYXJhbSBhcnIgQXJyYXkuXG4gKiBAcGFyYW0gY2FsbGJhY2sgUmV0dXJucyBhIGNvbXBhcmFibGUgdmFsdWUsIGNvbXBhdGlibGUgd2l0aCBgY21wYC4gUmV0dXJucyBpdGVtIGl0c2VsZiBieSBkZWZhdWx0LlxuICogQHBhcmFtIHNjb3BlIGBjYWxsYmFja2AgY2FsbCBzY29wZS4gRGVmYXVsdHMgdG8gYXJyYXkgaXRzZWxmLlxuICogQHBhcmFtIG9yZGVyIFBhc3MgcG9zaXRpdmUgb3JkZXIgdG8gZmluZCB0aGUgbG93ZXN0IHZhbHVlLCBhbmQgbmVnYXRpdmUgdG8gZmluZCB0aGUgaGlnaGVzdCBvbmUuXG4gKiBAcmV0dXJucyBJdGVtIGluZGV4LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWluSW5kZXg8VD4oYXJyOiBUW10sIGNhbGxiYWNrPzogKGl0ZW06IFQsIGluZGV4OiBudW1iZXIpID0+IGFueSwgc2NvcGU/OiBhbnksIG9yZGVyOiBudW1iZXIgPSAxKTogbnVtYmVyIHtcblx0cmV0dXJuIG1heEluZGV4KGFyciwgY2FsbGJhY2ssIHNjb3BlLCAtb3JkZXIpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGxvd2VzdCAob3IgaGlnaGVzdCkgYXJyYXkgaXRlbSBpbiB0ZXJtcyBvZiB0aGUgc3BlY2lmaWVkIGNvbXBhcmVyIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSBhcnIgQXJyYXkuXG4gKiBAcGFyYW0gY29tcGFyZSBDb21wYXJlciBmdW5jdGlvbi4gU2hvdWxkIHJldHVybiBwb3NpdGl2ZSB2YWx1ZSBpZiB0MSA+IHQyO1xuICogbmVnYXRpdmUgdmFsdWUgaWYgdDEgPCB0MjsgMCBpZiB0MSA9PSB0Mi4gRGVmYXVsdHMgdG8gYGNtcGAuXG4gKiBAcGFyYW0gc2NvcGUgYGNvbXBhcmVgIGNhbGwgc2NvcGUuIERlZmF1bHRzIHRvIGFycmF5IGl0c2VsZi5cbiAqIEBwYXJhbSBvcmRlciBQYXNzIHBvc2l0aXZlIG9yZGVyIHRvIGZpbmQgdGhlIGxvd2VzdCB2YWx1ZSwgYW5kIG5lZ2F0aXZlIHRvIGZpbmQgdGhlIGhpZ2hlc3Qgb25lLlxuICogQHJldHVybnMgQXJyYXkgaXRlbS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1pbkNvbXBhcmluZzxUPihhcnI6IFRbXSwgY29tcGFyZT86ICh0MTogVCwgdDI6IFQsIGkxOiBudW1iZXIsIGkyOiBudW1iZXIpID0+IG51bWJlciwgc2NvcGU/OiBhbnksIG9yZGVyOiBudW1iZXIgPSAxKTogVCB7XG5cdHJldHVybiBtYXhDb21wYXJpbmcoYXJyLCBjb21wYXJlLCBzY29wZSwgLW9yZGVyKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGluZGV4IG9mIHRoZSBsb3dlc3QgKG9yIGhpZ2hlc3QpIGFycmF5IGl0ZW0gaW4gdGVybXMgb2YgdGhlIHNwZWNpZmllZCBjb21wYXJlciBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gYXJyIEFycmF5LlxuICogQHBhcmFtIGNvbXBhcmUgQ29tcGFyZXIgZnVuY3Rpb24uIFNob3VsZCByZXR1cm4gcG9zaXRpdmUgdmFsdWUgaWYgdDEgPiB0MjtcbiAqIG5lZ2F0aXZlIHZhbHVlIGlmIHQxIDwgdDI7IDAgaWYgdDEgPT0gdDIuIERlZmF1bHRzIHRvIGBjbXBgLlxuICogQHBhcmFtIHNjb3BlIGBjb21wYXJlYCBjYWxsIHNjb3BlLiBEZWZhdWx0cyB0byBhcnJheSBpdHNlbGYuXG4gKiBAcGFyYW0gb3JkZXIgUGFzcyBwb3NpdGl2ZSBvcmRlciB0byBmaW5kIHRoZSBsb3dlc3QgdmFsdWUsIGFuZCBuZWdhdGl2ZSB0byBmaW5kIHRoZSBoaWdoZXN0IG9uZS5cbiAqIEByZXR1cm5zIEl0ZW0gaW5kZXguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtaW5JbmRleENvbXBhcmluZzxUPihhcnI6IFRbXSwgY29tcGFyZT86ICh0MTogVCwgdDI6IFQsIGkxOiBudW1iZXIsIGkyOiBudW1iZXIpID0+IG51bWJlciwgc2NvcGU/OiBhbnksIG9yZGVyOiBudW1iZXIgPSAxKTogbnVtYmVyIHtcblx0cmV0dXJuIG1heEluZGV4Q29tcGFyaW5nKGFyciwgY29tcGFyZSwgc2NvcGUsIC1vcmRlcik7XG59XG5cbi8qKlxuICogQ291bnRzIHRoZSBpdGVtcyBtYXRjaGluZyBjcml0ZXJpYS5cbiAqXG4gKiBSZXR1cm5zIGNvdW50IG9mIGl0ZW1zIHdoaWNoIGBjYWxsYmFja2AgcmV0dXJucyB0cnV0aHkgdmFsdWUgZm9yLlxuICpcbiAqIEBwYXJhbSBhcnIgQXJyYXkuXG4gKiBAcGFyYW0gY2FsbGJhY2sgQ3JpdGVyaWEgY2FsbGJhY2suXG4gKiBAcGFyYW0gc2NvcGUgYGNhbGxiYWNrYCBjYWxsIHNjb3BlLiBEZWZhdWx0cyB0byBhcnJheSBpdHNlbGYuXG4gKiBAcmV0dXJucyBOdW1iZXIgb2YgaXRlbXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3VudDxUPihhcnI6IFRbXSwgY2FsbGJhY2s6IChpdGVtOiBULCBpbmRleDogbnVtYmVyKSA9PiBhbnksIHNjb3BlPzogYW55KTogbnVtYmVyIHtcblx0c2NvcGUgPSBzY29wZSB8fCBhcnI7XG5cdGxldCByZXN1bHQgPSAwO1xuXHRhcnIuZXZlcnkoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG5cdFx0aWYgKGNhbGxiYWNrLmNhbGwoc2NvcGUsIGl0ZW0sIGluZGV4KSkge1xuXHRcdFx0KytyZXN1bHQ7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9KTtcblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGluZGljZXMgb2Ygc29ydGVkIGl0ZW1zLlxuICpcbiAqIEJ1aWxkcyBhcnJheSBvZiBpdGVtIGluZGljZXMsIHNvcnRlZCBieSB0aGUgcmVzdWx0IG9mIGNhbGxiYWNrIGNhbGwgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBAcGFyYW0gYXJyIEFycmF5LlxuICogQHBhcmFtIGNhbGxiYWNrIEluZGV4ZXIgZnVuY3Rpb24uIE11c3QgcmV0dXJuIGEgY29tcGFyYWJsZSB2YWx1ZSwgY29tcGF0aWJsZSB3aXRoXG4gKiBgY21wYC4gUmV0dXJucyBpdGVtIGl0c2VsZiBieSBkZWZhdWx0LlxuICogQHBhcmFtIHNjb3BlIGBjYWxsYmFja2AgY2FsbCBzY29wZS4gRGVmYXVsdHMgdG8gYXJyYXkgaXRzZWxmLlxuICogQHBhcmFtIG9yZGVyIFNvcnRpbmcgb3JkZXIuIFBvc2l0aXZlIG51bWJlciBmb3IgYXNjZW5kaW5nIHNvcnRpbmcsIG5lZ2F0aXZlIGZvciBkZXNjZW5kaW5nIHNvcnRpbmcuXG4gKiBAcmV0dXJucyBBcnJheSBvZiBpbmRpY2VzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U29ydGluZ0luZGljZXM8VD4oYXJyOiBUW10sIGNhbGxiYWNrPzogKGl0ZW06IFQsIGluZGV4OiBudW1iZXIpID0+IGFueSwgc2NvcGU/OiBhbnksIG9yZGVyPzogbnVtYmVyKTogbnVtYmVyW117XG5cdGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgaWRlbnRpdHk7XG5cdHNjb3BlID0gc2NvcGUgfHwgYXJyO1xuXHRvcmRlciA9IG9yZGVyIHx8IDE7XG5cdGNvbnN0IHBhaXJzOiBhbnlbXSA9IFtdO1xuXHRhcnIuZXZlcnkoZnVuY3Rpb24gKGl0ZW0sIGtleSkge1xuXHRcdHBhaXJzLnB1c2goW2tleSwgY2FsbGJhY2suY2FsbChzY29wZSwgaXRlbSwga2V5KV0pO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9KTtcblx0cGFpcnMuc29ydChmdW5jdGlvbiAoeCwgeSkge1xuXHRcdHJldHVybiBvcmRlciAqIGNtcCh4WzFdLCB5WzFdKTtcblx0fSk7XG5cdHJldHVybiBwYWlycy5tYXAoZnVuY3Rpb24gKHBhaXIpIHtcblx0XHRyZXR1cm4gcGFpclswXTtcblx0fSk7XG59XG5cbi8qKlxuICogUmV0dXJucyBpbmRpY2VzIG9mIHNvcnRlZCBpdGVtcy5cbiAqXG4gKiBCdWlsZHMgYXJyYXkgb2YgaXRlbSBpbmRpY2VzLCBzb3J0ZWQgYnkgY29tcGFyZXIuXG4gKlxuICogQHBhcmFtIGFyciBBcnJheS5cbiAqIEBwYXJhbSBjb21wYXJlIENvbXBhcmVyIGZ1bmN0aW9uLiBNdXN0IHJldHVybiBwb3NpdGl2ZSB2YWx1ZSBpZiB0MSA+IHQyO1xuICogbmVnYXRpdmUgdmFsdWUgaWYgdDEgPCB0MjsgMCBpZiB0MSA9PSB0Mi4gRGVmYXVsdHMgdG8gYGNtcGAuXG4gKiBAcGFyYW0gc2NvcGUgYGNvbXBhcmVyYCBjYWxsIHNjb3BlLiBEZWZhdWx0cyB0byBhcnJheSBpdHNlbGYuXG4gKiBAcGFyYW0gb3JkZXIgU29ydGluZyBvcmRlci4gUG9zaXRpdmUgbnVtYmVyIGZvciBhc2NlbmRpbmcgc29ydGluZywgbmVnYXRpdmUgZm9yIGRlc2NlbmRpbmcgc29ydGluZy5cbiAqIEByZXR1cm5zIEFycmF5IG9mIGluZGljZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTb3J0aW5nSW5kaWNlc0NvbXBhcmluZzxUPihhcnI6IFRbXSwgY29tcGFyZT86ICh0MTogVCwgdDI6IFQsIGkxOiBudW1iZXIsIGkyOiBudW1iZXIpID0+IG51bWJlciwgc2NvcGU/OiBhbnksIG9yZGVyPzogbnVtYmVyKTogbnVtYmVyW10ge1xuXHRjb21wYXJlID0gY29tcGFyZSB8fCBjbXA7XG5cdHNjb3BlID0gc2NvcGUgfHwgYXJyO1xuXHRvcmRlciA9IG9yZGVyIHx8IDE7XG5cdGNvbnN0IHBhaXJzOiBhbnlbXSA9IFtdO1xuXHRhcnIuZXZlcnkoZnVuY3Rpb24gKGl0ZW0sIGtleSkge1xuXHRcdHBhaXJzLnB1c2goW2tleSwgaXRlbV0pO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9KTtcblx0cGFpcnMuc29ydChmdW5jdGlvbiAoeCwgeSkge1xuXHRcdHJldHVybiBvcmRlciAqIGNvbXBhcmUuY2FsbChzY29wZSwgeFsxXSwgeVsxXSwgeFswXSwgeVswXSk7XG5cdH0pO1xuXHRyZXR1cm4gcGFpcnMubWFwKGZ1bmN0aW9uIChwYWlyKSB7XG5cdFx0cmV0dXJuIHBhaXJbMF07XG5cdH0pO1xufVxuXG4vKipcbiAqIEJ1aWxkcyBhbmQgcmV0dXJucyBhIG5ldyBhcnJheSBjb25zaXN0aW5nIG9mIG9yaWdpbmFsIGFycmF5IGl0ZW1zIHNvcnRlZCBieSB0aGUgcmVzdWx0IG9mXG4gKiBjYWxsYmFjayBjYWxsIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogQHBhcmFtIGFyciBBcnJheS5cbiAqIEBwYXJhbSBjYWxsYmFjayBJbmRleGVyIGZ1bmN0aW9uLiBNdXN0IHJldHVybiBhIGNvbXBhcmFibGUgdmFsdWUsIGNvbXBhdGlibGUgd2l0aFxuICogYGNtcGAuIFJldHVybnMgaXRlbSBpdHNlbGYgYnkgZGVmYXVsdC5cbiAqIEBwYXJhbSBzY29wZSBgY2FsbGJhY2tgIGNhbGwgc2NvcGUuIERlZmF1bHRzIHRvIGFycmF5IGl0c2VsZi5cbiAqIEBwYXJhbSBvcmRlciBTb3J0aW5nIG9yZGVyLiBQb3NpdGl2ZSBudW1iZXIgZm9yIGFzY2VuZGluZyBzb3J0aW5nLCBuZWdhdGl2ZSBmb3IgZGVzY2VuZGluZyBzb3J0aW5nLlxuICogQHJldHVybnMgU29ydGVkIGFycmF5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9Tb3J0ZWQ8VD4oYXJyOiBUW10sIGNhbGxiYWNrPzogKGl0ZW06IFQsIGluZGV4OiBudW1iZXIpID0+IGFueSwgc2NvcGU/OiBhbnksIG9yZGVyPzogbnVtYmVyKTogVFtde1xuXHRyZXR1cm4gZ2V0U29ydGluZ0luZGljZXMoYXJyLCBjYWxsYmFjaywgc2NvcGUsIG9yZGVyKS5tYXAoZnVuY3Rpb24gKGluZGV4KTogVCB7XG5cdFx0cmV0dXJuIGFycltpbmRleF07XG5cdH0pO1xufVxuXG4vKipcbiAqIEJ1aWxkcyBhbmQgcmV0dXJucyBhIG5ldyBhcnJheSBjb25zaXN0aW5nIG9mIG9yaWdpbmFsIGFycmF5IGl0ZW1zIHNvcnRlZCBieSBjb21wYXJlci5cbiAqXG4gKiBAcGFyYW0gYXJyIEFycmF5LlxuICogQHBhcmFtIGNvbXBhcmUgQ29tcGFyZXIgZnVuY3Rpb24uIE11c3QgcmV0dXJuIHBvc2l0aXZlIHZhbHVlIGlmIHQxID4gdDI7XG4gKiBuZWdhdGl2ZSB2YWx1ZSBpZiB0MSA8IHQyOyAwIGlmIHQxID09IHQyLiBEZWZhdWx0cyB0byBgY21wYC5cbiAqIEBwYXJhbSBzY29wZSBgY29tcGFyZXJgIGNhbGwgc2NvcGUuIERlZmF1bHRzIHRvIGFycmF5IGl0c2VsZi5cbiAqIEBwYXJhbSBvcmRlciBTb3J0aW5nIG9yZGVyLiBQb3NpdGl2ZSBudW1iZXIgZm9yIGFzY2VuZGluZyBzb3J0aW5nLCBuZWdhdGl2ZSBmb3IgZGVzY2VuZGluZyBzb3J0aW5nLlxuICogQHJldHVybnMgU29ydGVkIGFycmF5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9Tb3J0ZWRDb21wYXJpbmc8VD4oYXJyOiBUW10sIGNvbXBhcmU/OiAodDE6IFQsIHQyOiBULCBpMTogbnVtYmVyLCBpMjogbnVtYmVyKSA9PiBudW1iZXIsIHNjb3BlPzogYW55LCBvcmRlcj86IG51bWJlcik6IFRbXSB7XG5cdHJldHVybiBnZXRTb3J0aW5nSW5kaWNlc0NvbXBhcmluZyhhcnIsIGNvbXBhcmUsIHNjb3BlLCBvcmRlcikubWFwKGZ1bmN0aW9uIChpbmRleCk6IFQge1xuXHRcdHJldHVybiBhcnJbaW5kZXhdO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBCdWlsZHMgYSBuZXcgYXJyYXkgY29udGFpbmluZyBpdGVtcyBvZiB0aGlzIGFycmF5IGluIHJldmVyc2VkIG9yZGVyLlxuICogQ3VycmVudCBhcnJheSBpcyBub3QgbW9kaWZpZWQuXG4gKlxuICogQHBhcmFtIGFycmF5cyBBcnJheS5cbiAqIEByZXR1cm5zIFJldmVyc2VkIGFycmF5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9SZXZlcnNlZDxUPihhcnI6IFRbXSk6IFRbXSB7XG5cdHZhciByZXN1bHQgPSBhcnIuY29uY2F0KCk7XG5cdHJlc3VsdC5yZXZlcnNlKCk7XG5cdHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogSW5kZXhlcyBjb2xsZWN0aW9uLlxuICpcbiAqIEJ1aWxkcyBhbmQgcmV0dXJucyBhIG5ldyBtYXAgYnkgcnVsZToga2V5IGlzIHRoZSByZXN1bHQgb2YgdGhlIGluZGV4ZXIgZnVuY3Rpb24gY2FsbCxcbiAqIHZhbHVlIGlzIHRoZSBjb3JyZXNwb25kaW5nIGl0ZW0uXG4gKlxuICogQHBhcmFtIGFyciBBcnJheS5cbiAqIEBwYXJhbSBjYWxsYmFjayBJbmRleGVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHNjb3BlIGBjYWxsYmFja2AgY2FsbCBzY29wZS4gRGVmYXVsdHMgdG8gYXJyYXkgaXRzZWxmLlxuICogQHJldHVybnMgQXJyYXkgaW5kZXguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbmRleDxUPihhcnI6IFRbXSwgY2FsbGJhY2s6IChpdGVtOiBULCBpbmRleDogbnVtYmVyKSA9PiBhbnksIHNjb3BlPzogYW55KTogRGljdGlvbmFyeTxUPiB7XG5cdHNjb3BlID0gc2NvcGUgfHwgYXJyO1xuXHRjb25zdCByZXN1bHQ6IERpY3Rpb25hcnk8VD4gPSB7fTtcblx0YXJyLmV2ZXJ5KGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuXHRcdGNvbnN0IGtleSA9IGNhbGxiYWNrLmNhbGwoc2NvcGUsIGl0ZW0sIGluZGV4KTtcblx0XHRpZiAoa2V5ICE9IG51bGwpIHtcblx0XHRcdHJlc3VsdFtrZXldID0gaXRlbTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0pO1xuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEFwcGxpZXMgYSBmdW5jdGlvbiBhZ2FpbnN0IGFuIGFjY3VtdWxhdG9yIGFuZCBlYWNoIGl0ZW0gaW4gdGhlIGFycmF5IChmcm9tIGxlZnQgdG8gcmlnaHQpXG4gKiB0byByZWR1Y2UgaXQgdG8gYSBzaW5nbGUgdmFsdWUuXG4gKlxuICogQHBhcmFtIGFyciBBcnJheS5cbiAqIEBwYXJhbSByZWR1Y2VyIFN0YW5kYXJkIHJlZHVjZXIuIFNlZSBgandpZGdldC9SZWR1Y2VyYCBmb3IgZXhhbXBsZXMuXG4gKiBAcmV0dXJucyBGaW5hbCBhY2N1bXVsYXRvciB2YWx1ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZTxULCBVPihhcnI6IFRbXSwgcmVkdWNlcjogUmVkdWNlcjxULCBVPik6IFU7XG5cbi8qKlxuICogQXBwbGllcyBhIGZ1bmN0aW9uIGFnYWluc3QgYW4gYWNjdW11bGF0b3IgYW5kIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkgKGZyb20gbGVmdCB0byByaWdodClcbiAqIHRvIHJlZHVjZSBpdCB0byBhIHNpbmdsZSB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0gYXJyIEFycmF5LlxuICogQHBhcmFtIGNhbGxiYWNrIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gZWFjaCBpdGVtIGluIHRoZSBhcnJheS5cbiAqIEBwYXJhbSBpbml0aWFsIFZhbHVlIHRvIHVzZSBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIGZpcnN0IGNhbGwgb2YgdGhlIGNhbGxiYWNrLlxuICogQHJldHVybnMgRmluYWwgYWNjdW11bGF0b3IgdmFsdWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2U8VCwgVT4oYXJyOiBUW10sIGNhbGxiYWNrOiAoYWNjdW11bGF0b3I6IFUsIGl0ZW06IFQsIGluZGV4OiBudW1iZXIpID0+IFUsIGluaXRpYWw6IFUpOiBVO1xuZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZTxULCBVPihhcnI6IFRbXSxcblx0XHRyZWR1Y2VyOiBSZWR1Y2VyPFQsIFU+IHwgKChhY2N1bXVsYXRvcjogVSwgaXRlbTogVCwgaW5kZXg6IG51bWJlcikgPT4gVSksIGluaXRpYWw/OiBVKTogVSB7XG5cdGxldCB7dmFsdWUsIGNhbGxiYWNrfSA9ICh0eXBlb2YgcmVkdWNlciAhPT0gXCJmdW5jdGlvblwiKSA/IGluaXRSZWR1Y2VTdGF0ZShyZWR1Y2VyKSA6IHtcblx0XHR2YWx1ZTogaW5pdGlhbCxcblx0XHRjYWxsYmFjazogcmVkdWNlclxuXHR9O1xuXHRyZXR1cm4gYXJyLnJlZHVjZShjYWxsYmFjaywgdmFsdWUpO1xufVxuXG4vKipcbiAqIEluc2VydHMgYW4gaXRlbSB0byBhcnJheS5cbiAqXG4gKiBAcGFyYW0gYXJyIEFycmF5LlxuICogQHBhcmFtIGl0ZW0gSXRlbSB0byBpbnNlcnQuXG4gKiBAcGFyYW0gaW5kZXggSW5kZXggb2YgYW4gaXRlbSB0byBpbnNlcnQgdGhlIG5ldyBvbmUgYmVmb3JlLlxuICogQnkgZGVmYXVsdCwgYXBwZW5kcyB0aGUgaXRlbSB0byB0aGUgZW5kIG9mIGFycmF5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkPFQ+KGFycjogVFtdLCBpdGVtOiBULCBpbmRleD86IG51bWJlcikge1xuXHRhcnIuc3BsaWNlKGRlZihpbmRleCwgYXJyLmxlbmd0aCksIDAsIGl0ZW0pO1xufVxuXG4vKipcbiAqIEluc2VydHMgaXRlbSByYW5nZSB0byBhcnJheS5cbiAqXG4gKiBAcGFyYW0gYXJyIEFycmF5LlxuICogQHBhcmFtIGl0ZW1zIEl0ZW1zIHRvIGluc2VydC5cbiAqIEBwYXJhbSBpbmRleCBJbmRleCBvZiBhbiBpdGVtIHRvIGluc2VydCB0aGUgbmV3IG9uZXMgYmVmb3JlLlxuICogQnkgZGVmYXVsdCwgYXBwZW5kcyB0aGUgaXRlbXMgdG8gdGhlIGVuZCBvZiBhcnJheS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZEFsbDxUPihhcnI6IFRbXSwgaXRlbXM6IFRbXSwgaW5kZXg/OiBudW1iZXIpIHtcblx0dHJ5QWRkQWxsKGFyciwgaXRlbXMsIGluZGV4KTtcbn1cblxuLyoqXG4gKiBSZXBsYWNlcyBpdGVtIGF0IHNwZWNpZmllZCBpbmRleC5cbiAqIElmIGFycmF5IGRvZXNuJ3QgY29udGFpbiBzdWNoIGluZGV4LCBpdCB3aWxsIGRlbW9saXNoIHRoZSBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0gYXJyIEFycmF5LlxuICogQHBhcmFtIGluZGV4IEluZGV4IG9mIGFuIGl0ZW0gdG8gcmVwbGFjZS5cbiAqIEBwYXJhbSBpdGVtIEl0ZW0gdG8gcmVwbGFjZSB3aXRoLlxuICogQHJldHVybnMgVGhlIHJlcGxhY2VkIGl0ZW0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXQ8VD4oYXJyOiBUW10sIGluZGV4OiBudW1iZXIsIGl0ZW06IFQpOiBUIHtcblx0dmFyIHJlc3VsdCA9IHRyeVNldChhcnIsIGluZGV4LCBpdGVtKTtcblx0cmV0dXJuIChyZXN1bHQgIT09IHVuZGVmaW5lZCkgPyByZXN1bHQudmFsdWUgOiBhcnJbaW5kZXhdO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgaXRlbSBhdCBzcGVjaWZpZWQgcG9zaXRpb24uXG4gKiBJZiBhcnJheSBkb2Vzbid0IGNvbnRhaW4gc3VjaCBpbmRleCwgaXQgd2lsbCBkZW1vbGlzaCB0aGUgYXBwbGljYXRpb24uXG4gKlxuICogQHBhcmFtIGFyciBBcnJheS5cbiAqIEBwYXJhbSBpbmRleCBJbmRleCBvZiBhbiBpdGVtIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIFRoZSByZW1vdmVkIGl0ZW0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmU8VD4oYXJyOiBUW10sIGluZGV4OiBudW1iZXIpOiBUIHtcblx0cmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpWzBdO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgaXRlbSByYW5nZSBmcm9tIGFycmF5LlxuICpcbiAqIEBwYXJhbSBhcnIgQXJyYXkuXG4gKiBAcGFyYW0gaW5kZXggSW5kZXggb2YgdGhlIGZpcnN0IGl0ZW0gdG8gcmVtb3ZlLlxuICogQHBhcmFtIGNvdW50IENvdW50IG9mIGl0ZW1zIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIFRoZSByZW1vdmVkIGl0ZW1zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQWxsPFQ+KGFycjogVFtdLCBpbmRleDogbnVtYmVyLCBjb3VudDogbnVtYmVyKTogVFtde1xuXHR2YXIgcmVzdWx0ID0gdHJ5UmVtb3ZlQWxsKGFyciwgaW5kZXgsIGNvdW50KTtcblx0cmV0dXJuIHJlc3VsdCB8fCBbXTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGFuIGl0ZW0gaW4gYXJyYXkuXG4gKlxuICogQHBhcmFtIGFyciBBcnJheS5cbiAqIEBwYXJhbSBpdGVtIEl0ZW0gdG8gcmVtb3ZlLlxuICogQHJldHVybnMgSW5kZXggb2YgdGhlIHJlbW92ZWQgaXRlbSBvciAtMS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUl0ZW08VD4oYXJyOiBUW10sIGl0ZW06IFQpOiBudW1iZXIge1xuXHRjb25zdCBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuXHRpZiAoaW5kZXggIT09IC0xKSB7XG5cdFx0cmVtb3ZlKGFyciwgaW5kZXgpO1xuXHR9XG5cdHJldHVybiBpbmRleDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBvY2N1cnJlbmNlcyBvZiBpdGVtcyBpbiBhcnJheS5cbiAqXG4gKiBAcGFyYW0gYXJyIEFycmF5LlxuICogQHBhcmFtIGl0ZW1zIEl0ZW1zIHRvIHJlbW92ZS5cbiAqIEBwYXJhbSBnZXRLZXkgRnVuY3Rpb24gd2hpY2ggcmV0dXJucyB1bmlxdWUga2V5IG9mIGFuIGl0ZW0gaW4gdGhpcyBhcnJheS5cbiAqIEJ5IGRlZmF1bHQsIGlkZW50aWZpZXMgcHJpbWl0aXZlIHZhbHVlcyBhbmQgYElkZW50aWZpYWJsZWAgb2JqZWN0cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUl0ZW1zPFQ+KGFycjogVFtdLCBpdGVtczogVFtdLCBnZXRLZXk/OiAoaXRlbTogVCkgPT4gYW55KSB7XG5cdGNvbnN0IGl0ZW1TZXQgPSBWaWRTZXQuZnJvbUFycmF5PFQ+KGl0ZW1zLCBnZXRLZXkpO1xuXHRjb25zdCBuZXdJdGVtcyA9IGFyci5maWx0ZXIoZnVuY3Rpb24gKGl0ZW06IFQpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gIWl0ZW1TZXQuY29udGFpbnMoaXRlbSk7XG5cdH0pO1xuXHRjbGVhcihhcnIpO1xuXHRhZGRBbGwoYXJyLCBuZXdJdGVtcyk7XG59XG5cbi8qKlxuICogTW92ZXMgYW4gaXRlbSBpbnNpZGUgYXJyYXkuXG4gKlxuICogQHBhcmFtIGFyciBBcnJheS5cbiAqIEBwYXJhbSBmcm9tSW5kZXggSXRlbSBpbmRleCB0byBtb3ZlLlxuICogQHBhcmFtIHRvSW5kZXggSW5kZXggdG8gbW92ZSB0by5cbiAqIEByZXR1cm5zIFRoZSBtb3ZlZCBpdGVtLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbW92ZTxUPihhcnI6IFRbXSwgZnJvbUluZGV4OiBudW1iZXIsIHRvSW5kZXg6IG51bWJlcik6IFQge1xuXHR0cnlNb3ZlKGFyciwgZnJvbUluZGV4LCB0b0luZGV4KTtcblx0cmV0dXJuIGFyclt0b0luZGV4XTtcbn1cblxuLyoqXG4gKiBDbGVhcnMgYXJyYXkuXG4gKlxuICogQHBhcmFtIGFyciBBcnJheS5cbiAqIEByZXR1cm5zIE9sZCBhcnJheSBjb250ZW50cy4gTmV2ZXIgcmV0dXJucyBudWxsIG9yIHVuZGVmaW5lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyPFQ+KGFycjogVFtdKTogVFtde1xuXHR2YXIgcmVzdWx0ID0gdHJ5Q2xlYXIoYXJyKTtcblx0cmV0dXJuIChyZXN1bHQgIT09IHVuZGVmaW5lZCkgPyByZXN1bHQgOiBbXTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFuZCBpbnNlcnRzIGl0ZW0gcmFuZ2VzLlxuICpcbiAqIEBwYXJhbSBhcnIgQXJyYXkuXG4gKiBAcGFyYW0gcmVtb3ZlUGFyYW1zTGlzdCBBcnJheSBvZiBzZWdtZW50cyB0byByZW1vdmUgc29ydGVkIGJ5IGluZGV4IGFzYy4gU2VnbWVudHMgYXJlIHJlbW92ZWQgaW4gYmFja3dhcmQgb3JkZXIuXG4gKiBAcGFyYW0gYWRkUGFyYW1zTGlzdCBBcnJheSBvZiBzZWdtZW50cyB0byBpbnNlcnQgc29ydGVkIGJ5IGluZGV4IGFzYy4gU2VnbWVudHMgYXJlIGluc2VydGVkIGluIGZvcndhcmQgb3JkZXIuXG4gKiBAcmV0dXJucyBTcGxpY2UgcmVzdWx0LiBOZXZlciByZXR1cm5zIG51bGwgb3IgdW5kZWZpbmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3BsaWNlPFQ+KGFycjogVFtdLFxuXHRcdHJlbW92ZVBhcmFtc0xpc3Q6IElMaXN0LkluZGV4Q291bnRbXSxcblx0XHRhZGRQYXJhbXNMaXN0OiBJTGlzdC5JbmRleEl0ZW1zPFQ+W10pOiBJTGlzdC5TcGxpY2VSZXN1bHQ8VD4ge1xuXHR2YXIgcmVzdWx0ID0gdHJ5U3BsaWNlKGFyciwgcmVtb3ZlUGFyYW1zTGlzdCwgYWRkUGFyYW1zTGlzdCk7XG5cdHJldHVybiAocmVzdWx0ICE9PSB1bmRlZmluZWQpID8gcmVzdWx0IDpcblx0XHRuZXcgTGlzdFNwbGljZVJlc3VsdDxUPihhcnIuY29uY2F0KCksIDxJTGlzdC5JbmRleEl0ZW1zPFQ+W10+W10sIDxJTGlzdC5JbmRleEl0ZW1zPFQ+W10+W10pO1xufVxuXG4vKipcbiAqIFJlb3JkZXJzIGFycmF5IGl0ZW1zLlxuICpcbiAqIEBwYXJhbSBhcnIgQXJyYXkuXG4gKiBAcGFyYW0gaW5kZXhBcnJheSBJbmRleCBhcnJheS4gSXRlbSB3aXRoIGluZGV4IGBpYCBpcyBtb3ZlZCB0byBpbmRleCBgaW5kZXhBcnJheVtpXWAuXG4gKiBNdXN0IGNvbnRhaW4gYWxsIGluZGV4ZXMgZnJvbSAwIHRvIChsZW5ndGggLSAxKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlb3JkZXI8VD4oYXJyOiBUW10sIGluZGV4QXJyYXk6IG51bWJlcltdKSB7XG5cdHRyeVJlb3JkZXIoYXJyLCBpbmRleEFycmF5KTtcbn1cblxuLyoqXG4gKiBTb3J0cyBhcnJheSBieSB0aGUgcmVzdWx0IG9mIGBjYWxsYmFja2AgZnVuY3Rpb24gY2FsbCBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIEBwYXJhbSBhcnIgQXJyYXkuXG4gKiBAcGFyYW0gY2FsbGJhY2sgSW5kZXhlciBmdW5jdGlvbi4gTXVzdCByZXR1cm4gYSBjb21wYXJhYmxlIHZhbHVlLCBjb21wYXRpYmxlIHdpdGhcbiAqIGBjbXBgLiBSZXR1cm5zIGl0ZW0gaXRzZWxmIGJ5IGRlZmF1bHQuXG4gKiBAcGFyYW0gc2NvcGUgYGNhbGxiYWNrYCBjYWxsIHNjb3BlLiBEZWZhdWx0cyB0byBhcnJheSBpdHNlbGYuXG4gKiBAcGFyYW0gb3JkZXIgU29ydGluZyBvcmRlci4gUG9zaXRpdmUgbnVtYmVyIGZvciBhc2NlbmRpbmcgc29ydGluZywgbmVnYXRpdmUgZm9yIGRlc2NlbmRpbmcgc29ydGluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNvcnQ8VD4oYXJyOiBUW10sIGNhbGxiYWNrPzogKGl0ZW06IFQsIGluZGV4OiBudW1iZXIpID0+IGFueSwgc2NvcGU/OiBhbnksIG9yZGVyPzogbnVtYmVyKSB7XG5cdHZhciBpbmRleEFycmF5ID0gZGV0ZWN0U29ydChhcnIsIGNhbGxiYWNrLCBzY29wZSwgb3JkZXIpO1xuXHRpZiAoaW5kZXhBcnJheSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0dHJ5UmVvcmRlcihhcnIsIGluZGV4QXJyYXkpO1xuXHR9XG59XG5cbi8qKlxuICogU29ydHMgYXJyYXkgYnkgY29tcGFyZXIuXG4gKlxuICogQHBhcmFtIGFyciBBcnJheS5cbiAqIEBwYXJhbSBjb21wYXJlIENvbXBhcmVyIGZ1bmN0aW9uLiBTaG91bGQgcmV0dXJuIHBvc2l0aXZlIHZhbHVlIGlmIHQxID4gdDI7XG4gKiBuZWdhdGl2ZSB2YWx1ZSBpZiB0MSA8IHQyOyAwIGlmIHQxID09IHQyLiBEZWZhdWx0cyB0byBgY21wYC5cbiAqIEBwYXJhbSBzY29wZSBgY29tcGFyZXJgIGNhbGwgc2NvcGUuIERlZmF1bHRzIHRvIGFycmF5IGl0c2VsZi5cbiAqIEBwYXJhbSBvcmRlciBTb3J0aW5nIG9yZGVyLiBQb3NpdGl2ZSBudW1iZXIgZm9yIGFzY2VuZGluZyBzb3J0aW5nLCBuZWdhdGl2ZSBmb3IgZGVzY2VuZGluZyBzb3J0aW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc29ydENvbXBhcmluZzxUPihhcnI6IFRbXSwgY29tcGFyZT86ICh0MTogVCwgdDI6IFQsIGkxOiBudW1iZXIsIGkyOiBudW1iZXIpID0+IG51bWJlciwgc2NvcGU/OiBhbnksIG9yZGVyPzogbnVtYmVyKSB7XG5cdHZhciBpbmRleEFycmF5ID0gZGV0ZWN0U29ydENvbXBhcmluZyhhcnIsIGNvbXBhcmUsIHNjb3BlLCBvcmRlcik7XG5cdGlmIChpbmRleEFycmF5ICE9PSB1bmRlZmluZWQpIHtcblx0XHR0cnlSZW9yZGVyKGFyciwgaW5kZXhBcnJheSk7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgdHdvIGFycmF5cyBmb3IgZXF1YWxpdHksIGl0ZW0gYnkgaXRlbSAoPT09KS5cbiAqXG4gKiBAcGFyYW0geCBGaXJzdCBhcnJheS5cbiAqIEBwYXJhbSB5IFNlY29uZCBhcnJheS5cbiAqIEByZXR1cm5zIEFycmF5cyBhcmUgZXF1YWwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbDxUPih4OiBUW10sIHk6IFRbXSk6IGJvb2xlYW4ge1xuXHRpZiAoeCA9PT0geSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdGlmICh4Lmxlbmd0aCAhPT0geS5sZW5ndGgpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0Zm9yICh2YXIgaSA9IDAsIGwgPSB4Lmxlbmd0aDsgaSA8IGw7ICsraSkge1xuXHRcdGlmICh4W2ldICE9PSB5W2ldKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIENoZWNrcyBhbGwgaXRlbXMgYWdhaW5zdCBjcml0ZXJpYSBpbiBiYWNrd2FyZCBvcmRlci5cbiAqXG4gKiBSZXR1cm5zIHRydWUgaWYgY3JpdGVyaWEgcmV0dXJucyB0cnV0aHkgdmFsdWUgZm9yIGFsbCBjb2xsZWN0aW9uIGl0ZW1zLlxuICpcbiAqIEFsZ29yaXRobXMgaXRlcmF0ZXMgaXRlbXMgY29uc2VxdWVudGx5LCBhbmQgc3RvcHMgYWZ0ZXIgdGhlIGZpcnN0IGl0ZW0gbm90IG1hdGNoaW5nIHRoZSBjcml0ZXJpYS5cbiAqXG4gKiBAcGFyYW0gYXJyIEFycmF5LlxuICogQHBhcmFtIGNhbGxiYWNrIENyaXRlcmlhIGNhbGxiYWNrLlxuICogQHBhcmFtIHNjb3BlIGBjYWxsYmFja2AgY2FsbCBzY29wZS4gRGVmYXVsdHMgdG8gYXJyYXkgaXRzZWxmLlxuICogQHJldHVybnMgVHJ1ZSBpZiBldmVyeSBpdGVtIG1hdGNoZXMgdGhlIGNyaXRlcmlhLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYmFja0V2ZXJ5PFQ+KGFycjogVFtdLCBjYWxsYmFjazogKGl0ZW06IFQsIGluZGV4OiBudW1iZXIpID0+IGFueSwgc2NvcGU/OiBhbnkpOiBib29sZWFuIHtcblx0c2NvcGUgPSBzY29wZSB8fCBhcnI7XG5cdGZvciAodmFyIGkgPSBhcnIubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcblx0XHRpZiAoIWNhbGxiYWNrLmNhbGwoc2NvcGUsIGFycltpXSwgaSkpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGV2ZXJ5IGl0ZW0gaW4gYXJyYXkgaXMgZXF1YWwgdG8gaXRzIGluZGV4OiBgYXJyYXlbaV0gPT09IGlgLlxuICpcbiAqIEBwYXJhbSBhcnIgQXJyYXkuXG4gKiBAcmV0dXJucyBFdmVyeSBpdGVtIGlzIGVxdWFsIHRvIGl0cyBpbmRleC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSWRlbnRpdHkoYXJyOiBudW1iZXJbXSk6IGJvb2xlYW4ge1xuXHRmb3IgKHZhciBpID0gMCwgbCA9IGFyci5sZW5ndGg7IGkgPCBsOyArK2kpIHtcblx0XHRpZiAoYXJyW2ldICE9PSBpKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEJ1aWxkcyBhIG5ldyBhcnJheSBieSB0aGUgcnVsZTogYHJlc3VsdFthcnJheVtpXV0gPT09IGlgLlxuICpcbiAqIEBwYXJhbSBhcnIgQXJyYXkuXG4gKiBAcmV0dXJucyBUaGUgaW52ZXJ0ZWQgYXJyYXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnQoYXJyOiBudW1iZXJbXSk6IG51bWJlcltdIHtcblx0dmFyIGwgPSBhcnIubGVuZ3RoO1xuXHR2YXIgcmVzdWx0ID0gbmV3IEFycmF5PG51bWJlcj4obCk7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbDsgKytpKSB7XG5cdFx0cmVzdWx0W2FycltpXV0gPSBpO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQnVpbGRzIGEgbmV3IGFycmF5IGNvbnNpc3Rpbmcgb2Ygc3ViYXJyYXkgaXRlbXMgaW4gdGhlIHNhbWUgb3JkZXIuXG4gKlxuICogQHBhcmFtIGFycmF5cyBBcnJheSBvZiBzdWJhcnJheXMuXG4gKiBAcmV0dXJucyBUaGUgbWVyZ2VkIGFycmF5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2U8VD4oYXJyYXlzOiBUW11bXSk6IFRbXSB7XG5cdHZhciByZXN1bHQ6IFRbXSA9IFtdO1xuXHRmb3IgKHZhciBpID0gMCwgbCA9IGFycmF5cy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcblx0XHRyZXN1bHQucHVzaC5hcHBseShyZXN1bHQsIGFycmF5c1tpXSk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUaGUgc2FtZSBhcyBgYWRkQWxsYCwgYnV0IHJldHVybnMgdW5kZWZpbmVkIGlmIHRoZSBhcnJheSBzdGF5cyB1bm1vZGlmaWVkLiBFbHNlIHJldHVybnMgdHJ1ZS5cbiAqXG4gKiBAcGFyYW0gYXJyIEFycmF5LlxuICogQHBhcmFtIGl0ZW1zIEl0ZW1zIHRvIGluc2VydC5cbiAqIEBwYXJhbSBpbmRleCBJbmRleCBvZiBhbiBpdGVtIHRvIGluc2VydCB0aGUgbmV3IG9uZXMgYmVmb3JlLlxuICogQnkgZGVmYXVsdCwgYXBwZW5kcyB0aGUgaXRlbXMgdG8gdGhlIGVuZCBvZiBhcnJheS5cbiAqIEByZXR1cm5zIFRydWUgaWYgYXJyYXkgd2FzIG1vZGlmaWVkLCBlbHNlIHVuZGVmaW5lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyeUFkZEFsbDxUPihhcnI6IFRbXSwgaXRlbXM6IFRbXSwgaW5kZXg/OiBudW1iZXIpOiBib29sZWFuIHtcblx0aWYgKGl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblx0aWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgbCA9IGFyci5sZW5ndGg7XG5cdFx0YXJyLmxlbmd0aCArPSBpdGVtcy5sZW5ndGg7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7ICsraSkge1xuXHRcdFx0YXJyW2kgKyBsXSA9IGl0ZW1zW2ldO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHR2YXIgdGFpbCA9IGFyci5zcGxpY2UoaW5kZXgsIGFyci5sZW5ndGggLSBpbmRleCk7XG5cdFx0dHJ5QWRkQWxsKGFyciwgaXRlbXMpO1xuXHRcdHRyeUFkZEFsbChhcnIsIHRhaWwpO1xuXHR9XG5cdHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIFJlcGxhY2VzIGl0ZW0gYXQgc3BlY2lmaWVkIGluZGV4LlxuICogSWYgYXJyYXkgZG9lc24ndCBjb250YWluIHN1Y2ggaW5kZXgsIGl0IHdpbGwgZGVtb2xpc2ggdGhlIGFwcGxpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSBhcnIgQXJyYXkuXG4gKiBAcGFyYW0gaW5kZXggSW5kZXggb2YgYW4gaXRlbSB0byByZXBsYWNlLlxuICogQHBhcmFtIGl0ZW0gSXRlbSB0byByZXBsYWNlIHdpdGguXG4gKiBAcmV0dXJucyBUaGUgcmVwbGFjZWQgaXRlbS4gSWYgYXJyYXkgaXMgbm90IG1vZGlmaWVkLCByZXR1cm5zIHVuZGVmaW5lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyeVNldDxUPihhcnI6IFRbXSwgaW5kZXg6IG51bWJlciwgaXRlbTogVCk6IFNvbWU8VD4ge1xuXHR2YXIgb2xkSXRlbSA9IGFycltpbmRleF07XG5cdGlmIChpdGVtICE9PSBvbGRJdGVtKSB7XG5cdFx0YXJyW2luZGV4XSA9IGl0ZW07XG5cdFx0cmV0dXJuIHsgdmFsdWU6IG9sZEl0ZW0gfTtcblx0fVxuXHRyZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgaXRlbSByYW5nZSBmcm9tIGFycmF5LlxuICpcbiAqIEBwYXJhbSBhcnIgQXJyYXkuXG4gKiBAcGFyYW0gaW5kZXggSW5kZXggb2YgZmlyc3QgaXRlbSB0byByZW1vdmUuXG4gKiBAcGFyYW0gY291bnQgQ291bnQgb2YgaXRlbXMgdG8gcmVtb3ZlLlxuICogQHJldHVybnMgVGhlIHJlbW92ZWQgaXRlbXMuIElmIGFycmF5IGlzIG5vdCBtb2RpZmllZCwgcmV0dXJucyB1bmRlZmluZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cnlSZW1vdmVBbGw8VD4oYXJyOiBUW10sIGluZGV4OiBudW1iZXIsIGNvdW50OiBudW1iZXIpOiBUW117XG5cdGlmIChjb3VudCAhPT0gMCkge1xuXHRcdHJldHVybiBhcnIuc3BsaWNlKGluZGV4LCBjb3VudCk7XG5cdH1cblx0cmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBNb3ZlcyBhbiBpdGVtIGluc2lkZSBhcnJheS5cbiAqXG4gKiBAcGFyYW0gYXJyIEFycmF5LlxuICogQHBhcmFtIGZyb21JbmRleCBJdGVtIGluZGV4IHRvIG1vdmUuXG4gKiBAcGFyYW0gdG9JbmRleCBJbmRleCB0byBtb3ZlIHRvLlxuICogQHJldHVybnMgVGhlIG1vdmVkIGl0ZW0uIElmIGFycmF5IGlzIG5vdCBtb2RpZmllZCwgcmV0dXJucyB1bmRlZmluZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cnlNb3ZlPFQ+KGFycjogVFtdLCBmcm9tSW5kZXg6IG51bWJlciwgdG9JbmRleDogbnVtYmVyKTogVCB7XG5cdGlmIChmcm9tSW5kZXggPT09IHRvSW5kZXgpIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cdHZhciBpdGVtID0gYXJyW2Zyb21JbmRleF07XG5cdGFyci5zcGxpY2UoZnJvbUluZGV4LCAxKTtcblx0YXJyLnNwbGljZSh0b0luZGV4LCAwLCBpdGVtKTtcblx0cmV0dXJuIGl0ZW07XG59XG5cbi8qKlxuICogQ2xlYXJzIGFycmF5LlxuICpcbiAqIEBwYXJhbSBhcnIgQXJyYXkuXG4gKiBAcmV0dXJucyBPbGQgYXJyYXkgY29udGVudHMuIElmIG5vdCBtb2RpZmllZCAtIHVuZGVmaW5lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyeUNsZWFyPFQ+KGFycjogVFtdKTogVFtde1xuXHRpZiAoYXJyLmxlbmd0aCAhPT0gMCkge1xuXHRcdHJldHVybiBhcnIuc3BsaWNlKDAsIGFyci5sZW5ndGgpO1xuXHR9XG5cdHJldHVybiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbmQgaW5zZXJ0cyBpdGVtIHJhbmdlcy5cbiAqXG4gKiBAcGFyYW0gYXJyIEFycmF5LlxuICogQHBhcmFtIHJlbW92ZVBhcmFtc0xpc3QgQXJyYXkgb2Ygc2VnbWVudHMgdG8gcmVtb3ZlIHNvcnRlZCBieSBpbmRleCBhc2MuIFNlZ21lbnRzIGFyZSByZW1vdmVkIGluIGJhY2t3YXJkIG9yZGVyLlxuICogQHBhcmFtIGFkZFBhcmFtc0xpc3QgQXJyYXkgb2Ygc2VnbWVudHMgdG8gaW5zZXJ0IHNvcnRlZCBieSBpbmRleCBhc2MuIFNlZ21lbnRzIGFyZSBpbnNlcnRlZCBpbiBmb3J3YXJkIG9yZGVyLlxuICogQHJldHVybnMgU3BsaWNlIHJlc3VsdC4gSWYgY29sbGVjdGlvbiBpcyBub3QgbW9kaWZpZWQsIHJldHVybnMgdW5kZWZpbmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJ5U3BsaWNlPFQ+KGFycjogVFtdLFxuXHRcdHJlbW92ZVBhcmFtc0xpc3Q6IElMaXN0LkluZGV4Q291bnRbXSxcblx0XHRhZGRQYXJhbXNMaXN0OiBJTGlzdC5JbmRleEl0ZW1zPFQ+W10pOiBJTGlzdC5TcGxpY2VSZXN1bHQ8VD4ge1xuXHR2YXIgb3B0aW1pemVkUmVtb3ZlUGFyYW1zTGlzdDogSUxpc3QuSW5kZXhDb3VudFtdID0gW107XG5cdHZhciBybGFzdDogSW5kZXhDb3VudCA9IG51bGw7XG5cdHZhciBycGFyYW1zOiBJTGlzdC5JbmRleENvdW50O1xuXHRmb3IgKHZhciBpID0gMCwgbCA9IHJlbW92ZVBhcmFtc0xpc3QubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG5cdFx0cnBhcmFtcyA9IHJlbW92ZVBhcmFtc0xpc3RbaV07XG5cdFx0aWYgKHJsYXN0ICYmIChycGFyYW1zLmluZGV4ID09PSBybGFzdC5pbmRleCArIHJsYXN0LmNvdW50KSkge1xuXHRcdFx0cmxhc3QuY291bnQgKz0gcnBhcmFtcy5jb3VudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmxhc3QgPSBycGFyYW1zLmNsb25lKCk7XG5cdFx0XHRvcHRpbWl6ZWRSZW1vdmVQYXJhbXNMaXN0LnB1c2gocmxhc3QpO1xuXHRcdH1cblx0fVxuXG5cdHZhciBvcHRpbWl6ZWRBZGRQYXJhbXNMaXN0ID0gW107XG5cdHZhciBhbGFzdDogSUxpc3QuSW5kZXhJdGVtczxUPiA9IG51bGw7XG5cdHZhciBhcGFyYW1zOiBJTGlzdC5JbmRleEl0ZW1zPFQ+O1xuXHRmb3IgKHZhciBpID0gMCwgbCA9IGFkZFBhcmFtc0xpc3QubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG5cdFx0YXBhcmFtcyA9IGFkZFBhcmFtc0xpc3RbaV07XG5cdFx0aWYgKGFsYXN0ICYmIChhcGFyYW1zLmluZGV4ID09PSBhbGFzdC5pbmRleCArIGFsYXN0Lml0ZW1zLmxlbmd0aCkpIHtcblx0XHRcdHRyeUFkZEFsbChhbGFzdC5pdGVtcywgYXBhcmFtcy5pdGVtcyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFsYXN0ID0gYXBhcmFtcy5jbG9uZSgpO1xuXHRcdFx0b3B0aW1pemVkQWRkUGFyYW1zTGlzdC5wdXNoKGFsYXN0KTtcblx0XHR9XG5cdH1cblxuXHR2YXIgb2xkSXRlbXMgPSBhcnIuY29uY2F0KCk7XG5cdHZhciByZW1vdmVkSXRlbXNMaXN0ID0gW107XG5cdGZvciAodmFyIGkgPSBvcHRpbWl6ZWRSZW1vdmVQYXJhbXNMaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG5cdFx0cnBhcmFtcyA9IG9wdGltaXplZFJlbW92ZVBhcmFtc0xpc3RbaV07XG5cdFx0dmFyIGluZGV4ID0gcnBhcmFtcy5pbmRleDtcblx0XHR2YXIgaXRlbXMgPSB0cnlSZW1vdmVBbGwoYXJyLCBpbmRleCwgcnBhcmFtcy5jb3VudCk7XG5cdFx0aWYgKGl0ZW1zID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHRyZW1vdmVkSXRlbXNMaXN0LnB1c2gobmV3IEluZGV4SXRlbXM8VD4oaW5kZXgsIGl0ZW1zKSk7XG5cdH1cblx0dmFyIGFkZGVkSXRlbXNMaXN0ID0gW107XG5cdGZvciAodmFyIGkgPSAwLCBsID0gb3B0aW1pemVkQWRkUGFyYW1zTGlzdC5sZW5ndGg7IGkgPCBsOyArK2kpIHtcblx0XHRhcGFyYW1zID0gb3B0aW1pemVkQWRkUGFyYW1zTGlzdFtpXTtcblx0XHRpZiAodHJ5QWRkQWxsKGFyciwgYXBhcmFtcy5pdGVtcywgYXBhcmFtcy5pbmRleCkgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdGFkZGVkSXRlbXNMaXN0LnB1c2goYXBhcmFtcyk7XG5cdH1cblx0aWYgKChyZW1vdmVkSXRlbXNMaXN0Lmxlbmd0aCAhPT0gMCkgfHwgKGFkZGVkSXRlbXNMaXN0Lmxlbmd0aCAhPT0gMCkpIHtcblx0XHRyZW1vdmVkSXRlbXNMaXN0LnJldmVyc2UoKTtcblx0XHRyZXR1cm4gbmV3IExpc3RTcGxpY2VSZXN1bHQ8VD4ob2xkSXRlbXMsIHJlbW92ZWRJdGVtc0xpc3QsIGFkZGVkSXRlbXNMaXN0KTtcblx0fVxuXHRyZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFJlb3JkZXJzIGFycmF5IGl0ZW1zLlxuICpcbiAqIEBwYXJhbSBhcnIgQXJyYXkuXG4gKiBAcGFyYW0gaW5kZXhBcnJheSBJbmRleCBhcnJheS4gSXRlbSB3aXRoIGluZGV4IGBpYCB3aWxsIGJlIG1vdmVkIHRvIGluZGV4IGBpbmRleEFycmF5W2ldYC5cbiAqIE11c3QgY29udGFpbiBhbGwgaW5kZXhlcyBmcm9tIDAgdG8gKGxlbmd0aCAtIDEpLlxuICogQHJldHVybnMgT2xkIGFycmF5IGNvbnRlbnRzLiBJZiBjb2xsZWN0aW9uIGlzIG5vdCBtb2RpZmllZCwgcmV0dXJucyB1bmRlZmluZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cnlSZW9yZGVyPFQ+KGFycjogVFtdLCBpbmRleEFycmF5OiBudW1iZXJbXSk6IFRbXXtcblx0dmFyIGxlbmd0aCA9IGFyci5sZW5ndGg7XG5cdGlmIChpc0lkZW50aXR5KGluZGV4QXJyYXkpKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXHR2YXIgb2xkSXRlbXMgPSBhcnIuY29uY2F0KCk7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRhcnJbaW5kZXhBcnJheVtpXV0gPSBvbGRJdGVtc1tpXTtcblx0fVxuXHRyZXR1cm4gb2xkSXRlbXM7XG59XG5cbi8qKlxuICogRGV0ZWN0cyBgc3BsaWNlYCBtZXRob2QgYXJndW1lbnRzIHRvIGFkanVzdCBhcnJheSBjb250ZW50cyB0byBgbmV3SXRlbXNgLlxuICogRGV0ZXJtaW5lcyBpdGVtIHJhbmdlcyBuZWNjZXNzYXJ5IHRvIGJlIHJlbW92ZWQgYW5kIGluc2VydGVkLlxuICogQWxsIGl0ZW1zIG11c3QgaGF2ZSB1bmlxdWUgYGdldEtleWAgZnVuY3Rpb24gcmVzdWx0LlxuICogSWYgaXRlbXMgZG9uJ3QgaGF2ZSB1bmlxdWUga2V5LCBwcm9iYWJseSBgZGV0ZWN0RmlsdGVyYCBtZXRob2QgbWF5IGhlbHAsXG4gKiBiZWNhdXNlIGl0IGRvZXNuJ3QgcmVxdWlyZSBpdGVtIHVuaXF1aW5lc3MuXG4gKlxuICogQHBhcmFtIG9sZEl0ZW1zIE9sZCBhcnJheSBjb250ZW50cy5cbiAqIEBwYXJhbSBuZXdJdGVtcyBOZXcgYXJyYXkgY29udGVudHMuXG4gKiBAcGFyYW0gZ2V0S2V5IEZ1bmN0aW9uIHdoaWNoIHJldHVybnMgdW5pcXVlIGtleSBvZiBhbiBpdGVtIGluIHRoaXMgYXJyYXkuXG4gKiBCeSBkZWZhdWx0LCBpZGVudGlmaWVzIHByaW1pdGl2ZSB2YWx1ZXMgYW5kIGBJZGVudGlmaWFibGVgIG9iamVjdHMuXG4gKiBAcmV0dXJucyBgc3BsaWNlYCBtZXRob2QgYXJndW1lbnRzLiBJZiBubyBtZXRob2QgY2FsbCByZXF1aXJlZCwgcmV0dXJucyB1bmRlZmluZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RTcGxpY2U8VD4ob2xkSXRlbXM6IFRbXSwgbmV3SXRlbXM6IFRbXSxcblx0XHRcdFx0XHRcdFx0XHRnZXRLZXk/OiAoaXRlbTogVCkgPT4gYW55KTogSUxpc3QuU3BsaWNlUGFyYW1zPFQ+IHtcblx0dmFyIHJlbW92ZVBhcmFtc0xpc3Q6IElMaXN0LkluZGV4Q291bnRbXSA9IFtdO1xuXHR2YXIgYWRkUGFyYW1zTGlzdDogSUxpc3QuSW5kZXhJdGVtczxUPltdID0gW107XG5cdHZhciBvbGRJbmRleE1hcCA9IG5ldyBWaWRNYXA8VCwgbnVtYmVyPihnZXRLZXkpO1xuXHRmb3IgKHZhciBpID0gMCwgbCA9IG9sZEl0ZW1zLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuXHRcdG9sZEluZGV4TWFwLnB1dChvbGRJdGVtc1tpXSwgaSk7XG5cdH1cblx0dmFyIG5leHRPbGRJbmRleCA9IDA7XG5cdHZhciBvZmZzZXQgPSAwO1xuXHR2YXIgbmV3SXRlbUJ1ZmZlcjogVFtdID0gW107XG5cblx0ZnVuY3Rpb24gYnVmZmVyKGl0ZW06IFQpIHtcblx0XHRuZXdJdGVtQnVmZmVyLnB1c2goaXRlbSk7XG5cdH1cblxuXHRmdW5jdGlvbiBmbHVzaCgpIHtcblx0XHRpZiAobmV3SXRlbUJ1ZmZlci5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0YWRkUGFyYW1zTGlzdC5wdXNoKG5ldyBJbmRleEl0ZW1zPFQ+KG9mZnNldCArIG5leHRPbGRJbmRleCwgbmV3SXRlbUJ1ZmZlcikpO1xuXHRcdG9mZnNldCArPSBuZXdJdGVtQnVmZmVyLmxlbmd0aDtcblx0XHRuZXdJdGVtQnVmZmVyID0gW107XG5cdH1cblxuXHRmdW5jdGlvbiB0ZXN0UmVtb3ZlKG9sZEluZGV4OiBudW1iZXIpIHtcblx0XHRpZiAob2xkSW5kZXggPiBuZXh0T2xkSW5kZXgpIHtcblx0XHRcdGNvbnN0IGNvdW50ID0gb2xkSW5kZXggLSBuZXh0T2xkSW5kZXg7XG5cdFx0XHRyZW1vdmVQYXJhbXNMaXN0LnB1c2gobmV3IEluZGV4Q291bnQobmV4dE9sZEluZGV4LCBjb3VudCkpO1xuXHRcdFx0b2Zmc2V0IC09IGNvdW50O1xuXHRcdH1cblx0fVxuXG5cdGZvciAobGV0IG5ld0luZGV4ID0gMCwgbCA9IG5ld0l0ZW1zLmxlbmd0aDsgbmV3SW5kZXggPCBsOyArK25ld0luZGV4KSB7XG5cdFx0Y29uc3QgaXRlbSA9IG5ld0l0ZW1zW25ld0luZGV4XTtcblx0XHRjb25zdCBvbGRJbmRleCA9IG9sZEluZGV4TWFwLmdldChpdGVtKTtcblx0XHRpZiAoKG9sZEluZGV4ID09PSB1bmRlZmluZWQpIHx8IChvbGRJbmRleCA8IG5leHRPbGRJbmRleCkpIHtcblx0XHRcdGJ1ZmZlcihpdGVtKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zmx1c2goKTtcblx0XHRcdHRlc3RSZW1vdmUob2xkSW5kZXgpO1xuXHRcdFx0bmV4dE9sZEluZGV4ID0gb2xkSW5kZXggKyAxO1xuXHRcdH1cblx0fVxuXHRmbHVzaCgpO1xuXHR0ZXN0UmVtb3ZlKG9sZEl0ZW1zLmxlbmd0aCk7XG5cdGlmICgocmVtb3ZlUGFyYW1zTGlzdC5sZW5ndGggIT09IDApIHx8IChhZGRQYXJhbXNMaXN0Lmxlbmd0aCAhPT0gMCkpIHtcblx0XHRyZXR1cm4geyByZW1vdmVQYXJhbXNMaXN0OiByZW1vdmVQYXJhbXNMaXN0LCBhZGRQYXJhbXNMaXN0OiBhZGRQYXJhbXNMaXN0IH07XG5cdH1cblx0cmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBEZXRlY3RzIGByZW1vdmVQYXJhbXNMaXN0YCBhcmd1bWVudCBvZiBgc3BsaWNlYCBtZXRob2QgdG8gYWRqdXN0IGFycmF5IGNvbnRlbnRzIHRvIGBuZXdJdGVtc2AuXG4gKiBEZXRlcm1pbmVzIGl0ZW0gcmFuZ2VzIG5lY2Nlc3NhcnkgdG8gYmUgcmVtb3ZlZC5cbiAqIERvZXNuJ3QgYXNzdW1lIGl0ZW0gaW5zZXJ0aW9uIC0gdHJ5IGBkZXRlY3RTcGxpY2VgIGlmIHRoYXQncyB0aGUgY2FzZS5cbiAqIEluIGFkdmFudGFnZSB0byBgZGV0ZWN0U3BsaWNlYCwgZG9lc24ndCByZXF1aXJlIGl0ZW0gdW5pcXVpbmVzcy5cbiAqXG4gKiBAcGFyYW0gb2xkSXRlbXMgT2xkIGFycmF5IGNvbnRlbnRzLlxuICogQHBhcmFtIG5ld0l0ZW1zIE5ldyBhcnJheSBjb250ZW50cy5cbiAqIEByZXR1cm5zIGByZW1vdmVQYXJhbXNMaXN0YCBhcmd1bWVudCBvZiBgc3BsaWNlYCBtZXRob2QuXG4gKiBJZiBubyBtZXRob2QgY2FsbCByZXF1aXJlZCwgcmV0dXJucyB1bmRlZmluZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RGaWx0ZXI8VD4ob2xkSXRlbXM6IFRbXSwgbmV3SXRlbXM6IFRbXSk6IElMaXN0LkluZGV4Q291bnRbXSB7XG5cdGNvbnN0IHJlbW92ZVBhcmFtc0xpc3Q6IElMaXN0LkluZGV4Q291bnRbXSA9IFtdO1xuXHRsZXQgb2xkSW5kZXggPSAwO1xuXHRjb25zdCBvbGRMZW5ndGggPSBvbGRJdGVtcy5sZW5ndGg7XG5cdGNvbnN0IG5ld0xlbmd0aCA9IG5ld0l0ZW1zLmxlbmd0aDtcblx0Zm9yIChsZXQgbmV3SW5kZXggPSAwOyBuZXdJbmRleCA8PSBuZXdMZW5ndGg7ICsrbmV3SW5kZXgpIHtcblx0XHRjb25zdCBuZXdJdGVtID0gbmV3SXRlbXNbbmV3SW5kZXhdO1xuXHRcdGxldCBjb3VudCA9IDA7XG5cdFx0d2hpbGUgKChvbGRJbmRleCArIGNvdW50IDwgb2xkTGVuZ3RoKSAmJiAob2xkSXRlbXNbb2xkSW5kZXggKyBjb3VudF0gIT09IG5ld0l0ZW0pKSB7XG5cdFx0XHQrK2NvdW50O1xuXHRcdH1cblx0XHRpZiAoY291bnQgIT09IDApIHtcblx0XHRcdHJlbW92ZVBhcmFtc0xpc3QucHVzaChuZXcgSW5kZXhDb3VudChvbGRJbmRleCwgY291bnQpKTtcblx0XHR9XG5cdFx0b2xkSW5kZXggKz0gY291bnQgKyAxO1xuXHR9XG5cdGlmIChyZW1vdmVQYXJhbXNMaXN0Lmxlbmd0aCAhPT0gMCkge1xuXHRcdHJldHVybiByZW1vdmVQYXJhbXNMaXN0O1xuXHR9XG5cdHJldHVybiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogRGV0ZWN0cyBgcmVvcmRlcmAgbWV0aG9kIGFyZ3VtZW50cyB0byBhZGp1c3QgYXJyYXkgY29udGVudHMgdG8gYG5ld0l0ZW1zYC5cbiAqIERldGVybWluZXMgaW5kaWNlcyB0byBtb3ZlIHRoZSBpdGVtcyB0by5cbiAqIElmIGBuZXdJdGVtc2AgY29udGVudHMgZGlmZmVyIGZyb20gYG9sZEl0ZW1zYCBjb250ZW50cyxcbiAqIHlvdSBzaG91bGQgcHJheSBHb2RzIHRoYXQgYXBwbGljYXRpb24gc3RpbGwgd29ya3Mgd2VsbC5cbiAqXG4gKiBAcGFyYW0gb2xkSXRlbXMgT2xkIGFycmF5IGNvbnRlbnRzLlxuICogQHBhcmFtIG5ld0l0ZW1zIE5ldyBhcnJheSBjb250ZW50cy5cbiAqIEBwYXJhbSBnZXRLZXkgRnVuY3Rpb24gd2hpY2ggcmV0dXJucyB1bmlxdWUga2V5IG9mIGFuIGl0ZW0gaW4gdGhpcyBhcnJheS5cbiAqIEJ5IGRlZmF1bHQsIGlkZW50aWZpZXMgcHJpbWl0aXZlIHZhbHVlcyBhbmQgYElkZW50aWZpYWJsZWAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIGBpbmRleEFycmF5YCBhcmd1bWVudCBvZiBgcmVvcmRlcmAgbWV0aG9kLlxuICogSWYgbm8gbWV0aG9kIGNhbGwgcmVxdWlyZWQsIHJldHVybnMgdW5kZWZpbmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0UmVvcmRlcjxUPihvbGRJdGVtczogVFtdLCBuZXdJdGVtczogVFtdLCBnZXRLZXk/OiAoaXRlbTogVCkgPT4gYW55KTogbnVtYmVyW10ge1xuXHR2YXIgaW5kZXhBcnJheTogbnVtYmVyW10gPSBbXTtcblx0dmFyIG5ld0luZGV4TWFwID0gbmV3IFZpZE1hcDxULCBudW1iZXI+KGdldEtleSk7XG5cdGZvciAodmFyIGkgPSAwLCBsID0gbmV3SXRlbXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG5cdFx0bmV3SW5kZXhNYXAucHV0KG5ld0l0ZW1zW2ldLCBpKTtcblx0fVxuXHRmb3IgKHZhciBpID0gMCwgbCA9IG9sZEl0ZW1zLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuXHRcdGluZGV4QXJyYXkucHVzaChuZXdJbmRleE1hcC5nZXQob2xkSXRlbXNbaV0pKTtcblx0fVxuXHRpZiAoIWlzSWRlbnRpdHkoaW5kZXhBcnJheSkpIHtcblx0XHRyZXR1cm4gaW5kZXhBcnJheTtcblx0fVxuXHRyZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIERldGVjdHMgYHJlb3JkZXJgIG1ldGhvZCBhcmd1bWVudHMgdG8gc29ydCBhcnJheSBjb250ZW50cyBieSB0aGUgcmVzdWx0IG9mIGBjYWxsYmFja2AgY2FsbCBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIEBwYXJhbSBhcnIgQXJyYXkuXG4gKiBAcGFyYW0gY2FsbGJhY2sgSW5kZXhlciBmdW5jdGlvbi4gTXVzdCByZXR1cm4gYSBjb21wYXJhYmxlIHZhbHVlLCBjb21wYXRpYmxlIHdpdGhcbiAqIGBjbXBgLiBSZXR1cm5zIGl0ZW0gaXRzZWxmIGJ5IGRlZmF1bHQuXG4gKiBAcGFyYW0gc2NvcGUgYGNhbGxiYWNrYCBjYWxsIHNjb3BlLiBEZWZhdWx0cyB0byBhcnJheSBpdHNlbGYuXG4gKiBAcGFyYW0gb3JkZXIgU29ydGluZyBvcmRlci4gUG9zaXRpdmUgbnVtYmVyIGZvciBhc2NlbmRpbmcgc29ydGluZywgbmVnYXRpdmUgZm9yIGRlc2NlbmRpbmcgc29ydGluZy5cbiAqIEByZXR1cm5zIGBpbmRleEFycmF5YCBhcmd1bWVudCBvZiBgcmVvcmRlcmAgbWV0aG9kLlxuICogSWYgbm8gbWV0aG9kIGNhbGwgcmVxdWlyZWQsIHJldHVybnMgdW5kZWZpbmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0U29ydDxUPihhcnI6IFRbXSwgY2FsbGJhY2s/OiAoaXRlbTogVCwgaW5kZXg6IG51bWJlcikgPT4gYW55LCBzY29wZT86IGFueSwgb3JkZXI/OiBudW1iZXIpOiBudW1iZXJbXXtcblx0dmFyIGtleXMgPSBnZXRTb3J0aW5nSW5kaWNlcyhhcnIsIGNhbGxiYWNrLCBzY29wZSwgb3JkZXIpO1xuXHRpZiAoIWlzSWRlbnRpdHkoa2V5cykpIHtcblx0XHRyZXR1cm4gaW52ZXJ0KGtleXMpO1xuXHR9XG5cdHJldHVybiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogRGV0ZWN0cyBgcmVvcmRlcmAgbWV0aG9kIGFyZ3VtZW50cyB0byBzb3J0IGFycmF5IGNvbnRlbnRzIGJ5IGNvbXBhcmVyLlxuICpcbiAqIEBwYXJhbSBhcnIgQXJyYXkuXG4gKiBAcGFyYW0gY29tcGFyZSBDb21wYXJlciBmdW5jdGlvbi4gU2hvdWxkIHJldHVybiBwb3NpdGl2ZSB2YWx1ZSBpZiB0MSA+IHQyO1xuICogbmVnYXRpdmUgdmFsdWUgaWYgdDEgPCB0MjsgMCBpZiB0MSA9PSB0Mi4gRGVmYXVsdHMgdG8gYGNtcGAuXG4gKiBAcGFyYW0gc2NvcGUgYGNvbXBhcmVyYCBjYWxsIHNjb3BlLiBEZWZhdWx0cyB0byBhcnJheSBpdHNlbGYuXG4gKiBAcGFyYW0gb3JkZXIgU29ydGluZyBvcmRlci4gUG9zaXRpdmUgbnVtYmVyIGZvciBhc2NlbmRpbmcgc29ydGluZywgbmVnYXRpdmUgZm9yIGRlc2NlbmRpbmcgc29ydGluZy5cbiAqIEByZXR1cm5zIGBpbmRleEFycmF5YCBhcmd1bWVudCBvZiBgcmVvcmRlcmAgbWV0aG9kLlxuICogSWYgbm8gbWV0aG9kIGNhbGwgcmVxdWlyZWQsIHJldHVybnMgdW5kZWZpbmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0U29ydENvbXBhcmluZzxUPihhcnI6IFRbXSwgY29tcGFyZT86ICh0MTogVCwgdDI6IFQsIGkxOiBudW1iZXIsIGkyOiBudW1iZXIpID0+IG51bWJlciwgc2NvcGU/OiBhbnksIG9yZGVyPzogbnVtYmVyKTogbnVtYmVyW10ge1xuXHR2YXIga2V5cyA9IGdldFNvcnRpbmdJbmRpY2VzQ29tcGFyaW5nKGFyciwgY29tcGFyZSwgc2NvcGUsIG9yZGVyKTtcblx0aWYgKCFpc0lkZW50aXR5KGtleXMpKSB7XG5cdFx0cmV0dXJuIGludmVydChrZXlzKTtcblx0fVxuXHRyZXR1cm4gdW5kZWZpbmVkO1xufVxuIl19

/***/ }),

/***/ "../../main/dist/Class.js":
/*!*****************************************!*\
  !*** C:/jwidget/git/main/dist/Class.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");
/**
 * Introduces object aggregation support.
 * If you call `a.own(b)`, then **b** is destroyed automatically on **a** destruction.
 * You can aggregate any object implementing `Destroyable`.
 *
 * See online documentation for details.
 */
class Class {
    constructor() {
        this._ownagePool = null;
        /**
         * Instance ID.
         *
         * Auto-incrementing object unique ID. Each `IClass` instance has such an identifier.
         * Used, say, in Set as map key for quick item access.
         */
        this.iid = index_1.newIid();
    }
    /**
     * Aggregates the object. It means that the specified object is automatically destroyed
     * on this object destruction. The aggregated objects are destroyed in reverse order.
     * Returns the aggregated object, which makes it easy to use in field definition.
     *
     * @param obj Object to aggregate.
     */
    own(obj) {
        this._ownagePool = this._ownagePool || [];
        this._ownagePool.push(obj);
        return obj;
    }
    /**
     * Aggregates the object. It means that the specified object is automatically destroyed
     * on this object destruction. The aggregated objects are destroyed in reverse order.
     * Returns this object, which makes it easy to use in object instantiation.
     *
     * @param obj Object to aggregate.
     */
    owning(obj) {
        this.own(obj);
        return this;
    }
    /**
     * Class destructor invocation method. Destroys all aggregated objects and calls `destroyObject` method.
     * You must call this method explicitly from outside, because JavaScript doesn't support automatic class destructor
     * calling.
     */
    destroy() {
        // TODO: assert(this._ownagePool != null);
        const pool = this._ownagePool;
        if (pool != null) {
            this._ownagePool = null;
            for (let i = pool.length - 1; i >= 0; --i) {
                pool[i].destroy();
            }
        }
        this.destroyObject();
    }
    /**
     * Class destructor implementation. Called inside `destroy` method *after aggregated objects destruction*.
     * The logic of class instance destruction should be implemented here. If you override this method,
     * remember to call `super.destroyObject()` at the end of the method.
     */
    destroyObject() { }
}
exports.default = Class;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xhc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvQ2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBc0JFOztBQUlGLG1DQUErQjtBQUUvQjs7Ozs7O0dBTUc7QUFDSCxNQUFNLEtBQUs7SUFBWDtRQUNTLGdCQUFXLEdBQWtCLElBQUksQ0FBQztRQUUxQzs7Ozs7V0FLRztRQUNNLFFBQUcsR0FBRyxjQUFNLEVBQUUsQ0FBQztJQWtEekIsQ0FBQztJQWhEQTs7Ozs7O09BTUc7SUFDSCxHQUFHLENBQXdCLEdBQU07UUFDaEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztRQUMxQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQixPQUFPLEdBQUcsQ0FBQztJQUNaLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxNQUFNLENBQUMsR0FBZ0I7UUFDdEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNkLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxPQUFPO1FBQ04sMENBQTBDO1FBQzFDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDOUIsSUFBSSxJQUFJLElBQUksSUFBSSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1lBQ3hCLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDMUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ2xCO1NBQ0Q7UUFDRCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVEOzs7O09BSUc7SUFDTyxhQUFhLEtBQUksQ0FBQztDQUM1QjtBQUVELGtCQUFlLEtBQUssQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjAgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBEZXN0cm95YWJsZSBmcm9tICcuL0Rlc3Ryb3lhYmxlJztcbmltcG9ydCBJQ2xhc3MgZnJvbSAnLi9JQ2xhc3MnO1xuaW1wb3J0IHtuZXdJaWR9IGZyb20gJy4vaW5kZXgnO1xuXG4vKipcbiAqIEludHJvZHVjZXMgb2JqZWN0IGFnZ3JlZ2F0aW9uIHN1cHBvcnQuXG4gKiBJZiB5b3UgY2FsbCBgYS5vd24oYilgLCB0aGVuICoqYioqIGlzIGRlc3Ryb3llZCBhdXRvbWF0aWNhbGx5IG9uICoqYSoqIGRlc3RydWN0aW9uLlxuICogWW91IGNhbiBhZ2dyZWdhdGUgYW55IG9iamVjdCBpbXBsZW1lbnRpbmcgYERlc3Ryb3lhYmxlYC5cbiAqXG4gKiBTZWUgb25saW5lIGRvY3VtZW50YXRpb24gZm9yIGRldGFpbHMuXG4gKi9cbmNsYXNzIENsYXNzIGltcGxlbWVudHMgSUNsYXNzIHtcblx0cHJpdmF0ZSBfb3duYWdlUG9vbDogRGVzdHJveWFibGVbXSA9IG51bGw7XG5cblx0LyoqXG5cdCAqIEluc3RhbmNlIElELlxuXHQgKlxuXHQgKiBBdXRvLWluY3JlbWVudGluZyBvYmplY3QgdW5pcXVlIElELiBFYWNoIGBJQ2xhc3NgIGluc3RhbmNlIGhhcyBzdWNoIGFuIGlkZW50aWZpZXIuXG5cdCAqIFVzZWQsIHNheSwgaW4gU2V0IGFzIG1hcCBrZXkgZm9yIHF1aWNrIGl0ZW0gYWNjZXNzLlxuXHQgKi9cblx0cmVhZG9ubHkgaWlkID0gbmV3SWlkKCk7XG5cblx0LyoqXG5cdCAqIEFnZ3JlZ2F0ZXMgdGhlIG9iamVjdC4gSXQgbWVhbnMgdGhhdCB0aGUgc3BlY2lmaWVkIG9iamVjdCBpcyBhdXRvbWF0aWNhbGx5IGRlc3Ryb3llZFxuXHQgKiBvbiB0aGlzIG9iamVjdCBkZXN0cnVjdGlvbi4gVGhlIGFnZ3JlZ2F0ZWQgb2JqZWN0cyBhcmUgZGVzdHJveWVkIGluIHJldmVyc2Ugb3JkZXIuXG5cdCAqIFJldHVybnMgdGhlIGFnZ3JlZ2F0ZWQgb2JqZWN0LCB3aGljaCBtYWtlcyBpdCBlYXN5IHRvIHVzZSBpbiBmaWVsZCBkZWZpbml0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0gb2JqIE9iamVjdCB0byBhZ2dyZWdhdGUuXG5cdCAqL1xuXHRvd248VCBleHRlbmRzIERlc3Ryb3lhYmxlPihvYmo6IFQpOiBUIHtcblx0XHR0aGlzLl9vd25hZ2VQb29sID0gdGhpcy5fb3duYWdlUG9vbCB8fCBbXTtcblx0XHR0aGlzLl9vd25hZ2VQb29sLnB1c2gob2JqKTtcblx0XHRyZXR1cm4gb2JqO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFnZ3JlZ2F0ZXMgdGhlIG9iamVjdC4gSXQgbWVhbnMgdGhhdCB0aGUgc3BlY2lmaWVkIG9iamVjdCBpcyBhdXRvbWF0aWNhbGx5IGRlc3Ryb3llZFxuXHQgKiBvbiB0aGlzIG9iamVjdCBkZXN0cnVjdGlvbi4gVGhlIGFnZ3JlZ2F0ZWQgb2JqZWN0cyBhcmUgZGVzdHJveWVkIGluIHJldmVyc2Ugb3JkZXIuXG5cdCAqIFJldHVybnMgdGhpcyBvYmplY3QsIHdoaWNoIG1ha2VzIGl0IGVhc3kgdG8gdXNlIGluIG9iamVjdCBpbnN0YW50aWF0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0gb2JqIE9iamVjdCB0byBhZ2dyZWdhdGUuXG5cdCAqL1xuXHRvd25pbmcob2JqOiBEZXN0cm95YWJsZSk6IHRoaXMge1xuXHRcdHRoaXMub3duKG9iaik7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogQ2xhc3MgZGVzdHJ1Y3RvciBpbnZvY2F0aW9uIG1ldGhvZC4gRGVzdHJveXMgYWxsIGFnZ3JlZ2F0ZWQgb2JqZWN0cyBhbmQgY2FsbHMgYGRlc3Ryb3lPYmplY3RgIG1ldGhvZC5cblx0ICogWW91IG11c3QgY2FsbCB0aGlzIG1ldGhvZCBleHBsaWNpdGx5IGZyb20gb3V0c2lkZSwgYmVjYXVzZSBKYXZhU2NyaXB0IGRvZXNuJ3Qgc3VwcG9ydCBhdXRvbWF0aWMgY2xhc3MgZGVzdHJ1Y3RvclxuXHQgKiBjYWxsaW5nLlxuXHQgKi9cblx0ZGVzdHJveSgpIHtcblx0XHQvLyBUT0RPOiBhc3NlcnQodGhpcy5fb3duYWdlUG9vbCAhPSBudWxsKTtcblx0XHRjb25zdCBwb29sID0gdGhpcy5fb3duYWdlUG9vbDtcblx0XHRpZiAocG9vbCAhPSBudWxsKSB7XG5cdFx0XHR0aGlzLl9vd25hZ2VQb29sID0gbnVsbDtcblx0XHRcdGZvciAobGV0IGkgPSBwb29sLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG5cdFx0XHRcdHBvb2xbaV0uZGVzdHJveSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLmRlc3Ryb3lPYmplY3QoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDbGFzcyBkZXN0cnVjdG9yIGltcGxlbWVudGF0aW9uLiBDYWxsZWQgaW5zaWRlIGBkZXN0cm95YCBtZXRob2QgKmFmdGVyIGFnZ3JlZ2F0ZWQgb2JqZWN0cyBkZXN0cnVjdGlvbiouXG5cdCAqIFRoZSBsb2dpYyBvZiBjbGFzcyBpbnN0YW5jZSBkZXN0cnVjdGlvbiBzaG91bGQgYmUgaW1wbGVtZW50ZWQgaGVyZS4gSWYgeW91IG92ZXJyaWRlIHRoaXMgbWV0aG9kLFxuXHQgKiByZW1lbWJlciB0byBjYWxsIGBzdXBlci5kZXN0cm95T2JqZWN0KClgIGF0IHRoZSBlbmQgb2YgdGhlIG1ldGhvZC5cblx0ICovXG5cdHByb3RlY3RlZCBkZXN0cm95T2JqZWN0KCkge31cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xhc3M7XG4iXX0=

/***/ }),

/***/ "../../main/dist/Component.js":
/*!*********************************************!*\
  !*** C:/jwidget/git/main/dist/Component.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "../../node_modules/jquery/dist/jquery.js"));
const Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));
const ComponentBindable_1 = __importDefault(__webpack_require__(/*! ./component/ComponentBindable */ "../../main/dist/component/ComponentBindable.js"));
const ComponentChildren_1 = __importDefault(__webpack_require__(/*! ./component/ComponentChildren */ "../../main/dist/component/ComponentChildren.js"));
const ComponentCollection_1 = __importDefault(__webpack_require__(/*! ./component/ComponentCollection */ "../../main/dist/component/ComponentCollection.js"));
const ComponentList_1 = __importDefault(__webpack_require__(/*! ./component/ComponentList */ "../../main/dist/component/ComponentList.js"));
const DictionaryUtils = __importStar(__webpack_require__(/*! ./DictionaryUtils */ "../../main/dist/DictionaryUtils.js"));
const DomTemplate_1 = __importDefault(__webpack_require__(/*! ./DomTemplate */ "../../main/dist/DomTemplate.js"));
const DomUtils = __importStar(__webpack_require__(/*! ./DomUtils */ "../../main/dist/DomUtils.js"));
const HtmlTemplate_1 = __importDefault(__webpack_require__(/*! ./HtmlTemplate */ "../../main/dist/HtmlTemplate.js"));
const index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");
const List_1 = __importDefault(__webpack_require__(/*! ./List */ "../../main/dist/List.js"));
const Map_1 = __importDefault(__webpack_require__(/*! ./Map */ "../../main/dist/Map.js"));
const Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));
const Set_1 = __importDefault(__webpack_require__(/*! ./Set */ "../../main/dist/Set.js"));
const StringUtils = __importStar(__webpack_require__(/*! ./StringUtils */ "../../main/dist/StringUtils.js"));
/**
 * Base class of UI component.
 *
 * Features:
 *
 * - Rendering by HTML template.
 * - Direct access to component elements.
 * - jQuery interface for element manipulations.
 * - Convenient API for data binding and child component management.
 */
class Component extends Class_1.default {
    /**
     * Plain objects of this class can be constructed. They can be used as dummy components or simple containers.
     */
    constructor() {
        super();
        this._parent = null;
        this._el = null;
        this._children = null;
        this._wasAfterAppend = false;
        this.__elements = null;
        this.__bindables = null;
        this.__arrays = null;
        this.__collections = null;
        if (!Component.prototype._template) {
            Component.prototype._template = new HtmlTemplate_1.default('<div></div>');
        }
    }
    /**
     * Parent component. The property is available from component rendering beginning.
     */
    get parent() {
        return this._parent;
    }
    /**
     * Root element. Field is available from component rendering beginning.
     */
    get el() {
        return this._el;
    }
    /**
     * Mutable named child components. Use this map to add child components in place of
     * elements with corresponding `jwid`. Field is available from component rendering beginning.
     */
    get children() {
        return this._children;
    }
    /**
     * Component template.
     */
    get template() {
        return this._template;
    }
    /**
     * @hidden
     */
    get _elements() {
        return this.__elements;
    }
    /**
     * @hidden
     */
    get _bindables() {
        return this.__bindables;
    }
    /**
     * @hidden
     */
    get _arrays() {
        return this.__arrays;
    }
    /**
     * @hidden
     */
    get _collections() {
        return this.__collections;
    }
    /**
     * @inheritDoc
     */
    destroy() {
        if (this._parent) {
            throw new Error("JW.UI.Component.destroy must be used for root and detached components only");
        }
        if (this._wasAfterAppend) {
            this.releaseDom();
        }
        if (this._el) {
            DomUtils.remove(this._el[0]);
            DictionaryUtils.forEach(this.__collections, index_1.destroy);
            this.__collections = null;
            DictionaryUtils.forEach(this.__arrays, index_1.destroy);
            this.__arrays = null;
            DictionaryUtils.forEach(this.__bindables, index_1.destroy);
            this.__bindables = null;
            this._children.unrender();
            this.unrender();
            this._children.destroy();
            this._children = null;
            this._el.remove();
        }
        this.__elements = null;
        this._el = null;
        this.afterDestroy();
        super.destroy();
    }
    /**
     * Component life stage method. Called during component rendering after HTML template parsing and initialization
     * of references to all elements of the template. Called before `render<ChildId>` methods and
     * `afterRender` method. It is convenient to perform some preliminary action here before child
     * components creation. But you are already able to create child components here.
     * Call `super.beforeRender()` at the first line of the method.
     */
    beforeRender() {
    }
    /**
     * Component life stage method. Called after `beforeRender` method and `render<ChildId>` methods.
     * You should assign all elements' attributes here, create child components,
     * bind to events and fill component with interactivity.
     * Call `super.afterRender()` at the first line of the method.
     */
    afterRender() {
    }
    /**
     * Component life stage method. Called after first-time component appearing in HTML DOM and UI components tree.
     * Component layouting should be performed here (element size computing).
     * Component rendering is finished here.
     * Call `super.afterAppend()` at the first line of the method.
     */
    afterAppend() {
    }
    /**
     * Component life stage method. Called during component destruction before `unrender` method call.
     * Everything that was performed in `afterAppend` method should be reverted here.
     * Call `super.releaseDom()` at the last line of the method.
     */
    releaseDom() {
    }
    /**
     * Component life stage method. Called during component destruction before `afterDestroy` method call.
     * Everything that was performed during component
     * rendering should be reverted here. All child components are already removed by framework
     * before this method call, but the components themselves are not destroyed. You must destroy them explicitly.
     * Call `super.unrender()` at the last line of the method.
     */
    unrender() {
    }
    /**
     * Component life stage method. Called during component destruction after `unrender` method call.
     * Everything that was performed during component construction should be reverted here.
     * Call `super.afterDestroy()` at the last line of the method.
     */
    afterDestroy() {
    }
    /**
     * Virtual method to render the component document fragment.
     * By default, renders by template.
     */
    createElement() {
        return this._template.createElement();
    }
    /**
     * Selects component rendering strategy. This method is needed only in very rare cases.
     * By default, component is rendered outside of DOM based on `main` HTML
     * template specified by `template` annotation. You can change this by `using` method call.
     */
    using(value) {
        this._template =
            (typeof value === "string") ? new HtmlTemplate_1.default(value) :
                (value instanceof HtmlTemplate_1.default) ? value : new DomTemplate_1.default(value);
        return this;
    }
    /**
     * Renders the component. Call this method to initialize references to all elements of component and create
     * child components.
     */
    render() {
        if (this._el) {
            return this;
        }
        const output = this.createElement();
        this._el = jquery_1.default(output.root);
        this.__elements = DictionaryUtils.map(output.groups, function (x) {
            return jquery_1.default(x);
        });
        this._children = new ComponentChildren_1.default(this);
        this.__bindables = {};
        this.__arrays = {};
        this.__collections = {};
        this.beforeRender();
        const elements = index_1.apply({}, this.__elements);
        for (const jwId in elements) {
            let element = elements[jwId];
            const aliveElements = Array.prototype.filter.call(element, (el) => {
                return DomUtils.inEl(el, this._el[0]);
            });
            if (aliveElements.length === 0) {
                delete this.__elements[jwId];
                continue;
            }
            if (aliveElements.length !== element.length) {
                element = jquery_1.default(aliveElements);
                this.__elements[jwId] = element;
            }
            const jwIdCamel = StringUtils.camel(jwId);
            const renderMethodName = "render" + StringUtils.capitalize(jwIdCamel);
            if (typeof this[renderMethodName] === "function") {
                const result = this[renderMethodName](element);
                if (jwId === "root") {
                    if (result instanceof List_1.default) {
                        this.addList(result, jwId);
                    }
                    else if (result instanceof Map_1.default || result instanceof Set_1.default) {
                        this.addCollection(result, jwId);
                    }
                }
                else {
                    if (result instanceof Component) {
                        this._children.put(jwId, result);
                    }
                    else if (result instanceof Property_1.default) {
                        this.addBindable(result, jwId);
                    }
                    else if (result instanceof List_1.default) {
                        this.addList(result, jwId);
                    }
                    else if (result instanceof Map_1.default || result instanceof Set_1.default) {
                        this.addCollection(result, jwId);
                    }
                    else if (result === false) {
                        this.removeElement(jwId);
                    }
                }
            }
        }
        this.afterRender();
        if (this._template.requiresAfterAppend) {
            this._afterAppend();
        }
        return this;
    }
    /**
     * Renders component into an element. Use it to render root component only: its children must be rendered
     * using `children`, `addList`, `addCollection`, `addBindable` members.
     *
     * @param el Element to render component into.
     */
    renderTo(el) {
        this.render();
        jquery_1.default(el)[0].appendChild(this._el[0]);
        this._afterAppend();
        return this;
    }
    /**
     * Render component in place of an element. Use it to render root component only: its children must be rendered
     * using `children`, `addList`, `addCollection`, `addBindable` members.
     *
     * @param el Element to render component in place of.
     */
    renderAs(el) {
        this.render();
        DomUtils.replace(jquery_1.default(el)[0], this._el[0], true);
        this._afterAppend();
        return this;
    }
    /**
     * Remove the component from DOM. Can be used for root component only (which was added via `renderTo` or `renderAs`
     * method). All child components should be removed using `children` map or owning object deletion.
     */
    remove() {
        if (this._parent) {
            throw new Error("JW.UI.Component.remove must be used for root components only");
        }
        DomUtils.remove(this._el[0]);
        return this;
    }
    /**
     * Get element by its `jwid`.
     * @param id `jwid` of the element.
     */
    getElement(id) {
        return this.__elements[id];
    }
    /**
     * Remove element by `jwid`. Element gets removed from DOM and destroyed. It is then impossible to get it by `getElement` method.
     * @param id `jwid` of the element.
     */
    removeElement(id) {
        const el = this.__elements[id];
        if (!el) {
            return this;
        }
        el.remove();
        delete this.__elements[id];
        return this;
    }
    /**
     * Adds child component and synchronizes the component with the bindable.
     *
     * @param component Child component bindable.
     * @param id `jwid` of element to replace.
     */
    addBindable(component, id) {
        return new ComponentBindable_1.default(this, component, id);
    }
    /**
     * Adds list of child components and synchronizes the component with it. As opposed to `addCollection` method,
     * keeps component order. However, it works slower and accepts list only.
     *
     * @param source Child component list.
     * @param el `jwid` of element to add child components into. Defaults to root element (`el`) of component.
     */
    addList(source, el) {
        return new ComponentList_1.default(this, source, this._getContainerElement(el));
    }
    /**
     * Add child component collection into an element. As opposed to `addArray` method, ignores
     * component order. However, it works faster and accepts any kind of collection, not array only.
     *
     * @param source Child component collection.
     * @param el `jwid` of element to add child components into. Defaults to root element (`el`) of component.
     */
    addCollection(source, el) {
        return new ComponentCollection_1.default(this, source, this._getContainerElement(el));
    }
    /**
     * @hidden
     */
    _afterAppend() {
        if (this._wasAfterAppend || !this._el) {
            return;
        }
        if (this._parent && !this._parent._wasAfterAppend) {
            return;
        }
        if (!this._parent && !DomUtils.inDom(this._el[0])) {
            return;
        }
        this._wasAfterAppend = true;
        this.afterAppend();
        this._children.forEach(DomUtils._afterAppend);
        DictionaryUtils.forEach(this.__arrays, DomUtils._afterAppend);
        DictionaryUtils.forEach(this.__collections, DomUtils._afterAppend);
    }
    /**
     * @hidden
     */
    _initChild(component) {
        component.render();
        component._parent = this;
    }
    /**
     * @hidden
     */
    _doneChild(component) {
        component._parent = null;
    }
    /**
     * @hidden
     */
    _getContainerElement(el) {
        return (el === undefined) ? this._el :
            (typeof el === "string") ? this.__elements[el] : jquery_1.default(el);
    }
}
exports.default = Component;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "../../main/dist/Destructor.js":
/*!**********************************************!*\
  !*** C:/jwidget/git/main/dist/Destructor.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Destroyable object that calls the specified callback on destruction.
 */
class Destructor {
    /**
     * Creates a destructor instance.
     * @param callback Callback to call on destruction.
     * @param scope `callback` call scope.
     */
    constructor(callback, scope) {
        this.callback = callback;
        this.scope = scope;
    }
    destroy() {
        if (this.callback) {
            this.callback.call(this.scope || this);
        }
    }
}
exports.default = Destructor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVzdHJ1Y3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9EZXN0cnVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXNCRTs7QUFJRjs7R0FFRztBQUNILE1BQXFCLFVBQVU7SUFDOUI7Ozs7T0FJRztJQUNILFlBQW9CLFFBQW1CLEVBQVUsS0FBVztRQUF4QyxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBTTtJQUFHLENBQUM7SUFFaEUsT0FBTztRQUNOLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDO1NBQ3ZDO0lBQ0YsQ0FBQztDQUNEO0FBYkQsNkJBYUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgRGVzdHJveWFibGUgZnJvbSAnLi9EZXN0cm95YWJsZSc7XG5cbi8qKlxuICogRGVzdHJveWFibGUgb2JqZWN0IHRoYXQgY2FsbHMgdGhlIHNwZWNpZmllZCBjYWxsYmFjayBvbiBkZXN0cnVjdGlvbi5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVzdHJ1Y3RvciBpbXBsZW1lbnRzIERlc3Ryb3lhYmxlIHtcblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBkZXN0cnVjdG9yIGluc3RhbmNlLlxuXHQgKiBAcGFyYW0gY2FsbGJhY2sgQ2FsbGJhY2sgdG8gY2FsbCBvbiBkZXN0cnVjdGlvbi5cblx0ICogQHBhcmFtIHNjb3BlIGBjYWxsYmFja2AgY2FsbCBzY29wZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgY2FsbGJhY2s6ICgpID0+IGFueSwgcHJpdmF0ZSBzY29wZT86IGFueSkge31cblxuXHRkZXN0cm95KCkge1xuXHRcdGlmICh0aGlzLmNhbGxiYWNrKSB7XG5cdFx0XHR0aGlzLmNhbGxiYWNrLmNhbGwodGhpcy5zY29wZSB8fCB0aGlzKTtcblx0XHR9XG5cdH1cbn1cbiJdfQ==

/***/ }),

/***/ "../../main/dist/DictionaryUtils.js":
/*!***************************************************!*\
  !*** C:/jwidget/git/main/dist/DictionaryUtils.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInverted = exports.getRemovedKeys = exports.detectReindex = exports.detectSplice = exports.tryReindex = exports.trySplice = exports.tryClear = exports.trySetKey = exports.tryRemoveAll = exports.tryRemove = exports.tryPutAll = exports.tryPut = exports.equal = exports.reduce = exports.index = exports.toArray = exports.toSortedComparing = exports.toSorted = exports.getSortingKeysComparing = exports.getSortingKeys = exports.map = exports.count = exports.filter = exports.forEach = exports.some = exports.every = exports.clone = exports.reindex = exports.splice = exports.clear = exports.setKey = exports.removeItems = exports.removeItem = exports.removeAllVerbose = exports.removeAll = exports.remove = exports.putAllVerbose = exports.putAll = exports.put = exports.minKeyComparing = exports.minComparing = exports.minKey = exports.min = exports.maxKeyComparing = exports.maxComparing = exports.maxKey = exports.max = exports.findKey = exports.find = exports.keyOf = exports.contains = exports.isEmpty = exports.getLength = exports.getFirstKey = exports.getFirst = void 0;
const index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");
const internal_1 = __webpack_require__(/*! ./internal */ "../../main/dist/internal.js");
/**
 * Returns some item in dictionary.
 *
 * @param dict Dictionary.
 * @returns Some item. If dictionary is empty, returns undefined.
 */
function getFirst(dict) {
    return dict[getFirstKey(dict)];
}
exports.getFirst = getFirst;
/**
 * Returns key of some item in dictionary.
 *
 * @param dict Dictionary.
 * @returns Key of some item. If dictionary is empty, returns undefined.
 */
function getFirstKey(dict) {
    for (let key in dict) {
        return key;
    }
    return undefined;
}
exports.getFirstKey = getFirstKey;
/**
 * Returns count of items in dictionary.
 *
 * @param dict Dictionary.
 * @returns Count of items in dictionary.
 */
function getLength(dict) {
    let length = 0;
    for (let _key in dict) {
        ++length;
    }
    return length;
}
exports.getLength = getLength;
/**
 * Checks if dictionary is empty.
 *
 * @param dict Dictionary.
 * @returns Dictionary has no keys/items.
 */
function isEmpty(dict) {
    for (let _key in dict) {
        return false;
    }
    return true;
}
exports.isEmpty = isEmpty;
/**
 * Checks if the item exists in dictionary.
 *
 * @param dict Dictionary.
 * @param item Item to find.
 * @returns Item exists in dictionary.
 */
function contains(dict, item) {
    return !every(dict, function (v) {
        return item !== v;
    });
}
exports.contains = contains;
/**
 * Returns key of item in dictionary.
 *
 * @param dict Dictionary.
 * @param item Item to find.
 * @returns Key of item. If item doesn't exist, returns undefined.
 */
function keyOf(dict, item) {
    return findKey(dict, function (v) {
        return item === v;
    });
}
exports.keyOf = keyOf;
/**
 * Finds item matching criteria.
 *
 * Returns the first item for which callback returns truthy value.
 *
 * Algorithms iterates items consequently, and stops after first item matching the criteria.
 *
 * @param dict Dictionary.
 * @param callback Criteria callback.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 * @returns Found item or undefined.
 */
function find(dict, callback, scope) {
    let result = undefined;
    every(dict, function (item, key) {
        if (callback.call(scope, item, key)) {
            result = item;
            return false;
        }
        return true;
    });
    return result;
}
exports.find = find;
/**
 * Finds item matching criteria.
 *
 * Returns key of first item for which callback returns truthy value.
 *
 * Algorithms iterates items consequently, and stops after the first item matching the criteria.
 *
 * @param dict Dictionary.
 * @param callback Criteria callback.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 * @returns Found item key or undefined.
 */
function findKey(dict, callback, scope) {
    let result = undefined;
    every(dict, function (item, key) {
        if (callback.call(scope, item, key)) {
            result = key;
            return false;
        }
        return true;
    });
    return result;
}
exports.findKey = findKey;
/**
 * Returns the dictionary item which callback returns the highest (or lowest) value for.
 *
 * @param dict Dictionary.
 * @param callback Returns a comparable value, compatible with `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 * @param order Pass positive order to find the highest value, and negative to find the lowest one.
 * @returns Maximum dictionary item.
 */
function max(dict, callback, scope, order = 1) {
    return dict[maxKey(dict, callback, scope, order)];
}
exports.max = max;
/**
 * Returns key of the dictionary item which callback returns the highest (or lowest) value for.
 *
 * @param dict Dictionary.
 * @param callback Returns a comparable value, compatible with `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 * @param order Pass positive order to find the highest value, and negative to find the lowest one.
 * @returns Item key.
 */
function maxKey(dict, callback, scope, order = 1) {
    callback = callback || internal_1.identity;
    scope = scope || dict;
    let result;
    let max;
    for (let key in dict) {
        const item = callback.call(scope, dict[key], key);
        if ((result === undefined) || (order > 0 && max < item) || (order < 0 && max > item)) {
            result = key;
            max = item;
        }
    }
    return result;
}
exports.maxKey = maxKey;
/**
 * Returns the highest (or lowest) dictionary item in terms of the specified comparer function.
 *
 * @param dict Dictionary.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `compare` call scope. Defaults to dictionary itself.
 * @param order Pass positive order to find the highest value, and negative to find the lowest one.
 * @returns Dictionary item.
 */
function maxComparing(dict, compare, scope, order = 1) {
    return dict[maxKeyComparing(dict, compare, scope, order)];
}
exports.maxComparing = maxComparing;
/**
 * Returns key of the highest (or lowest) dictionary item in terms of the specified comparer function.
 *
 * @param dict Dictionary.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `compare` call scope. Defaults to dictionary itself.
 * @param order Pass positive order to find the highest value, and negative to find the lowest one.
 * @returns Item key.
 */
function maxKeyComparing(dict, compare, scope, order = 1) {
    compare = compare || internal_1.cmpPrimitives;
    scope = scope || dict;
    let result = undefined;
    for (let key in dict) {
        if (result === undefined || order * compare.call(scope, dict[result], dict[key], result, key) < 0) {
            result = key;
        }
    }
    return result;
}
exports.maxKeyComparing = maxKeyComparing;
/**
 * Returns the dictionary item which callback returns the lowest (or highest) value for.
 *
 * @param dict Dictionary.
 * @param callback Returns a comparable value, compatible with `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 * @param order Pass positive order to find the lowest value, and negative to find the highest one.
 * @returns Dictionary item.
 */
function min(dict, callback, scope, order = 1) {
    return max(dict, callback, scope, -order);
}
exports.min = min;
/**
 * Returns index of the dictionary item which callback returns the lowest (or highest) value for.
 *
 * @param dict Dictionary.
 * @param callback Returns a comparable value, compatible with `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 * @param order Pass positive order to find the lowest value, and negative to find the highest one.
 * @returns Item key.
 */
function minKey(dict, callback, scope, order = 1) {
    return maxKey(dict, callback, scope, -order);
}
exports.minKey = minKey;
/**
 * Returns the lowest (or highest) dictionary item in terms of the specified comparer function.
 *
 * @param dict Dictionary.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `compare` call scope. Defaults to dictionary itself.
 * @param order Pass positive order to find the lowest value, and negative to find the highest one.
 * @returns Dictionary item.
 */
function minComparing(dict, compare, scope, order = 1) {
    return maxComparing(dict, compare, scope, -order);
}
exports.minComparing = minComparing;
/**
 * Returns index of the lowest (or highest) dictionary item in terms of the specified comparer function.
 *
 * @param dict Dictionary.
 * @param compare Comparer function. Should return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `compare` call scope. Defaults to dictionary itself.
 * @param order Pass positive order to find the lowest value, and negative to find the highest one.
 * @returns Item key.
 */
function minKeyComparing(dict, compare, scope, order = 1) {
    return maxKeyComparing(dict, compare, scope, -order);
}
exports.minKeyComparing = minKeyComparing;
/**
 * Replaces item with specified key. If dictionary doesn't contain such key, new item is added.
 *
 * @param dict Dictionary.
 * @param key Key.
 * @param item Item.
 * @returns The replaced item.
 */
function put(dict, key, item) {
    const result = tryPut(dict, key, item);
    return (result !== undefined) ? result.value : dict[key];
}
exports.put = put;
/**
 * Adds or replaces a bunch of items.
 *
 * @param dict Dictionary.
 * @param items Items with corresponding keys.
 */
function putAll(dict, items) {
    for (let key in items) {
        dict[key] = items[key];
    }
}
exports.putAll = putAll;
/**
 * Low-performance alternative to `putAll` with verbose result set.
 *
 * @param dict Dictionary.
 * @param items Items with corresponding keys.
 * @returns Result of internal `splice` method call. Nevers returns null or undefined.
 */
function putAllVerbose(dict, items) {
    const spliceResult = tryPutAll(dict, items);
    return (spliceResult !== undefined) ? spliceResult : { removedItems: {}, addedItems: {} };
}
exports.putAllVerbose = putAllVerbose;
/**
 * Removes item with specified key if it exists in dictionary.
 *
 * @param dict Dictionary.
 * @param key Key of item to remove.
 * @returns The removed dictionary item.
 */
function remove(dict, key) {
    return tryRemove(dict, key);
}
exports.remove = remove;
/**
 * Removes a bunch of items from dictionary.
 *
 * @param dict Dictionary.
 * @param keys Keys of items to remove.
 */
function removeAll(dict, keys) {
    for (let i = 0, l = keys.length; i < l; ++i) {
        delete dict[keys[i]];
    }
}
exports.removeAll = removeAll;
/**
 * Low-performance alternative to `removeAll` with verbose result set.
 *
 * @param dict Dictionary.
 * @param keys Keys of items to remove.
 * @returns The removed items. Never returns null or undefined.
 */
function removeAllVerbose(dict, keys) {
    const items = tryRemoveAll(dict, keys);
    return (items !== undefined) ? items : {};
}
exports.removeAllVerbose = removeAllVerbose;
/**
 * Removes an item from the dictionary.
 *
 * @param dict Dictionary.
 * @param item Item to remove.
 * @returns Item key in the dictionary.
 */
function removeItem(dict, item) {
    const key = keyOf(dict, item);
    if (key !== undefined) {
        tryRemove(dict, key);
    }
    return key;
}
exports.removeItem = removeItem;
/**
 * Removes all occurrences of items in dictionary.
 *
 * @param dict Dictionary.
 * @param items Items to remove.
 * @param getKey Function which returns unique key of an item in this dictionary.
 * By default, identifies primitive values and `Identifiable` objects.
 */
function removeItems(dict, items, getKey) {
    const itemSet = internal_1.VidSet.fromArray(items, getKey);
    const newItems = filter(dict, function (item) {
        return !itemSet.contains(item);
    });
    tryClear(dict);
    tryPutAll(dict, newItems);
}
exports.removeItems = removeItems;
/**
 * Changes item key in dictionary. If dictionary doesn't contain `oldKey` or contains `newKey`, it causes an error.
 *
 * @param dict Dictionary.
 * @param oldKey Old item key.
 * @param newKey New item key.
 * @returns The moved item.
 */
function setKey(dict, oldKey, newKey) {
    const item = trySetKey(dict, oldKey, newKey);
    return (item !== undefined) ? item : dict[newKey];
}
exports.setKey = setKey;
/**
 * Clears dictionary.
 *
 * @param dict Dictionary.
 * @returns Old dictionary contents. Never returns null or undefined.
 */
function clear(dict) {
    const result = tryClear(dict);
    return (result !== undefined) ? result : {};
}
exports.clear = clear;
/**
 * Removes and adds bunches of items in dictionary. Universal optimized granular operation of removal/insertion.
 *
 * @param dict Dictionary.
 * @param removedKeys Keys of items to remove.
 * @param updatedItems Items to add/replace.
 * @returns Splice result. Never returns null or undefined.
 */
function splice(dict, removedKeys, updatedItems) {
    const spliceResult = trySplice(dict, removedKeys, updatedItems);
    return (spliceResult !== undefined) ? spliceResult : { removedItems: {}, addedItems: {} };
}
exports.splice = splice;
/**
 * Changes item keys in dictionary.
 *
 * @param dict Dictionary.
 * @param keyMap Key mapping. Item with key `x` will gain key `keyMap[x]`.
 * It is enough to pass only changed keys, but unchanged keys or unexisting keys are acceptable as well.
 * @returns Map of changed keys. Never returns null or undefined.
 */
function reindex(dict, keyMap) {
    const result = tryReindex(dict, keyMap);
    return (result !== undefined) ? result : {};
}
exports.reindex = reindex;
/**
 * Returns a shallow copy of the dictionary.
 *
 * @param dict Dictionary.
 * @returns Shallow copy of dictionary.
 */
function clone(dict) {
    const result = {};
    for (let key in dict) {
        result[key] = dict[key];
    }
    return result;
}
exports.clone = clone;
/**
 * Matches all items against criteria.
 *
 * Returns true if callback returns truthy value for all dictionary items.
 *
 * Algorithms iterates items consequently, and stops after the first item not matching the criteria.
 *
 * @param dict Dictionary.
 * @param callback Criteria callback.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 */
function every(dict, callback, scope) {
    scope = scope || dict;
    for (let key in dict) {
        if (!callback.call(scope, dict[key], key)) {
            return false;
        }
    }
    return true;
}
exports.every = every;
/**
 * Matches each item against criteria.
 *
 * Returns true if callback returns truthy value for some dictionary item.
 *
 * Algorithms iterates items consequently, and stops after the first item matching the criteria.
 *
 * @param dict Dictionary.
 * @param callback Criteria callback.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 */
function some(dict, callback, scope) {
    return !every(dict, function (item, key) {
        return !callback.call(scope, item, key);
    });
}
exports.some = some;
/**
 * Iterates dictionary items. Calls specified function for all items.
 *
 * @param dict Dictionary.
 * @param callback Callback function.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 */
function forEach(dict, callback, scope) {
    every(dict, function (item, key) {
        callback.call(scope, item, key);
        return true;
    });
}
exports.forEach = forEach;
/**
 * Filters dictionary by criteria.
 *
 * Builds new dictionary, consisting of items for which callback returns thuthy value.
 *
 * @param dict Dictionary.
 * @param callback Criteria callback.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 * @returns Filtered dictionary.
 */
function filter(dict, callback, scope) {
    const result = {};
    every(dict, function (item, key) {
        if (callback.call(scope, item, key)) {
            result[key] = item;
        }
        return true;
    });
    return result;
}
exports.filter = filter;
/**
 * Counts the items matching criteria.
 *
 * Returns the number of items for which callback returns thuthy value.
 *
 * @param dict Dictionary.
 * @param callback Criteria callback.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 * @returns Number of items.
 */
function count(dict, callback, scope) {
    let result = 0;
    every(dict, function (item, key) {
        if (callback.call(scope, item, key)) {
            ++result;
        }
        return true;
    });
    return result;
}
exports.count = count;
/**
 * Maps dictionary items.
 *
 * Builds new dictionary, containing results of callback call for each dictionary item.
 *
 * @param dict Dictionary.
 * @param callback Mapping function.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 * @returns Mapped dictionary.
 */
function map(dict, callback, scope) {
    const result = {};
    every(dict, function (item, key) {
        result[key] = callback.call(scope, item, key);
        return true;
    });
    return result;
}
exports.map = map;
/**
 * Returns keys of sorted items.
 *
 * Builds array of item keys, sorted by the result of callback call for each item.
 *
 * @param dict Dictionary.
 * @param callback Indexer function. Must return a comparable value, compatible with
 * `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to dictionary itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 * @returns Array of indices.
 */
function getSortingKeys(dict, callback, scope, order) {
    callback = callback || function (x) { return x; };
    order = order || 1;
    const pairs = [];
    every(dict, function (item, key) {
        pairs.push([key, callback.call(scope, item, key)]);
        return true;
    });
    pairs.sort(function (x, y) {
        return order * index_1.cmp(x[1], y[1]);
    });
    return pairs.map(function (pair) {
        return pair[0];
    });
}
exports.getSortingKeys = getSortingKeys;
/**
 * Returns keys of sorted items.
 *
 * Builds array of item keys, sorted by comparer.
 *
 * @param dict Dictionary.
 * @param compare Comparer function. Must return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `comparer` call scope. Defaults to dictionary itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 * @returns Array of keys.
 */
function getSortingKeysComparing(dict, compare, scope, order) {
    compare = compare || index_1.cmp;
    order = order || 1;
    const pairs = [];
    every(dict, function (item, key) {
        pairs.push([key, item]);
        return true;
    }, scope);
    pairs.sort(function (x, y) {
        return order * compare.call(scope, x[1], y[1], x[0], y[0]);
    });
    return pairs.map(function (pair) {
        return pair[0];
    });
}
exports.getSortingKeysComparing = getSortingKeysComparing;
/**
 * Builds and returns a new array consisting of dictionary items sorted by the result of
 * callback call for each item.
 *
 * @param dict Dictionary.
 * @param callback Indexer function. Must return a comparable value, compatible with
 * `cmp`. Returns item itself by default.
 * @param scope `callback` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 * @returns Sorted array.
 */
function toSorted(dict, callback, scope, order) {
    return getSortingKeys(dict, callback, scope, order).map(function (key) {
        return dict[key];
    });
}
exports.toSorted = toSorted;
/**
 * Builds and returns a new array consisting of dictionary items sorted by comparer.
 *
 * @param dict Dictionary.
 * @param compare Comparer function. Must return positive value if t1 > t2;
 * negative value if t1 < t2; 0 if t1 == t2. Defaults to `cmp`.
 * @param scope `comparer` call scope. Defaults to array itself.
 * @param order Sorting order. Positive number for ascending sorting, negative for descending sorting.
 * @returns Sorted array.
 */
function toSortedComparing(dict, compare, scope, order) {
    return getSortingKeysComparing(dict, compare, scope, order).map(function (key) {
        return dict[key];
    });
}
exports.toSortedComparing = toSortedComparing;
/**
 * Converts dictionary to array.
 *
 * Builds new array consisting of dictionary items in arbitrary order.
 *
 * @param dict Dictionary.
 * @returns Dictionary items.
 */
function toArray(dict) {
    const result = [];
    every(dict, function (item) {
        result.push(item);
        return true;
    });
    return result;
}
exports.toArray = toArray;
/**
 * Indexes dictionary items.
 *
 * Builds new dictionary by rule: key is the result of indexer function call, value is the corresponding item.
 *
 * @param dict Dictionary.
 * @param callback Indexer function.
 * @param scope `callback` call scope. Defaults to array itself.
 * @returns Dictionary index.
 */
function index(dict, callback, scope) {
    const result = {};
    every(dict, function (item, oldKey) {
        const key = callback.call(scope, item, oldKey);
        if (key != null) {
            result[key] = item;
        }
        return true;
    }, scope);
    return result;
}
exports.index = index;
function reduce(dict, reducer, initial) {
    let { value, callback } = (typeof reducer !== "function") ? internal_1.initReduceState(reducer) : {
        value: initial,
        callback: reducer
    };
    for (let key in dict) {
        value = callback(value, dict[key], key);
    }
    return value;
}
exports.reduce = reduce;
/**
 * Checks two dictionaries for equality, item by item (===).
 *
 * @param x First dictionary.
 * @param y Second dictionary.
 * @returns Dictionaries are equal.
 */
function equal(x, y) {
    if (x === y) {
        return true;
    }
    let length = getLength(y);
    for (let key in x) {
        if ((--length < 0) || (x[key] !== y[key])) {
            return false;
        }
    }
    return length === 0;
}
exports.equal = equal;
/**
 * Replaces item with specified key. If dictionary doesn't contain such key, new item is added.
 *
 * @param dict Dictionary.
 * @param key Key.
 * @param item Item.
 * @returns The replaced item. If dictionary is not modified, returns undefined.
 */
function tryPut(dict, key, item) {
    var oldItem = dict[key];
    if (oldItem === item) {
        return undefined;
    }
    dict[key] = item;
    return { value: oldItem };
}
exports.tryPut = tryPut;
/**
 * Adds or replaces a bunch of items.
 *
 * @param dict Dictionary.
 * @param items Items with corresponding keys.
 * @returns Result of internal `splice` method call. If dictionary is not modified, returns undefined.
 */
function tryPutAll(dict, items) {
    const removedItems = {};
    const addedItems = {};
    for (let key in items) {
        const item = items[key];
        const oldItem = tryPut(dict, key, item);
        if (oldItem === undefined) {
            continue;
        }
        const removedItem = oldItem.value;
        if (removedItem !== undefined) {
            removedItems[key] = removedItem;
        }
        addedItems[key] = item;
    }
    if (!isEmpty(removedItems) || !isEmpty(addedItems)) {
        return { removedItems: removedItems, addedItems: addedItems };
    }
    return undefined;
}
exports.tryPutAll = tryPutAll;
/**
 * Removes item with specified key if it exists in dictionary.
 *
 * @param dict Dictionary.
 * @param key Key of item to remove.
 * @returns Old dictionary item. If dictionary is not modified, returns undefined.
 */
function tryRemove(dict, key) {
    const item = dict[key];
    if (item !== undefined) {
        delete dict[key];
    }
    return item;
}
exports.tryRemove = tryRemove;
/**
 * Removes a bunch of items from dictionary.
 *
 * @param dict Dictionary.
 * @param keys Keys of items to remove.
 * @returns The removed items. If dictionary is not modified, returns undefined.
 */
function tryRemoveAll(dict, keys) {
    const items = {};
    for (let i = 0, l = keys.length; i < l; ++i) {
        const key = keys[i];
        const item = tryRemove(dict, key);
        if (item !== undefined) {
            items[key] = item;
        }
    }
    if (!isEmpty(items)) {
        return items;
    }
    return undefined;
}
exports.tryRemoveAll = tryRemoveAll;
/**
 * Changes item key in dictionary. If dictionary doesn't contain `oldKey` or contains `newKey`, it causes an error.
 *
 * @param dict Dictionary.
 * @param oldKey Old item key.
 * @param newKey New item key.
 * @returns The moved item. If dictionary is not modified, returns undefined.
 */
function trySetKey(dict, oldKey, newKey) {
    if (oldKey === newKey) {
        return undefined;
    }
    const item = dict[oldKey];
    delete dict[oldKey];
    dict[newKey] = item;
    return item;
}
exports.trySetKey = trySetKey;
/**
 * Clears dictionary.
 *
 * @param dict Dictionary.
 * @returns Old dictionary contents. If not modified, returns undefined.
 */
function tryClear(dict) {
    if (isEmpty(dict)) {
        return undefined;
    }
    const items = index_1.apply({}, dict);
    for (let key in items) {
        delete dict[key];
    }
    return items;
}
exports.tryClear = tryClear;
/**
 * Removes and adds bunches of items in dictionary. Universal optimized granular operation of removal/insertion.
 *
 * @param dict Dictionary.
 * @param removedKeys Keys of items to remove.
 * @param updatedItems Items to add/replace.
 * @returns Splice result. If dictionary is not modified, returns undefined.
 */
function trySplice(dict, removedKeys, updatedItems) {
    removedKeys = removedKeys.filter(function (key) {
        return !updatedItems.hasOwnProperty(key);
    });
    const removedItems = tryRemoveAll(dict, removedKeys);
    const spliceResult = tryPutAll(dict, updatedItems);
    if (spliceResult !== undefined) {
        index_1.apply(spliceResult.removedItems, removedItems);
        return spliceResult;
    }
    if (removedItems !== undefined) {
        return { removedItems: removedItems, addedItems: {} };
    }
    return undefined;
}
exports.trySplice = trySplice;
/**
 * Changes item keys in dictionary.
 *
 * @param dict Dictionary.
 * @param keyMap Key mapping. Item with key `x` will gain key `keyMap[x]`.
 * It is neccessary to pass only changed keys, but unchanged keys or unexisting keys are acceptable as well.
 * @returns Map of changed keys. If dictionary is not modified, returns undefined.
 */
function tryReindex(dict, keyMap) {
    const sanitizedKeyMap = {};
    for (let oldKey in keyMap) {
        const newKey = keyMap[oldKey];
        if ((newKey === undefined) || (newKey === oldKey) || (dict[oldKey] === undefined)) {
            continue;
        }
        sanitizedKeyMap[oldKey] = newKey;
    }
    const backKeyMap = getInverted(sanitizedKeyMap);
    const removedKeys = [];
    const updatedItems = {};
    for (let oldKey in sanitizedKeyMap) {
        const newKey = sanitizedKeyMap[oldKey];
        // JW.assertUndefined(updatedItems[newKey]);
        sanitizedKeyMap[oldKey] = newKey;
        updatedItems[newKey] = dict[oldKey];
        if (backKeyMap[oldKey] === undefined) {
            removedKeys.push(oldKey);
        }
    }
    if (isEmpty(sanitizedKeyMap)) {
        return undefined;
    }
    for (let i = 0, l = removedKeys.length; i < l; ++i) {
        delete dict[removedKeys[i]];
    }
    index_1.apply(dict, updatedItems);
    return sanitizedKeyMap;
}
exports.tryReindex = tryReindex;
/**
 * Detects `splice` method arguments to adjust dictionary contents to `newItems`.
 * Determines which item bunches should be removed and which ones should be inserted/replaced, and their keys.
 *
 * @param oldItems Old dictionary contents.
 * @param newItems New dictionary contents.
 * @returns `splice` method arguments. If no method call required, returns undefined.
 */
function detectSplice(oldItems, newItems) {
    const removedKeys = [];
    const updatedItems = {};
    for (let key in oldItems) {
        if (!newItems.hasOwnProperty(key)) {
            removedKeys.push(key);
        }
    }
    for (let key in newItems) {
        const item = newItems[key];
        if (item !== oldItems[key]) {
            updatedItems[key] = item;
        }
    }
    if ((removedKeys.length !== 0) || !isEmpty(updatedItems)) {
        return { removedKeys: removedKeys, updatedItems: updatedItems };
    }
    return undefined;
}
exports.detectSplice = detectSplice;
/**
 * Detects `reindex` method arguments to adjust dictionary contents to `newItems`.
 * Determines which keys should be assigned to all items.
 * If `newItems` contents differ from current dictionary contents, the dictionary will be broken.
 *
 * @param oldItems Old dictionary contents.
 * @param newItems New dictionary contents.
 * @param getKey Function which returns unique key of an item in this dictionary.
 * By default, identifies primitive values and `Identifiable` objects.
 * @returns `keyMap` argument of `reindex` method. If no method call required, returns undefined.
 */
function detectReindex(oldItems, newItems, getKey) {
    const newItemKeys = new internal_1.VidMap(getKey);
    for (let key in newItems) {
        newItemKeys.put(newItems[key], key);
    }
    const keyMap = {};
    for (let oldKey in oldItems) {
        const newKey = newItemKeys.get(oldItems[oldKey]);
        if (oldKey !== newKey) {
            keyMap[oldKey] = newKey;
        }
    }
    if (!isEmpty(keyMap)) {
        return keyMap;
    }
    return undefined;
}
exports.detectReindex = detectReindex;
/**
 * Based on the removed and added items during dictionary splice, returns keys which
 * were effectively removed, not replaced by other items.
 *
 * @param removedItems Removed items.
 * @param addedItems Added items.
 * @returns Effectively removed keys.
 */
function getRemovedKeys(removedItems, addedItems) {
    const removedKeys = [];
    for (let key in removedItems) {
        if (!addedItems.hasOwnProperty(key)) {
            removedKeys.push(key);
        }
    }
    return removedKeys;
}
exports.getRemovedKeys = getRemovedKeys;
/**
 * Creates a new dictionary by rule: `result[dict[key]] === key`.
 *
 * @param dict Dictionary.
 * @returns The inverted dictionary.
 */
function getInverted(dict) {
    // JW.assertMap(dict, JW.assertString);
    var result = {};
    for (var key in dict) {
        // JW.assertUndefined(result[dict[key]]);
        result[dict[key]] = key;
    }
    return result;
}
exports.getInverted = getInverted;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "../../main/dist/DomTemplate.js":
/*!***********************************************!*\
  !*** C:/jwidget/git/main/dist/DomTemplate.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "../../node_modules/jquery/dist/jquery.js"));
const AbstractTemplate_1 = __importDefault(__webpack_require__(/*! ./AbstractTemplate */ "../../main/dist/AbstractTemplate.js"));
/**
 * @hidden
 */
class DomTemplate extends AbstractTemplate_1.default {
    /**
     * Creates a template instance.
     * @param el Element to process.
     */
    constructor(el) {
        super();
        this.output = null;
        this.el = jquery_1.default(el)[0];
    }
    get requiresAfterAppend() {
        return true;
    }
    createElement() {
        if (this.output !== null) {
            return this.output;
        }
        this.groups = {};
        this._compileAttributes(this.el);
        var orderedGroups = {};
        for (var i = 0, l = this.ids.length; i < l; ++i) {
            var id = this.ids[i];
            orderedGroups[id] = this.groups[id];
        }
        this.output = { root: this.el, groups: orderedGroups };
        return this.output;
    }
    _addElement(id, el, path) {
        path = path;
        this.groups[id] = this.groups[id] || [];
        this.groups[id].push(el);
    }
}
exports.default = DomTemplate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9tVGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvRG9tVGVtcGxhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBc0JFOzs7OztBQUVGLG9EQUE0QjtBQUM1QiwwRUFBa0Q7QUFJbEQ7O0dBRUc7QUFDSCxNQUFxQixXQUFZLFNBQVEsMEJBQWdCO0lBS3hEOzs7T0FHRztJQUNILFlBQVksRUFBd0I7UUFDbkMsS0FBSyxFQUFFLENBQUM7UUFSRCxXQUFNLEdBQW1CLElBQUksQ0FBQztRQVNyQyxJQUFJLENBQUMsRUFBRSxHQUFRLGdCQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELElBQUksbUJBQW1CO1FBQ3RCLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVELGFBQWE7UUFDWixJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssSUFBSSxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNuQjtRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDakMsSUFBSSxhQUFhLEdBQThCLEVBQUUsQ0FBQztRQUNsRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtZQUNoRCxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLGFBQWEsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3BDO1FBQ0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUMsQ0FBQztRQUNyRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDcEIsQ0FBQztJQUVTLFdBQVcsQ0FBQyxFQUFVLEVBQUUsRUFBZSxFQUFFLElBQWM7UUFDaEUsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNaLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDeEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDMUIsQ0FBQztDQUNEO0FBdENELDhCQXNDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjAgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBqUXVlcnkgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCBBYnN0cmFjdFRlbXBsYXRlIGZyb20gJy4vQWJzdHJhY3RUZW1wbGF0ZSc7XG5pbXBvcnQgRGljdGlvbmFyeSBmcm9tICcuL0RpY3Rpb25hcnknO1xuaW1wb3J0IFRlbXBsYXRlT3V0cHV0IGZyb20gJy4vVGVtcGxhdGVPdXRwdXQnO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRG9tVGVtcGxhdGUgZXh0ZW5kcyBBYnN0cmFjdFRlbXBsYXRlIHtcblx0cHJpdmF0ZSBlbDogSFRNTEVsZW1lbnQ7XG5cdHByaXZhdGUgb3V0cHV0OiBUZW1wbGF0ZU91dHB1dCA9IG51bGw7XG5cdHByaXZhdGUgZ3JvdXBzOiBEaWN0aW9uYXJ5PEhUTUxFbGVtZW50W10+O1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgdGVtcGxhdGUgaW5zdGFuY2UuXG5cdCAqIEBwYXJhbSBlbCBFbGVtZW50IHRvIHByb2Nlc3MuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihlbDogSFRNTEVsZW1lbnQgfCBKUXVlcnkpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMuZWwgPSA8YW55PmpRdWVyeShlbClbMF07XG5cdH1cblxuXHRnZXQgcmVxdWlyZXNBZnRlckFwcGVuZCgpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGNyZWF0ZUVsZW1lbnQoKTogVGVtcGxhdGVPdXRwdXQge1xuXHRcdGlmICh0aGlzLm91dHB1dCAhPT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3V0cHV0O1xuXHRcdH1cblx0XHR0aGlzLmdyb3VwcyA9IHt9O1xuXHRcdHRoaXMuX2NvbXBpbGVBdHRyaWJ1dGVzKHRoaXMuZWwpO1xuXHRcdHZhciBvcmRlcmVkR3JvdXBzOiBEaWN0aW9uYXJ5PEhUTUxFbGVtZW50W10+ID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmlkcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcblx0XHRcdHZhciBpZCA9IHRoaXMuaWRzW2ldO1xuXHRcdFx0b3JkZXJlZEdyb3Vwc1tpZF0gPSB0aGlzLmdyb3Vwc1tpZF07XG5cdFx0fVxuXHRcdHRoaXMub3V0cHV0ID0ge3Jvb3Q6IHRoaXMuZWwsIGdyb3Vwczogb3JkZXJlZEdyb3Vwc307XG5cdFx0cmV0dXJuIHRoaXMub3V0cHV0O1xuXHR9XG5cblx0cHJvdGVjdGVkIF9hZGRFbGVtZW50KGlkOiBzdHJpbmcsIGVsOiBIVE1MRWxlbWVudCwgcGF0aDogbnVtYmVyW10pIHtcblx0XHRwYXRoID0gcGF0aDtcblx0XHR0aGlzLmdyb3Vwc1tpZF0gPSB0aGlzLmdyb3Vwc1tpZF0gfHwgW107XG5cdFx0dGhpcy5ncm91cHNbaWRdLnB1c2goZWwpO1xuXHR9XG59XG4iXX0=

/***/ }),

/***/ "../../main/dist/DomUtils.js":
/*!********************************************!*\
  !*** C:/jwidget/git/main/dist/DomUtils.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._afterAppend = exports.replace = exports.remove = exports.insert = exports.parseHtml = exports.addClass = exports.hasClass = exports.inEl = exports.inDom = exports.isTextInput = exports.isElement = void 0;
const jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "../../node_modules/jquery/dist/jquery.js"));
/**
 * Some code is taken from jQuery. We are not happy with standard jQuery.parseHtml, because it is slow.
 * We implement an own parseHtml which omits a good bunch of useless manupulations.
 */
const wrapMap = {
    option: [1, "<select multiple='multiple'>", "</select>"],
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""]
};
const rtagName = /^<([\w:]+)/;
let _fragment = null;
/**
 * Checks if value is a jQuery element.
 */
function isElement(value) {
    return value instanceof jquery_1.default.fn.init;
}
exports.isElement = isElement;
const lifeInputTags = ["text", "password", "email", "number", "search", "tel", "url"];
function isTextInput(el) {
    const $el = jquery_1.default(el);
    const tagName = $el[0].tagName.toLowerCase();
    if (tagName === "input") {
        const type = $el.attr("type");
        return !type || lifeInputTags.indexOf(type.toLowerCase()) !== -1;
    }
    return tagName === "textarea";
}
exports.isTextInput = isTextInput;
/**
 * Checks if current HTML document body contains the specified element.
 *
 * @param el HTML element.
 * @returns Element is in DOM.
 */
function inDom(el) {
    while (el) {
        if (el.tagName.toLowerCase() === "body") {
            return true;
        }
        el = (el.parentNode);
    }
    return false;
}
exports.inDom = inDom;
/**
 * Checks deeply if one HTML element is a descendant of another element.
 *
 * @param descendantEl Descendant HTML element to check.
 * @param ancestorEl Ancestor HTML element to check.
 * @returns Element is a descendant of another element.
 */
function inEl(descendantEl, ancestorEl) {
    while (descendantEl) {
        if (descendantEl === ancestorEl) {
            return true;
        }
        descendantEl = descendantEl.parentElement;
    }
    return false;
}
exports.inEl = inEl;
/**
 * Checks if element contains the specified CSS class name.
 *
 * @param el HTML element.
 * @param cls Single CSS class name.
 * @return Element contains this CSS class name.
 */
function hasClass(el, cls) {
    return (" " + el.className + " ").indexOf(cls) !== -1;
}
exports.hasClass = hasClass;
/**
 * Adds the specified CSS class name to element unless it already contains it.
 *
 * @param el HTML element.
 * @param cls Single CSS class name.
 */
function addClass(el, cls) {
    if (!el.className) {
        el.className = cls;
    }
    else if (!hasClass(el, cls)) {
        el.className += " " + cls;
    }
}
exports.addClass = addClass;
/**
 * Parses HTML and builds a new DOM element.
 *
 * @param html HTML code to parse.
 * @returns New HTML element.
 */
function parseHtml(html) {
    if (_fragment) {
        _fragment.textContent = "";
    }
    else {
        _fragment = document.createDocumentFragment();
    }
    let el = document.createElement("div");
    _fragment.appendChild(el);
    const tagName = rtagName.exec(html)[1];
    const wrap = wrapMap[tagName] || wrapMap['_default'];
    el.innerHTML = wrap[1] + html + wrap[2];
    for (let i = 0; i < wrap[0]; ++i) {
        el = (el.firstChild);
    }
    return (el.firstChild);
}
exports.parseHtml = parseHtml;
/**
 * Inserts element as a child at specified position.
 *
 * @param parent Element to insert into.
 * @param child Element to insert.
 * @param index Position to insert at.
 */
function insert(parent, child, index) {
    if ((index == null) || (index >= parent.childNodes.length)) {
        parent.appendChild(child);
    }
    else {
        parent.insertBefore(child, parent.childNodes.item(index));
    }
}
exports.insert = insert;
/**
 * Removes element from DOM.
 *
 * @param el Element to remove.
 */
function remove(el) {
    if (el.parentNode) {
        el.parentNode.removeChild(el);
    }
}
exports.remove = remove;
/**
 * Replaces one HTML element with another.
 *
 * @param removeEl Element to replace.
 * @param insertEl Element to replace `removeEl` with.
 * @param attrs If true, retains element `id` and `class`
 */
function replace(removeEl, insertEl, attrs) {
    const parentEl = removeEl.parentNode;
    if (!parentEl) {
        return;
    }
    const id = attrs ? removeEl.getAttribute("id") : null, cls = attrs ? removeEl.getAttribute("class") : null;
    parentEl.replaceChild(insertEl, removeEl);
    if (id) {
        insertEl.setAttribute("id", id);
    }
    if (cls) {
        addClass(insertEl, cls);
    }
}
exports.replace = replace;
function _afterAppend(child) {
    child._afterAppend();
}
exports._afterAppend = _afterAppend;
(function (wrapMap) {
    wrapMap['optgroup'] = wrapMap['option'];
    wrapMap['tbody'] = wrapMap['tfoot'] = wrapMap['colgroup'] = wrapMap['caption'] = wrapMap['thead'];
    wrapMap['th'] = wrapMap['td'];
})(wrapMap);
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "../../main/dist/Event.js":
/*!*****************************************!*\
  !*** C:/jwidget/git/main/dist/Event.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dummyEvent_1 = __importDefault(__webpack_require__(/*! ./dummyEvent */ "../../main/dist/dummyEvent.js"));
const EventAttachment_1 = __importDefault(__webpack_require__(/*! ./EventAttachment */ "../../main/dist/EventAttachment.js"));
/**
 * Real implementation of `Listenable` interface.
 * Used to notify some objects (clients) about certain events (for example, field value change).
 */
class Event {
    constructor() {
        this._attachments = null;
    }
    /**
     * Checks if this event is dummy. This knowledge may help you do certain code optimizations.
     */
    get dummy() {
        return false;
    }
    /**
     * Unbinds all event handlers.
     */
    purge() {
        this._attachments = null;
    }
    /**
     * Starts listening to the event.
     *
     * Whenever the event is triggered with `trigger` method, specified handler function
     * is called in specified scope.
     *
     * You can stop listening the event by destroying the returned EventAttachment instance.
     *
     * @param handler Event handler function.
     * @param scope `handler` call scope.
     */
    listen(handler, scope) {
        if (this._attachments === null) {
            this._attachments = {};
        }
        const attachment = new EventAttachment_1.default(this, handler, scope);
        this._attachments[attachment.iid] = attachment;
        return attachment;
    }
    /**
     * Triggers event, i.e. calls all bound handlers.
     *
     * @param params Event params.
     */
    trigger(params) {
        if (this._attachments === null) {
            return;
        }
        for (var iid in this._attachments) {
            var attachment = this._attachments[iid];
            attachment.handler.call(attachment.scope || attachment, params);
        }
    }
    /**
     * @hidden
     */
    _unbind(attachment) {
        if (this._attachments !== null) {
            delete this._attachments[attachment.iid];
        }
    }
    /**
     * If `dummy` argument is false, returns a new instance of `Event`. Else returns `dummyEvent`.
     * @param dummy Determines if dummy event should be used.
     */
    static make(dummy) {
        return dummy ? dummyEvent_1.default : new Event();
    }
}
exports.default = Event;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvRXZlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBc0JFOzs7OztBQUlGLDhEQUFzQztBQUN0Qyx3RUFBZ0Q7QUFHaEQ7OztHQUdHO0FBQ0gsTUFBcUIsS0FBSztJQUExQjtRQUNTLGlCQUFZLEdBQW1DLElBQUksQ0FBQztJQW1FN0QsQ0FBQztJQWpFQTs7T0FFRztJQUNILElBQUksS0FBSztRQUNSLE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSztRQUNKLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQzFCLENBQUM7SUFFRDs7Ozs7Ozs7OztPQVVHO0lBQ0gsTUFBTSxDQUFDLE9BQTJCLEVBQUUsS0FBVztRQUM5QyxJQUFJLElBQUksQ0FBQyxZQUFZLEtBQUssSUFBSSxFQUFFO1lBQy9CLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1NBQ3ZCO1FBQ0QsTUFBTSxVQUFVLEdBQUcsSUFBSSx5QkFBZSxDQUFJLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsVUFBVSxDQUFDO1FBQy9DLE9BQU8sVUFBVSxDQUFDO0lBQ25CLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsT0FBTyxDQUFDLE1BQVU7UUFDakIsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLElBQUksRUFBRTtZQUMvQixPQUFPO1NBQ1A7UUFDRCxLQUFLLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbEMsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN4QyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxJQUFJLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUNoRTtJQUNGLENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU8sQ0FBQyxVQUE4QjtRQUNyQyxJQUFJLElBQUksQ0FBQyxZQUFZLEtBQUssSUFBSSxFQUFFO1lBQy9CLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDekM7SUFDRixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLElBQUksQ0FBSSxLQUFjO1FBQzVCLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxvQkFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssRUFBSyxDQUFDO0lBQzVDLENBQUM7Q0FDRDtBQXBFRCx3QkFvRUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgRGVzdHJveWFibGUgZnJvbSBcIi4vRGVzdHJveWFibGVcIjtcbmltcG9ydCBEaWN0aW9uYXJ5IGZyb20gXCIuL0RpY3Rpb25hcnlcIjtcbmltcG9ydCBkdW1teUV2ZW50IGZyb20gXCIuL2R1bW15RXZlbnRcIjtcbmltcG9ydCBFdmVudEF0dGFjaG1lbnQgZnJvbSBcIi4vRXZlbnRBdHRhY2htZW50XCI7XG5pbXBvcnQgSUV2ZW50IGZyb20gXCIuL0lFdmVudFwiO1xuXG4vKipcbiAqIFJlYWwgaW1wbGVtZW50YXRpb24gb2YgYExpc3RlbmFibGVgIGludGVyZmFjZS5cbiAqIFVzZWQgdG8gbm90aWZ5IHNvbWUgb2JqZWN0cyAoY2xpZW50cykgYWJvdXQgY2VydGFpbiBldmVudHMgKGZvciBleGFtcGxlLCBmaWVsZCB2YWx1ZSBjaGFuZ2UpLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudDxQPiBpbXBsZW1lbnRzIElFdmVudDxQPiB7XG5cdHByaXZhdGUgX2F0dGFjaG1lbnRzOiBEaWN0aW9uYXJ5PEV2ZW50QXR0YWNobWVudDxQPj4gPSBudWxsO1xuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdGhpcyBldmVudCBpcyBkdW1teS4gVGhpcyBrbm93bGVkZ2UgbWF5IGhlbHAgeW91IGRvIGNlcnRhaW4gY29kZSBvcHRpbWl6YXRpb25zLlxuXHQgKi9cblx0Z2V0IGR1bW15KCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBVbmJpbmRzIGFsbCBldmVudCBoYW5kbGVycy5cblx0ICovXG5cdHB1cmdlKCkge1xuXHRcdHRoaXMuX2F0dGFjaG1lbnRzID0gbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBTdGFydHMgbGlzdGVuaW5nIHRvIHRoZSBldmVudC5cblx0ICpcblx0ICogV2hlbmV2ZXIgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZCB3aXRoIGB0cmlnZ2VyYCBtZXRob2QsIHNwZWNpZmllZCBoYW5kbGVyIGZ1bmN0aW9uXG5cdCAqIGlzIGNhbGxlZCBpbiBzcGVjaWZpZWQgc2NvcGUuXG5cdCAqXG5cdCAqIFlvdSBjYW4gc3RvcCBsaXN0ZW5pbmcgdGhlIGV2ZW50IGJ5IGRlc3Ryb3lpbmcgdGhlIHJldHVybmVkIEV2ZW50QXR0YWNobWVudCBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIGhhbmRsZXIgRXZlbnQgaGFuZGxlciBmdW5jdGlvbi5cblx0ICogQHBhcmFtIHNjb3BlIGBoYW5kbGVyYCBjYWxsIHNjb3BlLlxuXHQgKi9cblx0bGlzdGVuKGhhbmRsZXI6IChwYXJhbXM6IFApID0+IGFueSwgc2NvcGU/OiBhbnkpOiBEZXN0cm95YWJsZSB7XG5cdFx0aWYgKHRoaXMuX2F0dGFjaG1lbnRzID09PSBudWxsKSB7XG5cdFx0XHR0aGlzLl9hdHRhY2htZW50cyA9IHt9O1xuXHRcdH1cblx0XHRjb25zdCBhdHRhY2htZW50ID0gbmV3IEV2ZW50QXR0YWNobWVudDxQPih0aGlzLCBoYW5kbGVyLCBzY29wZSk7XG5cdFx0dGhpcy5fYXR0YWNobWVudHNbYXR0YWNobWVudC5paWRdID0gYXR0YWNobWVudDtcblx0XHRyZXR1cm4gYXR0YWNobWVudDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUcmlnZ2VycyBldmVudCwgaS5lLiBjYWxscyBhbGwgYm91bmQgaGFuZGxlcnMuXG5cdCAqXG5cdCAqIEBwYXJhbSBwYXJhbXMgRXZlbnQgcGFyYW1zLlxuXHQgKi9cblx0dHJpZ2dlcihwYXJhbXM/OiBQKSB7XG5cdFx0aWYgKHRoaXMuX2F0dGFjaG1lbnRzID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGZvciAodmFyIGlpZCBpbiB0aGlzLl9hdHRhY2htZW50cykge1xuXHRcdFx0dmFyIGF0dGFjaG1lbnQgPSB0aGlzLl9hdHRhY2htZW50c1tpaWRdO1xuXHRcdFx0YXR0YWNobWVudC5oYW5kbGVyLmNhbGwoYXR0YWNobWVudC5zY29wZSB8fCBhdHRhY2htZW50LCBwYXJhbXMpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBAaGlkZGVuXG5cdCAqL1xuXHRfdW5iaW5kKGF0dGFjaG1lbnQ6IEV2ZW50QXR0YWNobWVudDxQPikge1xuXHRcdGlmICh0aGlzLl9hdHRhY2htZW50cyAhPT0gbnVsbCkge1xuXHRcdFx0ZGVsZXRlIHRoaXMuX2F0dGFjaG1lbnRzW2F0dGFjaG1lbnQuaWlkXTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogSWYgYGR1bW15YCBhcmd1bWVudCBpcyBmYWxzZSwgcmV0dXJucyBhIG5ldyBpbnN0YW5jZSBvZiBgRXZlbnRgLiBFbHNlIHJldHVybnMgYGR1bW15RXZlbnRgLlxuXHQgKiBAcGFyYW0gZHVtbXkgRGV0ZXJtaW5lcyBpZiBkdW1teSBldmVudCBzaG91bGQgYmUgdXNlZC5cblx0ICovXG5cdHN0YXRpYyBtYWtlPFA+KGR1bW15OiBib29sZWFuKTogSUV2ZW50PFA+IHtcblx0XHRyZXR1cm4gZHVtbXkgPyBkdW1teUV2ZW50IDogbmV3IEV2ZW50PFA+KCk7XG5cdH1cbn1cbiJdfQ==

/***/ }),

/***/ "../../main/dist/EventAttachment.js":
/*!***************************************************!*\
  !*** C:/jwidget/git/main/dist/EventAttachment.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");
/**
 * @hidden
 */
class EventAttachment {
    constructor(_event, handler, scope) {
        this._event = _event;
        this.handler = handler;
        this.scope = scope;
        this.iid = index_1.newIid();
    }
    destroy() {
        this._event._unbind(this);
    }
}
exports.default = EventAttachment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRBdHRhY2htZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0V2ZW50QXR0YWNobWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFzQkU7O0FBS0YsbUNBQStCO0FBRS9COztHQUVHO0FBQ0gsTUFBcUIsZUFBZTtJQUduQyxZQUFvQixNQUFnQixFQUFXLE9BQTJCLEVBQVcsS0FBVTtRQUEzRSxXQUFNLEdBQU4sTUFBTSxDQUFVO1FBQVcsWUFBTyxHQUFQLE9BQU8sQ0FBb0I7UUFBVyxVQUFLLEdBQUwsS0FBSyxDQUFLO1FBRnRGLFFBQUcsR0FBRyxjQUFNLEVBQUUsQ0FBQztJQUd4QixDQUFDO0lBRUQsT0FBTztRQUNOLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUM7Q0FDRDtBQVRELGtDQVNDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IERlc3Ryb3lhYmxlIGZyb20gJy4vRGVzdHJveWFibGUnO1xuaW1wb3J0IEV2ZW50IGZyb20gJy4vRXZlbnQnO1xuaW1wb3J0IElkZW50aWZpYWJsZSBmcm9tICcuL0lkZW50aWZpYWJsZSc7XG5pbXBvcnQge25ld0lpZH0gZnJvbSAnLi9pbmRleCc7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudEF0dGFjaG1lbnQ8UD4gaW1wbGVtZW50cyBEZXN0cm95YWJsZSwgSWRlbnRpZmlhYmxlIHtcblx0cmVhZG9ubHkgaWlkID0gbmV3SWlkKCk7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSBfZXZlbnQ6IEV2ZW50PFA+LCByZWFkb25seSBoYW5kbGVyOiAocGFyYW1zOiBQKSA9PiBhbnksIHJlYWRvbmx5IHNjb3BlOiBhbnkpIHtcblx0fVxuXG5cdGRlc3Ryb3koKSB7XG5cdFx0dGhpcy5fZXZlbnQuX3VuYmluZCh0aGlzKTtcblx0fVxufVxuIl19

/***/ }),

/***/ "../../main/dist/HtmlTemplate.js":
/*!************************************************!*\
  !*** C:/jwidget/git/main/dist/HtmlTemplate.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AbstractTemplate_1 = __importDefault(__webpack_require__(/*! ./AbstractTemplate */ "../../main/dist/AbstractTemplate.js"));
const DomUtils = __importStar(__webpack_require__(/*! ./DomUtils */ "../../main/dist/DomUtils.js"));
/**
 * HTML template. This class compiles the input template only once, and uses element cloning further on to
 * optimize rendering performance.
 */
class HtmlTemplate extends AbstractTemplate_1.default {
    /**
     * @param html Input HTML.
     */
    constructor(html) {
        super();
        this.html = html;
        this.mirror = null;
    }
    /**
     * @inheritdoc
     */
    createElement() {
        this._compile();
        var root = (this.mirror.cloneNode(true));
        var groups = {};
        for (var index = 0, count = this.ids.length; index < count; ++index) {
            var id = this.ids[index];
            var paths = this.groups[id];
            var groupSize = paths.length;
            var group = new Array(groupSize);
            for (var i = 0; i < groupSize; ++i) {
                var path = paths[i];
                var el = root;
                for (var j = 0, n = path.length; j < n; ++j) {
                    el = (el.childNodes[path[j]]);
                }
                group[i] = el;
            }
            groups[id] = group;
        }
        return { root: root, groups: groups };
    }
    _addElement(id, el, path) {
        el = el;
        this.groups[id] = this.groups[id] || [];
        this.groups[id].push(path.concat());
    }
    _compile() {
        if (this.mirror !== null) {
            return;
        }
        this.mirror = DomUtils.parseHtml(this.html);
        this.groups = {};
        this._compileAttributes(this.mirror);
    }
}
exports.default = HtmlTemplate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSHRtbFRlbXBsYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0h0bWxUZW1wbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFzQkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVGLDBFQUFrRDtBQUVsRCxxREFBdUM7QUFHdkM7OztHQUdHO0FBQ0gsTUFBcUIsWUFBYSxTQUFRLDBCQUFnQjtJQUl6RDs7T0FFRztJQUNILFlBQXFCLElBQVk7UUFDaEMsS0FBSyxFQUFFLENBQUM7UUFEWSxTQUFJLEdBQUosSUFBSSxDQUFRO1FBTnpCLFdBQU0sR0FBZ0IsSUFBSSxDQUFDO0lBUW5DLENBQUM7SUFFRDs7T0FFRztJQUNILGFBQWE7UUFDWixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEIsSUFBSSxJQUFJLEdBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN0RCxJQUFJLE1BQU0sR0FBOEIsRUFBRSxDQUFDO1FBQzNDLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFO1lBQ3BFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDekIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM1QixJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1lBQzdCLElBQUksS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ2pDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQUU7Z0JBQ25DLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEIsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUNkLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7b0JBQzVDLEVBQUUsR0FBZ0IsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQzNDO2dCQUNELEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7YUFDZDtZQUNELE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUM7U0FDbkI7UUFDRCxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUM7SUFDdkMsQ0FBQztJQUVTLFdBQVcsQ0FBQyxFQUFVLEVBQUUsRUFBZSxFQUFFLElBQWM7UUFDaEUsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDeEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVPLFFBQVE7UUFDZixJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssSUFBSSxFQUFFO1lBQ3pCLE9BQU87U0FDUDtRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0QyxDQUFDO0NBQ0Q7QUFsREQsK0JBa0RDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IEFic3RyYWN0VGVtcGxhdGUgZnJvbSAnLi9BYnN0cmFjdFRlbXBsYXRlJztcbmltcG9ydCBEaWN0aW9uYXJ5IGZyb20gJy4vRGljdGlvbmFyeSc7XG5pbXBvcnQgKiBhcyBEb21VdGlscyBmcm9tICcuL0RvbVV0aWxzJztcbmltcG9ydCBUZW1wbGF0ZU91dHB1dCBmcm9tICcuL1RlbXBsYXRlT3V0cHV0JztcblxuLyoqXG4gKiBIVE1MIHRlbXBsYXRlLiBUaGlzIGNsYXNzIGNvbXBpbGVzIHRoZSBpbnB1dCB0ZW1wbGF0ZSBvbmx5IG9uY2UsIGFuZCB1c2VzIGVsZW1lbnQgY2xvbmluZyBmdXJ0aGVyIG9uIHRvXG4gKiBvcHRpbWl6ZSByZW5kZXJpbmcgcGVyZm9ybWFuY2UuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEh0bWxUZW1wbGF0ZSBleHRlbmRzIEFic3RyYWN0VGVtcGxhdGUge1xuXHRwcml2YXRlIG1pcnJvcjogSFRNTEVsZW1lbnQgPSBudWxsO1xuXHRwcml2YXRlIGdyb3VwczogRGljdGlvbmFyeTxudW1iZXJbXVtdPjtcblxuXHQvKipcblx0ICogQHBhcmFtIGh0bWwgSW5wdXQgSFRNTC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKHJlYWRvbmx5IGh0bWw6IHN0cmluZykge1xuXHRcdHN1cGVyKCk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXRkb2Ncblx0ICovXG5cdGNyZWF0ZUVsZW1lbnQoKTogVGVtcGxhdGVPdXRwdXQge1xuXHRcdHRoaXMuX2NvbXBpbGUoKTtcblx0XHR2YXIgcm9vdCA9IDxIVE1MRWxlbWVudD4odGhpcy5taXJyb3IuY2xvbmVOb2RlKHRydWUpKTtcblx0XHR2YXIgZ3JvdXBzOiBEaWN0aW9uYXJ5PEhUTUxFbGVtZW50W10+ID0ge307XG5cdFx0Zm9yICh2YXIgaW5kZXggPSAwLCBjb3VudCA9IHRoaXMuaWRzLmxlbmd0aDsgaW5kZXggPCBjb3VudDsgKytpbmRleCkge1xuXHRcdFx0dmFyIGlkID0gdGhpcy5pZHNbaW5kZXhdO1xuXHRcdFx0dmFyIHBhdGhzID0gdGhpcy5ncm91cHNbaWRdO1xuXHRcdFx0dmFyIGdyb3VwU2l6ZSA9IHBhdGhzLmxlbmd0aDtcblx0XHRcdHZhciBncm91cCA9IG5ldyBBcnJheShncm91cFNpemUpO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBncm91cFNpemU7ICsraSkge1xuXHRcdFx0XHR2YXIgcGF0aCA9IHBhdGhzW2ldO1xuXHRcdFx0XHR2YXIgZWwgPSByb290O1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMCwgbiA9IHBhdGgubGVuZ3RoOyBqIDwgbjsgKytqKSB7XG5cdFx0XHRcdFx0ZWwgPSA8SFRNTEVsZW1lbnQ+KGVsLmNoaWxkTm9kZXNbcGF0aFtqXV0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGdyb3VwW2ldID0gZWw7XG5cdFx0XHR9XG5cdFx0XHRncm91cHNbaWRdID0gZ3JvdXA7XG5cdFx0fVxuXHRcdHJldHVybiB7IHJvb3Q6IHJvb3QsIGdyb3VwczogZ3JvdXBzIH07XG5cdH1cblxuXHRwcm90ZWN0ZWQgX2FkZEVsZW1lbnQoaWQ6IHN0cmluZywgZWw6IEhUTUxFbGVtZW50LCBwYXRoOiBudW1iZXJbXSkge1xuXHRcdGVsID0gZWw7XG5cdFx0dGhpcy5ncm91cHNbaWRdID0gdGhpcy5ncm91cHNbaWRdIHx8IFtdO1xuXHRcdHRoaXMuZ3JvdXBzW2lkXS5wdXNoKHBhdGguY29uY2F0KCkpO1xuXHR9XG5cblx0cHJpdmF0ZSBfY29tcGlsZSgpIHtcblx0XHRpZiAodGhpcy5taXJyb3IgIT09IG51bGwpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5taXJyb3IgPSBEb21VdGlscy5wYXJzZUh0bWwodGhpcy5odG1sKTtcblx0XHR0aGlzLmdyb3VwcyA9IHt9O1xuXHRcdHRoaXMuX2NvbXBpbGVBdHRyaWJ1dGVzKHRoaXMubWlycm9yKTtcblx0fVxufVxuIl19

/***/ }),

/***/ "../../main/dist/IndexCount.js":
/*!**********************************************!*\
  !*** C:/jwidget/git/main/dist/IndexCount.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Index and count pair. Used in IList.splice method arguments to specify item segments to remove.
 */
class IndexCount {
    /**
     * @param index Index.
     * @param count Count.
     */
    constructor(index, count) {
        this.index = index;
        this.count = count;
    }
    /**
     * Clones pair.
     */
    clone() {
        return new IndexCount(this.index, this.count);
    }
}
exports.default = IndexCount;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5kZXhDb3VudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9JbmRleENvdW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXNCRTs7QUFJRjs7R0FFRztBQUNILE1BQXFCLFVBQVU7SUFDOUI7OztPQUdHO0lBQ0gsWUFBcUIsS0FBYSxFQUFTLEtBQWE7UUFBbkMsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUFTLFVBQUssR0FBTCxLQUFLLENBQVE7SUFDeEQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSztRQUNKLE9BQU8sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0MsQ0FBQztDQUNEO0FBZEQsNkJBY0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgSUxpc3QgZnJvbSAnLi9JTGlzdCc7XG5cbi8qKlxuICogSW5kZXggYW5kIGNvdW50IHBhaXIuIFVzZWQgaW4gSUxpc3Quc3BsaWNlIG1ldGhvZCBhcmd1bWVudHMgdG8gc3BlY2lmeSBpdGVtIHNlZ21lbnRzIHRvIHJlbW92ZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5kZXhDb3VudCBpbXBsZW1lbnRzIElMaXN0LkluZGV4Q291bnQge1xuXHQvKipcblx0ICogQHBhcmFtIGluZGV4IEluZGV4LlxuXHQgKiBAcGFyYW0gY291bnQgQ291bnQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihyZWFkb25seSBpbmRleDogbnVtYmVyLCBwdWJsaWMgY291bnQ6IG51bWJlcikge1xuXHR9XG5cblx0LyoqXG5cdCAqIENsb25lcyBwYWlyLlxuXHQgKi9cblx0Y2xvbmUoKTogSUxpc3QuSW5kZXhDb3VudCB7XG5cdFx0cmV0dXJuIG5ldyBJbmRleENvdW50KHRoaXMuaW5kZXgsIHRoaXMuY291bnQpO1xuXHR9XG59XG4iXX0=

/***/ }),

/***/ "../../main/dist/IndexItems.js":
/*!**********************************************!*\
  !*** C:/jwidget/git/main/dist/IndexItems.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const IndexCount_1 = __importDefault(__webpack_require__(/*! ./IndexCount */ "../../main/dist/IndexCount.js"));
/**
 * Index and items pair. Used in IList.splice method arguments to specify item segments to insert, and in
 * ListSpliceResult class to specify removed and added item segments.
 */
class IndexItems {
    /**
     * @param index Index.
     * @param items Items.
     */
    constructor(index, items) {
        this.index = index;
        this.items = items;
    }
    /**
     * Converts to index and count pair.
     */
    toIndexCount() {
        return new IndexCount_1.default(this.index, this.items.length);
    }
    /**
     * Clones pair.
     */
    clone() {
        return new IndexItems(this.index, this.items.concat());
    }
}
exports.default = IndexItems;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5kZXhJdGVtcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9JbmRleEl0ZW1zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXNCRTs7Ozs7QUFHRiw4REFBc0M7QUFFdEM7OztHQUdHO0FBQ0gsTUFBcUIsVUFBVTtJQUM5Qjs7O09BR0c7SUFDSCxZQUFxQixLQUFhLEVBQVcsS0FBVTtRQUFsQyxVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQVcsVUFBSyxHQUFMLEtBQUssQ0FBSztJQUN2RCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxZQUFZO1FBQ1gsT0FBTyxJQUFJLG9CQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUs7UUFDSixPQUFPLElBQUksVUFBVSxDQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQzNELENBQUM7Q0FDRDtBQXJCRCw2QkFxQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgSUxpc3QgZnJvbSAnLi9JTGlzdCc7XG5pbXBvcnQgSW5kZXhDb3VudCBmcm9tICcuL0luZGV4Q291bnQnO1xuXG4vKipcbiAqIEluZGV4IGFuZCBpdGVtcyBwYWlyLiBVc2VkIGluIElMaXN0LnNwbGljZSBtZXRob2QgYXJndW1lbnRzIHRvIHNwZWNpZnkgaXRlbSBzZWdtZW50cyB0byBpbnNlcnQsIGFuZCBpblxuICogTGlzdFNwbGljZVJlc3VsdCBjbGFzcyB0byBzcGVjaWZ5IHJlbW92ZWQgYW5kIGFkZGVkIGl0ZW0gc2VnbWVudHMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluZGV4SXRlbXM8VD4gaW1wbGVtZW50cyBJTGlzdC5JbmRleEl0ZW1zPFQ+IHtcblx0LyoqXG5cdCAqIEBwYXJhbSBpbmRleCBJbmRleC5cblx0ICogQHBhcmFtIGl0ZW1zIEl0ZW1zLlxuXHQgKi9cblx0Y29uc3RydWN0b3IocmVhZG9ubHkgaW5kZXg6IG51bWJlciwgcmVhZG9ubHkgaXRlbXM6IFRbXSkge1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIHRvIGluZGV4IGFuZCBjb3VudCBwYWlyLlxuXHQgKi9cblx0dG9JbmRleENvdW50KCk6IElMaXN0LkluZGV4Q291bnQge1xuXHRcdHJldHVybiBuZXcgSW5kZXhDb3VudCh0aGlzLmluZGV4LCB0aGlzLml0ZW1zLmxlbmd0aCk7XG5cdH1cblxuXHQvKipcblx0ICogQ2xvbmVzIHBhaXIuXG5cdCAqL1xuXHRjbG9uZSgpOiBJTGlzdC5JbmRleEl0ZW1zPFQ+IHtcblx0XHRyZXR1cm4gbmV3IEluZGV4SXRlbXM8VD4odGhpcy5pbmRleCwgdGhpcy5pdGVtcy5jb25jYXQoKSk7XG5cdH1cbn1cbiJdfQ==

/***/ }),

/***/ "../../main/dist/List.js":
/*!****************************************!*\
  !*** C:/jwidget/git/main/dist/List.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ArrayUtils = __importStar(__webpack_require__(/*! ./ArrayUtils */ "../../main/dist/ArrayUtils.js"));
const Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));
const Event_1 = __importDefault(__webpack_require__(/*! ./Event */ "../../main/dist/Event.js"));
const index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");
const IndexCount_1 = __importDefault(__webpack_require__(/*! ./IndexCount */ "../../main/dist/IndexCount.js"));
const IndexItems_1 = __importDefault(__webpack_require__(/*! ./IndexItems */ "../../main/dist/IndexItems.js"));
const internal_1 = __webpack_require__(/*! ./internal */ "../../main/dist/internal.js");
const ListSpliceResult_1 = __importDefault(__webpack_require__(/*! ./ListSpliceResult */ "../../main/dist/ListSpliceResult.js"));
const Map_1 = __importDefault(__webpack_require__(/*! ./Map */ "../../main/dist/Map.js"));
const Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));
const Set_1 = __importDefault(__webpack_require__(/*! ./Set */ "../../main/dist/Set.js"));
/**
 * Ordered collection of items. Each item of the list has an index. Index of first item is 0,
 * index of each next one is higher by 1.
 * @param T Item type.
 */
class List extends Class_1.default {
    constructor(a, b, c) {
        super();
        this._ownsItems = false;
        if (typeof a === "boolean") {
            c = a ? index_1.SILENT : 0;
            a = null;
        }
        else if (typeof a === "function" || (a == null && typeof b === "boolean")) {
            c = b ? index_1.SILENT : 0;
            b = a;
            a = null;
        }
        else if (typeof b === "number") {
            c = b;
            b = null;
        }
        const items = a;
        const silent = Boolean(c & index_1.SILENT);
        const adapter = (items != null) && Boolean(c & index_1.ADAPTER);
        this.getKey = b || internal_1.vid;
        this._items = adapter ? items : items ? items.concat() : [];
        this._length = this.own(new Property_1.default(this._items.length, silent));
        this._spliceEvent = Event_1.default.make(silent);
        this._replaceEvent = Event_1.default.make(silent);
        this._moveEvent = Event_1.default.make(silent);
        this._reorderEvent = Event_1.default.make(silent);
        this._clearEvent = Event_1.default.make(silent);
        this._changeEvent = Event_1.default.make(silent);
    }
    destroyObject() {
        this.clear();
        super.destroyObject();
    }
    /**
     * @inheritDoc
     */
    get silent() {
        return this.changeEvent.dummy;
    }
    /**
     * @inheritDoc
     */
    get length() {
        return this._length;
    }
    /**
     * @inheritDoc
     */
    get empty() {
        return this.length.get() === 0;
    }
    /**
     * @inheritDoc
     */
    get first() {
        return this._items[0];
    }
    /**
     * @inheritDoc
     */
    get last() {
        return this._items[this._items.length - 1];
    }
    /**
     * @inheritDoc
     */
    get lastIndex() {
        var l = this._items.length;
        return (l !== 0) ? (l - 1) : undefined;
    }
    /**
     * @inheritDoc
     */
    get items() {
        return this._items;
    }
    /**
     * @inheritDoc
     */
    get spliceEvent() {
        return this._spliceEvent;
    }
    /**
     * @inheritDoc
     */
    get replaceEvent() {
        return this._replaceEvent;
    }
    /**
     * @inheritDoc
     */
    get moveEvent() {
        return this._moveEvent;
    }
    /**
     * @inheritDoc
     */
    get clearEvent() {
        return this._clearEvent;
    }
    /**
     * @inheritDoc
     */
    get reorderEvent() {
        return this._reorderEvent;
    }
    /**
     * @inheritDoc
     */
    get changeEvent() {
        return this._changeEvent;
    }
    /**
     * @inheritDoc
     */
    ownItems() {
        this._ownsItems = true;
        return this;
    }
    /**
     * @inheritDoc
     */
    clone() {
        return new List(this.items, this.getKey, this.silent ? index_1.SILENT : 0);
    }
    /**
     * @inheritDoc
     */
    get(index) {
        return this._items[index];
    }
    /**
     * @inheritDoc
     */
    contains(item) {
        return ArrayUtils.contains(this._items, item);
    }
    /**
     * @inheritDoc
     */
    every(callback, scope) {
        return this._items.every(callback, scope || this);
    }
    /**
     * @inheritDoc
     */
    some(callback, scope) {
        return this._items.some(callback, scope || this);
    }
    /**
     * @inheritDoc
     */
    forEach(callback, scope) {
        this._items.forEach(callback, scope || this);
    }
    /**
     * @inheritDoc
     */
    findIndex(callback, scope) {
        return ArrayUtils.findIndex(this._items, callback, scope);
    }
    /**
     * @inheritDoc
     */
    find(callback, scope) {
        return ArrayUtils.find(this._items, callback, scope);
    }
    /**
     * @inheritDoc
     */
    toSorted(callback, scope, order) {
        return new List(ArrayUtils.toSorted(this._items, callback, scope || this, order), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    toSortedComparing(compare, scope, order) {
        return new List(ArrayUtils.toSortedComparing(this._items, compare, scope || this, order), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    getSortingIndices(callback, scope, order) {
        return new List(ArrayUtils.getSortingIndices(this._items, callback, scope || this, order), String, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    getSortingIndicesComparing(compare, scope, order) {
        return new List(ArrayUtils.getSortingIndicesComparing(this._items, compare, scope || this, order), String, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    index(callback, scope) {
        return new Map_1.default(ArrayUtils.index(this._items, callback, scope), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    filter(callback, scope) {
        return new List(this._items.filter(callback, scope || this), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    count(callback, scope) {
        return ArrayUtils.count(this._items, callback, scope || this);
    }
    /**
     * @inheritDoc
     */
    map(callback, scope, getKey) {
        return new List(this._items.map(callback, scope || this), getKey, index_1.SILENT | index_1.ADAPTER);
    }
    reduce(reducer, initial) {
        return (typeof reducer === "function") ?
            this.items.reduce(reducer, initial) :
            ArrayUtils.reduce(this.items, reducer);
    }
    /**
     * @inheritDoc
     */
    max(callback, scope, order) {
        return ArrayUtils.max(this._items, callback, scope, order);
    }
    /**
     * @inheritDoc
     */
    maxIndex(callback, scope, order) {
        return ArrayUtils.maxIndex(this._items, callback, scope, order);
    }
    /**
     * @inheritDoc
     */
    maxComparing(compare, scope, order) {
        return ArrayUtils.maxComparing(this._items, compare, scope, order);
    }
    /**
     * @inheritDoc
     */
    maxIndexComparing(compare, scope, order) {
        return ArrayUtils.maxIndexComparing(this._items, compare, scope, order);
    }
    /**
     * @inheritDoc
     */
    min(callback, scope, order) {
        return ArrayUtils.min(this._items, callback, scope, order);
    }
    /**
     * @inheritDoc
     */
    minIndex(callback, scope, order) {
        return ArrayUtils.minIndex(this._items, callback, scope, order);
    }
    /**
     * @inheritDoc
     */
    minComparing(compare, scope, order) {
        return ArrayUtils.minComparing(this._items, compare, scope, order);
    }
    /**
     * @inheritDoc
     */
    minIndexComparing(compare, scope, order) {
        return ArrayUtils.minIndexComparing(this._items, compare, scope, order);
    }
    /**
     * @inheritDoc
     */
    toArray() {
        return this._items.concat();
    }
    /**
     * @inheritDoc
     */
    toList() {
        return new List(this.toArray(), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    toSet() {
        return new Set_1.default(this.toArray(), this.getKey, true);
    }
    /**
     * @inheritDoc
     */
    asArray() {
        return this._items;
    }
    /**
     * @inheritDoc
     */
    asList() {
        return this;
    }
    /**
     * @inheritDoc
     */
    asSet() {
        return this.toSet();
    }
    /**
     * @inheritDoc
     */
    add(item, index) {
        this.addAll([item], index);
    }
    /**
     * @inheritDoc
     */
    addAll(items, index) {
        if (index === undefined) {
            index = this._items.length;
        }
        this.trySplice([], [new IndexItems_1.default(index, items)]);
    }
    /**
     * @inheritDoc
     */
    trySet(index, item) {
        const oldProxy = ArrayUtils.trySet(this._items, index, item);
        if (oldProxy === undefined) {
            return undefined;
        }
        this._replaceEvent.trigger({ sender: this, index: index, oldItem: oldProxy.value, newItem: item });
        this._changeEvent.trigger({ sender: this });
        if (this._ownsItems) {
            oldProxy.value.destroy();
        }
        return oldProxy;
    }
    /**
     * @inheritDoc
     */
    set(index, item) {
        const result = this.trySet(index, item);
        return (result !== undefined) ? result.value : this.get(index);
    }
    /**
     * @inheritDoc
     */
    remove(index) {
        const result = this.tryRemoveAll(index, 1);
        if (result !== undefined) {
            return result[0];
        }
        return undefined;
    }
    /**
     * @inheritDoc
     */
    removeItem(item) {
        const key = this.indexOf(item);
        if (key !== -1) {
            this.remove(key);
        }
        return key;
    }
    /**
     * @inheritDoc
     */
    removeAll(index, count) {
        var result = this.tryRemoveAll(index, count);
        return result || [];
    }
    /**
     * @inheritDoc
     */
    tryRemoveAll(index, count) {
        var result = this.trySplice([new IndexCount_1.default(index, count)], []);
        if (result !== undefined) {
            return result.removedItemsList[0].items;
        }
        return undefined;
    }
    /**
     * @inheritDoc
     */
    removeItems(items) {
        const itemSet = internal_1.VidSet.fromArray(items, this.getKey);
        const newItems = this._items.filter((item) => !itemSet.contains(item));
        this.performFilter(newItems);
    }
    /**
     * @inheritDoc
     */
    move(fromIndex, toIndex) {
        this.tryMove(fromIndex, toIndex);
        return this.get(toIndex);
    }
    /**
     * @inheritDoc
     */
    tryMove(fromIndex, toIndex) {
        var item = ArrayUtils.tryMove(this._items, fromIndex, toIndex);
        if (item === undefined) {
            return undefined;
        }
        this._moveEvent.trigger({ sender: this, fromIndex: fromIndex, toIndex: toIndex, item: item });
        this._changeEvent.trigger({ sender: this });
        return item;
    }
    /**
     * @inheritDoc
     */
    clear() {
        var oldItems = ArrayUtils.tryClear(this._items);
        if (oldItems === undefined) {
            return undefined;
        }
        this._length.set(0);
        this._clearEvent.trigger({ sender: this, items: oldItems });
        this._changeEvent.trigger({ sender: this });
        if (this._ownsItems) {
            ArrayUtils.backEvery(oldItems, index_1.destroy);
        }
        return oldItems;
    }
    /**
     * @inheritDoc
     */
    splice(removeParamsList, addParamsList) {
        var result = this.trySplice(removeParamsList, addParamsList);
        return (result !== undefined) ? result : new ListSpliceResult_1.default(this._items.concat(), [], []);
    }
    /**
     * @inheritDoc
     */
    trySplice(removeParamsList, addParamsList) {
        var result = ArrayUtils.trySplice(this._items, removeParamsList, addParamsList);
        if (result === undefined) {
            return undefined;
        }
        this._length.set(this._items.length);
        this._spliceEvent.trigger({ sender: this, spliceResult: result });
        this._changeEvent.trigger({ sender: this });
        if (this._ownsItems) {
            ArrayUtils.backEvery(result.removedItems, index_1.destroy);
        }
        return result;
    }
    /**
     * @inheritDoc
     */
    reorder(indexArray) {
        this.tryReorder(indexArray);
    }
    /**
     * @inheritDoc
     */
    tryReorder(indexArray) {
        var items = ArrayUtils.tryReorder(this._items, indexArray);
        if (items === undefined) {
            return undefined;
        }
        this._reorderEvent.trigger({ sender: this, indexArray: indexArray, items: items });
        this._changeEvent.trigger({ sender: this });
        return items;
    }
    /**
     * @inheritDoc
     */
    detectSplice(newItems) {
        return ArrayUtils.detectSplice(this._items, newItems, this.getKey);
    }
    /**
     * @inheritDoc
     */
    detectFilter(newItems) {
        return ArrayUtils.detectFilter(this._items, newItems);
    }
    /**
     * @inheritDoc
     */
    detectReorder(newItems) {
        return ArrayUtils.detectReorder(this._items, newItems, this.getKey);
    }
    /**
     * @inheritDoc
     */
    detectSort(callback, scope, order) {
        return ArrayUtils.detectSort(this._items, callback, scope || this, order);
    }
    /**
     * @inheritDoc
     */
    detectSortComparing(compare, scope, order) {
        return ArrayUtils.detectSortComparing(this._items, compare, scope || this, order);
    }
    /**
     * @inheritDoc
     */
    performSplice(newItems) {
        var params = this.detectSplice(newItems);
        if (params !== undefined) {
            this.trySplice(params.removeParamsList, params.addParamsList);
        }
    }
    /**
     * @inheritDoc
     */
    performFilter(newItems) {
        var params = this.detectFilter(newItems);
        if (params !== undefined) {
            this.trySplice(params, []);
        }
    }
    /**
     * @inheritDoc
     */
    performReorder(newItems) {
        var indexArray = this.detectReorder(newItems);
        if (indexArray !== undefined) {
            this.tryReorder(indexArray);
        }
    }
    /**
     * @inheritDoc
     */
    sort(callback, scope, order) {
        var indexArray = this.detectSort(callback, scope, order);
        if (indexArray !== undefined) {
            this.tryReorder(indexArray);
        }
    }
    /**
     * @inheritDoc
     */
    sortComparing(compare, scope, order) {
        var indexArray = this.detectSortComparing(compare, scope, order);
        if (indexArray !== undefined) {
            this.tryReorder(indexArray);
        }
    }
    /**
     * @inheritDoc
     */
    reverse() {
        if (this.silent) {
            this._items.reverse();
            return;
        }
        var length = this.length.get();
        var indices = new Array(length);
        for (var i = 0; i < length; ++i) {
            indices[i] = length - i - 1;
        }
        this.reorder(indices);
    }
    /**
     * @inheritDoc
     */
    toReversed() {
        return new List(ArrayUtils.toReversed(this._items), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    equal(arr) {
        return ArrayUtils.equal(this._items, arr);
    }
    /**
     * @inheritDoc
     */
    indexOf(item) {
        return this._items.indexOf(item);
    }
    /**
     * @inheritDoc
     */
    backEvery(callback, scope) {
        return ArrayUtils.backEvery(this._items, callback, scope);
    }
    /**
     * @inheritDoc
     */
    pop() {
        if (this._items.length !== 0) {
            return this.remove(this._items.length - 1);
        }
        return undefined;
    }
    /**
     * @inheritDoc
     */
    binarySearch(value, compare, scope, order) {
        return ArrayUtils.binarySearch(this._items, value, compare, scope, order);
    }
}
exports.default = List;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "../../main/dist/ListSpliceResult.js":
/*!****************************************************!*\
  !*** C:/jwidget/git/main/dist/ListSpliceResult.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ArrayUtils = __importStar(__webpack_require__(/*! ./ArrayUtils */ "../../main/dist/ArrayUtils.js"));
/**
 * IList.splice method result.
 */
class ListSpliceResult {
    /**
     * @param oldItems Old array contents.
     * @param removedItemsList Removed item segments.
     * @param addedItemsList Added item segments.
     */
    constructor(oldItems, removedItemsList, addedItemsList) {
        this.oldItems = oldItems;
        this.removedItemsList = removedItemsList;
        this.addedItemsList = addedItemsList;
    }
    /**
     * Plain array of all removed items.
     */
    get removedItems() {
        if (!this._removedItems) {
            this._removedItems = ArrayUtils.merge(this.removedItemsList.map(function (indexItems) {
                return indexItems.items;
            }));
        }
        return this._removedItems;
    }
    /**
     * Plain array of all added items.
     */
    get addedItems() {
        if (!this._addedItems) {
            this._addedItems = ArrayUtils.merge(this.addedItemsList.map(function (indexItems) {
                return indexItems.items;
            }));
        }
        return this._addedItems;
    }
    /**
     * Removed item segments converted to index and count pairs.
     */
    get removeParamsList() {
        if (!this._removeParamsList) {
            this._removeParamsList = this.removedItemsList.map((x) => x.toIndexCount());
        }
        return this._removeParamsList;
    }
    /**
     * The splice call didn't change the list.
     */
    get empty() {
        return (this.removedItemsList.length === 0) && (this.addedItemsList.length === 0);
    }
}
exports.default = ListSpliceResult;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlzdFNwbGljZVJlc3VsdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9MaXN0U3BsaWNlUmVzdWx0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXNCRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUYseURBQTJDO0FBRzNDOztHQUVHO0FBQ0gsTUFBcUIsZ0JBQWdCO0lBS3BDOzs7O09BSUc7SUFDSCxZQUFxQixRQUFhLEVBQ3hCLGdCQUF1QyxFQUN2QyxjQUFxQztRQUYxQixhQUFRLEdBQVIsUUFBUSxDQUFLO1FBQ3hCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBdUI7UUFDdkMsbUJBQWMsR0FBZCxjQUFjLENBQXVCO0lBQy9DLENBQUM7SUFFRDs7T0FFRztJQUNILElBQUksWUFBWTtRQUNmLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFVBQVUsVUFBVTtnQkFDbkYsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUMzQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLFVBQVU7UUFDYixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUN0QixJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsVUFBVSxVQUFVO2dCQUMvRSxPQUFPLFVBQVUsQ0FBQyxLQUFLLENBQUM7WUFDekIsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7T0FFRztJQUNILElBQUksZ0JBQWdCO1FBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDNUIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO1NBQzVFO1FBQ0QsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7SUFDL0IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxLQUFLO1FBQ1IsT0FBTyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNuRixDQUFDO0NBQ0Q7QUF2REQsbUNBdURDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0ICogYXMgQXJyYXlVdGlscyBmcm9tIFwiLi9BcnJheVV0aWxzXCI7XG5pbXBvcnQgSUxpc3QgZnJvbSBcIi4vSUxpc3RcIjtcblxuLyoqXG4gKiBJTGlzdC5zcGxpY2UgbWV0aG9kIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlzdFNwbGljZVJlc3VsdDxUPiBpbXBsZW1lbnRzIElMaXN0LlNwbGljZVJlc3VsdDxUPiB7XG5cdHByaXZhdGUgX3JlbW92ZWRJdGVtczogVFtdO1xuXHRwcml2YXRlIF9hZGRlZEl0ZW1zOiBUW107XG5cdHByaXZhdGUgX3JlbW92ZVBhcmFtc0xpc3Q6IElMaXN0LkluZGV4Q291bnRbXTtcblxuXHQvKipcblx0ICogQHBhcmFtIG9sZEl0ZW1zIE9sZCBhcnJheSBjb250ZW50cy5cblx0ICogQHBhcmFtIHJlbW92ZWRJdGVtc0xpc3QgUmVtb3ZlZCBpdGVtIHNlZ21lbnRzLlxuXHQgKiBAcGFyYW0gYWRkZWRJdGVtc0xpc3QgQWRkZWQgaXRlbSBzZWdtZW50cy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKHJlYWRvbmx5IG9sZEl0ZW1zOiBUW10sXG5cdFx0cmVhZG9ubHkgcmVtb3ZlZEl0ZW1zTGlzdDogSUxpc3QuSW5kZXhJdGVtczxUPltdLFxuXHRcdHJlYWRvbmx5IGFkZGVkSXRlbXNMaXN0OiBJTGlzdC5JbmRleEl0ZW1zPFQ+W10pIHtcblx0fVxuXG5cdC8qKlxuXHQgKiBQbGFpbiBhcnJheSBvZiBhbGwgcmVtb3ZlZCBpdGVtcy5cblx0ICovXG5cdGdldCByZW1vdmVkSXRlbXMoKTogVFtde1xuXHRcdGlmICghdGhpcy5fcmVtb3ZlZEl0ZW1zKSB7XG5cdFx0XHR0aGlzLl9yZW1vdmVkSXRlbXMgPSBBcnJheVV0aWxzLm1lcmdlKHRoaXMucmVtb3ZlZEl0ZW1zTGlzdC5tYXAoZnVuY3Rpb24gKGluZGV4SXRlbXMpIHtcblx0XHRcdFx0cmV0dXJuIGluZGV4SXRlbXMuaXRlbXM7XG5cdFx0XHR9KSk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLl9yZW1vdmVkSXRlbXM7XG5cdH1cblxuXHQvKipcblx0ICogUGxhaW4gYXJyYXkgb2YgYWxsIGFkZGVkIGl0ZW1zLlxuXHQgKi9cblx0Z2V0IGFkZGVkSXRlbXMoKTogVFtde1xuXHRcdGlmICghdGhpcy5fYWRkZWRJdGVtcykge1xuXHRcdFx0dGhpcy5fYWRkZWRJdGVtcyA9IEFycmF5VXRpbHMubWVyZ2UodGhpcy5hZGRlZEl0ZW1zTGlzdC5tYXAoZnVuY3Rpb24gKGluZGV4SXRlbXMpIHtcblx0XHRcdFx0cmV0dXJuIGluZGV4SXRlbXMuaXRlbXM7XG5cdFx0XHR9KSk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLl9hZGRlZEl0ZW1zO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZWQgaXRlbSBzZWdtZW50cyBjb252ZXJ0ZWQgdG8gaW5kZXggYW5kIGNvdW50IHBhaXJzLlxuXHQgKi9cblx0Z2V0IHJlbW92ZVBhcmFtc0xpc3QoKTogSUxpc3QuSW5kZXhDb3VudFtde1xuXHRcdGlmICghdGhpcy5fcmVtb3ZlUGFyYW1zTGlzdCkge1xuXHRcdFx0dGhpcy5fcmVtb3ZlUGFyYW1zTGlzdCA9IHRoaXMucmVtb3ZlZEl0ZW1zTGlzdC5tYXAoKHgpID0+IHgudG9JbmRleENvdW50KCkpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5fcmVtb3ZlUGFyYW1zTGlzdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgc3BsaWNlIGNhbGwgZGlkbid0IGNoYW5nZSB0aGUgbGlzdC5cblx0ICovXG5cdGdldCBlbXB0eSgpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gKHRoaXMucmVtb3ZlZEl0ZW1zTGlzdC5sZW5ndGggPT09IDApICYmICh0aGlzLmFkZGVkSXRlbXNMaXN0Lmxlbmd0aCA9PT0gMCk7XG5cdH1cbn0iXX0=

/***/ }),

/***/ "../../main/dist/Map.js":
/*!***************************************!*\
  !*** C:/jwidget/git/main/dist/Map.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ArrayUtils = __importStar(__webpack_require__(/*! ./ArrayUtils */ "../../main/dist/ArrayUtils.js"));
const Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));
const DictionaryUtils = __importStar(__webpack_require__(/*! ./DictionaryUtils */ "../../main/dist/DictionaryUtils.js"));
const Event_1 = __importDefault(__webpack_require__(/*! ./Event */ "../../main/dist/Event.js"));
const index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");
const internal_1 = __webpack_require__(/*! ./internal */ "../../main/dist/internal.js");
const List_1 = __importDefault(__webpack_require__(/*! ./List */ "../../main/dist/List.js"));
const Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));
const Set_1 = __importDefault(__webpack_require__(/*! ./Set */ "../../main/dist/Set.js"));
/**
 * Unordered key-value collection. Each item has its own string key.
 * @param T Item type.
 */
class Map extends Class_1.default {
    constructor(a, b, c) {
        super();
        this._ownsItems = false;
        if (typeof a === "boolean") {
            c = a ? index_1.SILENT : 0;
            a = null;
        }
        else if (typeof a === "function" || (a == null && typeof b === "boolean")) {
            c = b ? index_1.SILENT : 0;
            b = a;
            a = null;
        }
        else if (typeof b === "number") {
            c = b;
            b = null;
        }
        const items = a;
        const silent = Boolean(c & index_1.SILENT);
        const adapter = (items != null) && Boolean(c & index_1.ADAPTER);
        this.getKey = b || internal_1.vid;
        this._adapter = adapter;
        this._items = this._adapter ? items : index_1.apply({}, items);
        this._length = this.own(new Property_1.default(DictionaryUtils.getLength(this._items), silent));
        this._spliceEvent = Event_1.default.make(silent);
        this._reindexEvent = Event_1.default.make(silent);
        this._clearEvent = Event_1.default.make(silent);
        this._changeEvent = Event_1.default.make(silent);
    }
    destroyObject() {
        this.clear();
        super.destroyObject();
    }
    /**
     * @inheritDoc
     */
    get silent() {
        return this.changeEvent.dummy;
    }
    /**
     * @inheritDoc
     */
    get length() {
        return this._length;
    }
    /**
     * @inheritDoc
     */
    get empty() {
        return this.length.get() === 0;
    }
    /**
     * @inheritDoc
     */
    get first() {
        return DictionaryUtils.getFirst(this._items);
    }
    /**
     * @inheritDoc
     */
    get firstKey() {
        return DictionaryUtils.getFirstKey(this._items);
    }
    /**
     * @inheritDoc
     */
    get items() {
        return this._items;
    }
    /**
     * @inheritDoc
     */
    get spliceEvent() {
        return this._spliceEvent;
    }
    /**
     * @inheritDoc
     */
    get reindexEvent() {
        return this._reindexEvent;
    }
    /**
     * @inheritDoc
     */
    get clearEvent() {
        return this._clearEvent;
    }
    /**
     * @inheritDoc
     */
    get changeEvent() {
        return this._changeEvent;
    }
    /**
     * @inheritDoc
     */
    ownItems() {
        this._ownsItems = true;
        return this;
    }
    /**
     * @inheritDoc
     */
    clone() {
        return new Map(this.items, this.getKey, this.silent ? index_1.SILENT : 0);
    }
    /**
     * @inheritDoc
     */
    get(key) {
        return this._items[key];
    }
    /**
     * @inheritDoc
     */
    getKeys() {
        return new List_1.default(Object.keys(this._items), String, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    contains(item) {
        return DictionaryUtils.contains(this._items, item);
    }
    /**
     * @inheritDoc
     */
    containsKey(key) {
        return this.get(key) !== undefined;
    }
    /**
     * @inheritDoc
     */
    keyOf(item) {
        return DictionaryUtils.keyOf(this._items, item);
    }
    /**
     * @inheritDoc
     */
    every(callback, scope) {
        return DictionaryUtils.every(this._items, callback, scope || this);
    }
    /**
     * @inheritDoc
     */
    some(callback, scope) {
        return DictionaryUtils.some(this._items, callback, scope || this);
    }
    /**
     * @inheritDoc
     */
    forEach(callback, scope) {
        DictionaryUtils.forEach(this._items, callback, scope || this);
    }
    /**
     * @inheritDoc
     */
    findKey(callback, scope) {
        return DictionaryUtils.findKey(this._items, callback, scope || this);
    }
    /**
     * @inheritDoc
     */
    find(callback, scope) {
        return DictionaryUtils.find(this._items, callback, scope || this);
    }
    /**
     * @inheritDoc
     */
    toSorted(callback, scope, order) {
        return new List_1.default(DictionaryUtils.toSorted(this._items, callback, scope || this, order), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    toSortedComparing(compare, scope, order) {
        return new List_1.default(DictionaryUtils.toSortedComparing(this._items, compare, scope || this, order), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    getSortingKeys(callback, scope, order) {
        return new List_1.default(DictionaryUtils.getSortingKeys(this._items, callback, scope || this, order), String, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    getSortingKeysComparing(compare, scope, order) {
        return new List_1.default(DictionaryUtils.getSortingKeysComparing(this._items, compare, scope || this, order), String, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    filter(callback, scope) {
        return new Map(DictionaryUtils.filter(this._items, callback, scope || this), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    count(callback, scope) {
        return DictionaryUtils.count(this._items, callback, scope || this);
    }
    /**
     * @inheritDoc
     */
    map(callback, scope, getKey) {
        return new Map(DictionaryUtils.map(this._items, callback, scope || this), getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    index(callback, scope) {
        return new Map(DictionaryUtils.index(this._items, callback, scope || this), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    reduce(reducer, initial) {
        return (typeof reducer === "function") ?
            DictionaryUtils.reduce(this.items, reducer, initial) :
            DictionaryUtils.reduce(this.items, reducer);
    }
    /**
     * @inheritDoc
     */
    max(callback, scope, order) {
        return DictionaryUtils.max(this._items, callback, scope, order);
    }
    /**
     * @inheritDoc
     */
    maxKey(callback, scope, order) {
        return DictionaryUtils.maxKey(this._items, callback, scope, order);
    }
    /**
     * @inheritDoc
     */
    maxComparing(compare, scope, order) {
        return DictionaryUtils.maxComparing(this._items, compare, scope, order);
    }
    /**
     * @inheritDoc
     */
    maxKeyComparing(compare, scope, order) {
        return DictionaryUtils.maxKeyComparing(this._items, compare, scope, order);
    }
    /**
     * @inheritDoc
     */
    min(callback, scope, order) {
        return DictionaryUtils.min(this._items, callback, scope, order);
    }
    /**
     * @inheritDoc
     */
    minKey(callback, scope, order) {
        return DictionaryUtils.minKey(this._items, callback, scope, order);
    }
    /**
     * @inheritDoc
     */
    minComparing(compare, scope, order) {
        return DictionaryUtils.minComparing(this._items, compare, scope, order);
    }
    /**
     * @inheritDoc
     */
    minKeyComparing(compare, scope, order) {
        return DictionaryUtils.minKeyComparing(this._items, compare, scope, order);
    }
    /**
     * @inheritDoc
     */
    toArray() {
        return DictionaryUtils.toArray(this._items);
    }
    /**
     * @inheritDoc
     */
    toList() {
        return new List_1.default(this.toArray(), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    toSet() {
        return new Set_1.default(this.toArray(), this.getKey, true);
    }
    /**
     * @inheritDoc
     */
    toDictionary() {
        return index_1.apply({}, this._items);
    }
    /**
     * @inheritDoc
     */
    asArray() {
        return this.toArray();
    }
    /**
     * @inheritDoc
     */
    asList() {
        return this.toList();
    }
    /**
     * @inheritDoc
     */
    asSet() {
        return this.toSet();
    }
    /**
     * @inheritDoc
     */
    asDictionary() {
        return this._items;
    }
    /**
     * @inheritDoc
     */
    tryPut(key, item) {
        const result = DictionaryUtils.tryPut(this._items, key, item);
        if (result === undefined) {
            return undefined;
        }
        const removedItem = result.value;
        if (removedItem === undefined) {
            this._length.set(this._length.get() + 1);
        }
        if (!this.silent) {
            const removedItems = {};
            if (removedItem !== undefined) {
                removedItems[key] = removedItem;
            }
            const addedItems = {};
            addedItems[key] = item;
            const spliceResult = { removedItems: removedItems, addedItems: addedItems };
            this._spliceEvent.trigger({ sender: this, spliceResult: spliceResult });
            this._changeEvent.trigger({ sender: this });
        }
        if (removedItem !== undefined && this._ownsItems) {
            removedItem.destroy();
        }
        return result;
    }
    /**
     * @inheritDoc
     */
    put(key, item) {
        const result = this.tryPut(key, item);
        return (result !== undefined) ? result.value : this.get(key);
    }
    /**
     * @inheritDoc
     */
    putAll(items) {
        if (!this.silent) {
            this.tryPutAll(items);
            return;
        }
        for (var key in items) {
            this.tryPut(key, items[key]);
        }
    }
    /**
     * @inheritDoc
     */
    putAllVerbose(items) {
        var spliceResult = this.tryPutAll(items);
        return (spliceResult !== undefined) ? spliceResult : { removedItems: {}, addedItems: {} };
    }
    /**
     * @inheritDoc
     */
    tryPutAll(items) {
        return this.trySplice([], items);
    }
    /**
     * @inheritDoc
     */
    setKey(oldKey, newKey) {
        this.trySetKey(oldKey, newKey);
        return this._items[newKey];
    }
    /**
     * @inheritDoc
     */
    trySetKey(oldKey, newKey) {
        const item = DictionaryUtils.trySetKey(this._items, oldKey, newKey);
        if (item === undefined) {
            return undefined;
        }
        if (!this.silent) {
            this._reindexEvent.trigger({ sender: this, keyMap: { [oldKey]: newKey } });
            this._changeEvent.trigger({ sender: this });
        }
        return item;
    }
    /**
     * @inheritDoc
     */
    tryRemove(key) {
        const item = DictionaryUtils.tryRemove(this._items, key);
        if (item === undefined) {
            return undefined;
        }
        this._length.set(this._length.get() - 1);
        if (!this.silent) {
            const spliceResult = { addedItems: {}, removedItems: { [key]: item } };
            this._spliceEvent.trigger({ sender: this, spliceResult: spliceResult });
            this._changeEvent.trigger({ sender: this });
        }
        if (this._ownsItems) {
            item.destroy();
        }
        return item;
    }
    /**
     * @inheritDoc
     */
    remove(key) {
        return this.tryRemove(key);
    }
    /**
     * @inheritDoc
     */
    removeItem(item) {
        var key = this.keyOf(item);
        if (key !== undefined) {
            this.tryRemove(key);
        }
        return key;
    }
    /**
     * @inheritDoc
     */
    removeAll(keys) {
        if (!this.silent) {
            this.tryRemoveAll(keys);
            return;
        }
        for (let i = 0, l = keys.length; i < l; ++i) {
            this.tryRemove(keys[i]);
        }
    }
    /**
     * @inheritDoc
     */
    removeAllVerbose(keys) {
        const items = this.tryRemoveAll(keys);
        return (items !== undefined) ? items : {};
    }
    /**
     * @inheritDoc
     */
    tryRemoveAll(keys) {
        const spliceResult = this.trySplice(keys, {});
        if (spliceResult !== undefined) {
            return spliceResult.removedItems;
        }
        return undefined;
    }
    /**
     * @inheritDoc
     */
    removeItems(items) {
        const itemSet = internal_1.VidSet.fromArray(items, this.getKey);
        const newItems = DictionaryUtils.filter(this._items, function (item) {
            return !itemSet.contains(item);
        });
        this.performSplice(newItems);
    }
    /**
     * @inheritDoc
     */
    clear() {
        if (this._length.get() === 0) {
            return undefined;
        }
        let items;
        this._length.set(0);
        if (this._adapter) {
            items = DictionaryUtils.tryClear(this._items);
        }
        else {
            items = this._items;
            this._items = {};
        }
        this._clearEvent.trigger({ sender: this, items: items });
        this._changeEvent.trigger({ sender: this });
        if (this._ownsItems) {
            ArrayUtils.backEvery(DictionaryUtils.toArray(items), index_1.destroy);
        }
        return items;
    }
    /**
     * @inheritDoc
     */
    splice(removedKeys, updatedItems) {
        var spliceResult = this.trySplice(removedKeys, updatedItems);
        return (spliceResult !== undefined) ? spliceResult : { removedItems: {}, addedItems: {} };
    }
    /**
     * @inheritDoc
     */
    trySplice(removedKeys, updatedItems) {
        const spliceResult = DictionaryUtils.trySplice(this._items, removedKeys, updatedItems);
        if (spliceResult === undefined) {
            return undefined;
        }
        this._length.set(this._length.get() + DictionaryUtils.getLength(spliceResult.addedItems) - DictionaryUtils.getLength(spliceResult.removedItems));
        this._spliceEvent.trigger({ sender: this, spliceResult: spliceResult });
        this._changeEvent.trigger({ sender: this });
        if (this._ownsItems) {
            ArrayUtils.backEvery(DictionaryUtils.toArray(spliceResult.removedItems), index_1.destroy);
        }
        return spliceResult;
    }
    /**
     * @inheritDoc
     */
    reindex(keyMap) {
        var result = this.tryReindex(keyMap);
        return (result !== undefined) ? result : {};
    }
    /**
     * @inheritDoc
     */
    tryReindex(keyMap) {
        const result = DictionaryUtils.tryReindex(this._items, keyMap);
        if (result === undefined) {
            return undefined;
        }
        this._reindexEvent.trigger({ sender: this, keyMap: result });
        this._changeEvent.trigger({ sender: this });
        return result;
    }
    /**
     * @inheritDoc
     */
    detectSplice(newItems) {
        return DictionaryUtils.detectSplice(this._items, newItems);
    }
    /**
     * @inheritDoc
     */
    detectReindex(newItems) {
        return DictionaryUtils.detectReindex(this._items, newItems, this.getKey);
    }
    /**
     * @inheritDoc
     */
    performSplice(newItems) {
        var params = this.detectSplice(newItems);
        if (params !== undefined) {
            this.trySplice(params.removedKeys, params.updatedItems);
        }
    }
    /**
     * @inheritDoc
     */
    performReindex(newItems) {
        var keyMap = this.detectReindex(newItems);
        if (keyMap !== undefined) {
            this.tryReindex(keyMap);
        }
    }
    /**
     * @inheritDoc
     */
    equal(map) {
        return DictionaryUtils.equal(this._items, map);
    }
}
exports.default = Map;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL01hcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFzQkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVGLHlEQUEyQztBQUUzQyxvREFBNEI7QUFHNUIsbUVBQXFEO0FBQ3JELG9EQUE0QjtBQUk1QixtQ0FBeUU7QUFDekUseUNBQXVDO0FBR3ZDLGtEQUEwQjtBQUUxQiwwREFBa0M7QUFFbEMsZ0RBQXdCO0FBR3hCOzs7R0FHRztBQUNILE1BQU0sR0FBTyxTQUFRLGVBQUs7SUF1Q3pCLFlBQVksQ0FBTyxFQUFFLENBQU8sRUFBRSxDQUFtQjtRQUNoRCxLQUFLLEVBQUUsQ0FBQztRQXZDRCxlQUFVLEdBQVksS0FBSyxDQUFDO1FBd0NuQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUMzQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQixDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQ1Q7YUFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksT0FBTyxDQUFDLEtBQUssU0FBUyxDQUFDLEVBQUU7WUFDNUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNOLENBQUMsR0FBRyxJQUFJLENBQUM7U0FDVDthQUFNLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO1lBQ2pDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDTixDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQ1Q7UUFDRCxNQUFNLEtBQUssR0FBa0IsQ0FBQyxDQUFDO1FBQy9CLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLEdBQUcs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YyxDQUFDLFFBQXVCO1FBQ3JDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUMsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7SUFDRixDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsR0FBa0I7UUFDdkIsT0FBTyxlQUFlLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDaEQsQ0FBQztDQUNEO0FBRUQsa0JBQWUsR0FBRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0ICogYXMgQXJyYXlVdGlscyBmcm9tICcuL0FycmF5VXRpbHMnO1xuaW1wb3J0IEJpbmRhYmxlIGZyb20gJy4vQmluZGFibGUnO1xuaW1wb3J0IENsYXNzIGZyb20gJy4vQ2xhc3MnO1xuaW1wb3J0IERlc3Ryb3lhYmxlIGZyb20gJy4vRGVzdHJveWFibGUnO1xuaW1wb3J0IERpY3Rpb25hcnkgZnJvbSAnLi9EaWN0aW9uYXJ5JztcbmltcG9ydCAqIGFzIERpY3Rpb25hcnlVdGlscyBmcm9tICcuL0RpY3Rpb25hcnlVdGlscyc7XG5pbXBvcnQgRXZlbnQgZnJvbSAnLi9FdmVudCc7XG5pbXBvcnQgSUV2ZW50IGZyb20gJy4vSUV2ZW50JztcbmltcG9ydCBJTGlzdCBmcm9tICcuL0lMaXN0JztcbmltcG9ydCBJTWFwIGZyb20gJy4vSU1hcCc7XG5pbXBvcnQge0FEQVBURVIsIGFwcGx5LCBDb2xsZWN0aW9uRmxhZ3MsIGRlc3Ryb3ksIFNJTEVOVH0gZnJvbSAnLi9pbmRleCc7XG5pbXBvcnQge3ZpZCwgVmlkU2V0fSBmcm9tICcuL2ludGVybmFsJztcbmltcG9ydCBJUHJvcGVydHkgZnJvbSAnLi9JUHJvcGVydHknO1xuaW1wb3J0IElTZXQgZnJvbSAnLi9JU2V0JztcbmltcG9ydCBMaXN0IGZyb20gJy4vTGlzdCc7XG5pbXBvcnQgTGlzdGVuYWJsZSBmcm9tICcuL0xpc3RlbmFibGUnO1xuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4vUHJvcGVydHknO1xuaW1wb3J0IFJlZHVjZXIgZnJvbSAnLi9SZWR1Y2VyJztcbmltcG9ydCBTZXQgZnJvbSAnLi9TZXQnO1xuaW1wb3J0IFNvbWUgZnJvbSAnLi9Tb21lJztcblxuLyoqXG4gKiBVbm9yZGVyZWQga2V5LXZhbHVlIGNvbGxlY3Rpb24uIEVhY2ggaXRlbSBoYXMgaXRzIG93biBzdHJpbmcga2V5LlxuICogQHBhcmFtIFQgSXRlbSB0eXBlLlxuICovXG5jbGFzcyBNYXA8VD4gZXh0ZW5kcyBDbGFzcyBpbXBsZW1lbnRzIElNYXA8VD4ge1xuXHRwcml2YXRlIF9vd25zSXRlbXM6IEJvb2xlYW4gPSBmYWxzZTtcblx0cHJpdmF0ZSBfbGVuZ3RoOiBJUHJvcGVydHk8bnVtYmVyPjtcblx0cHJpdmF0ZSBfYWRhcHRlcjogYm9vbGVhbjtcblx0cHJpdmF0ZSBfaXRlbXM6IERpY3Rpb25hcnk8VD47XG5cblx0cHJpdmF0ZSBfc3BsaWNlRXZlbnQ6IElFdmVudDxJTWFwLlNwbGljZUV2ZW50UGFyYW1zPFQ+Pjtcblx0cHJpdmF0ZSBfcmVpbmRleEV2ZW50OiBJRXZlbnQ8SU1hcC5SZWluZGV4RXZlbnRQYXJhbXM8VD4+O1xuXHRwcml2YXRlIF9jbGVhckV2ZW50OiBJRXZlbnQ8SU1hcC5JdGVtc0V2ZW50UGFyYW1zPFQ+Pjtcblx0cHJpdmF0ZSBfY2hhbmdlRXZlbnQ6IElFdmVudDxJTWFwLkV2ZW50UGFyYW1zPFQ+PjtcblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHJlYWRvbmx5IGdldEtleTogKGl0ZW06IFQpID0+IGFueTtcblxuXHQvKipcblx0ICogQHBhcmFtIHNpbGVudCBDcmVhdGUgYSBzaWxlbnQgY29sbGVjdGlvbiB3aGljaCBtZWFucyB0aGF0IGl0IG5ldmVyIHRyaWdnZXJzIG1vZGlmaWNhdGlvbiBldmVudHMuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihzaWxlbnQ/OiBib29sZWFuKTtcblxuXHQvKipcblx0ICogQHBhcmFtIGdldEtleSBGdW5jdGlvbiB0aGF0IGlkZW50aWZpZXMgYW4gaXRlbSBpbiB0aGlzIGNvbGxlY3Rpb24gZm9yIG9wdGltaXphdGlvbiBvZiBzb21lIGFsZ29yaXRobXMuXG5cdCAqIEBwYXJhbSBzaWxlbnQgQ3JlYXRlIGEgc2lsZW50IGNvbGxlY3Rpb24gd2hpY2ggbWVhbnMgdGhhdCBpdCBuZXZlciB0cmlnZ2VycyBtb2RpZmljYXRpb24gZXZlbnRzLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoZ2V0S2V5OiAoaXRlbTogVCkgPT4gYW55LCBzaWxlbnQ/OiBib29sZWFuKTtcblxuXHQvKipcblx0ICogQHBhcmFtIGl0ZW1zIEluaXRpYWwgbWFwIGNvbnRlbnRzLlxuXHQgKiBAcGFyYW0gZmxhZ3MgQ29sbGVjdGlvbiBjb25maWd1cmF0aW9uIGZsYWdzLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoaXRlbXM6IERpY3Rpb25hcnk8VD4sIGZsYWdzPzogQ29sbGVjdGlvbkZsYWdzKTtcblxuXHQvKipcblx0ICogQHBhcmFtIGl0ZW1zIEluaXRpYWwgbWFwIGNvbnRlbnRzLlxuXHQgKiBAcGFyYW0gZ2V0S2V5IEZ1bmN0aW9uIHRoYXQgaWRlbnRpZmllcyBhbiBpdGVtIGluIHRoaXMgY29sbGVjdGlvbiBmb3Igb3B0aW1pemF0aW9uIG9mIHNvbWUgYWxnb3JpdGhtcy5cblx0ICogQHBhcmFtIGZsYWdzIENvbGxlY3Rpb24gY29uZmlndXJhdGlvbiBmbGFncy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKGl0ZW1zOiBEaWN0aW9uYXJ5PFQ+LCBnZXRLZXk6IChpdGVtOiBUKSA9PiBhbnksIGZsYWdzPzogQ29sbGVjdGlvbkZsYWdzKTtcblx0Y29uc3RydWN0b3IoYT86IGFueSwgYj86IGFueSwgYz86IENvbGxlY3Rpb25GbGFncykge1xuXHRcdHN1cGVyKCk7XG5cdFx0aWYgKHR5cGVvZiBhID09PSBcImJvb2xlYW5cIikge1xuXHRcdFx0YyA9IGEgPyBTSUxFTlQgOiAwO1xuXHRcdFx0YSA9IG51bGw7XG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgYSA9PT0gXCJmdW5jdGlvblwiIHx8IChhID09IG51bGwgJiYgdHlwZW9mIGIgPT09IFwiYm9vbGVhblwiKSkge1xuXHRcdFx0YyA9IGIgPyBTSUxFTlQgOiAwO1xuXHRcdFx0YiA9IGE7XG5cdFx0XHRhID0gbnVsbDtcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiBiID09PSBcIm51bWJlclwiKSB7XG5cdFx0XHRjID0gYjtcblx0XHRcdGIgPSBudWxsO1xuXHRcdH1cblx0XHRjb25zdCBpdGVtczogRGljdGlvbmFyeTxUPiA9IGE7XG5cdFx0Y29uc3Qgc2lsZW50ID0gQm9vbGVhbihjICYgU0lMRU5UKTtcblx0XHRjb25zdCBhZGFwdGVyID0gKGl0ZW1zICE9IG51bGwpICYmIEJvb2xlYW4oYyAmIEFEQVBURVIpO1xuXG5cdFx0dGhpcy5nZXRLZXkgPSBiIHx8IHZpZDtcblxuXHRcdHRoaXMuX2FkYXB0ZXIgPSBhZGFwdGVyO1xuXHRcdHRoaXMuX2l0ZW1zID0gdGhpcy5fYWRhcHRlciA/IGl0ZW1zIDogYXBwbHk8VD4oe30sIGl0ZW1zKTtcblx0XHR0aGlzLl9sZW5ndGggPSB0aGlzLm93bihuZXcgUHJvcGVydHkoRGljdGlvbmFyeVV0aWxzLmdldExlbmd0aCh0aGlzLl9pdGVtcyksIHNpbGVudCkpO1xuXG5cdFx0dGhpcy5fc3BsaWNlRXZlbnQgPSBFdmVudC5tYWtlPElNYXAuU3BsaWNlRXZlbnRQYXJhbXM8VD4+KHNpbGVudCk7XG5cdFx0dGhpcy5fcmVpbmRleEV2ZW50ID0gRXZlbnQubWFrZTxJTWFwLlJlaW5kZXhFdmVudFBhcmFtczxUPj4oc2lsZW50KTtcblx0XHR0aGlzLl9jbGVhckV2ZW50ID0gRXZlbnQubWFrZTxJTWFwLkl0ZW1zRXZlbnRQYXJhbXM8VD4+KHNpbGVudCk7XG5cdFx0dGhpcy5fY2hhbmdlRXZlbnQgPSBFdmVudC5tYWtlPElNYXAuRXZlbnRQYXJhbXM8VD4+KHNpbGVudCk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgZGVzdHJveU9iamVjdCgpOiB2b2lkIHtcblx0XHR0aGlzLmNsZWFyKCk7XG5cdFx0c3VwZXIuZGVzdHJveU9iamVjdCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRnZXQgc2lsZW50KCkge1xuXHRcdHJldHVybiB0aGlzLmNoYW5nZUV2ZW50LmR1bW15O1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRnZXQgbGVuZ3RoKCk6IEJpbmRhYmxlPG51bWJlcj4ge1xuXHRcdHJldHVybiB0aGlzLl9sZW5ndGg7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGdldCBlbXB0eSgpIHtcblx0XHRyZXR1cm4gdGhpcy5sZW5ndGguZ2V0KCkgPT09IDA7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGdldCBmaXJzdCgpOiBUIHtcblx0XHRyZXR1cm4gRGljdGlvbmFyeVV0aWxzLmdldEZpcnN0KHRoaXMuX2l0ZW1zKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0Z2V0IGZpcnN0S2V5KCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIERpY3Rpb25hcnlVdGlscy5nZXRGaXJzdEtleSh0aGlzLl9pdGVtcyk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGdldCBpdGVtcygpOiBEaWN0aW9uYXJ5PFQ+IHtcblx0XHRyZXR1cm4gdGhpcy5faXRlbXM7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGdldCBzcGxpY2VFdmVudCgpOiBMaXN0ZW5hYmxlPElNYXAuU3BsaWNlRXZlbnRQYXJhbXM8VD4+IHtcblx0XHRyZXR1cm4gdGhpcy5fc3BsaWNlRXZlbnQ7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGdldCByZWluZGV4RXZlbnQoKTogTGlzdGVuYWJsZTxJTWFwLlJlaW5kZXhFdmVudFBhcmFtczxUPj4ge1xuXHRcdHJldHVybiB0aGlzLl9yZWluZGV4RXZlbnQ7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGdldCBjbGVhckV2ZW50KCk6IExpc3RlbmFibGU8SU1hcC5JdGVtc0V2ZW50UGFyYW1zPFQ+PiB7XG5cdFx0cmV0dXJuIHRoaXMuX2NsZWFyRXZlbnQ7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGdldCBjaGFuZ2VFdmVudCgpOiBMaXN0ZW5hYmxlPElNYXAuRXZlbnRQYXJhbXM8VD4+IHtcblx0XHRyZXR1cm4gdGhpcy5fY2hhbmdlRXZlbnQ7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdG93bkl0ZW1zKCk6IHRoaXMge1xuXHRcdHRoaXMuX293bnNJdGVtcyA9IHRydWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGNsb25lKCk6IElNYXA8VD4ge1xuXHRcdHJldHVybiBuZXcgTWFwPFQ+KHRoaXMuaXRlbXMsIHRoaXMuZ2V0S2V5LCB0aGlzLnNpbGVudCA/IFNJTEVOVCA6IDApO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRnZXQoa2V5OiBzdHJpbmcpOiBUIHtcblx0XHRyZXR1cm4gdGhpcy5faXRlbXNba2V5XTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0Z2V0S2V5cygpOiBJTGlzdDxzdHJpbmc+IHtcblx0XHRyZXR1cm4gbmV3IExpc3Q8c3RyaW5nPihPYmplY3Qua2V5cyh0aGlzLl9pdGVtcyksIFN0cmluZywgU0lMRU5UIHwgQURBUFRFUik7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGNvbnRhaW5zKGl0ZW06IFQpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gRGljdGlvbmFyeVV0aWxzLmNvbnRhaW5zKHRoaXMuX2l0ZW1zLCBpdGVtKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0Y29udGFpbnNLZXkoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5nZXQoa2V5KSAhPT0gdW5kZWZpbmVkO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRrZXlPZihpdGVtOiBUKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gRGljdGlvbmFyeVV0aWxzLmtleU9mKHRoaXMuX2l0ZW1zLCBpdGVtKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0ZXZlcnkoY2FsbGJhY2s6IChpdGVtOiBULCBrZXk6IHN0cmluZykgPT4gYW55LCBzY29wZT86IGFueSk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBEaWN0aW9uYXJ5VXRpbHMuZXZlcnkodGhpcy5faXRlbXMsIGNhbGxiYWNrLCBzY29wZSB8fCB0aGlzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0c29tZShjYWxsYmFjazogKGl0ZW06IFQsIGtleTogc3RyaW5nKSA9PiBhbnksIHNjb3BlPzogYW55KTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIERpY3Rpb25hcnlVdGlscy5zb21lKHRoaXMuX2l0ZW1zLCBjYWxsYmFjaywgc2NvcGUgfHwgdGhpcyk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGZvckVhY2goY2FsbGJhY2s6IChpdGVtOiBULCBrZXk6IHN0cmluZykgPT4gYW55LCBzY29wZT86IGFueSk6IHZvaWQge1xuXHRcdERpY3Rpb25hcnlVdGlscy5mb3JFYWNoKHRoaXMuX2l0ZW1zLCBjYWxsYmFjaywgc2NvcGUgfHwgdGhpcyk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGZpbmRLZXkoY2FsbGJhY2s6IChpdGVtOiBULCBrZXk6IHN0cmluZykgPT4gYW55LCBzY29wZT86IGFueSk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIERpY3Rpb25hcnlVdGlscy5maW5kS2V5KHRoaXMuX2l0ZW1zLCBjYWxsYmFjaywgc2NvcGUgfHwgdGhpcyk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGZpbmQoY2FsbGJhY2s6IChpdGVtOiBULCBrZXk6IHN0cmluZykgPT4gYW55LCBzY29wZT86IGFueSk6IFQge1xuXHRcdHJldHVybiBEaWN0aW9uYXJ5VXRpbHMuZmluZCh0aGlzLl9pdGVtcywgY2FsbGJhY2ssIHNjb3BlIHx8IHRoaXMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHR0b1NvcnRlZChjYWxsYmFjaz86IChpdGVtOiBULCBrZXk6IHN0cmluZykgPT4gYW55LCBzY29wZT86IGFueSwgb3JkZXI/OiBudW1iZXIpOiBJTGlzdDxUPiB7XG5cdFx0cmV0dXJuIG5ldyBMaXN0PFQ+KERpY3Rpb25hcnlVdGlscy50b1NvcnRlZCh0aGlzLl9pdGVtcywgY2FsbGJhY2ssIHNjb3BlIHx8IHRoaXMsIG9yZGVyKSwgdGhpcy5nZXRLZXksIFNJTEVOVCB8IEFEQVBURVIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHR0b1NvcnRlZENvbXBhcmluZyhjb21wYXJlPzogKHQxOiBULCB0MjogVCwgazE6IHN0cmluZywgazI6IHN0cmluZykgPT4gbnVtYmVyLCBzY29wZT86IGFueSwgb3JkZXI/OiBudW1iZXIpOiBJTGlzdDxUPiB7XG5cdFx0cmV0dXJuIG5ldyBMaXN0PFQ+KERpY3Rpb25hcnlVdGlscy50b1NvcnRlZENvbXBhcmluZyh0aGlzLl9pdGVtcywgY29tcGFyZSwgc2NvcGUgfHwgdGhpcywgb3JkZXIpLCB0aGlzLmdldEtleSwgU0lMRU5UIHwgQURBUFRFUik7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGdldFNvcnRpbmdLZXlzKGNhbGxiYWNrPzogKGl0ZW06IFQsIGtleTogc3RyaW5nKSA9PiBhbnksIHNjb3BlPzogYW55LCBvcmRlcj86IG51bWJlcik6IElMaXN0PHN0cmluZz4ge1xuXHRcdHJldHVybiBuZXcgTGlzdDxzdHJpbmc+KERpY3Rpb25hcnlVdGlscy5nZXRTb3J0aW5nS2V5cyh0aGlzLl9pdGVtcywgY2FsbGJhY2ssIHNjb3BlIHx8IHRoaXMsIG9yZGVyKSwgU3RyaW5nLCBTSUxFTlQgfCBBREFQVEVSKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0Z2V0U29ydGluZ0tleXNDb21wYXJpbmcoY29tcGFyZT86ICh0MTogVCwgdDI6IFQsIGsxOiBzdHJpbmcsIGsyOiBzdHJpbmcpID0+IG51bWJlciwgc2NvcGU/OiBhbnksIG9yZGVyPzogbnVtYmVyKTogSUxpc3Q8c3RyaW5nPiB7XG5cdFx0cmV0dXJuIG5ldyBMaXN0PHN0cmluZz4oRGljdGlvbmFyeVV0aWxzLmdldFNvcnRpbmdLZXlzQ29tcGFyaW5nKHRoaXMuX2l0ZW1zLCBjb21wYXJlLCBzY29wZSB8fCB0aGlzLCBvcmRlciksIFN0cmluZywgU0lMRU5UIHwgQURBUFRFUik7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGZpbHRlcihjYWxsYmFjazogKGl0ZW06IFQsIGtleTogc3RyaW5nKSA9PiBhbnksIHNjb3BlPzogYW55KTogSU1hcDxUPiB7XG5cdFx0cmV0dXJuIG5ldyBNYXA8VD4oRGljdGlvbmFyeVV0aWxzLmZpbHRlcih0aGlzLl9pdGVtcywgY2FsbGJhY2ssIHNjb3BlIHx8IHRoaXMpLCB0aGlzLmdldEtleSwgU0lMRU5UIHwgQURBUFRFUik7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGNvdW50KGNhbGxiYWNrOiAoaXRlbTogVCwga2V5OiBzdHJpbmcpID0+IGFueSwgc2NvcGU/OiBhbnkpOiBudW1iZXIge1xuXHRcdHJldHVybiBEaWN0aW9uYXJ5VXRpbHMuY291bnQodGhpcy5faXRlbXMsIGNhbGxiYWNrLCBzY29wZSB8fCB0aGlzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0bWFwPFU+KGNhbGxiYWNrOiAoaXRlbTogVCwga2V5OiBzdHJpbmcpID0+IFUsIHNjb3BlPzogYW55LCBnZXRLZXk/OiAoaXRlbTogVSkgPT4gYW55KTogSU1hcDxVPiB7XG5cdFx0cmV0dXJuIG5ldyBNYXA8VT4oRGljdGlvbmFyeVV0aWxzLm1hcCh0aGlzLl9pdGVtcywgY2FsbGJhY2ssIHNjb3BlIHx8IHRoaXMpLCBnZXRLZXksIFNJTEVOVCB8IEFEQVBURVIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRpbmRleChjYWxsYmFjazogKGl0ZW06IFQsIGtleTogc3RyaW5nKSA9PiBhbnksIHNjb3BlPzogYW55KTogSU1hcDxUPiB7XG5cdFx0cmV0dXJuIG5ldyBNYXA8VD4oRGljdGlvbmFyeVV0aWxzLmluZGV4KHRoaXMuX2l0ZW1zLCBjYWxsYmFjaywgc2NvcGUgfHwgdGhpcyksIHRoaXMuZ2V0S2V5LCBTSUxFTlQgfCBBREFQVEVSKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cmVkdWNlPFU+KHJlZHVjZXI6IFJlZHVjZXI8VCwgVT4pOiBVO1xuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cmVkdWNlPFU+KGNhbGxiYWNrOiAoYWNjdW11bGF0b3I6IFUsIGl0ZW06IFQsIGtleTogc3RyaW5nKSA9PiBVLCBpbml0aWFsOiBVKTogVTtcblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHJlZHVjZTxVPihyZWR1Y2VyOiBSZWR1Y2VyPFQsIFU+IHwgKChhY2N1bXVsYXRvcjogVSwgaXRlbTogVCwga2V5OiBzdHJpbmcpID0+IFUpLCBpbml0aWFsPzogVSk6IFUge1xuXHRcdHJldHVybiAodHlwZW9mIHJlZHVjZXIgPT09IFwiZnVuY3Rpb25cIikgP1xuXHRcdFx0RGljdGlvbmFyeVV0aWxzLnJlZHVjZTxULCBVPih0aGlzLml0ZW1zLCByZWR1Y2VyLCBpbml0aWFsKSA6XG5cdFx0XHREaWN0aW9uYXJ5VXRpbHMucmVkdWNlPFQsIFU+KHRoaXMuaXRlbXMsIHJlZHVjZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRtYXgoY2FsbGJhY2s/OiAoaXRlbTogVCwga2V5OiBzdHJpbmcpID0+IGFueSwgc2NvcGU/OiBhbnksIG9yZGVyPzogbnVtYmVyKTogVCB7XG5cdFx0cmV0dXJuIERpY3Rpb25hcnlVdGlscy5tYXgodGhpcy5faXRlbXMsIGNhbGxiYWNrLCBzY29wZSwgb3JkZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRtYXhLZXkoY2FsbGJhY2s/OiAoaXRlbTogVCwga2V5OiBzdHJpbmcpID0+IGFueSwgc2NvcGU/OiBhbnksIG9yZGVyPzogbnVtYmVyKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gRGljdGlvbmFyeVV0aWxzLm1heEtleSh0aGlzLl9pdGVtcywgY2FsbGJhY2ssIHNjb3BlLCBvcmRlcik7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdG1heENvbXBhcmluZyhjb21wYXJlPzogKHQxOiBULCB0MjogVCwgazE6IHN0cmluZywgazI6IHN0cmluZykgPT4gbnVtYmVyLCBzY29wZT86IGFueSwgb3JkZXI/OiBudW1iZXIpOiBUIHtcblx0XHRyZXR1cm4gRGljdGlvbmFyeVV0aWxzLm1heENvbXBhcmluZyh0aGlzLl9pdGVtcywgY29tcGFyZSwgc2NvcGUsIG9yZGVyKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0bWF4S2V5Q29tcGFyaW5nKGNvbXBhcmU/OiAodDE6IFQsIHQyOiBULCBrMTogc3RyaW5nLCBrMjogc3RyaW5nKSA9PiBudW1iZXIsIHNjb3BlPzogYW55LCBvcmRlcj86IG51bWJlcik6IHN0cmluZyB7XG5cdFx0cmV0dXJuIERpY3Rpb25hcnlVdGlscy5tYXhLZXlDb21wYXJpbmcodGhpcy5faXRlbXMsIGNvbXBhcmUsIHNjb3BlLCBvcmRlcik7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdG1pbihjYWxsYmFjaz86IChpdGVtOiBULCBrZXk6IHN0cmluZykgPT4gYW55LCBzY29wZT86IGFueSwgb3JkZXI/OiBudW1iZXIpOiBUIHtcblx0XHRyZXR1cm4gRGljdGlvbmFyeVV0aWxzLm1pbih0aGlzLl9pdGVtcywgY2FsbGJhY2ssIHNjb3BlLCBvcmRlcik7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdG1pbktleShjYWxsYmFjaz86IChpdGVtOiBULCBrZXk6IHN0cmluZykgPT4gYW55LCBzY29wZT86IGFueSwgb3JkZXI/OiBudW1iZXIpOiBzdHJpbmcge1xuXHRcdHJldHVybiBEaWN0aW9uYXJ5VXRpbHMubWluS2V5KHRoaXMuX2l0ZW1zLCBjYWxsYmFjaywgc2NvcGUsIG9yZGVyKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0bWluQ29tcGFyaW5nKGNvbXBhcmU/OiAodDE6IFQsIHQyOiBULCBrMTogc3RyaW5nLCBrMjogc3RyaW5nKSA9PiBudW1iZXIsIHNjb3BlPzogYW55LCBvcmRlcj86IG51bWJlcik6IFQge1xuXHRcdHJldHVybiBEaWN0aW9uYXJ5VXRpbHMubWluQ29tcGFyaW5nKHRoaXMuX2l0ZW1zLCBjb21wYXJlLCBzY29wZSwgb3JkZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRtaW5LZXlDb21wYXJpbmcoY29tcGFyZT86ICh0MTogVCwgdDI6IFQsIGsxOiBzdHJpbmcsIGsyOiBzdHJpbmcpID0+IG51bWJlciwgc2NvcGU/OiBhbnksIG9yZGVyPzogbnVtYmVyKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gRGljdGlvbmFyeVV0aWxzLm1pbktleUNvbXBhcmluZyh0aGlzLl9pdGVtcywgY29tcGFyZSwgc2NvcGUsIG9yZGVyKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0dG9BcnJheSgpOiBUW10ge1xuXHRcdHJldHVybiBEaWN0aW9uYXJ5VXRpbHMudG9BcnJheSh0aGlzLl9pdGVtcyk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHRvTGlzdCgpOiBJTGlzdDxUPiB7XG5cdFx0cmV0dXJuIG5ldyBMaXN0PFQ+KHRoaXMudG9BcnJheSgpLCB0aGlzLmdldEtleSwgU0lMRU5UIHwgQURBUFRFUik7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHRvU2V0KCk6IElTZXQ8VD4ge1xuXHRcdHJldHVybiBuZXcgU2V0PFQ+KHRoaXMudG9BcnJheSgpLCB0aGlzLmdldEtleSwgdHJ1ZSk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHRvRGljdGlvbmFyeSgpOiBEaWN0aW9uYXJ5PFQ+IHtcblx0XHRyZXR1cm4gYXBwbHk8VD4oe30sIHRoaXMuX2l0ZW1zKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0YXNBcnJheSgpOiBUW10ge1xuXHRcdHJldHVybiB0aGlzLnRvQXJyYXkoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0YXNMaXN0KCk6IElMaXN0PFQ+IHtcblx0XHRyZXR1cm4gdGhpcy50b0xpc3QoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0YXNTZXQoKTogSVNldDxUPiB7XG5cdFx0cmV0dXJuIHRoaXMudG9TZXQoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0YXNEaWN0aW9uYXJ5KCk6IERpY3Rpb25hcnk8VD4ge1xuXHRcdHJldHVybiB0aGlzLl9pdGVtcztcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0dHJ5UHV0KGtleTogc3RyaW5nLCBpdGVtOiBUKTogU29tZTxUPiB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gRGljdGlvbmFyeVV0aWxzLnRyeVB1dCh0aGlzLl9pdGVtcywga2V5LCBpdGVtKTtcblx0XHRpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGNvbnN0IHJlbW92ZWRJdGVtID0gcmVzdWx0LnZhbHVlO1xuXHRcdGlmIChyZW1vdmVkSXRlbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLl9sZW5ndGguc2V0KHRoaXMuX2xlbmd0aC5nZXQoKSArIDEpO1xuXHRcdH1cblx0XHRpZiAoIXRoaXMuc2lsZW50KSB7XG5cdFx0XHRjb25zdCByZW1vdmVkSXRlbXM6IERpY3Rpb25hcnk8VD4gPSB7fTtcblx0XHRcdGlmIChyZW1vdmVkSXRlbSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHJlbW92ZWRJdGVtc1trZXldID0gcmVtb3ZlZEl0ZW07XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBhZGRlZEl0ZW1zOiBEaWN0aW9uYXJ5PFQ+ID0ge307XG5cdFx0XHRhZGRlZEl0ZW1zW2tleV0gPSBpdGVtO1xuXHRcdFx0Y29uc3Qgc3BsaWNlUmVzdWx0ID0ge3JlbW92ZWRJdGVtczogcmVtb3ZlZEl0ZW1zLCBhZGRlZEl0ZW1zOiBhZGRlZEl0ZW1zfTtcblx0XHRcdHRoaXMuX3NwbGljZUV2ZW50LnRyaWdnZXIoe3NlbmRlcjogdGhpcywgc3BsaWNlUmVzdWx0OiBzcGxpY2VSZXN1bHR9KTtcblx0XHRcdHRoaXMuX2NoYW5nZUV2ZW50LnRyaWdnZXIoe3NlbmRlcjogdGhpc30pO1xuXHRcdH1cblx0XHRpZiAocmVtb3ZlZEl0ZW0gIT09IHVuZGVmaW5lZCAmJiB0aGlzLl9vd25zSXRlbXMpIHtcblx0XHRcdCg8RGVzdHJveWFibGU+PGFueT5yZW1vdmVkSXRlbSkuZGVzdHJveSgpO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdXQoa2V5OiBzdHJpbmcsIGl0ZW06IFQpOiBUIHtcblx0XHRjb25zdCByZXN1bHQgPSB0aGlzLnRyeVB1dChrZXksIGl0ZW0pO1xuXHRcdHJldHVybiAocmVzdWx0ICE9PSB1bmRlZmluZWQpID8gcmVzdWx0LnZhbHVlIDogdGhpcy5nZXQoa2V5KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHV0QWxsKGl0ZW1zOiBEaWN0aW9uYXJ5PFQ+KSB7XG5cdFx0aWYgKCF0aGlzLnNpbGVudCkge1xuXHRcdFx0dGhpcy50cnlQdXRBbGwoaXRlbXMpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRmb3IgKHZhciBrZXkgaW4gaXRlbXMpIHtcblx0XHRcdHRoaXMudHJ5UHV0KGtleSwgaXRlbXNba2V5XSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdXRBbGxWZXJib3NlKGl0ZW1zOiBEaWN0aW9uYXJ5PFQ+KTogSU1hcC5TcGxpY2VSZXN1bHQ8VD4ge1xuXHRcdHZhciBzcGxpY2VSZXN1bHQgPSB0aGlzLnRyeVB1dEFsbChpdGVtcyk7XG5cdFx0cmV0dXJuIChzcGxpY2VSZXN1bHQgIT09IHVuZGVmaW5lZCkgPyBzcGxpY2VSZXN1bHQgOiB7cmVtb3ZlZEl0ZW1zOiB7fSwgYWRkZWRJdGVtczoge319O1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHR0cnlQdXRBbGwoaXRlbXM6IERpY3Rpb25hcnk8VD4pOiBJTWFwLlNwbGljZVJlc3VsdDxUPiB7XG5cdFx0cmV0dXJuIHRoaXMudHJ5U3BsaWNlKFtdLCBpdGVtcyk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHNldEtleShvbGRLZXk6IHN0cmluZywgbmV3S2V5OiBzdHJpbmcpOiBUIHtcblx0XHR0aGlzLnRyeVNldEtleShvbGRLZXksIG5ld0tleSk7XG5cdFx0cmV0dXJuIHRoaXMuX2l0ZW1zW25ld0tleV07XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHRyeVNldEtleShvbGRLZXk6IHN0cmluZywgbmV3S2V5OiBzdHJpbmcpOiBUIHtcblx0XHRjb25zdCBpdGVtID0gRGljdGlvbmFyeVV0aWxzLnRyeVNldEtleSh0aGlzLl9pdGVtcywgb2xkS2V5LCBuZXdLZXkpO1xuXHRcdGlmIChpdGVtID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICghdGhpcy5zaWxlbnQpIHtcblx0XHRcdHRoaXMuX3JlaW5kZXhFdmVudC50cmlnZ2VyKHtzZW5kZXI6IHRoaXMsIGtleU1hcDoge1tvbGRLZXldOiBuZXdLZXl9fSk7XG5cdFx0XHR0aGlzLl9jaGFuZ2VFdmVudC50cmlnZ2VyKHtzZW5kZXI6IHRoaXN9KTtcblx0XHR9XG5cdFx0cmV0dXJuIGl0ZW07XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHRyeVJlbW92ZShrZXk6IHN0cmluZyk6IFQge1xuXHRcdGNvbnN0IGl0ZW0gPSBEaWN0aW9uYXJ5VXRpbHMudHJ5UmVtb3ZlKHRoaXMuX2l0ZW1zLCBrZXkpO1xuXHRcdGlmIChpdGVtID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHRoaXMuX2xlbmd0aC5zZXQodGhpcy5fbGVuZ3RoLmdldCgpIC0gMSk7XG5cdFx0aWYgKCF0aGlzLnNpbGVudCkge1xuXHRcdFx0Y29uc3Qgc3BsaWNlUmVzdWx0OiBJTWFwLlNwbGljZVJlc3VsdDxUPiA9IHthZGRlZEl0ZW1zOiB7fSwgcmVtb3ZlZEl0ZW1zOiB7W2tleV06IGl0ZW19fTtcblx0XHRcdHRoaXMuX3NwbGljZUV2ZW50LnRyaWdnZXIoe3NlbmRlcjogdGhpcywgc3BsaWNlUmVzdWx0OiBzcGxpY2VSZXN1bHR9KTtcblx0XHRcdHRoaXMuX2NoYW5nZUV2ZW50LnRyaWdnZXIoe3NlbmRlcjogdGhpc30pO1xuXHRcdH1cblx0XHRpZiAodGhpcy5fb3duc0l0ZW1zKSB7XG5cdFx0XHQoPERlc3Ryb3lhYmxlPjxhbnk+aXRlbSkuZGVzdHJveSgpO1xuXHRcdH1cblx0XHRyZXR1cm4gaXRlbTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cmVtb3ZlKGtleTogc3RyaW5nKTogVCB7XG5cdFx0cmV0dXJuIHRoaXMudHJ5UmVtb3ZlKGtleSk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHJlbW92ZUl0ZW0oaXRlbTogVCk6IHN0cmluZyB7XG5cdFx0dmFyIGtleSA9IHRoaXMua2V5T2YoaXRlbSk7XG5cdFx0aWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLnRyeVJlbW92ZShrZXkpO1xuXHRcdH1cblx0XHRyZXR1cm4ga2V5O1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRyZW1vdmVBbGwoa2V5czogc3RyaW5nW10pIHtcblx0XHRpZiAoIXRoaXMuc2lsZW50KSB7XG5cdFx0XHR0aGlzLnRyeVJlbW92ZUFsbChrZXlzKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Zm9yIChsZXQgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuXHRcdFx0dGhpcy50cnlSZW1vdmUoa2V5c1tpXSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRyZW1vdmVBbGxWZXJib3NlKGtleXM6IHN0cmluZ1tdKTogRGljdGlvbmFyeTxUPiB7XG5cdFx0Y29uc3QgaXRlbXMgPSB0aGlzLnRyeVJlbW92ZUFsbChrZXlzKTtcblx0XHRyZXR1cm4gKGl0ZW1zICE9PSB1bmRlZmluZWQpID8gaXRlbXMgOiB7fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0dHJ5UmVtb3ZlQWxsKGtleXM6IHN0cmluZ1tdKTogRGljdGlvbmFyeTxUPiB7XG5cdFx0Y29uc3Qgc3BsaWNlUmVzdWx0ID0gdGhpcy50cnlTcGxpY2Uoa2V5cywge30pO1xuXHRcdGlmIChzcGxpY2VSZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHNwbGljZVJlc3VsdC5yZW1vdmVkSXRlbXM7XG5cdFx0fVxuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHJlbW92ZUl0ZW1zKGl0ZW1zOiBUW10pIHtcblx0XHRjb25zdCBpdGVtU2V0ID0gVmlkU2V0LmZyb21BcnJheTxUPihpdGVtcywgdGhpcy5nZXRLZXkpO1xuXHRcdGNvbnN0IG5ld0l0ZW1zID0gRGljdGlvbmFyeVV0aWxzLmZpbHRlcih0aGlzLl9pdGVtcywgZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdHJldHVybiAhaXRlbVNldC5jb250YWlucyhpdGVtKTtcblx0XHR9KTtcblx0XHR0aGlzLnBlcmZvcm1TcGxpY2UobmV3SXRlbXMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRjbGVhcigpOiBEaWN0aW9uYXJ5PFQ+IHtcblx0XHRpZiAodGhpcy5fbGVuZ3RoLmdldCgpID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRsZXQgaXRlbXM6IERpY3Rpb25hcnk8VD47XG5cdFx0dGhpcy5fbGVuZ3RoLnNldCgwKTtcblx0XHRpZiAodGhpcy5fYWRhcHRlcikge1xuXHRcdFx0aXRlbXMgPSBEaWN0aW9uYXJ5VXRpbHMudHJ5Q2xlYXIodGhpcy5faXRlbXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpdGVtcyA9IHRoaXMuX2l0ZW1zO1xuXHRcdFx0dGhpcy5faXRlbXMgPSB7fTtcblx0XHR9XG5cdFx0dGhpcy5fY2xlYXJFdmVudC50cmlnZ2VyKHtzZW5kZXI6IHRoaXMsIGl0ZW1zOiBpdGVtc30pO1xuXHRcdHRoaXMuX2NoYW5nZUV2ZW50LnRyaWdnZXIoe3NlbmRlcjogdGhpc30pO1xuXHRcdGlmICh0aGlzLl9vd25zSXRlbXMpIHtcblx0XHRcdEFycmF5VXRpbHMuYmFja0V2ZXJ5KERpY3Rpb25hcnlVdGlscy50b0FycmF5KGl0ZW1zKSwgZGVzdHJveSk7XG5cdFx0fVxuXHRcdHJldHVybiBpdGVtcztcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0c3BsaWNlKHJlbW92ZWRLZXlzOiBzdHJpbmdbXSwgdXBkYXRlZEl0ZW1zOiBEaWN0aW9uYXJ5PFQ+KTogSU1hcC5TcGxpY2VSZXN1bHQ8VD4ge1xuXHRcdHZhciBzcGxpY2VSZXN1bHQgPSB0aGlzLnRyeVNwbGljZShyZW1vdmVkS2V5cywgdXBkYXRlZEl0ZW1zKTtcblx0XHRyZXR1cm4gKHNwbGljZVJlc3VsdCAhPT0gdW5kZWZpbmVkKSA/IHNwbGljZVJlc3VsdCA6IHtyZW1vdmVkSXRlbXM6IHt9LCBhZGRlZEl0ZW1zOiB7fX07XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHRyeVNwbGljZShyZW1vdmVkS2V5czogc3RyaW5nW10sIHVwZGF0ZWRJdGVtczogRGljdGlvbmFyeTxUPik6IElNYXAuU3BsaWNlUmVzdWx0PFQ+IHtcblx0XHRjb25zdCBzcGxpY2VSZXN1bHQgPSBEaWN0aW9uYXJ5VXRpbHMudHJ5U3BsaWNlKHRoaXMuX2l0ZW1zLCByZW1vdmVkS2V5cywgdXBkYXRlZEl0ZW1zKTtcblx0XHRpZiAoc3BsaWNlUmVzdWx0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHRoaXMuX2xlbmd0aC5zZXQodGhpcy5fbGVuZ3RoLmdldCgpICsgRGljdGlvbmFyeVV0aWxzLmdldExlbmd0aChzcGxpY2VSZXN1bHQuYWRkZWRJdGVtcykgLSBEaWN0aW9uYXJ5VXRpbHMuZ2V0TGVuZ3RoKHNwbGljZVJlc3VsdC5yZW1vdmVkSXRlbXMpKTtcblx0XHR0aGlzLl9zcGxpY2VFdmVudC50cmlnZ2VyKHtzZW5kZXI6IHRoaXMsIHNwbGljZVJlc3VsdDogc3BsaWNlUmVzdWx0fSk7XG5cdFx0dGhpcy5fY2hhbmdlRXZlbnQudHJpZ2dlcih7c2VuZGVyOiB0aGlzfSk7XG5cdFx0aWYgKHRoaXMuX293bnNJdGVtcykge1xuXHRcdFx0QXJyYXlVdGlscy5iYWNrRXZlcnkoRGljdGlvbmFyeVV0aWxzLnRvQXJyYXkoc3BsaWNlUmVzdWx0LnJlbW92ZWRJdGVtcyksIGRlc3Ryb3kpO1xuXHRcdH1cblx0XHRyZXR1cm4gc3BsaWNlUmVzdWx0O1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRyZWluZGV4KGtleU1hcDogRGljdGlvbmFyeTxzdHJpbmc+KTogRGljdGlvbmFyeTxzdHJpbmc+IHtcblx0XHR2YXIgcmVzdWx0ID0gdGhpcy50cnlSZWluZGV4KGtleU1hcCk7XG5cdFx0cmV0dXJuIChyZXN1bHQgIT09IHVuZGVmaW5lZCkgPyByZXN1bHQgOiB7fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0dHJ5UmVpbmRleChrZXlNYXA6IERpY3Rpb25hcnk8c3RyaW5nPik6IERpY3Rpb25hcnk8c3RyaW5nPiB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gRGljdGlvbmFyeVV0aWxzLnRyeVJlaW5kZXgodGhpcy5faXRlbXMsIGtleU1hcCk7XG5cdFx0aWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0aGlzLl9yZWluZGV4RXZlbnQudHJpZ2dlcih7c2VuZGVyOiB0aGlzLCBrZXlNYXA6IHJlc3VsdH0pO1xuXHRcdHRoaXMuX2NoYW5nZUV2ZW50LnRyaWdnZXIoe3NlbmRlcjogdGhpc30pO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGRldGVjdFNwbGljZShuZXdJdGVtczogRGljdGlvbmFyeTxUPik6IElNYXAuU3BsaWNlUGFyYW1zPFQ+IHtcblx0XHRyZXR1cm4gRGljdGlvbmFyeVV0aWxzLmRldGVjdFNwbGljZSh0aGlzLl9pdGVtcywgbmV3SXRlbXMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRkZXRlY3RSZWluZGV4KG5ld0l0ZW1zOiBEaWN0aW9uYXJ5PFQ+KTogRGljdGlvbmFyeTxzdHJpbmc+IHtcblx0XHRyZXR1cm4gRGljdGlvbmFyeVV0aWxzLmRldGVjdFJlaW5kZXgodGhpcy5faXRlbXMsIG5ld0l0ZW1zLCB0aGlzLmdldEtleSk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHBlcmZvcm1TcGxpY2UobmV3SXRlbXM6IERpY3Rpb25hcnk8VD4pIHtcblx0XHR2YXIgcGFyYW1zID0gdGhpcy5kZXRlY3RTcGxpY2UobmV3SXRlbXMpO1xuXHRcdGlmIChwYXJhbXMgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy50cnlTcGxpY2UocGFyYW1zLnJlbW92ZWRLZXlzLCBwYXJhbXMudXBkYXRlZEl0ZW1zKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHBlcmZvcm1SZWluZGV4KG5ld0l0ZW1zOiBEaWN0aW9uYXJ5PFQ+KSB7XG5cdFx0dmFyIGtleU1hcCA9IHRoaXMuZGV0ZWN0UmVpbmRleChuZXdJdGVtcyk7XG5cdFx0aWYgKGtleU1hcCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLnRyeVJlaW5kZXgoa2V5TWFwKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGVxdWFsKG1hcDogRGljdGlvbmFyeTxUPik6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBEaWN0aW9uYXJ5VXRpbHMuZXF1YWwodGhpcy5faXRlbXMsIG1hcCk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWFwO1xuIl19

/***/ }),

/***/ "../../main/dist/Mapper.js":
/*!******************************************!*\
  !*** C:/jwidget/git/main/dist/Mapper.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapProperties = void 0;
const ArrayUtils = __importStar(__webpack_require__(/*! ./ArrayUtils */ "../../main/dist/ArrayUtils.js"));
const Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));
const Destructor_1 = __importDefault(__webpack_require__(/*! ./Destructor */ "../../main/dist/Destructor.js"));
const index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");
const Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));
/**
 * Listens source properties modification and recreates target value via mapping function.
 *
 * @param T Target property value type.
 */
class Mapper extends Class_1.default {
    /**
     * @param sources Source properties.
     * @param create Mapping function.
     * @param config Configuration.
     */
    constructor(sources, create, config = {}) {
        super();
        this.sources = sources;
        this._create = create;
        this._destroy = config.destroy;
        this._scope = config.scope || this;
        this._targetCreated = config.target == null;
        this._target = this._targetCreated ?
            new Property_1.default(null, this.sources.every((source) => source.silent)) : config.target;
        this._viaNull = config.viaNull || false;
        this._sourceValues = null;
        this._targetValue = null;
        this.update();
        this.sources.forEach(this.bind, this);
    }
    /**
     * Target property.
     */
    get target() {
        return this._target;
    }
    /**
     * @inheritDoc
     */
    destroyObject() {
        const oldValue = this.target.get();
        if (oldValue === this._targetValue) {
            this._target.set(null);
        }
        this._done();
        if (this._targetCreated) {
            this._target.destroy();
        }
        this._create = null;
        this._destroy = null;
        this._scope = null;
        this._target = null;
        this._sourceValues = null;
        this._targetValue = null;
        super.destroyObject();
    }
    /**
     * Listens specified event and issues target value recalculation on event triggering.
     * @param event Event.
     * @returns this
     */
    listen(event) {
        return this.owning(event.listen(this.update, this));
    }
    /**
     * Watches specified property and issues target value recalculation on its change.
     * @param property Property.
     * @returns this
     */
    bind(property) {
        return this.listen(property.changeEvent);
    }
    /**
     * Updates target property forcibly.
     */
    update() {
        if (this._viaNull) {
            this._target.set(null);
            this._done();
        }
        const values = this.sources.map((source) => source.get());
        const newValue = this._create.apply(this._scope, values);
        this._target.set(newValue);
        if (!this._viaNull) {
            this._done();
        }
        this._targetValue = newValue;
        this._sourceValues = values;
    }
    _done() {
        if (this._destroy && this._sourceValues) {
            this._destroy.apply(this._scope, [this._targetValue].concat(this._sourceValues));
        }
    }
}
(function (Mapper) {
    /**
     * Mapper by reducer. Kind of mapper optimized for working with collections of similar properties.
     */
    class ByReducer extends Class_1.default {
        /**
         * @param sources Source bindables.
         * @param reducer Mapping reducer.
         * @param target Target property.
         */
        constructor(sources, reducer, target) {
            super();
            this.sources = sources;
            this.reducer = reducer;
            this._target = target || this.own(new Property_1.default());
            this._update();
            this.sources.forEach(this._bind, this);
        }
        /**
         * Target property.
         */
        get target() {
            return this._target;
        }
        _update() {
            const values = this.sources.map((source) => source.get());
            this._target.set(ArrayUtils.reduce(values, this.reducer));
        }
        _bind(property) {
            return this.owning(property.changeEvent.listen(this._update, this));
        }
    }
    Mapper.ByReducer = ByReducer;
})(Mapper || (Mapper = {}));
exports.default = Mapper;
function mapProperties(sources, reducer, config = {}) {
    if (!sources.every((source) => source.silent)) {
        const target = new Property_1.default();
        return target.owning((typeof reducer === "function") ? new Mapper(sources, reducer, {
            target,
            destroy: config.destroy,
            scope: config.scope,
            viaNull: config.viaNull
        }) : new Mapper.ByReducer(sources, reducer));
    }
    const sourceValues = sources.map((source) => source.get());
    if (typeof reducer !== "function") {
        return new Property_1.default(ArrayUtils.reduce(sourceValues, reducer), true);
    }
    const targetValue = reducer.apply(config.scope, sourceValues);
    const target = new Property_1.default(targetValue, true);
    if (config.destroy === index_1.destroy) {
        target.ownValue();
    }
    else if (config.destroy) {
        target.own(new Destructor_1.default(() => config.destroy.apply(config.scope, [targetValue].concat(sourceValues))));
    }
    return target;
}
exports.mapProperties = mapProperties;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "../../main/dist/Property.js":
/*!********************************************!*\
  !*** C:/jwidget/git/main/dist/Property.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));
const Event_1 = __importDefault(__webpack_require__(/*! ./Event */ "../../main/dist/Event.js"));
const index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");
const Mapper_1 = __webpack_require__(/*! ./Mapper */ "../../main/dist/Mapper.js");
/**
 * Container for a value. Provides basic data binding functionality.
 */
class Property extends Class_1.default {
    /**
     * Constructs a property and sets initial value.
     * @param value Initial value.
     * @param silent If true, uses `dummyEvent` implementation for `changeEvent.
     */
    constructor(value = null, silent = false) {
        super();
        this.value = value;
        this._ownsValue = false;
        this._changeEvent = Event_1.default.make(silent);
    }
    destroyObject() {
        if (this._ownsValue) {
            index_1.destroy(this.value);
        }
        super.destroyObject();
    }
    /**
     * Checks if this property never triggers events. This knowledge may help you do certain code optimizations.
     */
    get silent() {
        return this._changeEvent.dummy;
    }
    /**
     * Property value is changed. Triggered in result of `set` method call if the value has been changed.
     */
    get changeEvent() {
        return this._changeEvent;
    }
    /**
     * Returns current property value.
     * Think twice before calling this method - probably it makes sense to use some kind of binding instead?
     */
    get() {
        return this.value;
    }
    /**
     * Changes property value and triggers `changeEvent` if the value has been changed.
     * @param value New value to set.
     */
    set(value) {
        if (value === undefined) {
            value = null;
        }
        const oldValue = this.value;
        if (oldValue === value) {
            return;
        }
        this.value = value;
        this._changeEvent.trigger({ sender: this, value: value, oldValue: oldValue });
        if (this._ownsValue) {
            index_1.destroy(oldValue);
        }
    }
    /**
     * Makes this property an owner of its value. It means that the value is
     * destroyed automatically on reassignment or destruction of the
     * property.
     */
    ownValue() {
        this._ownsValue = true;
        return this;
    }
    /**
     * Builds a new property containing the result of the callback function called
     * on this property value. To stop synchronization, destroy the result property.
     * In comparison to `mapDestroyable` method, doesn't destroy the previously assigned target values.
     * To map multiple properties, use `Mapper`.
     *
     * @param create Mapping function.
     * @param config Mapping configuration.
     */
    map(create, config) {
        return Mapper_1.mapProperties([this], create, config);
    }
}
exports.default = Property;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvcGVydHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvUHJvcGVydHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBc0JFOzs7OztBQUdGLG9EQUE0QjtBQUU1QixvREFBNEI7QUFFNUIsbUNBQWdDO0FBR2hDLHFDQUEwRDtBQUUxRDs7R0FFRztBQUNILE1BQXFCLFFBQVksU0FBUSxlQUFLO0lBSzdDOzs7O09BSUc7SUFDSCxZQUFzQixRQUFXLElBQUksRUFBRSxTQUFrQixLQUFLO1FBQzdELEtBQUssRUFBRSxDQUFDO1FBRGEsVUFBSyxHQUFMLEtBQUssQ0FBVTtRQVQ3QixlQUFVLEdBQUcsS0FBSyxDQUFDO1FBVzFCLElBQUksQ0FBQyxZQUFZLEdBQUcsZUFBSyxDQUFDLElBQUksQ0FBZ0MsTUFBTSxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVTLGFBQWE7UUFDdEIsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3BCLGVBQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDcEI7UUFDRCxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxNQUFNO1FBQ1QsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztJQUNoQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLFdBQVc7UUFDZCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDMUIsQ0FBQztJQUVEOzs7T0FHRztJQUNILEdBQUc7UUFDRixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDbkIsQ0FBQztJQUVEOzs7T0FHRztJQUNILEdBQUcsQ0FBQyxLQUFRO1FBQ1gsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQ3hCLEtBQUssR0FBRyxJQUFJLENBQUM7U0FDYjtRQUNELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDNUIsSUFBSSxRQUFRLEtBQUssS0FBSyxFQUFFO1lBQ3ZCLE9BQU87U0FDUDtRQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzlFLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNwQixlQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDbEI7SUFDRixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILFFBQVE7UUFDUCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNILEdBQUcsQ0FBSSxNQUF1QixFQUFFLE1BQXlCO1FBQ3hELE9BQU8sc0JBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM5QyxDQUFDO0NBQ0Q7QUFyRkQsMkJBcUZDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IEJpbmRhYmxlIGZyb20gXCIuL0JpbmRhYmxlXCI7XG5pbXBvcnQgQ2xhc3MgZnJvbSBcIi4vQ2xhc3NcIjtcbmltcG9ydCBEZXN0cm95YWJsZUJpbmRhYmxlIGZyb20gXCIuL0Rlc3Ryb3lhYmxlQmluZGFibGVcIjtcbmltcG9ydCBFdmVudCBmcm9tIFwiLi9FdmVudFwiO1xuaW1wb3J0IElFdmVudCBmcm9tIFwiLi9JRXZlbnRcIjtcbmltcG9ydCB7ZGVzdHJveX0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBJUHJvcGVydHkgZnJvbSBcIi4vSVByb3BlcnR5XCI7XG5pbXBvcnQgTGlzdGVuYWJsZSBmcm9tIFwiLi9MaXN0ZW5hYmxlXCI7XG5pbXBvcnQge2RlZmF1bHQgYXMgTWFwcGVyLCBtYXBQcm9wZXJ0aWVzfSBmcm9tIFwiLi9NYXBwZXJcIjtcblxuLyoqXG4gKiBDb250YWluZXIgZm9yIGEgdmFsdWUuIFByb3ZpZGVzIGJhc2ljIGRhdGEgYmluZGluZyBmdW5jdGlvbmFsaXR5LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9wZXJ0eTxWPiBleHRlbmRzIENsYXNzIGltcGxlbWVudHMgSVByb3BlcnR5PFY+IHtcblx0cHJpdmF0ZSBfb3duc1ZhbHVlID0gZmFsc2U7XG5cblx0cHJvdGVjdGVkIF9jaGFuZ2VFdmVudDogSUV2ZW50PEJpbmRhYmxlLkNoYW5nZUV2ZW50UGFyYW1zPFY+PjtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIHByb3BlcnR5IGFuZCBzZXRzIGluaXRpYWwgdmFsdWUuXG5cdCAqIEBwYXJhbSB2YWx1ZSBJbml0aWFsIHZhbHVlLlxuXHQgKiBAcGFyYW0gc2lsZW50IElmIHRydWUsIHVzZXMgYGR1bW15RXZlbnRgIGltcGxlbWVudGF0aW9uIGZvciBgY2hhbmdlRXZlbnQuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdmFsdWU6IFYgPSBudWxsLCBzaWxlbnQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5fY2hhbmdlRXZlbnQgPSBFdmVudC5tYWtlPEJpbmRhYmxlLkNoYW5nZUV2ZW50UGFyYW1zPFY+PihzaWxlbnQpO1xuXHR9XG5cblx0cHJvdGVjdGVkIGRlc3Ryb3lPYmplY3QoKSB7XG5cdFx0aWYgKHRoaXMuX293bnNWYWx1ZSkge1xuXHRcdFx0ZGVzdHJveSh0aGlzLnZhbHVlKTtcblx0XHR9XG5cdFx0c3VwZXIuZGVzdHJveU9iamVjdCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGlzIHByb3BlcnR5IG5ldmVyIHRyaWdnZXJzIGV2ZW50cy4gVGhpcyBrbm93bGVkZ2UgbWF5IGhlbHAgeW91IGRvIGNlcnRhaW4gY29kZSBvcHRpbWl6YXRpb25zLlxuXHQgKi9cblx0Z2V0IHNpbGVudCgpIHtcblx0XHRyZXR1cm4gdGhpcy5fY2hhbmdlRXZlbnQuZHVtbXk7XG5cdH1cblxuXHQvKipcblx0ICogUHJvcGVydHkgdmFsdWUgaXMgY2hhbmdlZC4gVHJpZ2dlcmVkIGluIHJlc3VsdCBvZiBgc2V0YCBtZXRob2QgY2FsbCBpZiB0aGUgdmFsdWUgaGFzIGJlZW4gY2hhbmdlZC5cblx0ICovXG5cdGdldCBjaGFuZ2VFdmVudCgpOiBMaXN0ZW5hYmxlPEJpbmRhYmxlLkNoYW5nZUV2ZW50UGFyYW1zPFY+PiB7XG5cdFx0cmV0dXJuIHRoaXMuX2NoYW5nZUV2ZW50O1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgY3VycmVudCBwcm9wZXJ0eSB2YWx1ZS5cblx0ICogVGhpbmsgdHdpY2UgYmVmb3JlIGNhbGxpbmcgdGhpcyBtZXRob2QgLSBwcm9iYWJseSBpdCBtYWtlcyBzZW5zZSB0byB1c2Ugc29tZSBraW5kIG9mIGJpbmRpbmcgaW5zdGVhZD9cblx0ICovXG5cdGdldCgpOiBWIHtcblx0XHRyZXR1cm4gdGhpcy52YWx1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGFuZ2VzIHByb3BlcnR5IHZhbHVlIGFuZCB0cmlnZ2VycyBgY2hhbmdlRXZlbnRgIGlmIHRoZSB2YWx1ZSBoYXMgYmVlbiBjaGFuZ2VkLlxuXHQgKiBAcGFyYW0gdmFsdWUgTmV3IHZhbHVlIHRvIHNldC5cblx0ICovXG5cdHNldCh2YWx1ZTogVikge1xuXHRcdGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR2YWx1ZSA9IG51bGw7XG5cdFx0fVxuXHRcdGNvbnN0IG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcblx0XHRpZiAob2xkVmFsdWUgPT09IHZhbHVlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMudmFsdWUgPSB2YWx1ZTtcblx0XHR0aGlzLl9jaGFuZ2VFdmVudC50cmlnZ2VyKHsgc2VuZGVyOiB0aGlzLCB2YWx1ZTogdmFsdWUsIG9sZFZhbHVlOiBvbGRWYWx1ZSB9KTtcblx0XHRpZiAodGhpcy5fb3duc1ZhbHVlKSB7XG5cdFx0XHRkZXN0cm95KG9sZFZhbHVlKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogTWFrZXMgdGhpcyBwcm9wZXJ0eSBhbiBvd25lciBvZiBpdHMgdmFsdWUuIEl0IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGlzXG5cdCAqIGRlc3Ryb3llZCBhdXRvbWF0aWNhbGx5IG9uIHJlYXNzaWdubWVudCBvciBkZXN0cnVjdGlvbiBvZiB0aGVcblx0ICogcHJvcGVydHkuXG5cdCAqL1xuXHRvd25WYWx1ZSgpOiB0aGlzIHtcblx0XHR0aGlzLl9vd25zVmFsdWUgPSB0cnVlO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJ1aWxkcyBhIG5ldyBwcm9wZXJ0eSBjb250YWluaW5nIHRoZSByZXN1bHQgb2YgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGNhbGxlZFxuXHQgKiBvbiB0aGlzIHByb3BlcnR5IHZhbHVlLiBUbyBzdG9wIHN5bmNocm9uaXphdGlvbiwgZGVzdHJveSB0aGUgcmVzdWx0IHByb3BlcnR5LlxuXHQgKiBJbiBjb21wYXJpc29uIHRvIGBtYXBEZXN0cm95YWJsZWAgbWV0aG9kLCBkb2Vzbid0IGRlc3Ryb3kgdGhlIHByZXZpb3VzbHkgYXNzaWduZWQgdGFyZ2V0IHZhbHVlcy5cblx0ICogVG8gbWFwIG11bHRpcGxlIHByb3BlcnRpZXMsIHVzZSBgTWFwcGVyYC5cblx0ICpcblx0ICogQHBhcmFtIGNyZWF0ZSBNYXBwaW5nIGZ1bmN0aW9uLlxuXHQgKiBAcGFyYW0gY29uZmlnIE1hcHBpbmcgY29uZmlndXJhdGlvbi5cblx0ICovXG5cdG1hcDxVPihjcmVhdGU6ICh2YWx1ZTogVikgPT4gVSwgY29uZmlnPzogTWFwcGVyLkNvbmZpZzxVPik6IERlc3Ryb3lhYmxlQmluZGFibGU8VT4ge1xuXHRcdHJldHVybiBtYXBQcm9wZXJ0aWVzKFt0aGlzXSwgY3JlYXRlLCBjb25maWcpO1xuXHR9XG59XG4iXX0=

/***/ }),

/***/ "../../main/dist/Set.js":
/*!***************************************!*\
  !*** C:/jwidget/git/main/dist/Set.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ArrayUtils = __importStar(__webpack_require__(/*! ./ArrayUtils */ "../../main/dist/ArrayUtils.js"));
const Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));
const Event_1 = __importDefault(__webpack_require__(/*! ./Event */ "../../main/dist/Event.js"));
const index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");
const internal_1 = __webpack_require__(/*! ./internal */ "../../main/dist/internal.js");
const List_1 = __importDefault(__webpack_require__(/*! ./List */ "../../main/dist/List.js"));
const Map_1 = __importDefault(__webpack_require__(/*! ./Map */ "../../main/dist/Map.js"));
const Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));
/**
 * Unordered collection optimized for items adding, removal and search.
 * @param T Item type.
 */
class Set extends Class_1.default {
    constructor(a, b, c) {
        super();
        this._ownsItems = false;
        if (typeof a === "boolean") {
            c = a;
            a = null;
        }
        else if (typeof a === "function" || (a == null && typeof b === "boolean")) {
            c = b;
            b = a;
            a = null;
        }
        else if (typeof b === "boolean") {
            c = b;
            b = null;
        }
        const items = a || [];
        const silent = c || false;
        this.getKey = b || internal_1.vid;
        this._items = internal_1.VidSet.fromArray(items, this.getKey);
        this._length = this.own(new Property_1.default(items.length, silent));
        this._spliceEvent = Event_1.default.make(silent);
        this._clearEvent = Event_1.default.make(silent);
        this._changeEvent = Event_1.default.make(silent);
    }
    destroyObject() {
        this.clear();
        super.destroyObject();
    }
    /**
     * @inheritDoc
     */
    get silent() {
        return this.changeEvent.dummy;
    }
    /**
     * @inheritDoc
     */
    get length() {
        return this._length;
    }
    /**
     * @inheritDoc
     */
    get empty() {
        return this.length.get() === 0;
    }
    /**
     * @inheritDoc
     */
    get items() {
        return this._items.values;
    }
    /**
     * @inheritDoc
     */
    get first() {
        let result;
        this._items.every((item) => {
            result = item;
            return false;
        });
        return result;
    }
    /**
     * @inheritDoc
     */
    get spliceEvent() {
        return this._spliceEvent;
    }
    /**
     * @inheritDoc
     */
    get clearEvent() {
        return this._clearEvent;
    }
    /**
     * @inheritDoc
     */
    get changeEvent() {
        return this._changeEvent;
    }
    /**
     * @inheritDoc
     */
    ownItems() {
        this._ownsItems = true;
        return this;
    }
    /**
     * @inheritDoc
     */
    clone() {
        return new Set(this.items, this.getKey, this.silent);
    }
    /**
     * @inheritDoc
     */
    contains(item) {
        return this._items.contains(item);
    }
    /**
     * @inheritDoc
     */
    every(callback, scope) {
        return this._items.every(callback, scope);
    }
    /**
     * @inheritDoc
     */
    some(callback, scope) {
        return !this._items.every((item) => {
            return !callback.call(scope || this, item);
        });
    }
    /**
     * @inheritDoc
     */
    forEach(callback, scope) {
        this._items.every((item) => {
            callback.call(scope || this, item);
            return true;
        });
    }
    /**
     * @inheritDoc
     */
    find(callback, scope) {
        let result = undefined;
        this._items.every((item) => {
            if (callback.call(scope || this, item)) {
                result = item;
                return false;
            }
            return true;
        });
        return result;
    }
    /**
     * @inheritDoc
     */
    toSorted(callback, scope, order) {
        return new List_1.default(ArrayUtils.toSorted(this._items.values, callback, scope || this, order), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    toSortedComparing(compare, scope, order) {
        return new List_1.default(ArrayUtils.toSortedComparing(this._items.values, compare, scope || this, order), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    index(callback, scope) {
        const result = {};
        this._items.every((item) => {
            const key = callback.call(scope || this, item);
            if (key != null) {
                result[key] = item;
            }
            return true;
        });
        return new Map_1.default(result, this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    filter(callback, scope) {
        return new Set(this._items.values.filter(callback, scope), this.getKey, true);
    }
    /**
     * @inheritDoc
     */
    count(callback, scope) {
        return ArrayUtils.count(this._items.values, callback, scope);
    }
    /**
     * @inheritDoc
     */
    map(callback, scope, getKey) {
        return new Set(this._items.values.map(callback, scope), getKey, true);
    }
    reduce(reducer, initial) {
        return (typeof reducer === "function") ?
            this._items.values.reduce(reducer, initial) :
            ArrayUtils.reduce(this._items.values, reducer);
    }
    /**
     * @inheritDoc
     */
    max(callback, scope, order) {
        return ArrayUtils.max(this._items.values, callback, scope, order);
    }
    /**
     * @inheritDoc
     */
    maxComparing(compare, scope, order) {
        return ArrayUtils.maxComparing(this._items.values, compare, scope, order);
    }
    /**
     * @inheritDoc
     */
    min(callback, scope, order) {
        return ArrayUtils.min(this._items.values, callback, scope, order);
    }
    /**
     * @inheritDoc
     */
    minComparing(compare, scope, order) {
        return ArrayUtils.minComparing(this._items.values, compare, scope, order);
    }
    /**
     * @inheritDoc
     */
    toArray() {
        return this._items.values.concat();
    }
    /**
     * @inheritDoc
     */
    toList() {
        return new List_1.default(this.toArray(), this.getKey, index_1.SILENT | index_1.ADAPTER);
    }
    /**
     * @inheritDoc
     */
    toSet() {
        return new Set(this._items.values, this.getKey, true);
    }
    /**
     * @inheritDoc
     */
    asArray() {
        return this.toArray();
    }
    /**
     * @inheritDoc
     */
    asList() {
        return this.toList();
    }
    /**
     * @inheritDoc
     */
    asSet() {
        return this;
    }
    /**
     * @inheritDoc
     */
    add(item) {
        return this.trySplice([], [item]) !== undefined;
    }
    /**
     * @inheritDoc
     */
    addAll(items) {
        var result = this.tryAddAll(items);
        return (result !== undefined) ? result : [];
    }
    /**
     * @inheritDoc
     */
    tryAddAll(items) {
        var spliceResult = this.trySplice([], items);
        if (spliceResult !== undefined) {
            return spliceResult.addedItems;
        }
        return undefined;
    }
    /**
     * @inheritDoc
     */
    remove(item) {
        return this.trySplice([item], []) !== undefined;
    }
    /**
     * @inheritDoc
     */
    removeItem(item) {
        this.remove(item);
    }
    /**
     * @inheritDoc
     */
    removeAll(items) {
        var result = this.tryRemoveAll(items);
        return (result !== undefined) ? result : [];
    }
    /**
     * @inheritDoc
     */
    tryRemoveAll(items) {
        var spliceResult = this.trySplice(items, []);
        if (spliceResult !== undefined) {
            return spliceResult.removedItems;
        }
        return undefined;
    }
    /**
     * @inheritDoc
     */
    removeItems(items) {
        this.tryRemoveAll(items);
    }
    /**
     * @inheritDoc
     */
    clear() {
        if (this._length.get() === 0) {
            return undefined;
        }
        const items = this._items.values.concat();
        this._items.clear();
        this._length.set(0);
        this._clearEvent.trigger({ sender: this, items: items });
        this._changeEvent.trigger({ sender: this });
        if (this._ownsItems) {
            ArrayUtils.backEvery(items, index_1.destroy);
        }
        return items;
    }
    /**
     * @inheritDoc
     */
    splice(removedItems, addedItems) {
        var spliceResult = this.trySplice(removedItems, addedItems);
        return (spliceResult !== undefined) ? spliceResult : { addedItems: [], removedItems: [] };
    }
    /**
     * @inheritDoc
     */
    trySplice(removedItems, addedItems) {
        const spliceResult = this._trySplice(removedItems, addedItems);
        if (spliceResult === undefined) {
            return undefined;
        }
        this._spliceEvent.trigger({ sender: this, spliceResult: spliceResult });
        this._changeEvent.trigger({ sender: this });
        if (this._ownsItems) {
            ArrayUtils.backEvery(spliceResult.removedItems, index_1.destroy);
        }
        return spliceResult;
    }
    _trySplice(removedItems, addedItems) {
        const addedItemSet = internal_1.VidSet.fromArray(addedItems, this.getKey);
        removedItems = removedItems.filter(function (item) {
            return !addedItemSet.contains(item);
        });
        removedItems = this._tryRemoveAll(removedItems);
        addedItems = this._tryAddAll(addedItems);
        if ((removedItems === undefined) && (addedItems === undefined)) {
            return undefined;
        }
        const spliceResult = { removedItems: removedItems || [], addedItems: addedItems || [] };
        this._length.set(this._length.get() + spliceResult.addedItems.length - spliceResult.removedItems.length);
        return spliceResult;
    }
    _tryRemoveAll(items) {
        const removedItems = [];
        for (let i = 0, l = items.length; i < l; ++i) {
            const item = items[i];
            if (this._tryRemove(item)) {
                removedItems.push(item);
            }
        }
        if (removedItems.length !== 0) {
            return removedItems;
        }
        return undefined;
    }
    _tryRemove(item) {
        return this._items.remove(item) || undefined;
    }
    _tryAddAll(items) {
        const addedItems = [];
        for (let i = 0, l = items.length; i < l; ++i) {
            const item = items[i];
            if (this._tryAdd(item)) {
                addedItems.push(item);
            }
        }
        if (addedItems.length !== 0) {
            return addedItems;
        }
        return undefined;
    }
    _tryAdd(item) {
        return this._items.add(item) || undefined;
    }
    /**
     * @inheritDoc
     */
    detectSplice(newItemArray) {
        const removedItems = [];
        const addedItems = [];
        const oldItems = this._items;
        const newItems = internal_1.VidSet.fromArray(newItemArray);
        const oldItemArray = this._items.values;
        for (let i = 0, l = oldItemArray.length; i < l; ++i) {
            const item = oldItemArray[i];
            if (!newItems.contains(item)) {
                removedItems.push(item);
            }
        }
        for (let i = 0, l = newItemArray.length; i < l; ++i) {
            const item = newItemArray[i];
            if (!oldItems.contains(item)) {
                addedItems.push(item);
            }
        }
        if ((removedItems.length !== 0) || (addedItems.length !== 0)) {
            return { removedItems: removedItems, addedItems: addedItems };
        }
        return undefined;
    }
    /**
     * @inheritDoc
     */
    performSplice(newItems) {
        var spliceParams = this.detectSplice(newItems);
        if (spliceParams !== undefined) {
            this.trySplice(spliceParams.removedItems, spliceParams.addedItems);
        }
    }
    /**
     * @inheritDoc
     */
    equal(array) {
        if (this.length.get() !== array.length) {
            return false;
        }
        for (let i = 0, l = array.length; i < l; ++i) {
            if (!this._items.contains(array[i])) {
                return false;
            }
        }
        return true;
    }
}
exports.default = Set;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "../../main/dist/StringUtils.js":
/*!***********************************************!*\
  !*** C:/jwidget/git/main/dist/StringUtils.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseClass = exports.hyphen = exports.camel = exports.capitalize = exports.pad = exports.ellipsis = exports.htmlDecode = exports.htmlEncode = void 0;
const index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");
/**
 * Escapes special HTML symbols.
 * Converts symbols &amp;, &gt;, &lt;, &quot; to `&amp;` `&gt;` `&lt;` `&quot;` correspondingly.
 *
 * @deprecated Use Underscore's _.escape instead.
 */
function htmlEncode(str) {
    return String(str).
        replace(/&/g, "&amp;").
        replace(/>/g, "&gt;").
        replace(/</g, "&lt;").
        replace(/"/g, "&quot;");
}
exports.htmlEncode = htmlEncode;
/**
 * Unescapes special HTML symbols.
 * Converts sequences `&amp;` `&gt;` `&lt;` `&quot;` to &amp;, &gt;, &lt;, &quot; correspondingly.
 *
 * @deprecated Use Underscore's _.unescape instead.
 */
function htmlDecode(str) {
    return String(str).
        replace(/&quot;/g, '"').
        replace(/&lt;/g, "<").
        replace(/&gt;/g, ">").
        replace(/&amp;/g, "&");
}
exports.htmlDecode = htmlDecode;
/**
 * Shortens the string to specified length. If string is short enough, it stays the same.
 * Otherwise it is cutted and `ellipsis` substring is appended so that the resulting string length
 * equals to `length`.
 *
 * @param str Input string.
 * @param length Maximum length of resulting string.
 * @param ellipsis String tail for shortening. Defaults to `...`
 * @returns Result string.
 */
function ellipsis(str, length, ellipsis) {
    str = String(str);
    if (str.length <= length) {
        return str;
    }
    ellipsis = index_1.defn(ellipsis, "...");
    return str.substr(0, length - ellipsis.length) + ellipsis;
}
exports.ellipsis = ellipsis;
/**
 * Prepends string with specified symbol at the beginning to adjust it to specified length.
 * If string is long enough, it stays the same.
 *
 * @param str Input string.
 * @param length Minimum length of resulting string.
 * @param ch Symbol to prepend.
 * @returns Result string.
 */
function pad(str, length, ch) {
    str = String(str);
    var buf = [];
    length -= str.length;
    for (var i = 0; i < length; ++i) {
        buf.push(ch);
    }
    buf.push(str);
    return buf.join("");
}
exports.pad = pad;
/**
 * Capitalizes first symbol.
 *
 *     JW.strings.capitalize("vasya")  // "Vasya"
 */
function capitalize(str) {
    return String(str).charAt(0).toUpperCase() + str.substr(1);
}
exports.capitalize = capitalize;
/**
 * Converts hyphen-style to camelStyle.
 *
 *     JW.strings.camel("i-love-js")  // "iLoveJs"
 */
function camel(str) {
    return String(str).replace(/-([a-z])/ig, _fcamel);
}
exports.camel = camel;
/**
 * Converts camelStyle to hyphen-style.
 *
 *     JW.strings.hyphen("iLoveJs")  // "i-love-js"
 */
function hyphen(str) {
    return String(str).replace(/([A-Z])/g, _fhyphen);
}
exports.hyphen = hyphen;
function parseClass(str) {
    if (index_1.isArray(str)) {
        var result = [];
        for (var i = 0; i < str.length; ++i) {
            result.push.apply(result, parseClass(str[i]));
        }
        return result;
    }
    if (typeof str === "string") {
        str = str.trim();
        if (str === "") {
            return [];
        }
        return str.split(/\s+/);
    }
    return [];
}
exports.parseClass = parseClass;
function _fcamel(a, b) {
    a = a;
    return b.toUpperCase();
}
function _fhyphen(a, b) {
    a = a;
    return "-" + b.toLowerCase();
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "../../main/dist/Switcher.js":
/*!********************************************!*\
  !*** C:/jwidget/git/main/dist/Switcher.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));
/**
 * Listens source property modification and calls the specified functions.
 */
class Switcher extends Class_1.default {
    /**
     * @param source Source property.
     * @param config Configuration.
     */
    constructor(source, config = {}) {
        super();
        this.source = source;
        this._init = config.init;
        this._done = config.done;
        this._scope = config.scope || this;
        this._acceptNil = config.acceptNil || false;
        this._doInit();
        this.own(source.changeEvent.listen(this._update, this));
    }
    destroyObject() {
        this._doDone();
        this._init = null;
        this._done = null;
        this._scope = null;
        this._value = null;
        super.destroyObject();
    }
    _update() {
        this._doDone();
        this._doInit();
    }
    _doInit() {
        this._value = this.source.get();
        if (this._init && (this._acceptNil || this._value != null)) {
            this._init.call(this._scope, this._value);
        }
    }
    _doDone() {
        if (this._done && (this._acceptNil || this._value != null)) {
            this._done.call(this._scope, this._value);
        }
        this._value = null;
    }
}
exports.default = Switcher;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3dpdGNoZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvU3dpdGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBc0JFOzs7OztBQUdGLG9EQUE0QjtBQUU1Qjs7R0FFRztBQUNILE1BQU0sUUFBWSxTQUFRLGVBQUs7SUFPOUI7OztPQUdHO0lBQ0gsWUFBcUIsTUFBbUIsRUFBRSxTQUE2QixFQUFFO1FBQ3hFLEtBQUssRUFBRSxDQUFDO1FBRFksV0FBTSxHQUFOLE1BQU0sQ0FBYTtRQUV2QyxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUM7UUFDbkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsU0FBUyxJQUFJLEtBQUssQ0FBQztRQUM1QyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRVMsYUFBYTtRQUN0QixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixLQUFLLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVPLE9BQU87UUFDZCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVPLE9BQU87UUFDZCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEMsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxFQUFFO1lBQzNELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzFDO0lBQ0YsQ0FBQztJQUVPLE9BQU87UUFDZCxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEVBQUU7WUFDM0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDMUM7UUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztJQUNwQixDQUFDO0NBQ0Q7QUFvQ0Qsa0JBQWUsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IEJpbmRhYmxlIGZyb20gJy4vQmluZGFibGUnO1xuaW1wb3J0IENsYXNzIGZyb20gJy4vQ2xhc3MnO1xuXG4vKipcbiAqIExpc3RlbnMgc291cmNlIHByb3BlcnR5IG1vZGlmaWNhdGlvbiBhbmQgY2FsbHMgdGhlIHNwZWNpZmllZCBmdW5jdGlvbnMuXG4gKi9cbmNsYXNzIFN3aXRjaGVyPFQ+IGV4dGVuZHMgQ2xhc3Mge1xuXHRwcml2YXRlIF9pbml0OiBTd2l0Y2hlci5DYWxsYmFjazxUPjtcblx0cHJpdmF0ZSBfZG9uZTogU3dpdGNoZXIuQ2FsbGJhY2s8VD47XG5cdHByaXZhdGUgX3Njb3BlOiBhbnk7XG5cdHByaXZhdGUgX2FjY2VwdE5pbDogYm9vbGVhbjtcblx0cHJpdmF0ZSBfdmFsdWU6IFQ7XG5cblx0LyoqXG5cdCAqIEBwYXJhbSBzb3VyY2UgU291cmNlIHByb3BlcnR5LlxuXHQgKiBAcGFyYW0gY29uZmlnIENvbmZpZ3VyYXRpb24uXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihyZWFkb25seSBzb3VyY2U6IEJpbmRhYmxlPFQ+LCBjb25maWc6IFN3aXRjaGVyLkNvbmZpZzxUPiA9IHt9KSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLl9pbml0ID0gY29uZmlnLmluaXQ7XG5cdFx0dGhpcy5fZG9uZSA9IGNvbmZpZy5kb25lO1xuXHRcdHRoaXMuX3Njb3BlID0gY29uZmlnLnNjb3BlIHx8IHRoaXM7XG5cdFx0dGhpcy5fYWNjZXB0TmlsID0gY29uZmlnLmFjY2VwdE5pbCB8fCBmYWxzZTtcblx0XHR0aGlzLl9kb0luaXQoKTtcblx0XHR0aGlzLm93bihzb3VyY2UuY2hhbmdlRXZlbnQubGlzdGVuKHRoaXMuX3VwZGF0ZSwgdGhpcykpO1xuXHR9XG5cblx0cHJvdGVjdGVkIGRlc3Ryb3lPYmplY3QoKSB7XG5cdFx0dGhpcy5fZG9Eb25lKCk7XG5cdFx0dGhpcy5faW5pdCA9IG51bGw7XG5cdFx0dGhpcy5fZG9uZSA9IG51bGw7XG5cdFx0dGhpcy5fc2NvcGUgPSBudWxsO1xuXHRcdHRoaXMuX3ZhbHVlID0gbnVsbDtcblx0XHRzdXBlci5kZXN0cm95T2JqZWN0KCk7XG5cdH1cblxuXHRwcml2YXRlIF91cGRhdGUoKSB7XG5cdFx0dGhpcy5fZG9Eb25lKCk7XG5cdFx0dGhpcy5fZG9Jbml0KCk7XG5cdH1cblxuXHRwcml2YXRlIF9kb0luaXQoKSB7XG5cdFx0dGhpcy5fdmFsdWUgPSB0aGlzLnNvdXJjZS5nZXQoKTtcblx0XHRpZiAodGhpcy5faW5pdCAmJiAodGhpcy5fYWNjZXB0TmlsIHx8IHRoaXMuX3ZhbHVlICE9IG51bGwpKSB7XG5cdFx0XHR0aGlzLl9pbml0LmNhbGwodGhpcy5fc2NvcGUsIHRoaXMuX3ZhbHVlKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIF9kb0RvbmUoKSB7XG5cdFx0aWYgKHRoaXMuX2RvbmUgJiYgKHRoaXMuX2FjY2VwdE5pbCB8fCB0aGlzLl92YWx1ZSAhPSBudWxsKSkge1xuXHRcdFx0dGhpcy5fZG9uZS5jYWxsKHRoaXMuX3Njb3BlLCB0aGlzLl92YWx1ZSk7XG5cdFx0fVxuXHRcdHRoaXMuX3ZhbHVlID0gbnVsbDtcblx0fVxufVxuXG5uYW1lc3BhY2UgU3dpdGNoZXIge1xuXHQvKipcblx0ICogU3dpdGNoZXIgY2FsbGJhY2suXG5cdCAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIENhbGxiYWNrPFQ+IHtcblx0XHQodmFsdWU6IFQpOiBhbnk7XG5cdH1cblxuXHQvKipcblx0ICogQ29uZmlndXJhdGlvbiBvZiBTd2l0Y2hlci5cblx0ICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQ29uZmlnPFQ+IHtcblx0XHQvKipcblx0XHQgKiBWYWx1ZSBpbml0aWFsaXphdGlvbiBjYWxsYmFjay5cblx0XHQgKi9cblx0XHRyZWFkb25seSBpbml0PzogQ2FsbGJhY2s8VD47XG5cblx0XHQvKipcblx0XHQgKiBWYWx1ZSByZWxlYXNpbmcgY2FsbGJhY2suXG5cdFx0ICovXG5cdFx0cmVhZG9ubHkgZG9uZT86IENhbGxiYWNrPFQ+O1xuXG5cdFx0LyoqXG5cdFx0ICogYGluaXRgIGFuZCBgZG9uZWAgY2FsbCBzY29wZS4gRGVmYXVsdHMgdG8gc3dpdGNoZXIgaXRzZWxmLlxuXHRcdCAqL1xuXHRcdHJlYWRvbmx5IHNjb3BlPzogYW55O1xuXG5cdFx0LyoqXG5cdFx0ICogU2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdGhlIGNhbGxiYWNrcyB0byBiZSBjYWxsZWQgZXZlbiBpZiBvbmUgb2Ygc291cmNlIHZhbHVlcyBpcyBudWxsLlxuXHRcdCAqL1xuXHRcdHJlYWRvbmx5IGFjY2VwdE5pbD86IGJvb2xlYW47XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoZXI7XG4iXX0=

/***/ }),

/***/ "../../main/dist/component/ComponentBindable.js":
/*!***************************************************************!*\
  !*** C:/jwidget/git/main/dist/component/ComponentBindable.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Class_1 = __importDefault(__webpack_require__(/*! ../Class */ "../../main/dist/Class.js"));
const Switcher_1 = __importDefault(__webpack_require__(/*! ../Switcher */ "../../main/dist/Switcher.js"));
/**
 * @hidden
 */
class ComponentBindable extends Class_1.default {
    constructor(parent, component, id) {
        super();
        this.parent = parent;
        this.id = id;
        parent._bindables[this.iid] = this;
        this.own(new Switcher_1.default(component, {
            init: child => {
                this.parent.children.put(this.id, child);
            },
            done: () => {
                this.parent.children.remove(this.id);
            }
        }));
    }
    destroy() {
        delete this.parent._bindables[this.iid];
        super.destroy();
    }
}
exports.default = ComponentBindable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcG9uZW50QmluZGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tcG9uZW50L0NvbXBvbmVudEJpbmRhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXNCRTs7Ozs7QUFHRixxREFBNkI7QUFFN0IsMkRBQW1DO0FBRW5DOztHQUVHO0FBQ0gsTUFBcUIsaUJBQWtCLFNBQVEsZUFBSztJQUNuRCxZQUFvQixNQUFpQixFQUFFLFNBQThCLEVBQVUsRUFBVTtRQUN4RixLQUFLLEVBQUUsQ0FBQztRQURXLFdBQU0sR0FBTixNQUFNLENBQVc7UUFBMEMsT0FBRSxHQUFGLEVBQUUsQ0FBUTtRQUV4RixNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7UUFFbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLGtCQUFRLENBQVksU0FBUyxFQUFFO1lBQzNDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRTtnQkFDYixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUMxQyxDQUFDO1lBQ0QsSUFBSSxFQUFFLEdBQUcsRUFBRTtnQkFDVixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RDLENBQUM7U0FDRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxPQUFPO1FBQ04sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pCLENBQUM7Q0FDRDtBQW5CRCxvQ0FtQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgQmluZGFibGUgZnJvbSAnLi4vQmluZGFibGUnO1xuaW1wb3J0IENsYXNzIGZyb20gJy4uL0NsYXNzJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vQ29tcG9uZW50JztcbmltcG9ydCBTd2l0Y2hlciBmcm9tICcuLi9Td2l0Y2hlcic7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRCaW5kYWJsZSBleHRlbmRzIENsYXNzIHtcblx0Y29uc3RydWN0b3IocHJpdmF0ZSBwYXJlbnQ6IENvbXBvbmVudCwgY29tcG9uZW50OiBCaW5kYWJsZTxDb21wb25lbnQ+LCBwcml2YXRlIGlkOiBzdHJpbmcpIHtcblx0XHRzdXBlcigpO1xuXHRcdHBhcmVudC5fYmluZGFibGVzW3RoaXMuaWlkXSA9IHRoaXM7XG5cblx0XHR0aGlzLm93bihuZXcgU3dpdGNoZXI8Q29tcG9uZW50Pihjb21wb25lbnQsIHtcblx0XHRcdGluaXQ6IGNoaWxkID0+IHtcblx0XHRcdFx0dGhpcy5wYXJlbnQuY2hpbGRyZW4ucHV0KHRoaXMuaWQsIGNoaWxkKTtcblx0XHRcdH0sXG5cdFx0XHRkb25lOiAoKSA9PiB7XG5cdFx0XHRcdHRoaXMucGFyZW50LmNoaWxkcmVuLnJlbW92ZSh0aGlzLmlkKTtcblx0XHRcdH1cblx0XHR9KSk7XG5cdH1cblxuXHRkZXN0cm95KCkge1xuXHRcdGRlbGV0ZSB0aGlzLnBhcmVudC5fYmluZGFibGVzW3RoaXMuaWlkXTtcblx0XHRzdXBlci5kZXN0cm95KCk7XG5cdH1cbn1cbiJdfQ==

/***/ }),

/***/ "../../main/dist/component/ComponentChild.js":
/*!************************************************************!*\
  !*** C:/jwidget/git/main/dist/component/ComponentChild.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const DomUtils = __importStar(__webpack_require__(/*! ../DomUtils */ "../../main/dist/DomUtils.js"));
const index_1 = __webpack_require__(/*! ../index */ "../../main/dist/index.js");
/**
 * @hidden
 */
class ComponentChild {
    constructor(parent, child) {
        this.parent = parent;
        this.child = child;
        this.iid = index_1.newIid();
    }
    attach(name) {
        // JW.assertNull(this.name);
        this._name = name;
        this._el = this.parent._elements[name];
        this.parent._initChild(this.child);
        this.parent._elements[name] = this.child.el;
        DomUtils.replace(this._el[0], this.child.el[0], true);
        this.child._afterAppend();
    }
    detach() {
        // JW.assertString(this.name, JW.isNotBlank);
        if (this.parent._elements[this._name] === this.child.el) {
            this.parent._elements[this._name] = this._el;
        }
        DomUtils.replace(this.child.el[0], this._el[0]);
        this.parent._doneChild(this.child);
        this._el = null;
        this._name = null;
    }
}
exports.default = ComponentChild;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcG9uZW50Q2hpbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tcG9uZW50L0NvbXBvbmVudENoaWxkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXNCRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0Ysc0RBQXdDO0FBRXhDLG9DQUFnQztBQUVoQzs7R0FFRztBQUNILE1BQXFCLGNBQWM7SUFNbEMsWUFBb0IsTUFBaUIsRUFBVSxLQUFnQjtRQUEzQyxXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBVztRQUZ0RCxRQUFHLEdBQUcsY0FBTSxFQUFFLENBQUM7SUFFMEMsQ0FBQztJQUVuRSxNQUFNLENBQUMsSUFBWTtRQUNsQiw0QkFBNEI7UUFDNUIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDNUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVELE1BQU07UUFDTCw2Q0FBNkM7UUFDN0MsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUU7WUFDeEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7U0FDN0M7UUFDRCxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7UUFDaEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNEO0FBNUJELGlDQTRCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjAgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vQ29tcG9uZW50JztcbmltcG9ydCAqIGFzIERvbVV0aWxzIGZyb20gJy4uL0RvbVV0aWxzJztcbmltcG9ydCBJZGVudGlmaWFibGUgZnJvbSAnLi4vSWRlbnRpZmlhYmxlJztcbmltcG9ydCB7bmV3SWlkfSBmcm9tICcuLi9pbmRleCc7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRDaGlsZCBpbXBsZW1lbnRzIElkZW50aWZpYWJsZSB7XG5cdHByaXZhdGUgX25hbWU6IHN0cmluZztcblx0cHJpdmF0ZSBfZWw6IEpRdWVyeTtcblxuXHRyZWFkb25seSBpaWQgPSBuZXdJaWQoKTtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHBhcmVudDogQ29tcG9uZW50LCBwcml2YXRlIGNoaWxkOiBDb21wb25lbnQpIHt9XG5cblx0YXR0YWNoKG5hbWU6IHN0cmluZykge1xuXHRcdC8vIEpXLmFzc2VydE51bGwodGhpcy5uYW1lKTtcblx0XHR0aGlzLl9uYW1lID0gbmFtZTtcblx0XHR0aGlzLl9lbCA9IHRoaXMucGFyZW50Ll9lbGVtZW50c1tuYW1lXTtcblx0XHR0aGlzLnBhcmVudC5faW5pdENoaWxkKHRoaXMuY2hpbGQpO1xuXHRcdHRoaXMucGFyZW50Ll9lbGVtZW50c1tuYW1lXSA9IHRoaXMuY2hpbGQuZWw7XG5cdFx0RG9tVXRpbHMucmVwbGFjZSh0aGlzLl9lbFswXSwgdGhpcy5jaGlsZC5lbFswXSwgdHJ1ZSk7XG5cdFx0dGhpcy5jaGlsZC5fYWZ0ZXJBcHBlbmQoKTtcblx0fVxuXG5cdGRldGFjaCgpIHtcblx0XHQvLyBKVy5hc3NlcnRTdHJpbmcodGhpcy5uYW1lLCBKVy5pc05vdEJsYW5rKTtcblx0XHRpZiAodGhpcy5wYXJlbnQuX2VsZW1lbnRzW3RoaXMuX25hbWVdID09PSB0aGlzLmNoaWxkLmVsKSB7XG5cdFx0XHR0aGlzLnBhcmVudC5fZWxlbWVudHNbdGhpcy5fbmFtZV0gPSB0aGlzLl9lbDtcblx0XHR9XG5cdFx0RG9tVXRpbHMucmVwbGFjZSh0aGlzLmNoaWxkLmVsWzBdLCB0aGlzLl9lbFswXSk7XG5cdFx0dGhpcy5wYXJlbnQuX2RvbmVDaGlsZCh0aGlzLmNoaWxkKTtcblx0XHR0aGlzLl9lbCA9IG51bGw7XG5cdFx0dGhpcy5fbmFtZSA9IG51bGw7XG5cdH1cbn1cbiJdfQ==

/***/ }),

/***/ "../../main/dist/component/ComponentChildInserter.js":
/*!********************************************************************!*\
  !*** C:/jwidget/git/main/dist/component/ComponentChildInserter.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const DictionaryUtils = __importStar(__webpack_require__(/*! ../DictionaryUtils */ "../../main/dist/DictionaryUtils.js"));
const index_1 = __webpack_require__(/*! ../index */ "../../main/dist/index.js");
const Map_1 = __importDefault(__webpack_require__(/*! ../Map */ "../../main/dist/Map.js"));
/**
 * @hidden
 */
class ComponentChildInserter extends Map_1.default {
    constructor() {
        super(index_1.iidStr, true);
    }
    tryPut(key, item) {
        var result = super.tryPut(key, item);
        if (result === undefined) {
            return undefined;
        }
        var removedItem = result.value;
        if (removedItem) {
            removedItem.detach();
        }
        item.attach(key);
        return result;
    }
    trySetKey(oldKey, newKey) {
        var item = super.trySetKey(oldKey, newKey);
        if (item === undefined) {
            return undefined;
        }
        item.detach();
        item.attach(newKey);
        return item;
    }
    tryRemove(key) {
        var item = super.tryRemove(key);
        if (item === undefined) {
            return undefined;
        }
        item.detach();
        return item;
    }
    trySplice(removedKeys, updatedItems) {
        var spliceResult = super.trySplice(removedKeys, updatedItems);
        if (spliceResult === undefined) {
            return undefined;
        }
        DictionaryUtils.forEach(spliceResult.removedItems, this._detach, this);
        DictionaryUtils.forEach(spliceResult.addedItems, this._attach, this);
        return spliceResult;
    }
    clear() {
        var items = super.clear();
        if (items === undefined) {
            return undefined;
        }
        DictionaryUtils.forEach(items, this._detach, this);
        return items;
    }
    tryReindex(keyMap) {
        var result = super.tryReindex(keyMap);
        if (result === undefined) {
            return undefined;
        }
        for (var oldKey in keyMap) {
            var newKey = keyMap[oldKey];
            var item = this.get(newKey);
            item.detach();
            item.attach(newKey);
        }
        return result;
    }
    _attach(item, key) {
        item.attach(key);
    }
    _detach(item) {
        item.detach();
    }
}
exports.default = ComponentChildInserter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcG9uZW50Q2hpbGRJbnNlcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnQvQ29tcG9uZW50Q2hpbGRJbnNlcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFzQkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdGLG9FQUFzRDtBQUV0RCxvQ0FBZ0M7QUFDaEMsaURBQXlCO0FBSXpCOztHQUVHO0FBQ0gsTUFBcUIsc0JBQXVCLFNBQVEsYUFBbUI7SUFDdEU7UUFDQyxLQUFLLENBQUMsY0FBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBVyxFQUFFLElBQW9CO1FBQ3ZDLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3JDLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUN6QixPQUFPLFNBQVMsQ0FBQztTQUNqQjtRQUNELElBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDL0IsSUFBSSxXQUFXLEVBQUU7WUFDaEIsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3JCO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQixPQUFPLE1BQU0sQ0FBQztJQUNmLENBQUM7SUFFRCxTQUFTLENBQUMsTUFBYyxFQUFFLE1BQWM7UUFDdkMsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDM0MsSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO1lBQ3ZCLE9BQU8sU0FBUyxDQUFDO1NBQ2pCO1FBQ0QsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQixPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCxTQUFTLENBQUMsR0FBVztRQUNwQixJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtZQUN2QixPQUFPLFNBQVMsQ0FBQztTQUNqQjtRQUNELElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNkLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVELFNBQVMsQ0FBQyxXQUFxQixFQUFFLFlBQXdDO1FBQ3hFLElBQUksWUFBWSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzlELElBQUksWUFBWSxLQUFLLFNBQVMsRUFBRTtZQUMvQixPQUFPLFNBQVMsQ0FBQztTQUNqQjtRQUNELGVBQWUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZFLGVBQWUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3JFLE9BQU8sWUFBWSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxLQUFLO1FBQ0osSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzFCLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUN4QixPQUFPLFNBQVMsQ0FBQztTQUNqQjtRQUNELGVBQWUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkQsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0lBRUQsVUFBVSxDQUFDLE1BQTBCO1FBQ3BDLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEMsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ3pCLE9BQU8sU0FBUyxDQUFDO1NBQ2pCO1FBQ0QsS0FBSyxJQUFJLE1BQU0sSUFBSSxNQUFNLEVBQUU7WUFDMUIsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzVCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDNUIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNwQjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2YsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFvQixFQUFFLEdBQVc7UUFDeEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBRUQsT0FBTyxDQUFDLElBQW9CO1FBQzNCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNmLENBQUM7Q0FDRDtBQTdFRCx5Q0E2RUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgRGljdGlvbmFyeSBmcm9tICcuLi9EaWN0aW9uYXJ5JztcbmltcG9ydCAqIGFzIERpY3Rpb25hcnlVdGlscyBmcm9tICcuLi9EaWN0aW9uYXJ5VXRpbHMnO1xuaW1wb3J0IElNYXAgZnJvbSAnLi4vSU1hcCc7XG5pbXBvcnQge2lpZFN0cn0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IE1hcCBmcm9tICcuLi9NYXAnO1xuaW1wb3J0IFNvbWUgZnJvbSAnLi4vU29tZSc7XG5pbXBvcnQgQ29tcG9uZW50Q2hpbGQgZnJvbSAnLi9Db21wb25lbnRDaGlsZCc7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRDaGlsZEluc2VydGVyIGV4dGVuZHMgTWFwPENvbXBvbmVudENoaWxkPiB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKGlpZFN0ciwgdHJ1ZSk7XG5cdH1cblxuXHR0cnlQdXQoa2V5OiBzdHJpbmcsIGl0ZW06IENvbXBvbmVudENoaWxkKTogU29tZTxDb21wb25lbnRDaGlsZD4ge1xuXHRcdHZhciByZXN1bHQgPSBzdXBlci50cnlQdXQoa2V5LCBpdGVtKTtcblx0XHRpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHZhciByZW1vdmVkSXRlbSA9IHJlc3VsdC52YWx1ZTtcblx0XHRpZiAocmVtb3ZlZEl0ZW0pIHtcblx0XHRcdHJlbW92ZWRJdGVtLmRldGFjaCgpO1xuXHRcdH1cblx0XHRpdGVtLmF0dGFjaChrZXkpO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHR0cnlTZXRLZXkob2xkS2V5OiBzdHJpbmcsIG5ld0tleTogc3RyaW5nKTogQ29tcG9uZW50Q2hpbGQge1xuXHRcdHZhciBpdGVtID0gc3VwZXIudHJ5U2V0S2V5KG9sZEtleSwgbmV3S2V5KTtcblx0XHRpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpdGVtLmRldGFjaCgpO1xuXHRcdGl0ZW0uYXR0YWNoKG5ld0tleSk7XG5cdFx0cmV0dXJuIGl0ZW07XG5cdH1cblxuXHR0cnlSZW1vdmUoa2V5OiBzdHJpbmcpOiBDb21wb25lbnRDaGlsZCB7XG5cdFx0dmFyIGl0ZW0gPSBzdXBlci50cnlSZW1vdmUoa2V5KTtcblx0XHRpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpdGVtLmRldGFjaCgpO1xuXHRcdHJldHVybiBpdGVtO1xuXHR9XG5cblx0dHJ5U3BsaWNlKHJlbW92ZWRLZXlzOiBzdHJpbmdbXSwgdXBkYXRlZEl0ZW1zOiBEaWN0aW9uYXJ5PENvbXBvbmVudENoaWxkPik6IElNYXAuU3BsaWNlUmVzdWx0PENvbXBvbmVudENoaWxkPiB7XG5cdFx0dmFyIHNwbGljZVJlc3VsdCA9IHN1cGVyLnRyeVNwbGljZShyZW1vdmVkS2V5cywgdXBkYXRlZEl0ZW1zKTtcblx0XHRpZiAoc3BsaWNlUmVzdWx0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdERpY3Rpb25hcnlVdGlscy5mb3JFYWNoKHNwbGljZVJlc3VsdC5yZW1vdmVkSXRlbXMsIHRoaXMuX2RldGFjaCwgdGhpcyk7XG5cdFx0RGljdGlvbmFyeVV0aWxzLmZvckVhY2goc3BsaWNlUmVzdWx0LmFkZGVkSXRlbXMsIHRoaXMuX2F0dGFjaCwgdGhpcyk7XG5cdFx0cmV0dXJuIHNwbGljZVJlc3VsdDtcblx0fVxuXG5cdGNsZWFyKCk6IERpY3Rpb25hcnk8Q29tcG9uZW50Q2hpbGQ+IHtcblx0XHR2YXIgaXRlbXMgPSBzdXBlci5jbGVhcigpO1xuXHRcdGlmIChpdGVtcyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHREaWN0aW9uYXJ5VXRpbHMuZm9yRWFjaChpdGVtcywgdGhpcy5fZGV0YWNoLCB0aGlzKTtcblx0XHRyZXR1cm4gaXRlbXM7XG5cdH1cblxuXHR0cnlSZWluZGV4KGtleU1hcDogRGljdGlvbmFyeTxzdHJpbmc+KTogRGljdGlvbmFyeTxzdHJpbmc+IHtcblx0XHR2YXIgcmVzdWx0ID0gc3VwZXIudHJ5UmVpbmRleChrZXlNYXApO1xuXHRcdGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICh2YXIgb2xkS2V5IGluIGtleU1hcCkge1xuXHRcdFx0dmFyIG5ld0tleSA9IGtleU1hcFtvbGRLZXldO1xuXHRcdFx0dmFyIGl0ZW0gPSB0aGlzLmdldChuZXdLZXkpO1xuXHRcdFx0aXRlbS5kZXRhY2goKTtcblx0XHRcdGl0ZW0uYXR0YWNoKG5ld0tleSk7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRfYXR0YWNoKGl0ZW06IENvbXBvbmVudENoaWxkLCBrZXk6IHN0cmluZykge1xuXHRcdGl0ZW0uYXR0YWNoKGtleSk7XG5cdH1cblxuXHRfZGV0YWNoKGl0ZW06IENvbXBvbmVudENoaWxkKSB7XG5cdFx0aXRlbS5kZXRhY2goKTtcblx0fVxufVxuIl19

/***/ }),

/***/ "../../main/dist/component/ComponentChildren.js":
/*!***************************************************************!*\
  !*** C:/jwidget/git/main/dist/component/ComponentChildren.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const DictionaryUtils = __importStar(__webpack_require__(/*! ../DictionaryUtils */ "../../main/dist/DictionaryUtils.js"));
const index_1 = __webpack_require__(/*! ../index */ "../../main/dist/index.js");
const Map_1 = __importDefault(__webpack_require__(/*! ../Map */ "../../main/dist/Map.js"));
const ComponentChild_1 = __importDefault(__webpack_require__(/*! ./ComponentChild */ "../../main/dist/component/ComponentChild.js"));
const ComponentChildInserter_1 = __importDefault(__webpack_require__(/*! ./ComponentChildInserter */ "../../main/dist/component/ComponentChildInserter.js"));
/**
 * @hidden
 */
class ComponentChildren extends Map_1.default {
    constructor(component) {
        super(index_1.iidStr, true);
        this.component = component;
        this.target = new ComponentChildInserter_1.default();
    }
    unrender() {
        this.target.destroy();
    }
    tryPut(key, item) {
        const result = super.tryPut(key, item);
        if (result === undefined) {
            return undefined;
        }
        const child = new ComponentChild_1.default(this.component, item);
        this.target.tryPut(key, child);
        return result;
    }
    trySetKey(oldKey, newKey) {
        const item = super.trySetKey(oldKey, newKey);
        if (item === undefined) {
            return undefined;
        }
        this.target.trySetKey(oldKey, newKey);
        return item;
    }
    tryRemove(key) {
        const item = super.tryRemove(key);
        if (item === undefined) {
            return undefined;
        }
        this.target.tryRemove(key);
        return item;
    }
    trySplice(removedKeys, updatedItems) {
        const spliceResult = super.trySplice(removedKeys, updatedItems);
        if (spliceResult === undefined) {
            return undefined;
        }
        const removedItems = spliceResult.removedItems;
        const addedItems = spliceResult.addedItems;
        const children = DictionaryUtils.map(addedItems, (item) => {
            return new ComponentChild_1.default(this.component, item);
        }, this);
        this.target.trySplice(DictionaryUtils.getRemovedKeys(removedItems, addedItems), children);
        return spliceResult;
    }
    clear() {
        const items = super.clear();
        if (items === undefined) {
            return undefined;
        }
        this.target.clear();
        return items;
    }
    tryReindex(keyMap) {
        const result = super.tryReindex(keyMap);
        if (result === undefined) {
            return undefined;
        }
        this.target.tryReindex(keyMap);
        return result;
    }
}
exports.default = ComponentChildren;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcG9uZW50Q2hpbGRyZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tcG9uZW50L0NvbXBvbmVudENoaWxkcmVuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXNCRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSUYsb0VBQXNEO0FBRXRELG9DQUFnQztBQUNoQyxpREFBeUI7QUFFekIsc0VBQThDO0FBQzlDLHNGQUE4RDtBQUU5RDs7R0FFRztBQUNILE1BQXFCLGlCQUFrQixTQUFRLGFBQWM7SUFHNUQsWUFBb0IsU0FBb0I7UUFDdkMsS0FBSyxDQUFDLGNBQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQURELGNBQVMsR0FBVCxTQUFTLENBQVc7UUFFdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLGdDQUFzQixFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVELFFBQVE7UUFDUCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBVyxFQUFFLElBQWU7UUFDbEMsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkMsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ3pCLE9BQU8sU0FBUyxDQUFDO1NBQ2pCO1FBQ0QsTUFBTSxLQUFLLEdBQUcsSUFBSSx3QkFBYyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQy9CLE9BQU8sTUFBTSxDQUFDO0lBQ2YsQ0FBQztJQUVELFNBQVMsQ0FBQyxNQUFjLEVBQUUsTUFBYztRQUN2QyxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM3QyxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDdkIsT0FBTyxTQUFTLENBQUM7U0FDakI7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdEMsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsU0FBUyxDQUFDLEdBQVc7UUFDcEIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQyxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDdkIsT0FBTyxTQUFTLENBQUM7U0FDakI7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQixPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCxTQUFTLENBQUMsV0FBcUIsRUFBRSxZQUFtQztRQUNuRSxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNoRSxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7WUFDL0IsT0FBTyxTQUFTLENBQUM7U0FDakI7UUFDRCxNQUFNLFlBQVksR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDO1FBQy9DLE1BQU0sVUFBVSxHQUFHLFlBQVksQ0FBQyxVQUFVLENBQUM7UUFDM0MsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUN6RCxPQUFPLElBQUksd0JBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2pELENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNULElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzFGLE9BQU8sWUFBWSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxLQUFLO1FBQ0osTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzVCLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUN4QixPQUFPLFNBQVMsQ0FBQztTQUNqQjtRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDcEIsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0lBRUQsVUFBVSxDQUFDLE1BQTBCO1FBQ3BDLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEMsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ3pCLE9BQU8sU0FBUyxDQUFDO1NBQ2pCO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0IsT0FBTyxNQUFNLENBQUM7SUFDZixDQUFDO0NBQ0Q7QUF2RUQsb0NBdUVDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9Db21wb25lbnQnO1xuaW1wb3J0IERpY3Rpb25hcnkgZnJvbSAnLi4vRGljdGlvbmFyeSc7XG5pbXBvcnQgKiBhcyBEaWN0aW9uYXJ5VXRpbHMgZnJvbSAnLi4vRGljdGlvbmFyeVV0aWxzJztcbmltcG9ydCBJTWFwIGZyb20gJy4uL0lNYXAnO1xuaW1wb3J0IHtpaWRTdHJ9IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCBNYXAgZnJvbSAnLi4vTWFwJztcbmltcG9ydCBTb21lIGZyb20gJy4uL1NvbWUnO1xuaW1wb3J0IENvbXBvbmVudENoaWxkIGZyb20gJy4vQ29tcG9uZW50Q2hpbGQnO1xuaW1wb3J0IENvbXBvbmVudENoaWxkSW5zZXJ0ZXIgZnJvbSAnLi9Db21wb25lbnRDaGlsZEluc2VydGVyJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvbmVudENoaWxkcmVuIGV4dGVuZHMgTWFwPENvbXBvbmVudD4ge1xuXHRwcml2YXRlIHRhcmdldDogQ29tcG9uZW50Q2hpbGRJbnNlcnRlcjtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbXBvbmVudDogQ29tcG9uZW50KSB7XG5cdFx0c3VwZXIoaWlkU3RyLCB0cnVlKTtcblx0XHR0aGlzLnRhcmdldCA9IG5ldyBDb21wb25lbnRDaGlsZEluc2VydGVyKCk7XG5cdH1cblxuXHR1bnJlbmRlcigpIHtcblx0XHR0aGlzLnRhcmdldC5kZXN0cm95KCk7XG5cdH1cblxuXHR0cnlQdXQoa2V5OiBzdHJpbmcsIGl0ZW06IENvbXBvbmVudCk6IFNvbWU8Q29tcG9uZW50PiB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gc3VwZXIudHJ5UHV0KGtleSwgaXRlbSk7XG5cdFx0aWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRjb25zdCBjaGlsZCA9IG5ldyBDb21wb25lbnRDaGlsZCh0aGlzLmNvbXBvbmVudCwgaXRlbSk7XG5cdFx0dGhpcy50YXJnZXQudHJ5UHV0KGtleSwgY2hpbGQpO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHR0cnlTZXRLZXkob2xkS2V5OiBzdHJpbmcsIG5ld0tleTogc3RyaW5nKTogQ29tcG9uZW50IHtcblx0XHRjb25zdCBpdGVtID0gc3VwZXIudHJ5U2V0S2V5KG9sZEtleSwgbmV3S2V5KTtcblx0XHRpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0aGlzLnRhcmdldC50cnlTZXRLZXkob2xkS2V5LCBuZXdLZXkpO1xuXHRcdHJldHVybiBpdGVtO1xuXHR9XG5cblx0dHJ5UmVtb3ZlKGtleTogc3RyaW5nKTogQ29tcG9uZW50IHtcblx0XHRjb25zdCBpdGVtID0gc3VwZXIudHJ5UmVtb3ZlKGtleSk7XG5cdFx0aWYgKGl0ZW0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dGhpcy50YXJnZXQudHJ5UmVtb3ZlKGtleSk7XG5cdFx0cmV0dXJuIGl0ZW07XG5cdH1cblxuXHR0cnlTcGxpY2UocmVtb3ZlZEtleXM6IHN0cmluZ1tdLCB1cGRhdGVkSXRlbXM6IERpY3Rpb25hcnk8Q29tcG9uZW50Pik6IElNYXAuU3BsaWNlUmVzdWx0PENvbXBvbmVudD4ge1xuXHRcdGNvbnN0IHNwbGljZVJlc3VsdCA9IHN1cGVyLnRyeVNwbGljZShyZW1vdmVkS2V5cywgdXBkYXRlZEl0ZW1zKTtcblx0XHRpZiAoc3BsaWNlUmVzdWx0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGNvbnN0IHJlbW92ZWRJdGVtcyA9IHNwbGljZVJlc3VsdC5yZW1vdmVkSXRlbXM7XG5cdFx0Y29uc3QgYWRkZWRJdGVtcyA9IHNwbGljZVJlc3VsdC5hZGRlZEl0ZW1zO1xuXHRcdGNvbnN0IGNoaWxkcmVuID0gRGljdGlvbmFyeVV0aWxzLm1hcChhZGRlZEl0ZW1zLCAoaXRlbSkgPT4ge1xuXHRcdFx0cmV0dXJuIG5ldyBDb21wb25lbnRDaGlsZCh0aGlzLmNvbXBvbmVudCwgaXRlbSk7XG5cdFx0fSwgdGhpcyk7XG5cdFx0dGhpcy50YXJnZXQudHJ5U3BsaWNlKERpY3Rpb25hcnlVdGlscy5nZXRSZW1vdmVkS2V5cyhyZW1vdmVkSXRlbXMsIGFkZGVkSXRlbXMpLCBjaGlsZHJlbik7XG5cdFx0cmV0dXJuIHNwbGljZVJlc3VsdDtcblx0fVxuXG5cdGNsZWFyKCk6IERpY3Rpb25hcnk8Q29tcG9uZW50PiB7XG5cdFx0Y29uc3QgaXRlbXMgPSBzdXBlci5jbGVhcigpO1xuXHRcdGlmIChpdGVtcyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0aGlzLnRhcmdldC5jbGVhcigpO1xuXHRcdHJldHVybiBpdGVtcztcblx0fVxuXG5cdHRyeVJlaW5kZXgoa2V5TWFwOiBEaWN0aW9uYXJ5PHN0cmluZz4pOiBEaWN0aW9uYXJ5PHN0cmluZz4ge1xuXHRcdGNvbnN0IHJlc3VsdCA9IHN1cGVyLnRyeVJlaW5kZXgoa2V5TWFwKTtcblx0XHRpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHRoaXMudGFyZ2V0LnRyeVJlaW5kZXgoa2V5TWFwKTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG59XG4iXX0=

/***/ }),

/***/ "../../main/dist/component/ComponentCollection.js":
/*!*****************************************************************!*\
  !*** C:/jwidget/git/main/dist/component/ComponentCollection.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Class_1 = __importDefault(__webpack_require__(/*! ../Class */ "../../main/dist/Class.js"));
const DomUtils = __importStar(__webpack_require__(/*! ../DomUtils */ "../../main/dist/DomUtils.js"));
const collection_1 = __webpack_require__(/*! ../mapper/collection */ "../../main/dist/mapper/collection.js");
const ComponentCollectionInserter_1 = __importDefault(__webpack_require__(/*! ./ComponentCollectionInserter */ "../../main/dist/component/ComponentCollectionInserter.js"));
/**
 * @hidden
 */
class ComponentCollection extends Class_1.default {
    constructor(parent, source, el) {
        super();
        this.parent = parent;
        this.source = source;
        parent._collections[this.iid] = this;
        const mapper = this.own(collection_1.createMapper(source, (child) => {
            this.parent._initChild(child);
            return child;
        }, {
            destroy: (child) => {
                this.parent._doneChild(child);
            },
            getKey: source.getKey
        }));
        this.own(new ComponentCollectionInserter_1.default(mapper.target, el[0]));
    }
    destroy() {
        delete this.parent._collections[this.iid];
        super.destroy();
    }
    _afterAppend() {
        this.source.forEach(DomUtils._afterAppend);
    }
}
exports.default = ComponentCollection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcG9uZW50Q29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnQvQ29tcG9uZW50Q29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFzQkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVGLHFEQUE2QjtBQUU3QixzREFBd0M7QUFDeEMscURBQWtEO0FBRWxELGdHQUF3RTtBQUV4RTs7R0FFRztBQUNILE1BQXFCLG1CQUFvQixTQUFRLGVBQUs7SUFDckQsWUFBb0IsTUFBaUIsRUFBVSxNQUFxQyxFQUFFLEVBQVU7UUFDL0YsS0FBSyxFQUFFLENBQUM7UUFEVyxXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBK0I7UUFFbkYsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRXJDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMseUJBQVksQ0FBdUIsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDNUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDOUIsT0FBTyxLQUFLLENBQUM7UUFDZCxDQUFDLEVBQUU7WUFDRixPQUFPLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDbEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDL0IsQ0FBQztZQUNELE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTTtTQUNyQixDQUFDLENBQUMsQ0FBQztRQUVKLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxxQ0FBMkIsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVELE9BQU87UUFDTixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUVELFlBQVk7UUFDWCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDNUMsQ0FBQztDQUNEO0FBMUJELHNDQTBCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjAgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBDbGFzcyBmcm9tICcuLi9DbGFzcyc7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL0NvbXBvbmVudCc7XG5pbXBvcnQgKiBhcyBEb21VdGlscyBmcm9tICcuLi9Eb21VdGlscyc7XG5pbXBvcnQge2NyZWF0ZU1hcHBlcn0gZnJvbSAnLi4vbWFwcGVyL2NvbGxlY3Rpb24nO1xuaW1wb3J0IFJlYWRvbmx5Q29sbGVjdGlvbiBmcm9tICcuLi9SZWFkb25seUNvbGxlY3Rpb24nO1xuaW1wb3J0IENvbXBvbmVudENvbGxlY3Rpb25JbnNlcnRlciBmcm9tICcuL0NvbXBvbmVudENvbGxlY3Rpb25JbnNlcnRlcic7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRDb2xsZWN0aW9uIGV4dGVuZHMgQ2xhc3Mge1xuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHBhcmVudDogQ29tcG9uZW50LCBwcml2YXRlIHNvdXJjZTogUmVhZG9ubHlDb2xsZWN0aW9uPENvbXBvbmVudD4sIGVsOiBKUXVlcnkpIHtcblx0XHRzdXBlcigpO1xuXHRcdHBhcmVudC5fY29sbGVjdGlvbnNbdGhpcy5paWRdID0gdGhpcztcblxuXHRcdGNvbnN0IG1hcHBlciA9IHRoaXMub3duKGNyZWF0ZU1hcHBlcjxDb21wb25lbnQsIENvbXBvbmVudD4oc291cmNlLCAoY2hpbGQpID0+IHtcblx0XHRcdHRoaXMucGFyZW50Ll9pbml0Q2hpbGQoY2hpbGQpO1xuXHRcdFx0cmV0dXJuIGNoaWxkO1xuXHRcdH0sIHtcblx0XHRcdGRlc3Ryb3k6IChjaGlsZCkgPT4ge1xuXHRcdFx0XHR0aGlzLnBhcmVudC5fZG9uZUNoaWxkKGNoaWxkKTtcblx0XHRcdH0sXG5cdFx0XHRnZXRLZXk6IHNvdXJjZS5nZXRLZXlcblx0XHR9KSk7XG5cblx0XHR0aGlzLm93bihuZXcgQ29tcG9uZW50Q29sbGVjdGlvbkluc2VydGVyKG1hcHBlci50YXJnZXQsIGVsWzBdKSk7XG5cdH1cblxuXHRkZXN0cm95KCkge1xuXHRcdGRlbGV0ZSB0aGlzLnBhcmVudC5fY29sbGVjdGlvbnNbdGhpcy5paWRdO1xuXHRcdHN1cGVyLmRlc3Ryb3koKTtcblx0fVxuXG5cdF9hZnRlckFwcGVuZCgpIHtcblx0XHR0aGlzLnNvdXJjZS5mb3JFYWNoKERvbVV0aWxzLl9hZnRlckFwcGVuZCk7XG5cdH1cbn1cbiJdfQ==

/***/ }),

/***/ "../../main/dist/component/ComponentCollectionInserter.js":
/*!*************************************************************************!*\
  !*** C:/jwidget/git/main/dist/component/ComponentCollectionInserter.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Class_1 = __importDefault(__webpack_require__(/*! ../Class */ "../../main/dist/Class.js"));
const DomUtils = __importStar(__webpack_require__(/*! ../DomUtils */ "../../main/dist/DomUtils.js"));
const collection_1 = __webpack_require__(/*! ../observer/collection */ "../../main/dist/observer/collection.js");
/**
 * @hidden
 */
class ComponentCollectionInserter extends Class_1.default {
    constructor(source, el) {
        super();
        this.el = el;
        this.len = 0;
        this.own(collection_1.createObserver(source, {
            add: this._addItem,
            remove: this._removeItem,
            scope: this
        }));
    }
    _addItem(item) {
        var parent = this.el;
        var anchor = parent.childNodes[this.len];
        var child = item.el[0];
        if (anchor != null) {
            parent.insertBefore(child, anchor);
        }
        else {
            parent.appendChild(child);
        }
        ++this.len;
        item._afterAppend();
    }
    _removeItem(item) {
        DomUtils.remove(item.el[0]);
        --this.len;
    }
}
exports.default = ComponentCollectionInserter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcG9uZW50Q29sbGVjdGlvbkluc2VydGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbXBvbmVudC9Db21wb25lbnRDb2xsZWN0aW9uSW5zZXJ0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBc0JFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFRixxREFBNkI7QUFFN0Isc0RBQXdDO0FBQ3hDLHVEQUFzRDtBQUd0RDs7R0FFRztBQUNILE1BQXFCLDJCQUE0QixTQUFRLGVBQUs7SUFHN0QsWUFBWSxNQUFxQyxFQUFVLEVBQWU7UUFDekUsS0FBSyxFQUFFLENBQUM7UUFEa0QsT0FBRSxHQUFGLEVBQUUsQ0FBYTtRQUZsRSxRQUFHLEdBQVcsQ0FBQyxDQUFDO1FBSXZCLElBQUksQ0FBQyxHQUFHLENBQUMsMkJBQWMsQ0FBQyxNQUFNLEVBQUU7WUFDL0IsR0FBRyxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ2xCLE1BQU0sRUFBRSxJQUFJLENBQUMsV0FBVztZQUN4QixLQUFLLEVBQUUsSUFBSTtTQUNYLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFFBQVEsQ0FBQyxJQUFlO1FBQ3ZCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDckIsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLE1BQU0sSUFBSSxJQUFJLEVBQUU7WUFDbkIsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDbkM7YUFBTTtZQUNOLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDMUI7UUFDRCxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDWCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELFdBQVcsQ0FBQyxJQUFlO1FBQzFCLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVCLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNaLENBQUM7Q0FDRDtBQTdCRCw4Q0E2QkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgQ2xhc3MgZnJvbSAnLi4vQ2xhc3MnO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9Db21wb25lbnQnO1xuaW1wb3J0ICogYXMgRG9tVXRpbHMgZnJvbSAnLi4vRG9tVXRpbHMnO1xuaW1wb3J0IHtjcmVhdGVPYnNlcnZlcn0gZnJvbSAnLi4vb2JzZXJ2ZXIvY29sbGVjdGlvbic7XG5pbXBvcnQgUmVhZG9ubHlDb2xsZWN0aW9uIGZyb20gJy4uL1JlYWRvbmx5Q29sbGVjdGlvbic7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRDb2xsZWN0aW9uSW5zZXJ0ZXIgZXh0ZW5kcyBDbGFzcyB7XG5cdHByaXZhdGUgbGVuOiBudW1iZXIgPSAwO1xuXG5cdGNvbnN0cnVjdG9yKHNvdXJjZTogUmVhZG9ubHlDb2xsZWN0aW9uPENvbXBvbmVudD4sIHByaXZhdGUgZWw6IEhUTUxFbGVtZW50KSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLm93bihjcmVhdGVPYnNlcnZlcihzb3VyY2UsIHtcblx0XHRcdGFkZDogdGhpcy5fYWRkSXRlbSxcblx0XHRcdHJlbW92ZTogdGhpcy5fcmVtb3ZlSXRlbSxcblx0XHRcdHNjb3BlOiB0aGlzXG5cdFx0fSkpO1xuXHR9XG5cblx0X2FkZEl0ZW0oaXRlbTogQ29tcG9uZW50KSB7XG5cdFx0dmFyIHBhcmVudCA9IHRoaXMuZWw7XG5cdFx0dmFyIGFuY2hvciA9IHBhcmVudC5jaGlsZE5vZGVzW3RoaXMubGVuXTtcblx0XHR2YXIgY2hpbGQgPSBpdGVtLmVsWzBdO1xuXHRcdGlmIChhbmNob3IgIT0gbnVsbCkge1xuXHRcdFx0cGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgYW5jaG9yKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cGFyZW50LmFwcGVuZENoaWxkKGNoaWxkKTtcblx0XHR9XG5cdFx0Kyt0aGlzLmxlbjtcblx0XHRpdGVtLl9hZnRlckFwcGVuZCgpO1xuXHR9XG5cblx0X3JlbW92ZUl0ZW0oaXRlbTogQ29tcG9uZW50KSB7XG5cdFx0RG9tVXRpbHMucmVtb3ZlKGl0ZW0uZWxbMF0pO1xuXHRcdC0tdGhpcy5sZW47XG5cdH1cbn1cbiJdfQ==

/***/ }),

/***/ "../../main/dist/component/ComponentInserter.js":
/*!***************************************************************!*\
  !*** C:/jwidget/git/main/dist/component/ComponentInserter.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AbstractInserter_1 = __importDefault(__webpack_require__(/*! ../AbstractInserter */ "../../main/dist/AbstractInserter.js"));
/**
 * @hidden
 */
class ComponentInserter extends AbstractInserter_1.default {
    _getElement(item) {
        return item.el[0];
    }
    _addItem(item, index) {
        super._addItem(item, index);
        item._afterAppend();
    }
}
exports.default = ComponentInserter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcG9uZW50SW5zZXJ0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tcG9uZW50L0NvbXBvbmVudEluc2VydGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXNCRTs7Ozs7QUFFRiwyRUFBbUQ7QUFHbkQ7O0dBRUc7QUFDSCxNQUFxQixpQkFBa0IsU0FBUSwwQkFBMkI7SUFDL0QsV0FBVyxDQUFDLElBQWU7UUFDcEMsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFFUyxRQUFRLENBQUMsSUFBZSxFQUFFLEtBQWE7UUFDaEQsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3JCLENBQUM7Q0FDRDtBQVRELG9DQVNDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IEFic3RyYWN0SW5zZXJ0ZXIgZnJvbSAnLi4vQWJzdHJhY3RJbnNlcnRlcic7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL0NvbXBvbmVudCc7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRJbnNlcnRlciBleHRlbmRzIEFic3RyYWN0SW5zZXJ0ZXI8Q29tcG9uZW50PiB7XG5cdHByb3RlY3RlZCBfZ2V0RWxlbWVudChpdGVtOiBDb21wb25lbnQpOiBIVE1MRWxlbWVudCB7XG5cdFx0cmV0dXJuIGl0ZW0uZWxbMF07XG5cdH1cblxuXHRwcm90ZWN0ZWQgX2FkZEl0ZW0oaXRlbTogQ29tcG9uZW50LCBpbmRleDogbnVtYmVyKSB7XG5cdFx0c3VwZXIuX2FkZEl0ZW0oaXRlbSwgaW5kZXgpO1xuXHRcdGl0ZW0uX2FmdGVyQXBwZW5kKCk7XG5cdH1cbn1cbiJdfQ==

/***/ }),

/***/ "../../main/dist/component/ComponentList.js":
/*!***********************************************************!*\
  !*** C:/jwidget/git/main/dist/component/ComponentList.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Class_1 = __importDefault(__webpack_require__(/*! ../Class */ "../../main/dist/Class.js"));
const DomUtils = __importStar(__webpack_require__(/*! ../DomUtils */ "../../main/dist/DomUtils.js"));
const list_1 = __importDefault(__webpack_require__(/*! ../mapper/list */ "../../main/dist/mapper/list.js"));
const ComponentInserter_1 = __importDefault(__webpack_require__(/*! ./ComponentInserter */ "../../main/dist/component/ComponentInserter.js"));
/**
 * @hidden
 */
class ComponentList extends Class_1.default {
    constructor(parent, source, el) {
        super();
        this.parent = parent;
        this.source = source;
        parent._arrays[this.iid] = this;
        const mapper = this.own(new list_1.default(source, (child) => {
            this.parent._initChild(child);
            return child;
        }, {
            destroy: (child) => {
                this.parent._doneChild(child);
            }
        }));
        this.own(new ComponentInserter_1.default(mapper.target, el[0]));
    }
    destroy() {
        delete this.parent._arrays[this.iid];
        super.destroy();
    }
    _afterAppend() {
        this.source.forEach(DomUtils._afterAppend);
    }
}
exports.default = ComponentList;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcG9uZW50TGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnQvQ29tcG9uZW50TGlzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFzQkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVGLHFEQUE2QjtBQUU3QixzREFBd0M7QUFDeEMsMERBQXdDO0FBRXhDLDRFQUFvRDtBQUVwRDs7R0FFRztBQUNILE1BQXFCLGFBQWMsU0FBUSxlQUFLO0lBQy9DLFlBQW9CLE1BQWlCLEVBQVUsTUFBK0IsRUFBRSxFQUFVO1FBQ3pGLEtBQUssRUFBRSxDQUFDO1FBRFcsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUFVLFdBQU0sR0FBTixNQUFNLENBQXlCO1FBRTdFLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUVoQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksY0FBVSxDQUF1QixNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUM5RSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM5QixPQUFPLEtBQUssQ0FBQztRQUNkLENBQUMsRUFBRTtZQUNGLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNsQixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMvQixDQUFDO1NBQ0QsQ0FBQyxDQUFDLENBQUM7UUFFSixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksMkJBQWlCLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxPQUFPO1FBQ04sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFFRCxZQUFZO1FBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzVDLENBQUM7Q0FDRDtBQXpCRCxnQ0F5QkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgQ2xhc3MgZnJvbSAnLi4vQ2xhc3MnO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9Db21wb25lbnQnO1xuaW1wb3J0ICogYXMgRG9tVXRpbHMgZnJvbSAnLi4vRG9tVXRpbHMnO1xuaW1wb3J0IExpc3RNYXBwZXIgZnJvbSAnLi4vbWFwcGVyL2xpc3QnO1xuaW1wb3J0IFJlYWRvbmx5TGlzdCBmcm9tICcuLi9SZWFkb25seUxpc3QnO1xuaW1wb3J0IENvbXBvbmVudEluc2VydGVyIGZyb20gJy4vQ29tcG9uZW50SW5zZXJ0ZXInO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcG9uZW50TGlzdCBleHRlbmRzIENsYXNzIHtcblx0Y29uc3RydWN0b3IocHJpdmF0ZSBwYXJlbnQ6IENvbXBvbmVudCwgcHJpdmF0ZSBzb3VyY2U6IFJlYWRvbmx5TGlzdDxDb21wb25lbnQ+LCBlbDogSlF1ZXJ5KSB7XG5cdFx0c3VwZXIoKTtcblx0XHRwYXJlbnQuX2FycmF5c1t0aGlzLmlpZF0gPSB0aGlzO1xuXG5cdFx0Y29uc3QgbWFwcGVyID0gdGhpcy5vd24obmV3IExpc3RNYXBwZXI8Q29tcG9uZW50LCBDb21wb25lbnQ+KHNvdXJjZSwgKGNoaWxkKSA9PiB7XG5cdFx0XHR0aGlzLnBhcmVudC5faW5pdENoaWxkKGNoaWxkKTtcblx0XHRcdHJldHVybiBjaGlsZDtcblx0XHR9LCB7XG5cdFx0XHRkZXN0cm95OiAoY2hpbGQpID0+IHtcblx0XHRcdFx0dGhpcy5wYXJlbnQuX2RvbmVDaGlsZChjaGlsZCk7XG5cdFx0XHR9XG5cdFx0fSkpO1xuXG5cdFx0dGhpcy5vd24obmV3IENvbXBvbmVudEluc2VydGVyKG1hcHBlci50YXJnZXQsIGVsWzBdKSk7XG5cdH1cblxuXHRkZXN0cm95KCkge1xuXHRcdGRlbGV0ZSB0aGlzLnBhcmVudC5fYXJyYXlzW3RoaXMuaWlkXTtcblx0XHRzdXBlci5kZXN0cm95KCk7XG5cdH1cblxuXHRfYWZ0ZXJBcHBlbmQoKSB7XG5cdFx0dGhpcy5zb3VyY2UuZm9yRWFjaChEb21VdGlscy5fYWZ0ZXJBcHBlbmQpO1xuXHR9XG59XG4iXX0=

/***/ }),

/***/ "../../main/dist/dummyDestroyable.js":
/*!****************************************************!*\
  !*** C:/jwidget/git/main/dist/dummyDestroyable.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", { value: true });
class DummyDestroyable {
    destroy() { }
}
/**
 * Dummy implementation of `Destroyable` interface.
 * Exposes `destroy` method which does nothing.
 */
const dummyDestroyable = (new DummyDestroyable()); // An extra variable helps IntelliSense to find this import
exports.default = dummyDestroyable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVtbXlEZXN0cm95YWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kdW1teURlc3Ryb3lhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXNCRTs7QUFJRixNQUFNLGdCQUFnQjtJQUNyQixPQUFPLEtBQUksQ0FBQztDQUNaO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxnQkFBZ0IsR0FBZ0IsQ0FBQyxJQUFJLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDLDJEQUEyRDtBQUMzSCxrQkFBZSxnQkFBZ0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjAgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBEZXN0cm95YWJsZSBmcm9tIFwiLi9EZXN0cm95YWJsZVwiO1xuXG5jbGFzcyBEdW1teURlc3Ryb3lhYmxlIGltcGxlbWVudHMgRGVzdHJveWFibGUge1xuXHRkZXN0cm95KCkge31cbn1cblxuLyoqXG4gKiBEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBgRGVzdHJveWFibGVgIGludGVyZmFjZS5cbiAqIEV4cG9zZXMgYGRlc3Ryb3lgIG1ldGhvZCB3aGljaCBkb2VzIG5vdGhpbmcuXG4gKi9cbmNvbnN0IGR1bW15RGVzdHJveWFibGUgPSA8RGVzdHJveWFibGU+KG5ldyBEdW1teURlc3Ryb3lhYmxlKCkpOyAvLyBBbiBleHRyYSB2YXJpYWJsZSBoZWxwcyBJbnRlbGxpU2Vuc2UgdG8gZmluZCB0aGlzIGltcG9ydFxuZXhwb3J0IGRlZmF1bHQgZHVtbXlEZXN0cm95YWJsZTtcbiJdfQ==

/***/ }),

/***/ "../../main/dist/dummyEvent.js":
/*!**********************************************!*\
  !*** C:/jwidget/git/main/dist/dummyEvent.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dummyDestroyable_1 = __importDefault(__webpack_require__(/*! ./dummyDestroyable */ "../../main/dist/dummyDestroyable.js"));
class DummyEvent {
    get dummy() {
        return true;
    }
    purge() {
    }
    listen(_handler, _scope) {
        return dummyDestroyable_1.default;
    }
    trigger(_params) {
    }
}
/**
 * Dummy implementation of `Listenable<any>` interface.
 * As opposed to `Event`, doesn't really bind the event handlers, just pretends it does that.
 */
const dummyEvent = (new DummyEvent()); // An extra variable helps IntelliSense to find this import
exports.default = dummyEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVtbXlFdmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kdW1teUV2ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXNCRTs7Ozs7QUFHRiwwRUFBa0Q7QUFHbEQsTUFBTSxVQUFVO0lBRWYsSUFBSSxLQUFLO1FBQ1IsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsS0FBSztJQUNMLENBQUM7SUFFRCxNQUFNLENBQUMsUUFBOEIsRUFBRSxNQUFZO1FBQ2xELE9BQU8sMEJBQWdCLENBQUM7SUFDekIsQ0FBQztJQUVELE9BQU8sQ0FBQyxPQUFhO0lBQ3JCLENBQUM7Q0FDRDtBQUVEOzs7R0FHRztBQUNILE1BQU0sVUFBVSxHQUFnQixDQUFDLElBQUksVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLDJEQUEyRDtBQUMvRyxrQkFBZSxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgRGVzdHJveWFibGUgZnJvbSBcIi4vRGVzdHJveWFibGVcIjtcbmltcG9ydCBkdW1teURlc3Ryb3lhYmxlIGZyb20gXCIuL2R1bW15RGVzdHJveWFibGVcIjtcbmltcG9ydCBJRXZlbnQgZnJvbSBcIi4vSUV2ZW50XCI7XG5cbmNsYXNzIER1bW15RXZlbnQgaW1wbGVtZW50cyBJRXZlbnQ8YW55PiB7XG5cblx0Z2V0IGR1bW15KCkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0cHVyZ2UoKTogdm9pZCB7XG5cdH1cblxuXHRsaXN0ZW4oX2hhbmRsZXI6IChwYXJhbXM6IGFueSkgPT4gYW55LCBfc2NvcGU/OiBhbnkpOiBEZXN0cm95YWJsZSB7XG5cdFx0cmV0dXJuIGR1bW15RGVzdHJveWFibGU7XG5cdH1cblxuXHR0cmlnZ2VyKF9wYXJhbXM/OiBhbnkpOiB2b2lkIHtcblx0fVxufVxuXG4vKipcbiAqIER1bW15IGltcGxlbWVudGF0aW9uIG9mIGBMaXN0ZW5hYmxlPGFueT5gIGludGVyZmFjZS5cbiAqIEFzIG9wcG9zZWQgdG8gYEV2ZW50YCwgZG9lc24ndCByZWFsbHkgYmluZCB0aGUgZXZlbnQgaGFuZGxlcnMsIGp1c3QgcHJldGVuZHMgaXQgZG9lcyB0aGF0LlxuICovXG5jb25zdCBkdW1teUV2ZW50ID0gPElFdmVudDxhbnk+PihuZXcgRHVtbXlFdmVudCgpKTsgLy8gQW4gZXh0cmEgdmFyaWFibGUgaGVscHMgSW50ZWxsaVNlbnNlIHRvIGZpbmQgdGhpcyBpbXBvcnRcbmV4cG9ydCBkZWZhdWx0IGR1bW15RXZlbnQ7XG4iXX0=

/***/ }),

/***/ "../../main/dist/index.js":
/*!*****************************************!*\
  !*** C:/jwidget/git/main/dist/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectionFlags = exports.ADAPTER = exports.SILENT = exports.Binding = exports.TWOWAY = exports.WATCH = exports.UPDATE = exports.destroy = exports.iidStr = exports.newIid = exports.get = exports.smartCmp = exports.cmp = exports.apply = exports.defn = exports.def = exports.isDate = exports.isRegExp = exports.isArray = exports.isFunction = exports.isBoolean = exports.isString = exports.isNumber = exports.isInt = exports.isTruthy = exports.isFalsy = exports.isNil = exports.isNotNil = exports.isNotNull = exports.isNull = exports.isDefined = exports.isUndefined = void 0;
const internal_1 = __webpack_require__(/*! ./internal */ "../../main/dist/internal.js");
var internal_2 = __webpack_require__(/*! ./internal */ "../../main/dist/internal.js");
Object.defineProperty(exports, "identity", { enumerable: true, get: function () { return internal_2.identity; } });
/**
 * Checks if value is undefined.
 */
function isUndefined(value) {
    return value === undefined;
}
exports.isUndefined = isUndefined;
/**
 * Checks if value is not undefined.
 */
function isDefined(value) {
    return value !== undefined;
}
exports.isDefined = isDefined;
/**
 * Checks if value is null.
 */
function isNull(value) {
    return value === null;
}
exports.isNull = isNull;
/**
 * Checks if value is not null.
 */
function isNotNull(value) {
    return value !== null;
}
exports.isNotNull = isNotNull;
/**
 * Checks if value is not undefined and null.
 */
function isNotNil(value) {
    return value != null;
}
exports.isNotNil = isNotNil;
/**
 * Checks if value is undefined or null.
 */
function isNil(value) {
    return value == null;
}
exports.isNil = isNil;
/**
 * Checks if value is falsy (`null`, `undefined`, `false`, 0, `NaN` or blank string).
 */
function isFalsy(value) {
    return !value;
}
exports.isFalsy = isFalsy;
/**
 * Checks if value is truthy (not `null`, `undefined`, `false`, 0, `NaN` or blank string).
 */
function isTruthy(value) {
    return Boolean(value);
}
exports.isTruthy = isTruthy;
/**
 * Checks if value is an integer.
 */
function isInt(value) {
    return (typeof value === "number") && Math.round(value) === value;
}
exports.isInt = isInt;
/**
 * Checks if value is a number.
 */
function isNumber(value) {
    return typeof value === "number";
}
exports.isNumber = isNumber;
/**
 * Checks if value is a string.
 */
function isString(value) {
    return typeof value === "string";
}
exports.isString = isString;
/**
 * Checks if value is a boolean.
 */
function isBoolean(value) {
    return typeof value === "boolean";
}
exports.isBoolean = isBoolean;
/**
 * Checks if value is a function.
 */
function isFunction(value) {
    return typeof value === "function";
}
exports.isFunction = isFunction;
/**
 * Checks if value is a native JavaScript Array.
 */
function isArray(value) {
    return Object.prototype.toString.apply(value) === '[object Array]';
}
exports.isArray = isArray;
/**
 * Checks if value is a regular expression.
 */
function isRegExp(value) {
    return Object.prototype.toString.apply(value) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
/**
 * Checks if value is a date.
 */
function isDate(value) {
    return Object.prototype.toString.apply(value) === '[object Date]';
}
exports.isDate = isDate;
/**
 * Defines default value. Returns `value`, if it is not undefined, else returns `default`.
 */
function def(value, defaultValue) {
    return (value !== undefined) ? value : defaultValue;
}
exports.def = def;
/**
 * Defines default value. Returns `value`, if it is not undefined and null, else returns `default`.
 */
function defn(value, defaultValue) {
    return (value != null) ? value : defaultValue;
}
exports.defn = defn;
/**
 * Iterates through objects passed after first argument and copies all their fields into
 * `target` object. Returns `target`. Undefined source object fields are ignored.
 * Null and undefined source objects are be ignored.
 *
 * Function modifies `target` object!
 */
function apply(target, ...sources) {
    for (var i = 0; i < sources.length; ++i) {
        var source = sources[i];
        if (!source) {
            continue;
        }
        for (var key in source) {
            if (source[key] !== undefined) {
                target[key] = source[key];
            }
        }
    }
    return target;
}
exports.apply = apply;
/**
 * Universal and sophisticated comparer for array sorting. Broadly speaking, it:
 *
 * - Returns 1, if x > y
 * - Returns -1, if x < y
 * - Returns 0, if x == y
 *
 * See online documentation for details.
 */
function cmp(x, y) {
    return smartCmp(x, y);
}
exports.cmp = cmp;
/**
 * Universal and sophisticated comparer for array sorting. Broadly speaking, it:
 *
 * - Returns 1, if x > y
 * - Returns -1, if x < y
 * - Returns 0, if x == y
 *
 * See online documentation for details.
 */
function smartCmp(x, y, config) {
    const xRank = getTypeRank(x);
    const yRank = getTypeRank(y);
    if (xRank !== yRank) {
        return internal_1.cmpPrimitives(xRank, yRank);
    }
    switch (xRank) {
        case "array": return cmpArrays(x, y, config);
        case "boolean": return cmpBooleans(x, y);
        case "identifiable": return cmpIdentifiables(x, y);
        case "string": return cmpStrings(x, y, config);
        default: return internal_1.cmpPrimitives(x, y);
    }
}
exports.smartCmp = smartCmp;
function getTypeRank(x) {
    return (x === undefined) ? "0" : (x === null) ? "1" : isArray(x) ? "array" :
        (typeof x.iid === "number") ? "identifiable" : typeof x;
}
function cmpArrays(x, y, config) {
    const n = Math.min(x.length, y.length);
    for (let i = 0; i < n; ++i) {
        let result = smartCmp(x[i], y[i], config);
        if (result) {
            return result;
        }
    }
    return internal_1.cmpPrimitives(x.length, y.length);
}
function cmpBooleans(x, y) {
    return x ? (y ? 0 : 1) : (y ? -1 : 0);
}
function cmpIdentifiables(x, y) {
    return internal_1.cmpPrimitives(x.iid, y.iid);
}
function cmpStrings(x, y, config) {
    x = x || "";
    y = y || "";
    if (config && config.caseInsensitive) {
        x = x.toLowerCase();
        y = y.toLowerCase();
    }
    if (!config || !config.compareNumbersInStrings) {
        return internal_1.cmpPrimitives(x, y);
    }
    let xIndex = 0;
    let yIndex = 0;
    while (true) {
        let xLength = x.substr(xIndex).search(/\d+/);
        if (xLength === -1) {
            xLength = x.length - xIndex;
        }
        let yLength = y.substr(yIndex).search(/\d+/);
        if (yLength === -1) {
            yLength = y.length - yIndex;
        }
        const result1 = internal_1.cmpPrimitives(x.substr(xIndex, xLength), y.substr(yIndex, yLength));
        if (result1) {
            return result1;
        }
        xIndex += xLength;
        yIndex += yLength;
        const xMatches = /^\d+/.exec(x.substr(xIndex));
        const yMatches = /^\d+/.exec(y.substr(yIndex));
        if (xMatches == null || yMatches == null) {
            return cmpBooleans(xMatches != null, yMatches != null);
        }
        const xNumber = +xMatches[0];
        const yNumber = +yMatches[0];
        const result2 = internal_1.cmpPrimitives(xNumber, yNumber);
        if (result2) {
            return result2;
        }
        xIndex += xMatches[0].length;
        yIndex += yMatches[0].length;
    }
}
/**
 * Returns object item or subitem by path.
 * Path is a primitive value (object key), or an array of subpaths.
 * If `path` is null, undefined or empty array, returns `obj`.
 * If item doesn't exist, returns undefined.
 */
function get(obj, path) {
    if (path == null) {
        return obj;
    }
    if (!isArray(path)) {
        return (obj && typeof obj === "object") ? obj[path] : undefined;
    }
    for (let i = 0, l = path.length; i < l; ++i) {
        obj = get(obj, path[i]);
    }
    return obj;
}
exports.get = get;
let _lastIid = 0;
/**
 * Returns a new auto-incrementing instance identifier for `Identifiable` interface.
 */
function newIid() {
    return ++_lastIid;
}
exports.newIid = newIid;
/**
 * Returns object `iid` converted to a string. Can be used as efficient `getKey` implementation
 * for collections consisting of `Identifiable` objects only.
 */
function iidStr(obj) {
    return (obj === undefined) ? "u" : (obj === null) ? "n" : String(obj.iid);
}
exports.iidStr = iidStr;
/**
 * Calls object method `destroy` if available. Can be used in mapper configuration.
 */
function destroy(obj) {
    if (obj && typeof obj.destroy === "function") {
        obj.destroy();
    }
}
exports.destroy = destroy;
/**
 * Shorthand for Binding.UPDATE.
 */
exports.UPDATE = 1;
/**
 * Shorthand for Binding.WATCH.
 */
exports.WATCH = 2;
/**
 * Shorthand for Binding.TWOWAY.
 */
exports.TWOWAY = 3;
/**
 * jWidget binding modes. All options have shorthands.
 */
var Binding;
(function (Binding) {
    /**
     * Bind invoker to argument. Always used as default binding.
     */
    Binding[Binding["UPDATE"] = 1] = "UPDATE";
    /**
     * Bind argument to invoker. Always supplied with a no-argument method, which creates the property automatically.
     */
    Binding[Binding["WATCH"] = 2] = "WATCH";
    /**
     * Bind invoker and argument to each other. UPDATE-binding is applied first.
     */
    Binding[Binding["TWOWAY"] = 3] = "TWOWAY";
})(Binding = exports.Binding || (exports.Binding = {}));
/**
 * Shorthand for CollectionFlags.SILENT.
 */
exports.SILENT = 1;
/**
 * Shorthand for CollectionFlags.ADAPTER.
 */
exports.ADAPTER = 2;
/**
 * jWidget collection flags. All options have shorthands.
 */
var CollectionFlags;
(function (CollectionFlags) {
    /**
     * If on, uses `dummyEvent` implementation for all collection events.
     * Toggle it on only if you know that this collection never gets modified or
     * there are no listeners intersted in its modification.
     */
    CollectionFlags[CollectionFlags["SILENT"] = 1] = "SILENT";
    /**
     * Creates a collection as an adapter over constructor argument.
     * If off, creates a copy. Toggle it on only if noone else manages collection contents.
     */
    CollectionFlags[CollectionFlags["ADAPTER"] = 2] = "ADAPTER";
})(CollectionFlags = exports.CollectionFlags || (exports.CollectionFlags = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBc0JFOzs7QUFJRix5Q0FBeUM7QUFFekMsdUNBQW9DO0FBQTVCLG9HQUFBLFFBQVEsT0FBQTtBQUVoQjs7R0FFRztBQUNILFNBQWdCLFdBQVcsQ0FBQyxLQUFVO0lBQ3JDLE9BQU8sS0FBSyxLQUFLLFNBQVMsQ0FBQztBQUM1QixDQUFDO0FBRkQsa0NBRUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLFNBQVMsQ0FBQyxLQUFVO0lBQ25DLE9BQU8sS0FBSyxLQUFLLFNBQVMsQ0FBQztBQUM1QixDQUFDO0FBRkQsOEJBRUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLE1BQU0sQ0FBQyxLQUFVO0lBQ2hDLE9BQU8sS0FBSyxLQUFLLElBQUksQ0FBQztBQUN2QixDQUFDO0FBRkQsd0JBRUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLFNBQVMsQ0FBQyxLQUFVO0lBQ25DLE9BQU8sS0FBSyxLQUFLLElBQUksQ0FBQztBQUN2QixDQUFDO0FBRkQsOEJBRUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLFFBQVEsQ0FBQyxLQUFVO0lBQ2xDLE9BQU8sS0FBSyxJQUFJLElBQUksQ0FBQztBQUN0QixDQUFDO0FBRkQsNEJBRUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLEtBQUssQ0FBQyxLQUFVO0lBQy9CLE9BQU8sS0FBSyxJQUFJLElBQUksQ0FBQztBQUN0QixDQUFDO0FBRkQsc0JBRUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLE9BQU8sQ0FBQyxLQUFVO0lBQ2pDLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRkQsMEJBRUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLFFBQVEsQ0FBQyxLQUFVO0lBQ2xDLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3ZCLENBQUM7QUFGRCw0QkFF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QWZXLE9BQU8sR0FBUCxlQUFPLEtBQVAsZUFBTyxRQWVsQjtBQUVEOztHQUVHO0FBQ1UsUUFBQSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBRXhCOztHQUVHO0FBQ1UsUUFBQSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBRXpCOztHQUVHO0FBQ0gsSUFBWSxlQWFYO0FBYkQsV0FBWSxlQUFlO0lBQzFCOzs7O09BSUc7SUFDSCx5REFBVSxDQUFBO0lBRVY7OztPQUdHO0lBQ0gsMkRBQVcsQ0FBQTtBQUNaLENBQUMsRUFiVyxlQUFlLEdBQWYsdUJBQWUsS0FBZix1QkFBZSxRQWExQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjAgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBEaWN0aW9uYXJ5IGZyb20gJy4vRGljdGlvbmFyeSc7XG5pbXBvcnQgSWRlbnRpZmlhYmxlIGZyb20gJy4vSWRlbnRpZmlhYmxlJztcbmltcG9ydCB7Y21wUHJpbWl0aXZlc30gZnJvbSAnLi9pbnRlcm5hbCc7XG5cbmV4cG9ydCB7aWRlbnRpdHl9IGZyb20gJy4vaW50ZXJuYWwnO1xuXG4vKipcbiAqIENoZWNrcyBpZiB2YWx1ZSBpcyB1bmRlZmluZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZTogYW55KSB7XG5cdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB2YWx1ZSBpcyBub3QgdW5kZWZpbmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbmVkKHZhbHVlOiBhbnkpIHtcblx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHZhbHVlIGlzIG51bGwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc051bGwodmFsdWU6IGFueSkge1xuXHRyZXR1cm4gdmFsdWUgPT09IG51bGw7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHZhbHVlIGlzIG5vdCBudWxsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOb3ROdWxsKHZhbHVlOiBhbnkpIHtcblx0cmV0dXJuIHZhbHVlICE9PSBudWxsO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB2YWx1ZSBpcyBub3QgdW5kZWZpbmVkIGFuZCBudWxsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOb3ROaWwodmFsdWU6IGFueSkge1xuXHRyZXR1cm4gdmFsdWUgIT0gbnVsbDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdmFsdWUgaXMgdW5kZWZpbmVkIG9yIG51bGwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc05pbCh2YWx1ZTogYW55KSB7XG5cdHJldHVybiB2YWx1ZSA9PSBudWxsO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB2YWx1ZSBpcyBmYWxzeSAoYG51bGxgLCBgdW5kZWZpbmVkYCwgYGZhbHNlYCwgMCwgYE5hTmAgb3IgYmxhbmsgc3RyaW5nKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRmFsc3kodmFsdWU6IGFueSkge1xuXHRyZXR1cm4gIXZhbHVlO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB2YWx1ZSBpcyB0cnV0aHkgKG5vdCBgbnVsbGAsIGB1bmRlZmluZWRgLCBgZmFsc2VgLCAwLCBgTmFOYCBvciBibGFuayBzdHJpbmcpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNUcnV0aHkodmFsdWU6IGFueSkge1xuXHRyZXR1cm4gQm9vbGVhbih2YWx1ZSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHZhbHVlIGlzIGFuIGludGVnZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0ludCh2YWx1ZTogYW55KSB7XG5cdHJldHVybiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSAmJiBNYXRoLnJvdW5kKHZhbHVlKSA9PT0gdmFsdWU7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWU6IGFueSkge1xuXHRyZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB2YWx1ZSBpcyBhIHN0cmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlOiBhbnkpIHtcblx0cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIjtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdmFsdWUgaXMgYSBib29sZWFuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlOiBhbnkpIHtcblx0cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCI7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHZhbHVlIGlzIGEgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlOiBhbnkpIHtcblx0cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB2YWx1ZSBpcyBhIG5hdGl2ZSBKYXZhU2NyaXB0IEFycmF5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNBcnJheSh2YWx1ZTogYW55KSB7XG5cdHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmFwcGx5KHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdmFsdWUgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1JlZ0V4cCh2YWx1ZTogYW55KSB7XG5cdHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmFwcGx5KHZhbHVlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHZhbHVlIGlzIGEgZGF0ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZTogYW55KSB7XG5cdHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmFwcGx5KHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERlZmluZXMgZGVmYXVsdCB2YWx1ZS4gUmV0dXJucyBgdmFsdWVgLCBpZiBpdCBpcyBub3QgdW5kZWZpbmVkLCBlbHNlIHJldHVybnMgYGRlZmF1bHRgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVmPFQ+KHZhbHVlOiBULCBkZWZhdWx0VmFsdWU6IFQpOiBUIHtcblx0cmV0dXJuICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xufVxuXG4vKipcbiAqIERlZmluZXMgZGVmYXVsdCB2YWx1ZS4gUmV0dXJucyBgdmFsdWVgLCBpZiBpdCBpcyBub3QgdW5kZWZpbmVkIGFuZCBudWxsLCBlbHNlIHJldHVybnMgYGRlZmF1bHRgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVmbjxUPih2YWx1ZTogVCwgZGVmYXVsdFZhbHVlOiBUKTogVCB7XG5cdHJldHVybiAodmFsdWUgIT0gbnVsbCkgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlcyB0aHJvdWdoIG9iamVjdHMgcGFzc2VkIGFmdGVyIGZpcnN0IGFyZ3VtZW50IGFuZCBjb3BpZXMgYWxsIHRoZWlyIGZpZWxkcyBpbnRvXG4gKiBgdGFyZ2V0YCBvYmplY3QuIFJldHVybnMgYHRhcmdldGAuIFVuZGVmaW5lZCBzb3VyY2Ugb2JqZWN0IGZpZWxkcyBhcmUgaWdub3JlZC5cbiAqIE51bGwgYW5kIHVuZGVmaW5lZCBzb3VyY2Ugb2JqZWN0cyBhcmUgYmUgaWdub3JlZC5cbiAqXG4gKiBGdW5jdGlvbiBtb2RpZmllcyBgdGFyZ2V0YCBvYmplY3QhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseTxUPih0YXJnZXQ6IERpY3Rpb25hcnk8VD4sIC4uLnNvdXJjZXM6IERpY3Rpb25hcnk8VD5bXSk6IERpY3Rpb25hcnk8VD4ge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZXMubGVuZ3RoOyArK2kpIHtcblx0XHR2YXIgc291cmNlID0gc291cmNlc1tpXTtcblx0XHRpZiAoIXNvdXJjZSkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcblx0XHRcdGlmIChzb3VyY2Vba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogVW5pdmVyc2FsIGFuZCBzb3BoaXN0aWNhdGVkIGNvbXBhcmVyIGZvciBhcnJheSBzb3J0aW5nLiBCcm9hZGx5IHNwZWFraW5nLCBpdDpcbiAqXG4gKiAtIFJldHVybnMgMSwgaWYgeCA+IHlcbiAqIC0gUmV0dXJucyAtMSwgaWYgeCA8IHlcbiAqIC0gUmV0dXJucyAwLCBpZiB4ID09IHlcbiAqXG4gKiBTZWUgb25saW5lIGRvY3VtZW50YXRpb24gZm9yIGRldGFpbHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbXAoeDogYW55LCB5OiBhbnkpOiBudW1iZXIge1xuXHRyZXR1cm4gc21hcnRDbXAoeCwgeSk7XG59XG5cbi8qKlxuICogVW5pdmVyc2FsIGFuZCBzb3BoaXN0aWNhdGVkIGNvbXBhcmVyIGZvciBhcnJheSBzb3J0aW5nLiBCcm9hZGx5IHNwZWFraW5nLCBpdDpcbiAqXG4gKiAtIFJldHVybnMgMSwgaWYgeCA+IHlcbiAqIC0gUmV0dXJucyAtMSwgaWYgeCA8IHlcbiAqIC0gUmV0dXJucyAwLCBpZiB4ID09IHlcbiAqXG4gKiBTZWUgb25saW5lIGRvY3VtZW50YXRpb24gZm9yIGRldGFpbHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbWFydENtcCh4OiBhbnksIHk6IGFueSwgY29uZmlnPzogQ21wQ29uZmlnKTogbnVtYmVyIHtcblx0Y29uc3QgeFJhbmsgPSBnZXRUeXBlUmFuayh4KTtcblx0Y29uc3QgeVJhbmsgPSBnZXRUeXBlUmFuayh5KTtcblx0aWYgKHhSYW5rICE9PSB5UmFuaykge1xuXHRcdHJldHVybiBjbXBQcmltaXRpdmVzKHhSYW5rLCB5UmFuayk7XG5cdH1cblx0c3dpdGNoICh4UmFuaykge1xuXHRcdGNhc2UgXCJhcnJheVwiOiByZXR1cm4gY21wQXJyYXlzKHgsIHksIGNvbmZpZyk7XG5cdFx0Y2FzZSBcImJvb2xlYW5cIjogcmV0dXJuIGNtcEJvb2xlYW5zKHgsIHkpO1xuXHRcdGNhc2UgXCJpZGVudGlmaWFibGVcIjogcmV0dXJuIGNtcElkZW50aWZpYWJsZXMoeCwgeSk7XG5cdFx0Y2FzZSBcInN0cmluZ1wiOiByZXR1cm4gY21wU3RyaW5ncyh4LCB5LCBjb25maWcpO1xuXHRcdGRlZmF1bHQ6IHJldHVybiBjbXBQcmltaXRpdmVzKHgsIHkpO1xuXHR9XG59XG5cbi8qKlxuICogYGNtcGAgZnVuY3Rpb24gY29uZmlndXJhdGlvbiBvYmplY3QuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ21wQ29uZmlnIHtcblx0LyoqXG5cdCAqIElnbm9yZSBjYXNlIHdoZW4gY29tcGFyaW5nIHN0cmluZ3MuXG5cdCAqL1xuXHRyZWFkb25seSBjYXNlSW5zZW5zaXRpdmU/OiBib29sZWFuO1xuXG5cdC8qKlxuXHQgKiBDb21wYXJlIGRpZ2l0IHNlcXVlbmNlcyBhcyBudW1iZXJzIHdoZW4gY29tcGFyaW5nIHN0cmluZ3MuXG5cdCAqL1xuXHRyZWFkb25seSBjb21wYXJlTnVtYmVyc0luU3RyaW5ncz86IGJvb2xlYW47XG59XG5cbmZ1bmN0aW9uIGdldFR5cGVSYW5rKHg6IGFueSk6IHN0cmluZyB7XG5cdHJldHVybiAoeCA9PT0gdW5kZWZpbmVkKSA/IFwiMFwiIDogKHggPT09IG51bGwpID8gXCIxXCIgOiBpc0FycmF5KHgpID8gXCJhcnJheVwiIDpcblx0XHQodHlwZW9mIHguaWlkID09PSBcIm51bWJlclwiKSA/IFwiaWRlbnRpZmlhYmxlXCIgOiB0eXBlb2YgeDtcbn1cblxuZnVuY3Rpb24gY21wQXJyYXlzKHg6IGFueVtdLCB5OiBhbnlbXSwgY29uZmlnPzogQ21wQ29uZmlnKTogbnVtYmVyIHtcblx0Y29uc3QgbiA9IE1hdGgubWluKHgubGVuZ3RoLCB5Lmxlbmd0aCk7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XG5cdFx0bGV0IHJlc3VsdCA9IHNtYXJ0Q21wKHhbaV0sIHlbaV0sIGNvbmZpZyk7XG5cdFx0aWYgKHJlc3VsdCkge1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGNtcFByaW1pdGl2ZXMoeC5sZW5ndGgsIHkubGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gY21wQm9vbGVhbnMoeDogYm9vbGVhbiwgeTogYm9vbGVhbik6IG51bWJlciB7XG5cdHJldHVybiB4ID8gKHkgPyAwIDogMSkgOiAoeSA/IC0xIDogMCk7XG59XG5cbmZ1bmN0aW9uIGNtcElkZW50aWZpYWJsZXMoeDogSWRlbnRpZmlhYmxlLCB5OiBJZGVudGlmaWFibGUpOiBudW1iZXIge1xuXHRyZXR1cm4gY21wUHJpbWl0aXZlcyh4LmlpZCwgeS5paWQpO1xufVxuXG5mdW5jdGlvbiBjbXBTdHJpbmdzKHg6IHN0cmluZywgeTogc3RyaW5nLCBjb25maWc/OiBDbXBDb25maWcpOiBudW1iZXIge1xuXHR4ID0geCB8fCBcIlwiO1xuXHR5ID0geSB8fCBcIlwiO1xuXHRpZiAoY29uZmlnICYmIGNvbmZpZy5jYXNlSW5zZW5zaXRpdmUpIHtcblx0XHR4ID0geC50b0xvd2VyQ2FzZSgpO1xuXHRcdHkgPSB5LnRvTG93ZXJDYXNlKCk7XG5cdH1cblx0aWYgKCFjb25maWcgfHwgIWNvbmZpZy5jb21wYXJlTnVtYmVyc0luU3RyaW5ncykge1xuXHRcdHJldHVybiBjbXBQcmltaXRpdmVzKHgsIHkpO1xuXHR9XG5cdGxldCB4SW5kZXggPSAwO1xuXHRsZXQgeUluZGV4ID0gMDtcblx0d2hpbGUgKHRydWUpIHtcblx0XHRsZXQgeExlbmd0aCA9IHguc3Vic3RyKHhJbmRleCkuc2VhcmNoKC9cXGQrLyk7XG5cdFx0aWYgKHhMZW5ndGggPT09IC0xKSB7XG5cdFx0XHR4TGVuZ3RoID0geC5sZW5ndGggLSB4SW5kZXg7XG5cdFx0fVxuXHRcdGxldCB5TGVuZ3RoID0geS5zdWJzdHIoeUluZGV4KS5zZWFyY2goL1xcZCsvKTtcblx0XHRpZiAoeUxlbmd0aCA9PT0gLTEpIHtcblx0XHRcdHlMZW5ndGggPSB5Lmxlbmd0aCAtIHlJbmRleDtcblx0XHR9XG5cdFx0Y29uc3QgcmVzdWx0MSA9IGNtcFByaW1pdGl2ZXMoeC5zdWJzdHIoeEluZGV4LCB4TGVuZ3RoKSwgeS5zdWJzdHIoeUluZGV4LCB5TGVuZ3RoKSk7XG5cdFx0aWYgKHJlc3VsdDEpIHtcblx0XHRcdHJldHVybiByZXN1bHQxO1xuXHRcdH1cblx0XHR4SW5kZXggKz0geExlbmd0aDtcblx0XHR5SW5kZXggKz0geUxlbmd0aDtcblx0XHRjb25zdCB4TWF0Y2hlcyA9IC9eXFxkKy8uZXhlYyh4LnN1YnN0cih4SW5kZXgpKTtcblx0XHRjb25zdCB5TWF0Y2hlcyA9IC9eXFxkKy8uZXhlYyh5LnN1YnN0cih5SW5kZXgpKTtcblx0XHRpZiAoeE1hdGNoZXMgPT0gbnVsbCB8fCB5TWF0Y2hlcyA9PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gY21wQm9vbGVhbnMoeE1hdGNoZXMgIT0gbnVsbCwgeU1hdGNoZXMgIT0gbnVsbCk7XG5cdFx0fVxuXHRcdGNvbnN0IHhOdW1iZXIgPSAreE1hdGNoZXNbMF07XG5cdFx0Y29uc3QgeU51bWJlciA9ICt5TWF0Y2hlc1swXTtcblx0XHRjb25zdCByZXN1bHQyID0gY21wUHJpbWl0aXZlcyh4TnVtYmVyLCB5TnVtYmVyKTtcblx0XHRpZiAocmVzdWx0Mikge1xuXHRcdFx0cmV0dXJuIHJlc3VsdDI7XG5cdFx0fVxuXHRcdHhJbmRleCArPSB4TWF0Y2hlc1swXS5sZW5ndGg7XG5cdFx0eUluZGV4ICs9IHlNYXRjaGVzWzBdLmxlbmd0aDtcblx0fVxufVxuXG4vKipcbiAqIFJldHVybnMgb2JqZWN0IGl0ZW0gb3Igc3ViaXRlbSBieSBwYXRoLlxuICogUGF0aCBpcyBhIHByaW1pdGl2ZSB2YWx1ZSAob2JqZWN0IGtleSksIG9yIGFuIGFycmF5IG9mIHN1YnBhdGhzLlxuICogSWYgYHBhdGhgIGlzIG51bGwsIHVuZGVmaW5lZCBvciBlbXB0eSBhcnJheSwgcmV0dXJucyBgb2JqYC5cbiAqIElmIGl0ZW0gZG9lc24ndCBleGlzdCwgcmV0dXJucyB1bmRlZmluZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXQ8VD4ob2JqOiBhbnksIHBhdGg/OiBhbnkpOiBUIHtcblx0aWYgKHBhdGggPT0gbnVsbCkge1xuXHRcdHJldHVybiBvYmo7XG5cdH1cblx0aWYgKCFpc0FycmF5KHBhdGgpKSB7XG5cdFx0cmV0dXJuIChvYmogJiYgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIikgPyBvYmpbcGF0aF0gOiB1bmRlZmluZWQ7XG5cdH1cblx0Zm9yIChsZXQgaSA9IDAsIGwgPSBwYXRoLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuXHRcdG9iaiA9IGdldChvYmosIHBhdGhbaV0pO1xuXHR9XG5cdHJldHVybiBvYmo7XG59XG5cbmxldCBfbGFzdElpZCA9IDA7XG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBhdXRvLWluY3JlbWVudGluZyBpbnN0YW5jZSBpZGVudGlmaWVyIGZvciBgSWRlbnRpZmlhYmxlYCBpbnRlcmZhY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZXdJaWQoKSB7XG5cdHJldHVybiArK19sYXN0SWlkO1xufVxuXG4vKipcbiAqIFJldHVybnMgb2JqZWN0IGBpaWRgIGNvbnZlcnRlZCB0byBhIHN0cmluZy4gQ2FuIGJlIHVzZWQgYXMgZWZmaWNpZW50IGBnZXRLZXlgIGltcGxlbWVudGF0aW9uXG4gKiBmb3IgY29sbGVjdGlvbnMgY29uc2lzdGluZyBvZiBgSWRlbnRpZmlhYmxlYCBvYmplY3RzIG9ubHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpaWRTdHIob2JqOiBJZGVudGlmaWFibGUpIHtcblx0cmV0dXJuIChvYmogPT09IHVuZGVmaW5lZCkgPyBcInVcIiA6IChvYmogPT09IG51bGwpID8gXCJuXCIgOiBTdHJpbmcob2JqLmlpZCk7XG59XG5cbi8qKlxuICogQ2FsbHMgb2JqZWN0IG1ldGhvZCBgZGVzdHJveWAgaWYgYXZhaWxhYmxlLiBDYW4gYmUgdXNlZCBpbiBtYXBwZXIgY29uZmlndXJhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3kob2JqOiBhbnkpOiBhbnkge1xuXHRpZiAob2JqICYmIHR5cGVvZiBvYmouZGVzdHJveSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0b2JqLmRlc3Ryb3koKTtcblx0fVxufVxuXG4vKipcbiAqIFNob3J0aGFuZCBmb3IgQmluZGluZy5VUERBVEUuXG4gKi9cbmV4cG9ydCBjb25zdCBVUERBVEUgPSAxO1xuXG4vKipcbiAqIFNob3J0aGFuZCBmb3IgQmluZGluZy5XQVRDSC5cbiAqL1xuZXhwb3J0IGNvbnN0IFdBVENIID0gMjtcblxuLyoqXG4gKiBTaG9ydGhhbmQgZm9yIEJpbmRpbmcuVFdPV0FZLlxuICovXG5leHBvcnQgY29uc3QgVFdPV0FZID0gMztcblxuLyoqXG4gKiBqV2lkZ2V0IGJpbmRpbmcgbW9kZXMuIEFsbCBvcHRpb25zIGhhdmUgc2hvcnRoYW5kcy5cbiAqL1xuZXhwb3J0IGVudW0gQmluZGluZyB7XG5cdC8qKlxuXHQgKiBCaW5kIGludm9rZXIgdG8gYXJndW1lbnQuIEFsd2F5cyB1c2VkIGFzIGRlZmF1bHQgYmluZGluZy5cblx0ICovXG5cdFVQREFURSA9IDEsXG5cblx0LyoqXG5cdCAqIEJpbmQgYXJndW1lbnQgdG8gaW52b2tlci4gQWx3YXlzIHN1cHBsaWVkIHdpdGggYSBuby1hcmd1bWVudCBtZXRob2QsIHdoaWNoIGNyZWF0ZXMgdGhlIHByb3BlcnR5IGF1dG9tYXRpY2FsbHkuXG5cdCAqL1xuXHRXQVRDSCA9IDIsXG5cblx0LyoqXG5cdCAqIEJpbmQgaW52b2tlciBhbmQgYXJndW1lbnQgdG8gZWFjaCBvdGhlci4gVVBEQVRFLWJpbmRpbmcgaXMgYXBwbGllZCBmaXJzdC5cblx0ICovXG5cdFRXT1dBWSA9IDNcbn1cblxuLyoqXG4gKiBTaG9ydGhhbmQgZm9yIENvbGxlY3Rpb25GbGFncy5TSUxFTlQuXG4gKi9cbmV4cG9ydCBjb25zdCBTSUxFTlQgPSAxO1xuXG4vKipcbiAqIFNob3J0aGFuZCBmb3IgQ29sbGVjdGlvbkZsYWdzLkFEQVBURVIuXG4gKi9cbmV4cG9ydCBjb25zdCBBREFQVEVSID0gMjtcblxuLyoqXG4gKiBqV2lkZ2V0IGNvbGxlY3Rpb24gZmxhZ3MuIEFsbCBvcHRpb25zIGhhdmUgc2hvcnRoYW5kcy5cbiAqL1xuZXhwb3J0IGVudW0gQ29sbGVjdGlvbkZsYWdzIHtcblx0LyoqXG5cdCAqIElmIG9uLCB1c2VzIGBkdW1teUV2ZW50YCBpbXBsZW1lbnRhdGlvbiBmb3IgYWxsIGNvbGxlY3Rpb24gZXZlbnRzLlxuXHQgKiBUb2dnbGUgaXQgb24gb25seSBpZiB5b3Uga25vdyB0aGF0IHRoaXMgY29sbGVjdGlvbiBuZXZlciBnZXRzIG1vZGlmaWVkIG9yXG5cdCAqIHRoZXJlIGFyZSBubyBsaXN0ZW5lcnMgaW50ZXJzdGVkIGluIGl0cyBtb2RpZmljYXRpb24uXG5cdCAqL1xuXHRTSUxFTlQgPSAxLFxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgY29sbGVjdGlvbiBhcyBhbiBhZGFwdGVyIG92ZXIgY29uc3RydWN0b3IgYXJndW1lbnQuXG5cdCAqIElmIG9mZiwgY3JlYXRlcyBhIGNvcHkuIFRvZ2dsZSBpdCBvbiBvbmx5IGlmIG5vb25lIGVsc2UgbWFuYWdlcyBjb2xsZWN0aW9uIGNvbnRlbnRzLlxuXHQgKi9cblx0QURBUFRFUiA9IDJcbn1cbiJdfQ==

/***/ }),

/***/ "../../main/dist/inserter/list.js":
/*!*************************************************!*\
  !*** C:/jwidget/git/main/dist/inserter/list.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Class_1 = __importDefault(__webpack_require__(/*! ../Class */ "../../main/dist/Class.js"));
/**
 * Inserter implementation for List.
 * @param T List item type.
 */
class ListInserter extends Class_1.default {
    /**
     * @param source Source list.
     * @param config Inserter configuration.
     */
    constructor(source, config = {}) {
        super();
        this.source = source;
        this._add = config.add;
        this._remove = config.remove;
        this._clear = config.clear;
        this._scope = config.scope || this;
        this._addItems(this.source.items, 0);
        this.own(source.spliceEvent.listen(this._onSplice, this));
        this.own(source.replaceEvent.listen(this._onReplace, this));
        this.own(source.moveEvent.listen(this._onMove, this));
        this.own(source.clearEvent.listen(this._onClear, this));
        this.own(source.reorderEvent.listen(this._onReorder, this));
    }
    /**
     * @inheritDoc
     */
    destroyObject() {
        this._doClearItems(this.source.items);
        this._add = null;
        this._remove = null;
        this._clear = null;
        this._scope = null;
        super.destroyObject();
    }
    _addItems(items, index) {
        if (!this._add) {
            return;
        }
        for (var i = 0; i < items.length; ++i) {
            this._add.call(this._scope, items[i], i + index);
        }
    }
    _removeItems(items, index) {
        if (!this._remove) {
            return;
        }
        for (var i = items.length - 1; i >= 0; --i) {
            this._remove.call(this._scope, items[i], i + index);
        }
    }
    _doClearItems(items) {
        if (items.length === 0) {
            return;
        }
        if (this._clear) {
            this._clear.call(this._scope, items);
        }
        else {
            this._removeItems(items, 0);
        }
    }
    _onSplice(params) {
        var spliceResult = params.spliceResult;
        var oldItems = spliceResult.oldItems;
        var removedItems = spliceResult.removedItems;
        // if there is an effective clearing function, just reset the controller
        if (this._clear && (3 * removedItems.length > 2 * oldItems.length)) {
            this._clear.call(this._scope, oldItems);
            this._addItems(this.source.items, 0);
            return;
        }
        // else, splice the elements
        var removedItemsList = spliceResult.removedItemsList;
        var addedItemsList = spliceResult.addedItemsList;
        for (var i = removedItemsList.length - 1; i >= 0; --i) {
            var removeRarams = removedItemsList[i];
            this._removeItems(removeRarams.items, removeRarams.index);
        }
        for (var i = 0, l = addedItemsList.length; i < l; ++i) {
            var addParams = addedItemsList[i];
            this._addItems(addParams.items, addParams.index);
        }
    }
    _onReplace(params) {
        if (this._remove) {
            this._remove.call(this._scope, params.oldItem, params.index);
        }
        if (this._add) {
            this._add.call(this._scope, params.newItem, params.index);
        }
    }
    _onMove(params) {
        if (this._remove) {
            this._remove.call(this._scope, params.item, params.fromIndex);
        }
        if (this._add) {
            this._add.call(this._scope, params.item, params.toIndex);
        }
    }
    _onClear(params) {
        this._doClearItems(params.items);
    }
    _onReorder(params) {
        this._doClearItems(params.items);
        this._addItems(this.source.items, 0);
    }
}
exports.default = ListInserter;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "../../main/dist/internal.js":
/*!********************************************!*\
  !*** C:/jwidget/git/main/dist/internal.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.VidSet = exports.VidMap = exports.vid = exports.initReduceState = exports.countMerged = exports.cmpPrimitives = exports.identity = void 0;
function identity(x) {
    return x;
}
exports.identity = identity;
function cmpPrimitives(x, y) {
    return (x > y) ? 1 : (x < y) ? -1 : 0;
}
exports.cmpPrimitives = cmpPrimitives;
function countMerged(arrays) {
    var result = 0;
    for (var i = 0, l = arrays.length; i < l; ++i) {
        result += arrays[i].length;
    }
    return result;
}
exports.countMerged = countMerged;
function initReduceState(reducer) {
    return {
        value: (typeof reducer.initial === "function") ? reducer.initial() : reducer.initial,
        callback: reducer.callback
    };
}
exports.initReduceState = initReduceState;
let vidWarning = true;
/**
 * Returns value unique ID. Can recognize all primitive types and `Identifiable` instances.
 * For other objects, returns null.
 */
function vid(value) {
    if (value === undefined) {
        return "u";
    }
    if (value === null) {
        return "n";
    }
    if (value === true) {
        return "t";
    }
    if (value === false) {
        return "f";
    }
    const type = typeof value;
    if (type === "number") {
        return "n" + value;
    }
    if (type === "string") {
        return "s" + value;
    }
    const iid = value.iid;
    if (iid) {
        return "i" + iid;
    }
    if (vidWarning) {
        vidWarning = false;
        console.error("Inefficient code detected: value ", value, " doesn't have a unique identifier. " +
            "Consider inheriting it from jwidget/Class, jwidget/Identifiable or " +
            "assigning a proper getKey callback to a specific collection/algorithm.");
    }
    return undefined;
}
exports.vid = vid;
class VidMap {
    constructor(_getKey = vid) {
        this._getKey = _getKey;
        this._dict = {};
        this._array = [];
    }
    get values() {
        if (this._cache !== undefined) {
            return this._cache;
        }
        const result = this._array.map((pair) => pair.v);
        const dict = this._dict;
        for (let id in dict) {
            result.push(dict[id].v);
        }
        this._cache = result;
        return result;
    }
    put(key, value) {
        if (key === undefined || value === undefined) {
            throw new TypeError("Invalid argument: undefined keys or values are not supported in collections.");
        }
        const id = this._getKey(key);
        const oldPair = id ? this._dict[id] : this._pair(key);
        if (oldPair !== undefined) {
            const oldValue = oldPair.v;
            if (oldValue === value) {
                return value;
            }
            oldPair.v = value;
            this._cache = undefined;
            return oldValue;
        }
        const newPair = { k: key, v: value };
        if (id !== undefined) {
            this._dict[id] = newPair;
        }
        else {
            this._array.push(newPair);
        }
        this._cache = undefined;
        return undefined;
    }
    get(key) {
        const id = this._getKey(key);
        const pair = (id !== undefined) ? this._dict[id] : this._pair(key);
        return (pair !== undefined) ? pair.v : undefined;
    }
    remove(key) {
        const id = this._getKey(key);
        if (id !== undefined) {
            if (!this._dict.hasOwnProperty(id)) {
                return undefined;
            }
            const result = this._dict[id].v;
            delete this._dict[id];
            this._cache = undefined;
            return result;
        }
        const index = this._index(key);
        if (index === undefined) {
            return undefined;
        }
        const result = this._array[index].v;
        this._array.splice(index, 1);
        this._cache = undefined;
        return result;
    }
    clear() {
        this._dict = {};
        this._array = [];
        this._cache = undefined;
    }
    every(test, scope) {
        scope = scope || this;
        if (!this._array.every((pair) => test.call(scope, pair.v, pair.k))) {
            return false;
        }
        const dict = this._dict;
        for (let key in dict) {
            const pair = dict[key];
            if (!test.call(scope, pair.v, pair.k)) {
                return false;
            }
        }
        return true;
    }
    _index(key) {
        const arr = this._array;
        for (let i = 0, l = arr.length; i < l; ++i) {
            const pair = arr[i];
            if (pair.k === key) {
                return i;
            }
        }
        return undefined;
    }
    _pair(key) {
        const index = this._index(key);
        return (index !== undefined) ? this._array[index] : undefined;
    }
}
exports.VidMap = VidMap;
class VidSet {
    constructor(_getKey = vid) {
        this._getKey = _getKey;
        this._dict = {};
        this._array = [];
    }
    get values() {
        if (this._cache !== undefined) {
            return this._cache;
        }
        const result = this._array.concat();
        const dict = this._dict;
        for (let id in dict) {
            result.push(dict[id]);
        }
        this._cache = result;
        return result;
    }
    add(item) {
        if (item === undefined) {
            throw new TypeError("Invalid argument: undefined values are not supported in collections.");
        }
        const id = this._getKey(item);
        if (id !== undefined) {
            const dict = this._dict;
            if (dict.hasOwnProperty(id)) {
                return false;
            }
            dict[id] = item;
            this._cache = undefined;
            return true;
        }
        const index = this._index(item);
        if (index !== undefined) {
            return false;
        }
        this._array.push(item);
        this._cache = undefined;
        return undefined;
    }
    contains(item) {
        const id = this._getKey(item);
        return (id !== undefined) ? this._dict.hasOwnProperty(id) : (this._index(item) !== undefined);
    }
    remove(item) {
        const id = this._getKey(item);
        if (id !== undefined) {
            if (!this._dict.hasOwnProperty(id)) {
                return false;
            }
            delete this._dict[id];
            this._cache = undefined;
            return true;
        }
        const index = this._index(item);
        if (index === undefined) {
            return false;
        }
        this._array.splice(index, 1);
        this._cache = undefined;
        return true;
    }
    clear() {
        this._dict = {};
        this._array = [];
        this._cache = undefined;
    }
    every(test, scope) {
        if (!this._array.every(test, scope)) {
            return false;
        }
        const dict = this._dict;
        for (let key in dict) {
            const item = dict[key];
            if (!test.call(this, item)) {
                return false;
            }
        }
        return true;
    }
    _index(item) {
        const arr = this._array;
        for (let i = 0, l = arr.length; i < l; ++i) {
            if (arr[i] === item) {
                return i;
            }
        }
        return undefined;
    }
    static fromArray(items, getKey) {
        const set = new VidSet(getKey);
        items.forEach(set.add, set);
        return set;
    }
    static fromDictionary(items, getKey) {
        const set = new VidSet(getKey);
        for (let key in items) {
            set.add(items[key]);
        }
        return set;
    }
}
exports.VidSet = VidSet;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "../../main/dist/mapper/AbstractMapper.js":
/*!*********************************************************!*\
  !*** C:/jwidget/git/main/dist/mapper/AbstractMapper.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Class_1 = __importDefault(__webpack_require__(/*! ../Class */ "../../main/dist/Class.js"));
/**
 * Abstract collection item mapper. Builds new collection of the same type, consisting of results of callback function
 * call for each collection item, and starts continuous synchronization.
 * @param T Source collection item type.
 * @param U Target collection item type.
 */
class AbstractMapper extends Class_1.default {
    /**
     * @hidden
     */
    constructor(source, _create, config = {}) {
        super();
        this.source = source;
        this._create = _create;
        this._destroy = config.destroy;
        this._scope = config.scope || this;
    }
    /**
     * @inheritDoc
     */
    destroyObject() {
        this._create = null;
        this._destroy = null;
        this._scope = null;
        super.destroyObject();
    }
}
exports.default = AbstractMapper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWJzdHJhY3RNYXBwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWFwcGVyL0Fic3RyYWN0TWFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXNCRTs7Ozs7QUFFRixxREFBNkI7QUFHN0I7Ozs7O0dBS0c7QUFDSCxNQUFlLGNBQXFCLFNBQVEsZUFBSztJQWdCaEQ7O09BRUc7SUFDSCxZQUFxQixNQUE2QixFQUFZLE9BQXVCLEVBQ2xGLFNBQXNDLEVBQUU7UUFDMUMsS0FBSyxFQUFFLENBQUM7UUFGWSxXQUFNLEdBQU4sTUFBTSxDQUF1QjtRQUFZLFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBR3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDO0lBQ3BDLENBQUM7SUFFRDs7T0FFRztJQUNPLGFBQWE7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRDtBQUVELGtCQUFlLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjAgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBDbGFzcyBmcm9tICcuLi9DbGFzcyc7XG5pbXBvcnQgUmVhZG9ubHlDb2xsZWN0aW9uIGZyb20gJy4uL1JlYWRvbmx5Q29sbGVjdGlvbic7XG5cbi8qKlxuICogQWJzdHJhY3QgY29sbGVjdGlvbiBpdGVtIG1hcHBlci4gQnVpbGRzIG5ldyBjb2xsZWN0aW9uIG9mIHRoZSBzYW1lIHR5cGUsIGNvbnNpc3Rpbmcgb2YgcmVzdWx0cyBvZiBjYWxsYmFjayBmdW5jdGlvblxuICogY2FsbCBmb3IgZWFjaCBjb2xsZWN0aW9uIGl0ZW0sIGFuZCBzdGFydHMgY29udGludW91cyBzeW5jaHJvbml6YXRpb24uXG4gKiBAcGFyYW0gVCBTb3VyY2UgY29sbGVjdGlvbiBpdGVtIHR5cGUuXG4gKiBAcGFyYW0gVSBUYXJnZXQgY29sbGVjdGlvbiBpdGVtIHR5cGUuXG4gKi9cbmFic3RyYWN0IGNsYXNzIEFic3RyYWN0TWFwcGVyPFQsIFU+IGV4dGVuZHMgQ2xhc3Mge1xuXHQvKipcblx0ICogQGhpZGRlblxuXHQgKi9cblx0cHJvdGVjdGVkIF9kZXN0cm95OiAoaXRlbTogVSwgZGF0YTogVCkgPT4gdm9pZDtcblxuXHQvKipcblx0ICogQGhpZGRlblxuXHQgKi9cblx0cHJvdGVjdGVkIF9zY29wZTogYW55O1xuXG5cdC8qKlxuXHQgKiBUYXJnZXQgY29sbGVjdGlvbi5cblx0ICovXG5cdHJlYWRvbmx5IHRhcmdldDogUmVhZG9ubHlDb2xsZWN0aW9uPFU+O1xuXG5cdC8qKlxuXHQgKiBAaGlkZGVuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihyZWFkb25seSBzb3VyY2U6IFJlYWRvbmx5Q29sbGVjdGlvbjxUPiwgcHJvdGVjdGVkIF9jcmVhdGU6IChkYXRhOiBUKSA9PiBVLFxuXHRcdFx0XHRjb25maWc6IEFic3RyYWN0TWFwcGVyLkNvbmZpZzxULCBVPiA9IHt9KSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLl9kZXN0cm95ID0gY29uZmlnLmRlc3Ryb3k7XG5cdFx0dGhpcy5fc2NvcGUgPSBjb25maWcuc2NvcGUgfHwgdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHJvdGVjdGVkIGRlc3Ryb3lPYmplY3QoKSB7XG5cdFx0dGhpcy5fY3JlYXRlID0gbnVsbDtcblx0XHR0aGlzLl9kZXN0cm95ID0gbnVsbDtcblx0XHR0aGlzLl9zY29wZSA9IG51bGw7XG5cdFx0c3VwZXIuZGVzdHJveU9iamVjdCgpO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFic3RyYWN0TWFwcGVyO1xuXG5uYW1lc3BhY2UgQWJzdHJhY3RNYXBwZXIge1xuXHRleHBvcnQgaW50ZXJmYWNlIERlc3Ryb3lDYWxsYmFjazxULCBVPiB7XG5cdFx0KHRhcmdldFZhbHVlOiBVLCBzb3VyY2VWYWx1ZTogVCk6IGFueTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBYnN0cmFjdE1hcHBlciBjb25maWd1cmF0aW9uLlxuXHQgKiBAcGFyYW0gVCBTb3VyY2UgY29sbGVjdGlvbiBpdGVtIHR5cGUuXG5cdCAqIEBwYXJhbSBVIFRhcmdldCBjb2xsZWN0aW9uIGl0ZW0gdHlwZS5cblx0ICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQ29uZmlnPFQsIFU+IHtcblx0XHQvKipcblx0XHQgKiBJdGVtIGRlc3RydWN0b3IuIERlc3Ryb3lzIGFuIGl0ZW0gb2YgdGFyZ2V0IGNvbGxlY3Rpb24uXG5cdFx0ICovXG5cdFx0cmVhZG9ubHkgZGVzdHJveT86IERlc3Ryb3lDYWxsYmFjazxULCBVPjtcblxuXHRcdC8qKlxuXHRcdCAqIENhbGwgc2NvcGUgb2YgbWFwcGVyJ3MgYGNyZWF0ZWAgYW5kIGBkZXN0cm95YCBjYWxsYmFja3MuIERlZmF1bHRzIHRvIHRoZSBzeW5jaHJvbml6ZXIgaXRzZWxmLlxuXHRcdCAqL1xuXHRcdHJlYWRvbmx5IHNjb3BlPzogYW55O1xuXG5cdFx0LyoqXG5cdFx0ICogSWRlbnRpZmllcyBhbiBpdGVtIGluIHRoZSBhdXRvLWNyZWF0ZWQgdGFyZ2V0IGNvbGxlY3Rpb24gZm9yIG9wdGltaXphdGlvbiBvZiBzb21lIGFsZ29yaXRobXMuXG5cdFx0ICovXG5cdFx0cmVhZG9ubHkgZ2V0S2V5PzogKGl0ZW06IFUpID0+IGFueTtcblx0fVxufVxuIl19

/***/ }),

/***/ "../../main/dist/mapper/collection.js":
/*!*****************************************************!*\
  !*** C:/jwidget/git/main/dist/mapper/collection.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapCollection = exports.createMapper = void 0;
const List_1 = __importDefault(__webpack_require__(/*! ../List */ "../../main/dist/List.js"));
const Map_1 = __importDefault(__webpack_require__(/*! ../Map */ "../../main/dist/Map.js"));
const Set_1 = __importDefault(__webpack_require__(/*! ../Set */ "../../main/dist/Set.js"));
const list_1 = __importStar(__webpack_require__(/*! ./list */ "../../main/dist/mapper/list.js"));
const map_1 = __importStar(__webpack_require__(/*! ./map */ "../../main/dist/mapper/map.js"));
const set_1 = __importStar(__webpack_require__(/*! ./set */ "../../main/dist/mapper/set.js"));
/**
 * Creates a mapper matching the source collection type.
 * @param source Source collection.
 * @param create Mapping callback.
 * @param config Mapper configuration.
 * @returns Collection mapper.
 */
function createMapper(source, create, config) {
    return (source instanceof List_1.default) ? new list_1.default(source, create, config) :
        (source instanceof Map_1.default) ? new map_1.default(source, create, config) :
            (source instanceof Set_1.default) ? new set_1.default(source, create, config) : null;
}
exports.createMapper = createMapper;
/**
 * Maps a collection and starts synchronization.
 * @param source Source collection.
 * @param create Mapping callback.
 * @param config Mapper configuration.
 * @returns Target collection.
 */
function mapCollection(source, create, config) {
    return (source instanceof List_1.default) ? list_1.mapList(source, create, config) :
        (source instanceof Map_1.default) ? map_1.mapMap(source, create, config) :
            (source instanceof Set_1.default) ? set_1.mapSet(source, create, config) : null;
}
exports.mapCollection = mapCollection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXBwZXIvY29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFzQkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHRixtREFBMkI7QUFDM0IsaURBQXlCO0FBRXpCLGlEQUF5QjtBQUV6QiwrQ0FBc0Q7QUFDdEQsNkNBQW1EO0FBQ25ELDZDQUFtRDtBQUVuRDs7Ozs7O0dBTUc7QUFDSCxTQUFnQixZQUFZLENBQU8sTUFBNkIsRUFBRSxNQUE2QixFQUM1RCxNQUFvQztJQUN0RSxPQUFPLENBQUMsTUFBTSxZQUFZLGNBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLGNBQVUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDekUsQ0FBQyxNQUFNLFlBQVksYUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksYUFBUyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNoRSxDQUFDLE1BQU0sWUFBWSxhQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxhQUFTLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQzFFLENBQUM7QUFMRCxvQ0FLQztBQUVEOzs7Ozs7R0FNRztBQUNILFNBQWdCLGFBQWEsQ0FBTyxNQUE2QixFQUFFLE1BQXNCLEVBQ3JELE1BQW9DO0lBQ3ZFLE9BQU8sQ0FBQyxNQUFNLFlBQVksY0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQU8sQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDbEUsQ0FBQyxNQUFNLFlBQVksYUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDekQsQ0FBQyxNQUFNLFlBQVksYUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDbkUsQ0FBQztBQUxELHNDQUtDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IERlc3Ryb3lhYmxlUmVhZG9ubHlDb2xsZWN0aW9uIGZyb20gJy4uL0Rlc3Ryb3lhYmxlUmVhZG9ubHlDb2xsZWN0aW9uJztcbmltcG9ydCBMaXN0IGZyb20gJy4uL0xpc3QnO1xuaW1wb3J0IE1hcCBmcm9tICcuLi9NYXAnO1xuaW1wb3J0IFJlYWRvbmx5Q29sbGVjdGlvbiBmcm9tICcuLi9SZWFkb25seUNvbGxlY3Rpb24nO1xuaW1wb3J0IFNldCBmcm9tICcuLi9TZXQnO1xuaW1wb3J0IEFic3RyYWN0TWFwcGVyIGZyb20gJy4vQWJzdHJhY3RNYXBwZXInO1xuaW1wb3J0IHtkZWZhdWx0IGFzIExpc3RNYXBwZXIsIG1hcExpc3R9IGZyb20gJy4vbGlzdCc7XG5pbXBvcnQge2RlZmF1bHQgYXMgTWFwTWFwcGVyLCBtYXBNYXB9IGZyb20gJy4vbWFwJztcbmltcG9ydCB7ZGVmYXVsdCBhcyBTZXRNYXBwZXIsIG1hcFNldH0gZnJvbSAnLi9zZXQnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXBwZXIgbWF0Y2hpbmcgdGhlIHNvdXJjZSBjb2xsZWN0aW9uIHR5cGUuXG4gKiBAcGFyYW0gc291cmNlIFNvdXJjZSBjb2xsZWN0aW9uLlxuICogQHBhcmFtIGNyZWF0ZSBNYXBwaW5nIGNhbGxiYWNrLlxuICogQHBhcmFtIGNvbmZpZyBNYXBwZXIgY29uZmlndXJhdGlvbi5cbiAqIEByZXR1cm5zIENvbGxlY3Rpb24gbWFwcGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTWFwcGVyPFQsIFU+KHNvdXJjZTogUmVhZG9ubHlDb2xsZWN0aW9uPFQ+LCBjcmVhdGU6IChzb3VyY2VWYWx1ZTogVCkgPT4gVSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnPzogQWJzdHJhY3RNYXBwZXIuQ29uZmlnPFQsIFU+KTogQWJzdHJhY3RNYXBwZXI8VCwgVT4ge1xuXHRyZXR1cm4gKHNvdXJjZSBpbnN0YW5jZW9mIExpc3QpID8gbmV3IExpc3RNYXBwZXIoc291cmNlLCBjcmVhdGUsIGNvbmZpZykgOlxuXHRcdChzb3VyY2UgaW5zdGFuY2VvZiBNYXApID8gbmV3IE1hcE1hcHBlcihzb3VyY2UsIGNyZWF0ZSwgY29uZmlnKSA6XG5cdFx0XHQoc291cmNlIGluc3RhbmNlb2YgU2V0KSA/IG5ldyBTZXRNYXBwZXIoc291cmNlLCBjcmVhdGUsIGNvbmZpZykgOiBudWxsO1xufVxuXG4vKipcbiAqIE1hcHMgYSBjb2xsZWN0aW9uIGFuZCBzdGFydHMgc3luY2hyb25pemF0aW9uLlxuICogQHBhcmFtIHNvdXJjZSBTb3VyY2UgY29sbGVjdGlvbi5cbiAqIEBwYXJhbSBjcmVhdGUgTWFwcGluZyBjYWxsYmFjay5cbiAqIEBwYXJhbSBjb25maWcgTWFwcGVyIGNvbmZpZ3VyYXRpb24uXG4gKiBAcmV0dXJucyBUYXJnZXQgY29sbGVjdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcENvbGxlY3Rpb248VCwgVT4oc291cmNlOiBSZWFkb25seUNvbGxlY3Rpb248VD4sIGNyZWF0ZTogKGl0ZW06IFQpID0+IFUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc/OiBBYnN0cmFjdE1hcHBlci5Db25maWc8VCwgVT4pOiBEZXN0cm95YWJsZVJlYWRvbmx5Q29sbGVjdGlvbjxVPiB7XG5cdHJldHVybiAoc291cmNlIGluc3RhbmNlb2YgTGlzdCkgPyBtYXBMaXN0KHNvdXJjZSwgY3JlYXRlLCBjb25maWcpIDpcblx0XHQoc291cmNlIGluc3RhbmNlb2YgTWFwKSA/IG1hcE1hcChzb3VyY2UsIGNyZWF0ZSwgY29uZmlnKSA6XG5cdFx0XHQoc291cmNlIGluc3RhbmNlb2YgU2V0KSA/IG1hcFNldChzb3VyY2UsIGNyZWF0ZSwgY29uZmlnKSA6IG51bGw7XG59XG4iXX0=

/***/ }),

/***/ "../../main/dist/mapper/list.js":
/*!***********************************************!*\
  !*** C:/jwidget/git/main/dist/mapper/list.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapList = void 0;
const Destructor_1 = __importDefault(__webpack_require__(/*! ../Destructor */ "../../main/dist/Destructor.js"));
const index_1 = __webpack_require__(/*! ../index */ "../../main/dist/index.js");
const IndexItems_1 = __importDefault(__webpack_require__(/*! ../IndexItems */ "../../main/dist/IndexItems.js"));
const List_1 = __importDefault(__webpack_require__(/*! ../List */ "../../main/dist/List.js"));
const AbstractMapper_1 = __importDefault(__webpack_require__(/*! ./AbstractMapper */ "../../main/dist/mapper/AbstractMapper.js"));
/**
 * AbstractMapper implementation for List.
 * @param T Source collection item type.
 * @param U Target collection item type.
 */
class ListMapper extends AbstractMapper_1.default {
    /**
     * @param source Source list.
     * @param create Mapping callback.
     * @param config Mapper configuration.
     */
    constructor(source, create, config = {}) {
        super(source, create, config);
        this._targetCreated = config.target == null;
        this.target = this._targetCreated ? new List_1.default(config.getKey, this.source.silent) : config.target;
        this.target.addAll(this._createItems(this.source.items));
        this.own(source.spliceEvent.listen(this._onSplice, this));
        this.own(source.replaceEvent.listen(this._onReplace, this));
        this.own(source.moveEvent.listen(this._onMove, this));
        this.own(source.clearEvent.listen(this._onClear, this));
        this.own(source.reorderEvent.listen(this._onReorder, this));
    }
    /**
     * @inheritDoc
     */
    destroyObject() {
        this._destroyItems(this.target.clear() || [], this.source.items);
        if (this._targetCreated) {
            this.target.destroy();
        }
        super.destroyObject();
    }
    _createItems(datas) {
        var items = [];
        for (var i = 0, l = datas.length; i < l; ++i) {
            items.push(this._create.call(this._scope, datas[i]));
        }
        return items;
    }
    _destroyItems(items, datas) {
        if (this._destroy === undefined) {
            return;
        }
        for (var i = items.length - 1; i >= 0; --i) {
            this._destroy.call(this._scope, items[i], datas[i]);
        }
    }
    _onSplice(params) {
        var sourceResult = params.spliceResult;
        var sourceAddedItemsList = sourceResult.addedItemsList;
        var targetAddParamsList = [];
        for (var i = 0, l = sourceAddedItemsList.length; i < l; ++i) {
            var addParams = sourceAddedItemsList[i];
            targetAddParamsList.push(new IndexItems_1.default(addParams.index, this._createItems(addParams.items)));
        }
        var targetResult = this.target.trySplice(sourceResult.removeParamsList, targetAddParamsList);
        var sourceRemovedItemsList = sourceResult.removedItemsList;
        var targetRemovedItemsList = targetResult.removedItemsList;
        for (var i = targetRemovedItemsList.length - 1; i >= 0; --i) {
            this._destroyItems(targetRemovedItemsList[i].items, sourceRemovedItemsList[i].items);
        }
    }
    _onReplace(params) {
        var newItem = this._create.call(this._scope, params.newItem);
        var oldItem = this.target.trySet(params.index, newItem).value;
        this._destroy.call(this._scope, oldItem, params.oldItem);
    }
    _onMove(params) {
        this.target.tryMove(params.fromIndex, params.toIndex);
    }
    _onClear(params) {
        this._destroyItems(this.target.clear(), params.items);
    }
    _onReorder(params) {
        this.target.tryReorder(params.indexArray);
    }
}
exports.default = ListMapper;
/**
 * Maps a list and starts synchronization.
 * @param source Source list.
 * @param create Mapping callback.
 * @param config Mapper configuration.
 * @returns Target list.
 */
function mapList(source, create, config = {}) {
    if (!source.silent) {
        const target = new List_1.default(config.getKey);
        return target.owning(new ListMapper(source, create, {
            target,
            destroy: config.destroy,
            scope: config.scope,
            getKey: config.getKey
        }));
    }
    const target = source.map(create, config.scope, config.getKey);
    if (config.destroy === index_1.destroy) {
        target.ownItems();
    }
    else if (config.destroy) {
        const sourceValues = source.items.concat();
        target.own(new Destructor_1.default(() => target.backEvery((item, index) => {
            config.destroy.call(config.scope, item, sourceValues[index]);
            return true;
        })));
    }
    return target;
}
exports.mapList = mapList;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "../../main/dist/mapper/map.js":
/*!**********************************************!*\
  !*** C:/jwidget/git/main/dist/mapper/map.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapMap = void 0;
const Destructor_1 = __importDefault(__webpack_require__(/*! ../Destructor */ "../../main/dist/Destructor.js"));
const DictionaryUtils = __importStar(__webpack_require__(/*! ../DictionaryUtils */ "../../main/dist/DictionaryUtils.js"));
const index_1 = __webpack_require__(/*! ../index */ "../../main/dist/index.js");
const Map_1 = __importDefault(__webpack_require__(/*! ../Map */ "../../main/dist/Map.js"));
const AbstractMapper_1 = __importDefault(__webpack_require__(/*! ./AbstractMapper */ "../../main/dist/mapper/AbstractMapper.js"));
/**
 * AbstractMapper implementation for Map.
 * @param T Source collection item type.
 * @param U Target collection item type.
 */
class MapMapper extends AbstractMapper_1.default {
    /**
     * @param source Source map.
     * @param create Mapping callback.
     * @param config Mapper configuration.
     */
    constructor(source, create, config = {}) {
        super(source, create, config);
        this._targetCreated = config.target == null;
        this.target = this._targetCreated ? new Map_1.default(config.getKey, this.source.silent) : config.target;
        this.target.tryPutAll(this._createItems(source.items));
        this.own(source.spliceEvent.listen(this._onSplice, this));
        this.own(source.reindexEvent.listen(this._onReindex, this));
        this.own(source.clearEvent.listen(this._onClear, this));
    }
    /**
     * @inheritDoc
     */
    destroyObject() {
        this._destroyItems(this.target.removeAllVerbose(this.source.getKeys().items), this.source.items);
        if (this._targetCreated) {
            this.target.destroy();
        }
        super.destroyObject();
    }
    _createItems(datas) {
        var items = {};
        for (var key in datas) {
            items[key] = this._create.call(this._scope, datas[key]);
        }
        return items;
    }
    _destroyItems(items, datas) {
        if (this._destroy === undefined) {
            return;
        }
        for (var key in items) {
            this._destroy.call(this._scope, items[key], datas[key]);
        }
    }
    _onSplice(params) {
        var sourceResult = params.spliceResult;
        var removedDatas = sourceResult.removedItems;
        var addedDatas = sourceResult.addedItems;
        var targetResult = this.target.trySplice(DictionaryUtils.getRemovedKeys(removedDatas, addedDatas), this._createItems(addedDatas));
        if (targetResult !== undefined) {
            this._destroyItems(targetResult.removedItems, removedDatas);
        }
    }
    _onReindex(params) {
        this.target.tryReindex(params.keyMap);
    }
    _onClear(params) {
        var datas = params.items;
        this._destroyItems(this.target.tryRemoveAll(Object.keys(datas)), datas);
    }
}
exports.default = MapMapper;
/**
 * Maps a map and starts synchronization.
 * @param source Source map.
 * @param create Mapping callback.
 * @param config Mapper configuration.
 * @returns Target map.
 */
function mapMap(source, create, config = {}) {
    if (!source.silent) {
        const target = new Map_1.default(config.getKey);
        return target.owning(new MapMapper(source, create, {
            target,
            destroy: config.destroy,
            scope: config.scope
        }));
    }
    const target = source.map(create, config.scope, config.getKey);
    if (config.destroy === index_1.destroy) {
        target.ownItems();
    }
    else if (config.destroy) {
        const sourceValues = DictionaryUtils.clone(source.items);
        target.own(new Destructor_1.default(() => target.every((item, key) => {
            config.destroy.call(config.scope, item, sourceValues[key]);
            return true;
        })));
    }
    return target;
}
exports.mapMap = mapMap;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "../../main/dist/mapper/set.js":
/*!**********************************************!*\
  !*** C:/jwidget/git/main/dist/mapper/set.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapSet = void 0;
const Destructor_1 = __importDefault(__webpack_require__(/*! ../Destructor */ "../../main/dist/Destructor.js"));
const index_1 = __webpack_require__(/*! ../index */ "../../main/dist/index.js");
const internal_1 = __webpack_require__(/*! ../internal */ "../../main/dist/internal.js");
const Set_1 = __importDefault(__webpack_require__(/*! ../Set */ "../../main/dist/Set.js"));
const AbstractMapper_1 = __importDefault(__webpack_require__(/*! ./AbstractMapper */ "../../main/dist/mapper/AbstractMapper.js"));
/**
 * AbstractMapper implementation for Set.
 * @param T Source collection item type.
 * @param U Target collection item type.
 */
class SetMapper extends AbstractMapper_1.default {
    /**
     * @param source Source set.
     * @param create Mapping callback.
     * @param config Mapper configuration.
     */
    constructor(source, create, config = {}) {
        super(source, create, config);
        this._items = new internal_1.VidMap(source.getKey);
        this._targetCreated = config.target == null;
        this.target = this._targetCreated ? new Set_1.default(config.getKey, this.source.silent) : config.target;
        this.target.tryAddAll(this._createItems(source.toArray()));
        this.own(source.spliceEvent.listen(this._onSplice, this));
        this.own(source.clearEvent.listen(this._onClear, this));
    }
    /**
     * @inheritDoc
     */
    destroyObject() {
        var datas = this.source.toArray();
        this.target.tryRemoveAll(this._getItems(datas));
        this._destroyItems(datas);
        if (this._targetCreated) {
            this.target.destroy();
        }
        super.destroyObject();
    }
    _getItems(datas) {
        return datas.map((data) => this._items.get(data));
    }
    _createItems(datas) {
        var items = [];
        for (var i = 0, l = datas.length; i < l; ++i) {
            var data = datas[i];
            var item = this._create.call(this._scope || this, data);
            items.push(item);
            this._items.put(data, item);
        }
        return items;
    }
    _destroyItems(datas) {
        if (this._destroy === undefined) {
            return;
        }
        for (var i = datas.length - 1; i >= 0; --i) {
            var data = datas[i];
            var item = this._items.remove(data);
            this._destroy.call(this._scope || this, item, data);
        }
    }
    _onSplice(params) {
        var spliceResult = params.spliceResult;
        var removedDatas = spliceResult.removedItems;
        var addedDatas = spliceResult.addedItems;
        this.target.trySplice(this._getItems(removedDatas), this._createItems(addedDatas));
        this._destroyItems(removedDatas);
    }
    _onClear(params) {
        var datas = params.items;
        this.target.tryRemoveAll(this._getItems(datas));
        this._destroyItems(datas);
    }
}
exports.default = SetMapper;
/**
 * Maps a set and starts synchronization.
 * @param source Source set.
 * @param create Mapping callback.
 * @param config Mapper configuration.
 * @returns Target set.
 */
function mapSet(source, create, config = {}) {
    if (!source.silent) {
        const target = new Set_1.default(config.getKey);
        return target.owning(new SetMapper(source, create, {
            target,
            destroy: config.destroy,
            scope: config.scope
        }));
    }
    const target = source.map(create, config.scope, config.getKey);
    if (config.destroy === index_1.destroy) {
        target.ownItems();
    }
    else if (config.destroy) {
        const items = new internal_1.VidMap(source.getKey);
        target.own(new Destructor_1.default(() => items.every((item, key) => {
            config.destroy.call(config.scope, item, key);
            return true;
        })));
    }
    return target;
}
exports.mapSet = mapSet;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "../../main/dist/observer/AbstractObserver.js":
/*!*************************************************************!*\
  !*** C:/jwidget/git/main/dist/observer/AbstractObserver.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Class_1 = __importDefault(__webpack_require__(/*! ../Class */ "../../main/dist/Class.js"));
/**
 * Collection observer. Listens all collection events and reduces them to 2 granular functions:
 * item is added and item is removed.
 * @param T Collection item type.
 */
class AbstractObserver extends Class_1.default {
    /**
     * @hidden
     */
    constructor(source, config) {
        super();
        this.source = source;
        this._add = config.add;
        this._remove = config.remove;
        this._clear = config.clear;
        this._scope = config.scope || this;
        this._addItems(source.asArray());
    }
    /**
     * @inheritDoc
     */
    destroyObject() {
        this._doClearItems(this.source.asArray());
        this._add = null;
        this._remove = null;
        this._clear = null;
        this._scope = null;
        super.destroyObject();
    }
    /**
     * @hidden
     */
    _addItems(items) {
        if (!this._add) {
            return;
        }
        for (var i = 0, l = items.length; i < l; ++i) {
            this._add.call(this._scope, items[i]);
        }
    }
    /**
     * @hidden
     */
    _removeItems(items) {
        if (!this._remove) {
            return;
        }
        for (var i = items.length - 1; i >= 0; --i) {
            this._remove.call(this._scope, items[i]);
        }
    }
    /**
     * @hidden
     */
    _doClearItems(items) {
        if (items.length === 0) {
            return;
        }
        if (this._clear) {
            this._clear.call(this._scope, items);
        }
        else {
            this._removeItems(items);
        }
    }
}
exports.default = AbstractObserver;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWJzdHJhY3RPYnNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vYnNlcnZlci9BYnN0cmFjdE9ic2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXNCRTs7Ozs7QUFFRixxREFBNkI7QUFHN0I7Ozs7R0FJRztBQUNILE1BQWUsZ0JBQW9CLFNBQVEsZUFBSztJQXFCL0M7O09BRUc7SUFDSCxZQUFxQixNQUE2QixFQUFFLE1BQWtDO1FBQ3JGLEtBQUssRUFBRSxDQUFDO1FBRFksV0FBTSxHQUFOLE1BQU0sQ0FBdUI7UUFFakQsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUM3QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDM0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQztRQUNuQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRDs7T0FFRztJQUNPLGFBQWE7UUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7T0FFRztJQUNPLFNBQVMsQ0FBQyxLQUFVO1FBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2YsT0FBTztTQUNQO1FBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtZQUM3QyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3RDO0lBQ0YsQ0FBQztJQUVEOztPQUVHO0lBQ08sWUFBWSxDQUFDLEtBQVU7UUFDaEMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDbEIsT0FBTztTQUNQO1FBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDekM7SUFDRixDQUFDO0lBRUQ7O09BRUc7SUFDTyxhQUFhLENBQUMsS0FBVTtRQUNqQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3ZCLE9BQU87U0FDUDtRQUNELElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3JDO2FBQU07WUFDTixJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3pCO0lBQ0YsQ0FBQztDQUNEO0FBRUQsa0JBQWUsZ0JBQWdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgQ2xhc3MgZnJvbSAnLi4vQ2xhc3MnO1xuaW1wb3J0IFJlYWRvbmx5Q29sbGVjdGlvbiBmcm9tICcuLi9SZWFkb25seUNvbGxlY3Rpb24nO1xuXG4vKipcbiAqIENvbGxlY3Rpb24gb2JzZXJ2ZXIuIExpc3RlbnMgYWxsIGNvbGxlY3Rpb24gZXZlbnRzIGFuZCByZWR1Y2VzIHRoZW0gdG8gMiBncmFudWxhciBmdW5jdGlvbnM6XG4gKiBpdGVtIGlzIGFkZGVkIGFuZCBpdGVtIGlzIHJlbW92ZWQuXG4gKiBAcGFyYW0gVCBDb2xsZWN0aW9uIGl0ZW0gdHlwZS5cbiAqL1xuYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RPYnNlcnZlcjxUPiBleHRlbmRzIENsYXNzIHtcblx0LyoqXG5cdCAqIEBoaWRkZW5cblx0ICovXG5cdHByb3RlY3RlZCBfYWRkOiAoaXRlbTogVCkgPT4gdm9pZDtcblxuXHQvKipcblx0ICogQGhpZGRlblxuXHQgKi9cblx0cHJvdGVjdGVkIF9yZW1vdmU6IChpdGVtOiBUKSA9PiB2b2lkO1xuXG5cdC8qKlxuXHQgKiBAaGlkZGVuXG5cdCAqL1xuXHRwcm90ZWN0ZWQgX2NsZWFyOiAoaXRlbXM6IFRbXSkgPT4gdm9pZDtcblxuXHQvKipcblx0ICogQGhpZGRlblxuXHQgKi9cblx0cHJvdGVjdGVkIF9zY29wZTogYW55O1xuXG5cdC8qKlxuXHQgKiBAaGlkZGVuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihyZWFkb25seSBzb3VyY2U6IFJlYWRvbmx5Q29sbGVjdGlvbjxUPiwgY29uZmlnOiBBYnN0cmFjdE9ic2VydmVyLkNvbmZpZzxUPikge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5fYWRkID0gY29uZmlnLmFkZDtcblx0XHR0aGlzLl9yZW1vdmUgPSBjb25maWcucmVtb3ZlO1xuXHRcdHRoaXMuX2NsZWFyID0gY29uZmlnLmNsZWFyO1xuXHRcdHRoaXMuX3Njb3BlID0gY29uZmlnLnNjb3BlIHx8IHRoaXM7XG5cdFx0dGhpcy5fYWRkSXRlbXMoc291cmNlLmFzQXJyYXkoKSk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHByb3RlY3RlZCBkZXN0cm95T2JqZWN0KCkge1xuXHRcdHRoaXMuX2RvQ2xlYXJJdGVtcyh0aGlzLnNvdXJjZS5hc0FycmF5KCkpO1xuXHRcdHRoaXMuX2FkZCA9IG51bGw7XG5cdFx0dGhpcy5fcmVtb3ZlID0gbnVsbDtcblx0XHR0aGlzLl9jbGVhciA9IG51bGw7XG5cdFx0dGhpcy5fc2NvcGUgPSBudWxsO1xuXHRcdHN1cGVyLmRlc3Ryb3lPYmplY3QoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaGlkZGVuXG5cdCAqL1xuXHRwcm90ZWN0ZWQgX2FkZEl0ZW1zKGl0ZW1zOiBUW10pIHtcblx0XHRpZiAoIXRoaXMuX2FkZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuXHRcdFx0dGhpcy5fYWRkLmNhbGwodGhpcy5fc2NvcGUsIGl0ZW1zW2ldKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQGhpZGRlblxuXHQgKi9cblx0cHJvdGVjdGVkIF9yZW1vdmVJdGVtcyhpdGVtczogVFtdKSB7XG5cdFx0aWYgKCF0aGlzLl9yZW1vdmUpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Zm9yICh2YXIgaSA9IGl0ZW1zLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG5cdFx0XHR0aGlzLl9yZW1vdmUuY2FsbCh0aGlzLl9zY29wZSwgaXRlbXNbaV0pO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBAaGlkZGVuXG5cdCAqL1xuXHRwcm90ZWN0ZWQgX2RvQ2xlYXJJdGVtcyhpdGVtczogVFtdKSB7XG5cdFx0aWYgKGl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAodGhpcy5fY2xlYXIpIHtcblx0XHRcdHRoaXMuX2NsZWFyLmNhbGwodGhpcy5fc2NvcGUsIGl0ZW1zKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fcmVtb3ZlSXRlbXMoaXRlbXMpO1xuXHRcdH1cblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBBYnN0cmFjdE9ic2VydmVyO1xuXG5uYW1lc3BhY2UgQWJzdHJhY3RPYnNlcnZlciB7XG5cdC8qKlxuXHQgKiBBYnN0cmFjdE9ic2VydmVyIGNvbmZpZ3VyYXRpb24uXG5cdCAqIEBwYXJhbSBUIENvbGxlY3Rpb24gaXRlbSB0eXBlLlxuXHQgKi9cblx0ZXhwb3J0IGludGVyZmFjZSBDb25maWc8VD4ge1xuXHRcdC8qKlxuXHRcdCAqIENhbGxiYWNrIHRvIGNhbGwgd2hlbiBhbiBpdGVtIGlzIGFkZGVkIHRvIHRoZSBjb2xsZWN0aW9uLlxuXHRcdCAqL1xuXHRcdHJlYWRvbmx5IGFkZD86IChpdGVtOiBUKSA9PiB2b2lkO1xuXG5cdFx0LyoqXG5cdFx0ICogQ2FsbGJhY2sgdG8gY2FsbCB3aGVuIGFuIGl0ZW0gaXMgcmVtb3ZlZCBmcm9tIHRoZSBjb2xsZWN0aW9uLlxuXHRcdCAqL1xuXHRcdHJlYWRvbmx5IHJlbW92ZT86IChpdGVtOiBUKSA9PiB2b2lkO1xuXG5cdFx0LyoqXG5cdFx0ICogQ2FsbGJhY2sgdG8gY2FsbCB3aGVuIHRoZSBjb2xsZWN0aW9uIGlzIGNsZWFyZWQuIEJ5IGRlZmF1bHQsIGNhbGxzIGByZW1vdmVgIGZvciBhbGwgY29sbGVjdGlvbiBpdGVtcy5cblx0XHQgKi9cblx0XHRyZWFkb25seSBjbGVhcj86IChpdGVtczogVFtdKSA9PiB2b2lkO1xuXG5cdFx0LyoqXG5cdFx0ICogQ2FsbCBzY29wZSBvZiBgYWRkYCwgYHJlbW92ZWAgYW5kIGBjbGVhcmAgY2FsbGJhY2tzLiBEZWZhdWx0cyB0byB0aGUgc3luY2hyb25pemVyIGl0c2VsZi5cblx0XHQgKi9cblx0XHRyZWFkb25seSBzY29wZT86IGFueTtcblx0fVxufVxuIl19

/***/ }),

/***/ "../../main/dist/observer/collection.js":
/*!*******************************************************!*\
  !*** C:/jwidget/git/main/dist/observer/collection.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createObserver = void 0;
const List_1 = __importDefault(__webpack_require__(/*! ../List */ "../../main/dist/List.js"));
const Map_1 = __importDefault(__webpack_require__(/*! ../Map */ "../../main/dist/Map.js"));
const Set_1 = __importDefault(__webpack_require__(/*! ../Set */ "../../main/dist/Set.js"));
const list_1 = __importDefault(__webpack_require__(/*! ./list */ "../../main/dist/observer/list.js"));
const map_1 = __importDefault(__webpack_require__(/*! ./map */ "../../main/dist/observer/map.js"));
const set_1 = __importDefault(__webpack_require__(/*! ./set */ "../../main/dist/observer/set.js"));
/**
 * Creates an observer matching the source collection type.
 * @param source Source collection.
 * @param config Observer configuration.
 * @returns Collection observer.
 */
function createObserver(source, config) {
    return (source instanceof List_1.default) ? new list_1.default(source, config) :
        (source instanceof Map_1.default) ? new map_1.default(source, config) :
            (source instanceof Set_1.default) ? new set_1.default(source, config) : null;
}
exports.createObserver = createObserver;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vYnNlcnZlci9jb2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXNCRTs7Ozs7O0FBRUYsbURBQTJCO0FBQzNCLGlEQUF5QjtBQUV6QixpREFBeUI7QUFFekIsa0RBQWtDO0FBQ2xDLGdEQUFnQztBQUNoQyxnREFBZ0M7QUFFaEM7Ozs7O0dBS0c7QUFDSCxTQUFnQixjQUFjLENBQUksTUFBNkIsRUFDN0IsTUFBa0M7SUFDbkUsT0FBTyxDQUFDLE1BQU0sWUFBWSxjQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxjQUFZLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDbkUsQ0FBQyxNQUFNLFlBQVksYUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksYUFBVyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQzFELENBQUMsTUFBTSxZQUFZLGFBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLGFBQVcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUNwRSxDQUFDO0FBTEQsd0NBS0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgTGlzdCBmcm9tICcuLi9MaXN0JztcbmltcG9ydCBNYXAgZnJvbSAnLi4vTWFwJztcbmltcG9ydCBSZWFkb25seUNvbGxlY3Rpb24gZnJvbSAnLi4vUmVhZG9ubHlDb2xsZWN0aW9uJztcbmltcG9ydCBTZXQgZnJvbSAnLi4vU2V0JztcbmltcG9ydCBBYnN0cmFjdE9ic2VydmVyIGZyb20gJy4vQWJzdHJhY3RPYnNlcnZlcic7XG5pbXBvcnQgTGlzdE9ic2VydmVyIGZyb20gJy4vbGlzdCc7XG5pbXBvcnQgTWFwT2JzZXJ2ZXIgZnJvbSAnLi9tYXAnO1xuaW1wb3J0IFNldE9ic2VydmVyIGZyb20gJy4vc2V0JztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIG9ic2VydmVyIG1hdGNoaW5nIHRoZSBzb3VyY2UgY29sbGVjdGlvbiB0eXBlLlxuICogQHBhcmFtIHNvdXJjZSBTb3VyY2UgY29sbGVjdGlvbi5cbiAqIEBwYXJhbSBjb25maWcgT2JzZXJ2ZXIgY29uZmlndXJhdGlvbi5cbiAqIEByZXR1cm5zIENvbGxlY3Rpb24gb2JzZXJ2ZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPYnNlcnZlcjxUPihzb3VyY2U6IFJlYWRvbmx5Q29sbGVjdGlvbjxUPixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IEFic3RyYWN0T2JzZXJ2ZXIuQ29uZmlnPFQ+KTogQWJzdHJhY3RPYnNlcnZlcjxUPiB7XG5cdHJldHVybiAoc291cmNlIGluc3RhbmNlb2YgTGlzdCkgPyBuZXcgTGlzdE9ic2VydmVyKHNvdXJjZSwgY29uZmlnKSA6XG5cdFx0KHNvdXJjZSBpbnN0YW5jZW9mIE1hcCkgPyBuZXcgTWFwT2JzZXJ2ZXIoc291cmNlLCBjb25maWcpIDpcblx0XHRcdChzb3VyY2UgaW5zdGFuY2VvZiBTZXQpID8gbmV3IFNldE9ic2VydmVyKHNvdXJjZSwgY29uZmlnKSA6IG51bGw7XG59XG4iXX0=

/***/ }),

/***/ "../../main/dist/observer/list.js":
/*!*************************************************!*\
  !*** C:/jwidget/git/main/dist/observer/list.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AbstractObserver_1 = __importDefault(__webpack_require__(/*! ./AbstractObserver */ "../../main/dist/observer/AbstractObserver.js"));
/**
 * AbstractObserver implementation for List.
 */
class ListObserver extends AbstractObserver_1.default {
    /**
     * @param source Source list.
     * @param config Observer configuration.
     */
    constructor(source, config) {
        super(source, config);
        this.own(source.spliceEvent.listen(this._onSplice, this));
        this.own(source.replaceEvent.listen(this._onReplace, this));
        this.own(source.clearEvent.listen(this._onClear, this));
    }
    _onSplice(params) {
        var spliceResult = params.spliceResult;
        var oldItems = spliceResult.oldItems;
        var removedItems = spliceResult.removedItems;
        if (this._clear && (3 * removedItems.length > 2 * oldItems.length)) {
            // if there is an effective clearing function, just reset the controller
            this._clear.call(this._scope, oldItems);
            this._addItems(this.source.items);
        }
        else {
            // else, splice the elements
            this._removeItems(removedItems);
            this._addItems(spliceResult.addedItems);
        }
    }
    _onReplace(params) {
        if (this._remove) {
            this._remove.call(this._scope, params.oldItem);
        }
        if (this._add) {
            this._add.call(this._scope, params.newItem);
        }
    }
    _onClear(params) {
        this._doClearItems(params.items);
    }
}
exports.default = ListObserver;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vYnNlcnZlci9saXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXNCRTs7Ozs7QUFJRiwwRUFBa0Q7QUFFbEQ7O0dBRUc7QUFDSCxNQUFxQixZQUFnQixTQUFRLDBCQUFtQjtJQU0vRDs7O09BR0c7SUFDSCxZQUFZLE1BQXVCLEVBQUUsTUFBa0M7UUFDdEUsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU8sU0FBUyxDQUFDLE1BQWtDO1FBQ25ELElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUM7UUFDdkMsSUFBSSxRQUFRLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQztRQUNyQyxJQUFJLFlBQVksR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDO1FBRTdDLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDbkUsd0VBQXdFO1lBQ3hFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDeEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2xDO2FBQU07WUFDTiw0QkFBNEI7WUFDNUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN4QztJQUNGLENBQUM7SUFFTyxVQUFVLENBQUMsTUFBbUM7UUFDckQsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQy9DO1FBQ0QsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDNUM7SUFDRixDQUFDO0lBRU8sUUFBUSxDQUFDLE1BQWlDO1FBQ2pELElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FDRDtBQTdDRCwrQkE2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgSUxpc3QgZnJvbSAnLi4vSUxpc3QnO1xuaW1wb3J0IFJlYWRvbmx5TGlzdCBmcm9tICcuLi9SZWFkb25seUxpc3QnO1xuaW1wb3J0IEFic3RyYWN0T2JzZXJ2ZXIgZnJvbSAnLi9BYnN0cmFjdE9ic2VydmVyJztcblxuLyoqXG4gKiBBYnN0cmFjdE9ic2VydmVyIGltcGxlbWVudGF0aW9uIGZvciBMaXN0LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaXN0T2JzZXJ2ZXI8VD4gZXh0ZW5kcyBBYnN0cmFjdE9ic2VydmVyPFQ+IHtcblx0LyoqXG5cdCAqIFNvdXJjZSBsaXN0LlxuXHQgKi9cblx0cmVhZG9ubHkgc291cmNlOiBSZWFkb25seUxpc3Q8VD47XG5cblx0LyoqXG5cdCAqIEBwYXJhbSBzb3VyY2UgU291cmNlIGxpc3QuXG5cdCAqIEBwYXJhbSBjb25maWcgT2JzZXJ2ZXIgY29uZmlndXJhdGlvbi5cblx0ICovXG5cdGNvbnN0cnVjdG9yKHNvdXJjZTogUmVhZG9ubHlMaXN0PFQ+LCBjb25maWc6IEFic3RyYWN0T2JzZXJ2ZXIuQ29uZmlnPFQ+KSB7XG5cdFx0c3VwZXIoc291cmNlLCBjb25maWcpO1xuXHRcdHRoaXMub3duKHNvdXJjZS5zcGxpY2VFdmVudC5saXN0ZW4odGhpcy5fb25TcGxpY2UsIHRoaXMpKTtcblx0XHR0aGlzLm93bihzb3VyY2UucmVwbGFjZUV2ZW50Lmxpc3Rlbih0aGlzLl9vblJlcGxhY2UsIHRoaXMpKTtcblx0XHR0aGlzLm93bihzb3VyY2UuY2xlYXJFdmVudC5saXN0ZW4odGhpcy5fb25DbGVhciwgdGhpcykpO1xuXHR9XG5cblx0cHJpdmF0ZSBfb25TcGxpY2UocGFyYW1zOiBJTGlzdC5TcGxpY2VFdmVudFBhcmFtczxUPikge1xuXHRcdHZhciBzcGxpY2VSZXN1bHQgPSBwYXJhbXMuc3BsaWNlUmVzdWx0O1xuXHRcdHZhciBvbGRJdGVtcyA9IHNwbGljZVJlc3VsdC5vbGRJdGVtcztcblx0XHR2YXIgcmVtb3ZlZEl0ZW1zID0gc3BsaWNlUmVzdWx0LnJlbW92ZWRJdGVtcztcblxuXHRcdGlmICh0aGlzLl9jbGVhciAmJiAoMyAqIHJlbW92ZWRJdGVtcy5sZW5ndGggPiAyICogb2xkSXRlbXMubGVuZ3RoKSkge1xuXHRcdFx0Ly8gaWYgdGhlcmUgaXMgYW4gZWZmZWN0aXZlIGNsZWFyaW5nIGZ1bmN0aW9uLCBqdXN0IHJlc2V0IHRoZSBjb250cm9sbGVyXG5cdFx0XHR0aGlzLl9jbGVhci5jYWxsKHRoaXMuX3Njb3BlLCBvbGRJdGVtcyk7XG5cdFx0XHR0aGlzLl9hZGRJdGVtcyh0aGlzLnNvdXJjZS5pdGVtcyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGVsc2UsIHNwbGljZSB0aGUgZWxlbWVudHNcblx0XHRcdHRoaXMuX3JlbW92ZUl0ZW1zKHJlbW92ZWRJdGVtcyk7XG5cdFx0XHR0aGlzLl9hZGRJdGVtcyhzcGxpY2VSZXN1bHQuYWRkZWRJdGVtcyk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBfb25SZXBsYWNlKHBhcmFtczogSUxpc3QuUmVwbGFjZUV2ZW50UGFyYW1zPFQ+KSB7XG5cdFx0aWYgKHRoaXMuX3JlbW92ZSkge1xuXHRcdFx0dGhpcy5fcmVtb3ZlLmNhbGwodGhpcy5fc2NvcGUsIHBhcmFtcy5vbGRJdGVtKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuX2FkZCkge1xuXHRcdFx0dGhpcy5fYWRkLmNhbGwodGhpcy5fc2NvcGUsIHBhcmFtcy5uZXdJdGVtKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIF9vbkNsZWFyKHBhcmFtczogSUxpc3QuSXRlbXNFdmVudFBhcmFtczxUPikge1xuXHRcdHRoaXMuX2RvQ2xlYXJJdGVtcyhwYXJhbXMuaXRlbXMpO1xuXHR9XG59XG4iXX0=

/***/ }),

/***/ "../../main/dist/observer/map.js":
/*!************************************************!*\
  !*** C:/jwidget/git/main/dist/observer/map.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const DictionaryUtils = __importStar(__webpack_require__(/*! ../DictionaryUtils */ "../../main/dist/DictionaryUtils.js"));
const AbstractObserver_1 = __importDefault(__webpack_require__(/*! ./AbstractObserver */ "../../main/dist/observer/AbstractObserver.js"));
/**
 * AbstractObserver implementation for Map.
 */
class MapObserver extends AbstractObserver_1.default {
    /**
     * @param source Source map.
     * @param config Observer configuration.
     */
    constructor(source, config) {
        super(source, config);
        this.own(source.spliceEvent.listen(this._onSplice, this));
        this.own(source.clearEvent.listen(this._onClear, this));
    }
    _onSplice(params) {
        var spliceResult = params.spliceResult;
        this._removeItems(DictionaryUtils.toArray(spliceResult.removedItems));
        this._addItems(DictionaryUtils.toArray(spliceResult.addedItems));
    }
    _onClear(params) {
        this._doClearItems(DictionaryUtils.toArray(params.items));
    }
}
exports.default = MapObserver;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL29ic2VydmVyL21hcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFzQkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVGLG9FQUFzRDtBQUd0RCwwRUFBa0Q7QUFFbEQ7O0dBRUc7QUFDSCxNQUFxQixXQUFlLFNBQVEsMEJBQW1CO0lBTTlEOzs7T0FHRztJQUNILFlBQVksTUFBc0IsRUFBRSxNQUFrQztRQUNyRSxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFTyxTQUFTLENBQUMsTUFBaUM7UUFDbEQsSUFBSSxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQztRQUN2QyxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFTyxRQUFRLENBQUMsTUFBZ0M7UUFDaEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7Q0FDRDtBQXpCRCw4QkF5QkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgKiBhcyBEaWN0aW9uYXJ5VXRpbHMgZnJvbSAnLi4vRGljdGlvbmFyeVV0aWxzJztcbmltcG9ydCBJTWFwIGZyb20gJy4uL0lNYXAnO1xuaW1wb3J0IFJlYWRvbmx5TWFwIGZyb20gJy4uL1JlYWRvbmx5TWFwJztcbmltcG9ydCBBYnN0cmFjdE9ic2VydmVyIGZyb20gJy4vQWJzdHJhY3RPYnNlcnZlcic7XG5cbi8qKlxuICogQWJzdHJhY3RPYnNlcnZlciBpbXBsZW1lbnRhdGlvbiBmb3IgTWFwLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXBPYnNlcnZlcjxUPiBleHRlbmRzIEFic3RyYWN0T2JzZXJ2ZXI8VD4ge1xuXHQvKipcblx0ICogU291cmNlIG1hcC5cblx0ICovXG5cdHJlYWRvbmx5IHNvdXJjZTogUmVhZG9ubHlNYXA8VD47XG5cblx0LyoqXG5cdCAqIEBwYXJhbSBzb3VyY2UgU291cmNlIG1hcC5cblx0ICogQHBhcmFtIGNvbmZpZyBPYnNlcnZlciBjb25maWd1cmF0aW9uLlxuXHQgKi9cblx0Y29uc3RydWN0b3Ioc291cmNlOiBSZWFkb25seU1hcDxUPiwgY29uZmlnOiBBYnN0cmFjdE9ic2VydmVyLkNvbmZpZzxUPikge1xuXHRcdHN1cGVyKHNvdXJjZSwgY29uZmlnKTtcblx0XHR0aGlzLm93bihzb3VyY2Uuc3BsaWNlRXZlbnQubGlzdGVuKHRoaXMuX29uU3BsaWNlLCB0aGlzKSk7XG5cdFx0dGhpcy5vd24oc291cmNlLmNsZWFyRXZlbnQubGlzdGVuKHRoaXMuX29uQ2xlYXIsIHRoaXMpKTtcblx0fVxuXG5cdHByaXZhdGUgX29uU3BsaWNlKHBhcmFtczogSU1hcC5TcGxpY2VFdmVudFBhcmFtczxUPikge1xuXHRcdHZhciBzcGxpY2VSZXN1bHQgPSBwYXJhbXMuc3BsaWNlUmVzdWx0O1xuXHRcdHRoaXMuX3JlbW92ZUl0ZW1zKERpY3Rpb25hcnlVdGlscy50b0FycmF5KHNwbGljZVJlc3VsdC5yZW1vdmVkSXRlbXMpKTtcblx0XHR0aGlzLl9hZGRJdGVtcyhEaWN0aW9uYXJ5VXRpbHMudG9BcnJheShzcGxpY2VSZXN1bHQuYWRkZWRJdGVtcykpO1xuXHR9XG5cblx0cHJpdmF0ZSBfb25DbGVhcihwYXJhbXM6IElNYXAuSXRlbXNFdmVudFBhcmFtczxUPikge1xuXHRcdHRoaXMuX2RvQ2xlYXJJdGVtcyhEaWN0aW9uYXJ5VXRpbHMudG9BcnJheShwYXJhbXMuaXRlbXMpKTtcblx0fVxufVxuIl19

/***/ }),

/***/ "../../main/dist/observer/set.js":
/*!************************************************!*\
  !*** C:/jwidget/git/main/dist/observer/set.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AbstractObserver_1 = __importDefault(__webpack_require__(/*! ./AbstractObserver */ "../../main/dist/observer/AbstractObserver.js"));
/**
 * AbstractObserver implementation for Set.
 */
class SetObserver extends AbstractObserver_1.default {
    /**
     * @param source Source set.
     * @param config Observer configuration.
     */
    constructor(source, config) {
        super(source, config);
        this.own(source.spliceEvent.listen(this._onSplice, this));
        this.own(source.clearEvent.listen(this._onClear, this));
    }
    _onSplice(params) {
        var spliceResult = params.spliceResult;
        this._removeItems(spliceResult.removedItems);
        this._addItems(spliceResult.addedItems);
    }
    _onClear(params) {
        this._doClearItems(params.items);
    }
}
exports.default = SetObserver;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL29ic2VydmVyL3NldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFzQkU7Ozs7O0FBSUYsMEVBQWtEO0FBRWxEOztHQUVHO0FBQ0gsTUFBcUIsV0FBZSxTQUFRLDBCQUFtQjtJQU05RDs7O09BR0c7SUFDSCxZQUFZLE1BQXNCLEVBQUUsTUFBa0M7UUFDckUsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU8sU0FBUyxDQUFDLE1BQWlDO1FBQ2xELElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUM7UUFDdkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVPLFFBQVEsQ0FBQyxNQUFnQztRQUNoRCxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxDQUFDO0NBQ0Q7QUF6QkQsOEJBeUJDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IElTZXQgZnJvbSAnLi4vSVNldCc7XG5pbXBvcnQgUmVhZG9ubHlTZXQgZnJvbSAnLi4vUmVhZG9ubHlTZXQnO1xuaW1wb3J0IEFic3RyYWN0T2JzZXJ2ZXIgZnJvbSAnLi9BYnN0cmFjdE9ic2VydmVyJztcblxuLyoqXG4gKiBBYnN0cmFjdE9ic2VydmVyIGltcGxlbWVudGF0aW9uIGZvciBTZXQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNldE9ic2VydmVyPFQ+IGV4dGVuZHMgQWJzdHJhY3RPYnNlcnZlcjxUPiB7XG5cdC8qKlxuXHQgKiBTb3VyY2Ugc2V0LlxuXHQgKi9cblx0cmVhZG9ubHkgc291cmNlOiBSZWFkb25seVNldDxUPjtcblxuXHQvKipcblx0ICogQHBhcmFtIHNvdXJjZSBTb3VyY2Ugc2V0LlxuXHQgKiBAcGFyYW0gY29uZmlnIE9ic2VydmVyIGNvbmZpZ3VyYXRpb24uXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcihzb3VyY2U6IFJlYWRvbmx5U2V0PFQ+LCBjb25maWc6IEFic3RyYWN0T2JzZXJ2ZXIuQ29uZmlnPFQ+KSB7XG5cdFx0c3VwZXIoc291cmNlLCBjb25maWcpO1xuXHRcdHRoaXMub3duKHNvdXJjZS5zcGxpY2VFdmVudC5saXN0ZW4odGhpcy5fb25TcGxpY2UsIHRoaXMpKTtcblx0XHR0aGlzLm93bihzb3VyY2UuY2xlYXJFdmVudC5saXN0ZW4odGhpcy5fb25DbGVhciwgdGhpcykpO1xuXHR9XG5cblx0cHJpdmF0ZSBfb25TcGxpY2UocGFyYW1zOiBJU2V0LlNwbGljZUV2ZW50UGFyYW1zPFQ+KSB7XG5cdFx0dmFyIHNwbGljZVJlc3VsdCA9IHBhcmFtcy5zcGxpY2VSZXN1bHQ7XG5cdFx0dGhpcy5fcmVtb3ZlSXRlbXMoc3BsaWNlUmVzdWx0LnJlbW92ZWRJdGVtcyk7XG5cdFx0dGhpcy5fYWRkSXRlbXMoc3BsaWNlUmVzdWx0LmFkZGVkSXRlbXMpO1xuXHR9XG5cblx0cHJpdmF0ZSBfb25DbGVhcihwYXJhbXM6IElTZXQuSXRlbXNFdmVudFBhcmFtczxUPikge1xuXHRcdHRoaXMuX2RvQ2xlYXJJdGVtcyhwYXJhbXMuaXRlbXMpO1xuXHR9XG59XG4iXX0=

/***/ }),

/***/ "../../main/dist/template.js":
/*!********************************************!*\
  !*** C:/jwidget/git/main/dist/template.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const HtmlTemplate_1 = __importDefault(__webpack_require__(/*! ./HtmlTemplate */ "../../main/dist/HtmlTemplate.js"));
/**
 * Defines HTML template for a `Component` subclass.
 * @param html Template HTML string.
 */
function default_1(html) {
    return function (target) {
        target.prototype._template = new HtmlTemplate_1.default(html);
    };
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdGVtcGxhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBc0JFOzs7OztBQUVGLGtFQUEwQztBQUUxQzs7O0dBR0c7QUFDSCxtQkFBeUIsSUFBWTtJQUNwQyxPQUFPLFVBQVUsTUFBVztRQUMzQixNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxJQUFJLHNCQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckQsQ0FBQyxDQUFDO0FBQ0gsQ0FBQztBQUpELDRCQUlDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAyMCBFZ29yIE5lcG9tbnlhc2NoaWhcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IEh0bWxUZW1wbGF0ZSBmcm9tIFwiLi9IdG1sVGVtcGxhdGVcIjtcblxuLyoqXG4gKiBEZWZpbmVzIEhUTUwgdGVtcGxhdGUgZm9yIGEgYENvbXBvbmVudGAgc3ViY2xhc3MuXG4gKiBAcGFyYW0gaHRtbCBUZW1wbGF0ZSBIVE1MIHN0cmluZy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGh0bWw6IHN0cmluZyk6IGFueSB7XG5cdHJldHVybiBmdW5jdGlvbiAodGFyZ2V0OiBhbnkpIHtcblx0XHR0YXJnZXQucHJvdG90eXBlLl90ZW1wbGF0ZSA9IG5ldyBIdG1sVGVtcGxhdGUoaHRtbCk7XG5cdH07XG59XG4iXX0=

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,