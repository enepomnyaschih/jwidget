(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["defer~request~router"],{

/***/ "../../main/dist/CancelToken.js":
/*!***********************************************!*\
  !*** C:/jwidget/git/main/dist/CancelToken.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runAsync = void 0;

var dummyDestroyable_1 = __importDefault(__webpack_require__(/*! ./dummyDestroyable */ "../../main/dist/dummyDestroyable.js"));

var Event_1 = __importDefault(__webpack_require__(/*! ./Event */ "../../main/dist/Event.js"));
/**
 * Cancelation token is an object that provides a signal on destruction for the bound asyncronous operations to
 * stop working. Examples of asyncronous operations that support cancelation are `defer` and `request`. In comparison
 * to "destroyable promise" approach, cancelation tokens are compatible to async/await syntax.
 */


var CancelToken = /*#__PURE__*/function () {
  function CancelToken() {
    _classCallCheck(this, CancelToken);

    this._event = new Event_1.default();
  }
  /**
   * Indicates if the token is already canceled, i.e. destroyed.
   */


  _createClass(CancelToken, [{
    key: "addHandler",

    /**
     * Adds a handler function to call on taken cancelation. If the token is already canceled, calls the
     * function immediately and returns %dummyDestroyable. Else registers the callback for a one-time call on
     * token destruction and returns the attachment. Destroying the returned attachment results in handler
     * function removal.
     * @param handler Token cancelation callback.
     * @param scope Handler call scope.
     * @returns Handler attachment.
     */
    value: function addHandler(handler, scope) {
      if (this._event) {
        return this._event.listen(handler, scope);
      } else {
        handler.call(scope);
        return dummyDestroyable_1.default;
      }
    }
    /**
     * Cancels the token. Calls all registered handler functions. An attempt to add more handler functions
     * after the token destruction results in their immediate calling.
     */

  }, {
    key: "destroy",
    value: function destroy() {
      this._event.trigger();

      this._event.purge();

      this._event = null;
    }
  }, {
    key: "cancelled",
    get: function get() {
      return this._event == null;
    }
  }]);

  return CancelToken;
}();

exports.default = CancelToken;
/**
 * Helper function that wraps an abstract asyncronous operation with a promise supporting cancelation tokens.
 * @param run Asyncronous operation initiation callback.
 * @param cancel Asyncronous operation cancelation callback.
 * @param cancelToken Optional cancelation token.
 * @returns Promise representing the operation with cancelation token support.
 */

function runAsync(run, cancel, cancelToken) {
  if (!cancelToken) {
    return new Promise(run);
  }

  if (cancelToken.cancelled) {
    return new Promise(function () {
      return null;
    });
  }

  var attachment = cancelToken.addHandler(cancel);
  return new Promise(function (resolve, reject) {
    run(function (value) {
      attachment.destroy();
      resolve(value);
    }, function (error) {
      attachment.destroy();
      reject(error);
    });
  });
}

exports.runAsync = runAsync;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9DYW5jZWxUb2tlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUJBLElBQUEsa0JBQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLG9CQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLE9BQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBO0FBRUE7Ozs7Ozs7SUFLcUIsVztBQUFyQix5QkFBQTtBQUFBOztBQUVTLFNBQUEsTUFBQSxHQUFTLElBQUksT0FBQSxDQUFBLE9BQUosRUFBVDtBQW9DUjtBQWxDQTs7Ozs7Ozs7QUFPQTs7Ozs7Ozs7OytCQVNXLE8sRUFBb0IsSyxFQUFXO0FBQ3pDLFVBQUksS0FBSyxNQUFULEVBQWlCO0FBQ2hCLGVBQU8sS0FBSyxNQUFMLENBQVksTUFBWixDQUFtQixPQUFuQixFQUE0QixLQUE1QixDQUFQO0FBQ0EsT0FGRCxNQUVPO0FBQ04sUUFBQSxPQUFPLENBQUMsSUFBUixDQUFhLEtBQWI7QUFDQSxlQUFPLGtCQUFBLENBQUEsT0FBUDtBQUNBO0FBQ0Q7QUFFRDs7Ozs7Ozs4QkFJTztBQUNOLFdBQUssTUFBTCxDQUFZLE9BQVo7O0FBQ0EsV0FBSyxNQUFMLENBQVksS0FBWjs7QUFDQSxXQUFLLE1BQUwsR0FBYyxJQUFkO0FBQ0E7Ozt3QkE5Qlk7QUFDWixhQUFPLEtBQUssTUFBTCxJQUFlLElBQXRCO0FBQ0E7Ozs7OztBQVRGLE9BQUEsQ0FBQSxPQUFBLEdBQUEsV0FBQTtBQXdDQTs7Ozs7Ozs7QUFPQSxTQUFnQixRQUFoQixDQUE0QixHQUE1QixFQUM0QixNQUQ1QixFQUU0QixXQUY1QixFQUVxRDtBQUVwRCxNQUFJLENBQUMsV0FBTCxFQUFrQjtBQUNqQixXQUFPLElBQUksT0FBSixDQUFZLEdBQVosQ0FBUDtBQUNBOztBQUNELE1BQUksV0FBVyxDQUFDLFNBQWhCLEVBQTJCO0FBQzFCLFdBQU8sSUFBSSxPQUFKLENBQWU7QUFBQSxhQUFNLElBQU47QUFBQSxLQUFmLENBQVA7QUFDQTs7QUFDRCxNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsVUFBWixDQUF1QixNQUF2QixDQUFuQjtBQUNBLFNBQU8sSUFBSSxPQUFKLENBQWUsVUFBQyxPQUFELEVBQVUsTUFBVixFQUFvQjtBQUN6QyxJQUFBLEdBQUcsQ0FBQyxVQUFDLEtBQUQsRUFBMkI7QUFDOUIsTUFBQSxVQUFVLENBQUMsT0FBWDtBQUNBLE1BQUEsT0FBTyxDQUFDLEtBQUQsQ0FBUDtBQUNBLEtBSEUsRUFHQSxVQUFDLEtBQUQsRUFBZ0I7QUFDbEIsTUFBQSxVQUFVLENBQUMsT0FBWDtBQUNBLE1BQUEsTUFBTSxDQUFDLEtBQUQsQ0FBTjtBQUNBLEtBTkUsQ0FBSDtBQU9BLEdBUk0sQ0FBUDtBQVNBOztBQXBCRCxPQUFBLENBQUEsUUFBQSxHQUFBLFFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDIwIEVnb3IgTmVwb21ueWFzY2hpaFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgRGVzdHJveWFibGUgZnJvbSBcIi4vRGVzdHJveWFibGVcIjtcbmltcG9ydCBkdW1teURlc3Ryb3lhYmxlIGZyb20gXCIuL2R1bW15RGVzdHJveWFibGVcIjtcbmltcG9ydCBFdmVudCBmcm9tIFwiLi9FdmVudFwiO1xuXG4vKipcbiAqIENhbmNlbGF0aW9uIHRva2VuIGlzIGFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIGEgc2lnbmFsIG9uIGRlc3RydWN0aW9uIGZvciB0aGUgYm91bmQgYXN5bmNyb25vdXMgb3BlcmF0aW9ucyB0b1xuICogc3RvcCB3b3JraW5nLiBFeGFtcGxlcyBvZiBhc3luY3Jvbm91cyBvcGVyYXRpb25zIHRoYXQgc3VwcG9ydCBjYW5jZWxhdGlvbiBhcmUgYGRlZmVyYCBhbmQgYHJlcXVlc3RgLiBJbiBjb21wYXJpc29uXG4gKiB0byBcImRlc3Ryb3lhYmxlIHByb21pc2VcIiBhcHByb2FjaCwgY2FuY2VsYXRpb24gdG9rZW5zIGFyZSBjb21wYXRpYmxlIHRvIGFzeW5jL2F3YWl0IHN5bnRheC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FuY2VsVG9rZW4gaW1wbGVtZW50cyBEZXN0cm95YWJsZSB7XG5cblx0cHJpdmF0ZSBfZXZlbnQgPSBuZXcgRXZlbnQ8YW55PigpO1xuXG5cdC8qKlxuXHQgKiBJbmRpY2F0ZXMgaWYgdGhlIHRva2VuIGlzIGFscmVhZHkgY2FuY2VsZWQsIGkuZS4gZGVzdHJveWVkLlxuXHQgKi9cblx0Z2V0IGNhbmNlbGxlZCgpIHtcblx0XHRyZXR1cm4gdGhpcy5fZXZlbnQgPT0gbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgaGFuZGxlciBmdW5jdGlvbiB0byBjYWxsIG9uIHRha2VuIGNhbmNlbGF0aW9uLiBJZiB0aGUgdG9rZW4gaXMgYWxyZWFkeSBjYW5jZWxlZCwgY2FsbHMgdGhlXG5cdCAqIGZ1bmN0aW9uIGltbWVkaWF0ZWx5IGFuZCByZXR1cm5zICVkdW1teURlc3Ryb3lhYmxlLiBFbHNlIHJlZ2lzdGVycyB0aGUgY2FsbGJhY2sgZm9yIGEgb25lLXRpbWUgY2FsbCBvblxuXHQgKiB0b2tlbiBkZXN0cnVjdGlvbiBhbmQgcmV0dXJucyB0aGUgYXR0YWNobWVudC4gRGVzdHJveWluZyB0aGUgcmV0dXJuZWQgYXR0YWNobWVudCByZXN1bHRzIGluIGhhbmRsZXJcblx0ICogZnVuY3Rpb24gcmVtb3ZhbC5cblx0ICogQHBhcmFtIGhhbmRsZXIgVG9rZW4gY2FuY2VsYXRpb24gY2FsbGJhY2suXG5cdCAqIEBwYXJhbSBzY29wZSBIYW5kbGVyIGNhbGwgc2NvcGUuXG5cdCAqIEByZXR1cm5zIEhhbmRsZXIgYXR0YWNobWVudC5cblx0ICovXG5cdGFkZEhhbmRsZXIoaGFuZGxlcjogKCkgPT4gYW55LCBzY29wZT86IGFueSk6IERlc3Ryb3lhYmxlIHtcblx0XHRpZiAodGhpcy5fZXZlbnQpIHtcblx0XHRcdHJldHVybiB0aGlzLl9ldmVudC5saXN0ZW4oaGFuZGxlciwgc2NvcGUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRoYW5kbGVyLmNhbGwoc2NvcGUpO1xuXHRcdFx0cmV0dXJuIGR1bW15RGVzdHJveWFibGU7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIENhbmNlbHMgdGhlIHRva2VuLiBDYWxscyBhbGwgcmVnaXN0ZXJlZCBoYW5kbGVyIGZ1bmN0aW9ucy4gQW4gYXR0ZW1wdCB0byBhZGQgbW9yZSBoYW5kbGVyIGZ1bmN0aW9uc1xuXHQgKiBhZnRlciB0aGUgdG9rZW4gZGVzdHJ1Y3Rpb24gcmVzdWx0cyBpbiB0aGVpciBpbW1lZGlhdGUgY2FsbGluZy5cblx0ICovXG5cdGRlc3Ryb3koKSB7XG5cdFx0dGhpcy5fZXZlbnQudHJpZ2dlcigpO1xuXHRcdHRoaXMuX2V2ZW50LnB1cmdlKCk7XG5cdFx0dGhpcy5fZXZlbnQgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYW4gYWJzdHJhY3QgYXN5bmNyb25vdXMgb3BlcmF0aW9uIHdpdGggYSBwcm9taXNlIHN1cHBvcnRpbmcgY2FuY2VsYXRpb24gdG9rZW5zLlxuICogQHBhcmFtIHJ1biBBc3luY3Jvbm91cyBvcGVyYXRpb24gaW5pdGlhdGlvbiBjYWxsYmFjay5cbiAqIEBwYXJhbSBjYW5jZWwgQXN5bmNyb25vdXMgb3BlcmF0aW9uIGNhbmNlbGF0aW9uIGNhbGxiYWNrLlxuICogQHBhcmFtIGNhbmNlbFRva2VuIE9wdGlvbmFsIGNhbmNlbGF0aW9uIHRva2VuLlxuICogQHJldHVybnMgUHJvbWlzZSByZXByZXNlbnRpbmcgdGhlIG9wZXJhdGlvbiB3aXRoIGNhbmNlbGF0aW9uIHRva2VuIHN1cHBvcnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydW5Bc3luYzxUPihydW46IChyZXNvbHZlOiAodmFsdWU/OiBUIHwgUHJvbWlzZTxUPikgPT4gdm9pZCwgcmVqZWN0OiAoZXJyb3I/OiBhbnkpID0+IHZvaWQpID0+IHZvaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsOiAoKSA9PiB2b2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbFRva2VuPzogQ2FuY2VsVG9rZW4pOiBQcm9taXNlPFQ+IHtcblxuXHRpZiAoIWNhbmNlbFRva2VuKSB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKHJ1bik7XG5cdH1cblx0aWYgKGNhbmNlbFRva2VuLmNhbmNlbGxlZCkge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZTxUPigoKSA9PiBudWxsKTtcblx0fVxuXHRjb25zdCBhdHRhY2htZW50ID0gY2FuY2VsVG9rZW4uYWRkSGFuZGxlcihjYW5jZWwpO1xuXHRyZXR1cm4gbmV3IFByb21pc2U8VD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHJ1bigodmFsdWU/OiBUIHwgUHJvbWlzZTxUPikgPT4ge1xuXHRcdFx0YXR0YWNobWVudC5kZXN0cm95KCk7XG5cdFx0XHRyZXNvbHZlKHZhbHVlKTtcblx0XHR9LCAoZXJyb3I/OiBhbnkpID0+IHtcblx0XHRcdGF0dGFjaG1lbnQuZGVzdHJveSgpO1xuXHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHR9KVxuXHR9KTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "./common/initExample.ts":
/*!*******************************!*\
  !*** ./common/initExample.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "../../node_modules/jquery/dist/jquery.js"));

__webpack_require__(/*! core-js/stable */ "../../node_modules/core-js/stable/index.js");

__webpack_require__(/*! regenerator-runtime/runtime */ "../../node_modules/regenerator-runtime/runtime.js");

function initExample(name, links) {
  var el = jquery_1.default('<div style="float: right; width: 600px"><b>Source:</b> </div>');
  var first = true;
  links.forEach(function (link) {
    if (first) {
      first = false;
    } else {
      el.append(', ');
    }

    el.append(jquery_1.default('<a target="_blank"></a>').text(link).attr("href", "src/".concat(name, "/").concat(link, ".txt")));
  });
  jquery_1.default("body").prepend('<div><b>Example</b></div><div><a href="javascript:location.reload()">Refresh</a></div><hr style="clear: both">').prepend(el);
}

exports.default = initExample;

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,