(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["bindClass1~bindDisplay~bindProp1~bindProp2"],{

/***/ "../../main/dist/bindProp.js":
/*!********************************************!*\
  !*** C:/jwidget/git/main/dist/bindProp.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));

var index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");

var Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));

var PropBinding = /*#__PURE__*/function (_Class_1$default) {
  _inherits(PropBinding, _Class_1$default);

  var _super = _createSuper(PropBinding);

  function PropBinding(el, prop, property) {
    var _this;

    var binding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : index_1.UPDATE;

    _classCallCheck(this, PropBinding);

    _this = _super.call(this);

    if (binding & index_1.UPDATE) {
      _this.own(new PropUpdater(el, prop, property));
    }

    if (prop === "checked" && binding & index_1.WATCH) {
      _this.own(new CheckedListener(el, {
        target: property
      }));
    }

    return _this;
  }

  return PropBinding;
}(Class_1.default);

var PropUpdater = /*#__PURE__*/function (_Class_1$default2) {
  _inherits(PropUpdater, _Class_1$default2);

  var _super2 = _createSuper(PropUpdater);

  function PropUpdater(el, prop, property) {
    var _this2;

    _classCallCheck(this, PropUpdater);

    _this2 = _super2.call(this);
    _this2.el = el;
    _this2.prop = prop;
    _this2.property = property;

    _this2._update();

    _this2.own(property.changeEvent.listen(_this2._update, _assertThisInitialized(_this2)));

    return _this2;
  }

  _createClass(PropUpdater, [{
    key: "_update",
    value: function _update() {
      this.el.prop(this.prop, this.property.get());

      if (this.prop === "checked") {
        this.el.change();
      }
    }
  }]);

  return PropUpdater;
}(Class_1.default);

var CheckedListener = /*#__PURE__*/function (_Class_1$default3) {
  _inherits(CheckedListener, _Class_1$default3);

  var _super3 = _createSuper(CheckedListener);

  function CheckedListener(el) {
    var _this3;

    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, CheckedListener);

    _this3 = _super3.call(this);
    _this3.el = el;

    _this3.update = function () {
      return _this3._update();
    };

    _this3._target = config.target || _this3.own(new Property_1.default());

    _this3._update();

    _this3.el.bind("change", _this3.update);

    return _this3;
  }

  _createClass(CheckedListener, [{
    key: "destroyObject",
    value: function destroyObject() {
      this.el.unbind("change", this.update);

      _get(_getPrototypeOf(CheckedListener.prototype), "destroy", this).call(this);
    }
  }, {
    key: "_update",
    value: function _update() {
      this._target.set(this.el.prop("checked"));
    }
  }, {
    key: "target",
    get: function get() {
      return this._target;
    }
  }]);

  return CheckedListener;
}(Class_1.default);

function bindProp(el, prop, property, binding) {
  if (property != null) {
    return new PropBinding(el, prop, property, binding);
  }

  if (prop === "checked") {
    var target = new Property_1.default();
    return target.owning(new CheckedListener(el, {
      target: target
    }));
  }

  throw new Error("Invalid argument");
}

exports.default = bindProp;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./common/initExample.ts":
/*!*******************************!*\
  !*** ./common/initExample.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "../../node_modules/jquery/dist/jquery.js"));

__webpack_require__(/*! core-js/stable */ "../../node_modules/core-js/stable/index.js");

__webpack_require__(/*! regenerator-runtime/runtime */ "../../node_modules/regenerator-runtime/runtime.js");

function initExample(name, links) {
  var el = jquery_1.default('<div style="float: right; width: 600px"><b>Source:</b> </div>');
  var first = true;
  links.forEach(function (link) {
    if (first) {
      first = false;
    } else {
      el.append(', ');
    }

    el.append(jquery_1.default('<a target="_blank"></a>').text(link).attr("href", "src/".concat(name, "/").concat(link, ".txt")));
  });
  jquery_1.default("body").prepend('<div><b>Example</b></div><div><a href="javascript:location.reload()">Refresh</a></div><hr style="clear: both">').prepend(el);
}

exports.default = initExample;

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,