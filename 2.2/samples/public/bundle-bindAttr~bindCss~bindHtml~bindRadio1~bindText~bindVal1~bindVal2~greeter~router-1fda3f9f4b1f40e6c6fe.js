(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["bindAttr~bindCss~bindHtml~bindRadio1~bindText~bindVal1~bindVal2~greeter~router"],{

/***/ "../../main/dist/bindVal.js":
/*!*******************************************!*\
  !*** C:/jwidget/git/main/dist/bindVal.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));
const DomUtils_1 = __webpack_require__(/*! ./DomUtils */ "../../main/dist/DomUtils.js");
const index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");
const Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));
class ValueBinding extends Class_1.default {
    constructor(el, property, binding = index_1.UPDATE, simple) {
        super();
        if (typeof binding === "boolean") {
            simple = binding;
            binding = index_1.UPDATE;
        }
        if (binding & index_1.UPDATE) {
            this.own(new ValueUpdater(el, property));
        }
        if (binding & index_1.WATCH) {
            this.own(new ValueListener(el, { target: property, simple: simple }));
        }
    }
}
class ValueUpdater extends Class_1.default {
    constructor(el, property) {
        super();
        this.el = el;
        this.property = property;
        this._update();
        this.own(property.changeEvent.listen(this._update, this));
    }
    _update() {
        const value = this.property.get();
        if (this.el.val() !== value) {
            this.el.val(value).trigger("change");
        }
    }
}
class ValueListener extends Class_1.default {
    constructor(el, config = {}) {
        super();
        this.el = el;
        this.update = () => this._update();
        this._target = config.target || this.own(new Property_1.default());
        this._simple = config.simple || !DomUtils_1.isTextInput(el);
        this.update();
        this.el.bind("change", this.update);
        if (!this._simple) {
            this._timer = window.setInterval(this.update, 100);
        }
    }
    get target() {
        return this._target;
    }
    destroy() {
        if (!this._simple) {
            clearInterval(this._timer);
        }
        this.el.unbind("change", this.update);
        super.destroy();
    }
    _update() {
        this._target.set(this.el.val());
    }
}
function bindVal(el, value, binding, simple) {
    if (value != null && (typeof value !== "boolean")) {
        return new ValueBinding(el, value, binding, simple);
    }
    const target = new Property_1.default();
    return target.owning(new ValueListener(el, { target: target, simple: simple }));
}
exports.default = bindVal;
//# sourceMappingURL=data:application/json;base64,

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,