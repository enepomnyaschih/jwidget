(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["bindClass2~bindRadio1~bindRadio2"],{

/***/ "../../main/dist/bindRadio.js":
/*!*********************************************!*\
  !*** C:/jwidget/git/main/dist/bindRadio.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
MIT License

Copyright (c) 2020 Egor Nepomnyaschih

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Class_1 = __importDefault(__webpack_require__(/*! ./Class */ "../../main/dist/Class.js"));
const index_1 = __webpack_require__(/*! ./index */ "../../main/dist/index.js");
const Property_1 = __importDefault(__webpack_require__(/*! ./Property */ "../../main/dist/Property.js"));
class RadioBinding extends Class_1.default {
    constructor(el, name, property, binding = index_1.UPDATE) {
        super();
        if (binding & index_1.UPDATE) {
            this.own(new RadioUpdater(el, name, property));
        }
        if (binding & index_1.WATCH) {
            this.own(new RadioListener(el, name, { target: property }));
        }
    }
}
class RadioUpdater extends Class_1.default {
    constructor(el, name, property) {
        super();
        this.el = el;
        this.property = property;
        this._selector = "input[type=radio][name='" + name + "']";
        this._update();
        this.own(property.changeEvent.listen(this._update, this));
    }
    _update() {
        var value = this.property.get();
        if (value != null) {
            var els = this.el.find(this._selector + "[value='" + value + "']");
            if (els.length !== 0) {
                els.prop("checked", true).change();
                return;
            }
        }
        this.el.find(this._selector + ":checked").prop("checked", false).change();
    }
}
class RadioListener extends Class_1.default {
    constructor(el, name, config = {}) {
        super();
        this.el = el;
        this.update = () => this._update();
        this._target = config.target || this.own(new Property_1.default());
        this._selector = "input[type=radio][name='" + name + "']";
        this._update();
        this.el.on("change", this._selector, this.update);
    }
    destroy() {
        this.el.off("change", this._selector, this.update);
        super.destroy();
    }
    get target() {
        return this._target;
    }
    _update() {
        var radio = this.el.find(this._selector + ":checked");
        this._target.set((radio.length !== 0) ? radio.attr("value") : null);
    }
}
function bindRadio(el, name, property, binding) {
    if (property != null) {
        return new RadioBinding(el, name, property, binding);
    }
    const target = new Property_1.default();
    return target.owning(new RadioListener(el, name, { target: target }));
}
exports.default = bindRadio;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZFJhZGlvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2JpbmRSYWRpby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFzQkU7Ozs7O0FBR0Ysb0RBQTRCO0FBRzVCLG1DQUErQztBQUUvQywwREFBa0M7QUFFbEMsTUFBTSxZQUFhLFNBQVEsZUFBSztJQUcvQixZQUFZLEVBQVUsRUFBRSxJQUFZLEVBQUUsUUFBYSxFQUFFLFVBQWUsY0FBTTtRQUN6RSxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksT0FBTyxHQUFHLGNBQU0sRUFBRTtZQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksWUFBWSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztTQUMvQztRQUNELElBQUksT0FBTyxHQUFHLGFBQUssRUFBRTtZQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksYUFBYSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBQyxNQUFNLEVBQUUsUUFBUSxFQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzFEO0lBQ0YsQ0FBQztDQUNEO0FBRUQsTUFBTSxZQUFhLFNBQVEsZUFBSztJQUcvQixZQUFvQixFQUFVLEVBQUUsSUFBWSxFQUFVLFFBQXVCO1FBQzVFLEtBQUssRUFBRSxDQUFDO1FBRFcsT0FBRSxHQUFGLEVBQUUsQ0FBUTtRQUF3QixhQUFRLEdBQVIsUUFBUSxDQUFlO1FBRTVFLElBQUksQ0FBQyxTQUFTLEdBQUcsMEJBQTBCLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztRQUMxRCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRU8sT0FBTztRQUNkLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEMsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFO1lBQ2xCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsVUFBVSxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQztZQUNuRSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUNyQixHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDbkMsT0FBTzthQUNQO1NBQ0Q7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDM0UsQ0FBQztDQUNEO0FBRUQsTUFBTSxhQUFjLFNBQVEsZUFBSztJQUtoQyxZQUFvQixFQUFVLEVBQUUsSUFBWSxFQUFFLFNBQStCLEVBQUU7UUFDOUUsS0FBSyxFQUFFLENBQUM7UUFEVyxPQUFFLEdBQUYsRUFBRSxDQUFRO1FBRTdCLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksa0JBQVEsRUFBVSxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLFNBQVMsR0FBRywwQkFBMEIsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQzFELElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNmLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsT0FBTztRQUNOLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuRCxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUVELElBQUksTUFBTTtRQUNULE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUNyQixDQUFDO0lBRU8sT0FBTztRQUNkLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyRSxDQUFDO0NBQ0Q7QUFrQ0QsU0FBd0IsU0FBUyxDQUFDLEVBQVUsRUFBRSxJQUFZLEVBQUUsUUFBYyxFQUFFLE9BQWlCO0lBQzVGLElBQUksUUFBUSxJQUFJLElBQUksRUFBRTtRQUNyQixPQUFPLElBQUksWUFBWSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ3JEO0lBQ0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxrQkFBUSxFQUFVLENBQUM7SUFDdEMsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksYUFBYSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBQyxNQUFNLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3JFLENBQUM7QUFORCw0QkFNQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMjAgRWdvciBOZXBvbW55YXNjaGloXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5jb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5TT0ZUV0FSRS5cbiovXG5cbmltcG9ydCBCaW5kYWJsZSBmcm9tICcuL0JpbmRhYmxlJztcbmltcG9ydCBDbGFzcyBmcm9tICcuL0NsYXNzJztcbmltcG9ydCBEZXN0cm95YWJsZSBmcm9tICcuL0Rlc3Ryb3lhYmxlJztcbmltcG9ydCBEZXN0cm95YWJsZUJpbmRhYmxlIGZyb20gJy4vRGVzdHJveWFibGVCaW5kYWJsZSc7XG5pbXBvcnQge0JpbmRpbmcsIFVQREFURSwgV0FUQ0h9IGZyb20gJy4vaW5kZXgnO1xuaW1wb3J0IElQcm9wZXJ0eSBmcm9tICcuL0lQcm9wZXJ0eSc7XG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi9Qcm9wZXJ0eSc7XG5cbmNsYXNzIFJhZGlvQmluZGluZyBleHRlbmRzIENsYXNzIHtcblx0Y29uc3RydWN0b3IoZWw6IEpRdWVyeSwgbmFtZTogc3RyaW5nLCBwcm9wZXJ0eTogQmluZGFibGU8YW55Pik7XG5cdGNvbnN0cnVjdG9yKGVsOiBKUXVlcnksIG5hbWU6IHN0cmluZywgcHJvcGVydHk6IElQcm9wZXJ0eTxzdHJpbmc+LCBiaW5kaW5nOiBCaW5kaW5nKTtcblx0Y29uc3RydWN0b3IoZWw6IEpRdWVyeSwgbmFtZTogc3RyaW5nLCBwcm9wZXJ0eTogYW55LCBiaW5kaW5nOiBhbnkgPSBVUERBVEUpIHtcblx0XHRzdXBlcigpO1xuXHRcdGlmIChiaW5kaW5nICYgVVBEQVRFKSB7XG5cdFx0XHR0aGlzLm93bihuZXcgUmFkaW9VcGRhdGVyKGVsLCBuYW1lLCBwcm9wZXJ0eSkpO1xuXHRcdH1cblx0XHRpZiAoYmluZGluZyAmIFdBVENIKSB7XG5cdFx0XHR0aGlzLm93bihuZXcgUmFkaW9MaXN0ZW5lcihlbCwgbmFtZSwge3RhcmdldDogcHJvcGVydHl9KSk7XG5cdFx0fVxuXHR9XG59XG5cbmNsYXNzIFJhZGlvVXBkYXRlciBleHRlbmRzIENsYXNzIHtcblx0cHJpdmF0ZSBfc2VsZWN0b3I6IHN0cmluZztcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBKUXVlcnksIG5hbWU6IHN0cmluZywgcHJpdmF0ZSBwcm9wZXJ0eTogQmluZGFibGU8YW55Pikge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5fc2VsZWN0b3IgPSBcImlucHV0W3R5cGU9cmFkaW9dW25hbWU9J1wiICsgbmFtZSArIFwiJ11cIjtcblx0XHR0aGlzLl91cGRhdGUoKTtcblx0XHR0aGlzLm93bihwcm9wZXJ0eS5jaGFuZ2VFdmVudC5saXN0ZW4odGhpcy5fdXBkYXRlLCB0aGlzKSk7XG5cdH1cblxuXHRwcml2YXRlIF91cGRhdGUoKSB7XG5cdFx0dmFyIHZhbHVlID0gdGhpcy5wcm9wZXJ0eS5nZXQoKTtcblx0XHRpZiAodmFsdWUgIT0gbnVsbCkge1xuXHRcdFx0dmFyIGVscyA9IHRoaXMuZWwuZmluZCh0aGlzLl9zZWxlY3RvciArIFwiW3ZhbHVlPSdcIiArIHZhbHVlICsgXCInXVwiKTtcblx0XHRcdGlmIChlbHMubGVuZ3RoICE9PSAwKSB7XG5cdFx0XHRcdGVscy5wcm9wKFwiY2hlY2tlZFwiLCB0cnVlKS5jaGFuZ2UoKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLmVsLmZpbmQodGhpcy5fc2VsZWN0b3IgKyBcIjpjaGVja2VkXCIpLnByb3AoXCJjaGVja2VkXCIsIGZhbHNlKS5jaGFuZ2UoKTtcblx0fVxufVxuXG5jbGFzcyBSYWRpb0xpc3RlbmVyIGV4dGVuZHMgQ2xhc3Mge1xuXHRwcml2YXRlIF90YXJnZXQ6IElQcm9wZXJ0eTxzdHJpbmc+O1xuXHRwcml2YXRlIF9zZWxlY3Rvcjogc3RyaW5nO1xuXHRwcml2YXRlIHVwZGF0ZTogKCkgPT4gdm9pZDtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBKUXVlcnksIG5hbWU6IHN0cmluZywgY29uZmlnOiBSYWRpb0xpc3RlbmVyLkNvbmZpZyA9IHt9KSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLnVwZGF0ZSA9ICgpID0+IHRoaXMuX3VwZGF0ZSgpO1xuXHRcdHRoaXMuX3RhcmdldCA9IGNvbmZpZy50YXJnZXQgfHwgdGhpcy5vd24obmV3IFByb3BlcnR5PHN0cmluZz4oKSk7XG5cdFx0dGhpcy5fc2VsZWN0b3IgPSBcImlucHV0W3R5cGU9cmFkaW9dW25hbWU9J1wiICsgbmFtZSArIFwiJ11cIjtcblx0XHR0aGlzLl91cGRhdGUoKTtcblx0XHR0aGlzLmVsLm9uKFwiY2hhbmdlXCIsIHRoaXMuX3NlbGVjdG9yLCB0aGlzLnVwZGF0ZSk7XG5cdH1cblxuXHRkZXN0cm95KCkge1xuXHRcdHRoaXMuZWwub2ZmKFwiY2hhbmdlXCIsIHRoaXMuX3NlbGVjdG9yLCB0aGlzLnVwZGF0ZSk7XG5cdFx0c3VwZXIuZGVzdHJveSgpO1xuXHR9XG5cblx0Z2V0IHRhcmdldCgpOiBCaW5kYWJsZTxzdHJpbmc+IHtcblx0XHRyZXR1cm4gdGhpcy5fdGFyZ2V0O1xuXHR9XG5cblx0cHJpdmF0ZSBfdXBkYXRlKCkge1xuXHRcdHZhciByYWRpbyA9IHRoaXMuZWwuZmluZCh0aGlzLl9zZWxlY3RvciArIFwiOmNoZWNrZWRcIik7XG5cdFx0dGhpcy5fdGFyZ2V0LnNldCgocmFkaW8ubGVuZ3RoICE9PSAwKSA/IHJhZGlvLmF0dHIoXCJ2YWx1ZVwiKSA6IG51bGwpO1xuXHR9XG59XG5cbm5hbWVzcGFjZSBSYWRpb0xpc3RlbmVyIHtcblx0ZXhwb3J0IGludGVyZmFjZSBDb25maWcge1xuXHRcdHJlYWRvbmx5IHRhcmdldD86IElQcm9wZXJ0eTxzdHJpbmc+O1xuXHR9XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHN0cmluZyBwcm9wZXJ0eSBjb250YWluaW5nIGN1cnJlbnQgcmFkaW8gZ3JvdXAgc2VsZWN0aW9uIGFuZCBzdGFydHMgd2F0Y2hpbmcgZm9yIGl0cyBtb2RpZmljYXRpb24uXG4gKiBAcGFyYW0gZWwgRE9NIGVsZW1lbnQuXG4gKiBAcGFyYW0gbmFtZSBWYWx1ZSBvZiBcIm5hbWVcIiBhdHRyaWJ1dGUgaW4gcmFkaW8gYnV0dG9uIGVsZW1lbnRzLlxuICogQHJldHVybnMgQm91bmQgcHJvcGVydHkuIFlvdSBtdXN0IGRlc3Ryb3kgaXQgdG8gc3RvcCB0aGUgc3luY2hyb25pemF0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kUmFkaW8oZWw6IEpRdWVyeSwgbmFtZTogc3RyaW5nKTogRGVzdHJveWFibGVCaW5kYWJsZTxzdHJpbmc+O1xuXG4vKipcbiAqIFdhdGNoZXMgc3RyaW5nIHByb3BlcnR5IG1vZGlmaWNhdGlvbiBhbmQgdXBkYXRlcyB0aGUgcmFkaW8gZ3JvdXAgc2VsZWN0aW9uLlxuICogQHBhcmFtIGVsIERPTSBlbGVtZW50LlxuICogQHBhcmFtIG5hbWUgVmFsdWUgb2YgXCJuYW1lXCIgYXR0cmlidXRlIGluIHJhZGlvIGJ1dHRvbiBlbGVtZW50cy5cbiAqIEBwYXJhbSBwcm9wZXJ0eSBSYWRpbyBidXR0b24gdmFsdWUgdG8gc2VsZWN0LlxuICogQHJldHVybnMgQmluZGluZyBvYmplY3QuIFlvdSBtdXN0IGRlc3Ryb3kgaXQgdG8gc3RvcCB0aGUgc3luY2hyb25pemF0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kUmFkaW8oZWw6IEpRdWVyeSwgbmFtZTogc3RyaW5nLCBwcm9wZXJ0eTogQmluZGFibGU8YW55Pik6IERlc3Ryb3lhYmxlO1xuXG4vKipcbiAqIFdhdGNoZXMgc3RyaW5nIHByb3BlcnR5IG1vZGlmaWNhdGlvbiBhbmQgdXBkYXRlcyB0aGUgcmFkaW8gZ3JvdXAgc2VsZWN0aW9uLlxuICogQHBhcmFtIGVsIERPTSBlbGVtZW50LlxuICogQHBhcmFtIG5hbWUgVmFsdWUgb2YgXCJuYW1lXCIgYXR0cmlidXRlIGluIHJhZGlvIGJ1dHRvbiBlbGVtZW50cy5cbiAqIEBwYXJhbSBwcm9wZXJ0eSBSYWRpbyBidXR0b24gdmFsdWUgdG8gcmVhZCBhbmQvb3Igd3JpdGUuXG4gKiBAcGFyYW0gYmluZGluZyBCaW5kaW5nIGRpcmVjdGlvbi5cbiAqIEByZXR1cm5zIEJpbmRpbmcgb2JqZWN0LiBZb3UgbXVzdCBkZXN0cm95IGl0IHRvIHN0b3AgdGhlIHN5bmNocm9uaXphdGlvbi5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZFJhZGlvKGVsOiBKUXVlcnksIG5hbWU6IHN0cmluZywgcHJvcGVydHk6IElQcm9wZXJ0eTxzdHJpbmc+LCBiaW5kaW5nPzogQmluZGluZyk6IERlc3Ryb3lhYmxlO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZFJhZGlvKGVsOiBKUXVlcnksIG5hbWU6IHN0cmluZywgcHJvcGVydHk/OiBhbnksIGJpbmRpbmc/OiBCaW5kaW5nKTogRGVzdHJveWFibGUge1xuXHRpZiAocHJvcGVydHkgIT0gbnVsbCkge1xuXHRcdHJldHVybiBuZXcgUmFkaW9CaW5kaW5nKGVsLCBuYW1lLCBwcm9wZXJ0eSwgYmluZGluZyk7XG5cdH1cblx0Y29uc3QgdGFyZ2V0ID0gbmV3IFByb3BlcnR5PHN0cmluZz4oKTtcblx0cmV0dXJuIHRhcmdldC5vd25pbmcobmV3IFJhZGlvTGlzdGVuZXIoZWwsIG5hbWUsIHt0YXJnZXQ6IHRhcmdldH0pKTtcbn1cbiJdfQ==

/***/ }),

/***/ "./common/initExample.ts":
/*!*******************************!*\
  !*** ./common/initExample.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "../../node_modules/jquery/dist/jquery.js"));

__webpack_require__(/*! core-js/stable */ "../../node_modules/core-js/stable/index.js");

__webpack_require__(/*! regenerator-runtime/runtime */ "../../node_modules/regenerator-runtime/runtime.js");

function initExample(name, links) {
  var el = jquery_1.default('<div style="float: right; width: 600px"><b>Source:</b> </div>');
  var first = true;
  links.forEach(function (link) {
    if (first) {
      first = false;
    } else {
      el.append(', ');
    }

    el.append(jquery_1.default('<a target="_blank"></a>').text(link).attr("href", "src/".concat(name, "/").concat(link, ".txt")));
  });
  jquery_1.default("body").prepend('<div><b>Example</b></div><div><a href="javascript:location.reload()">Refresh</a></div><hr style="clear: both">').prepend(el);
}

exports.default = initExample;

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,